
Projet_V-NOM_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c6ec  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000540  0800c8d0  0800c8d0  0000d8d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce10  0800ce10  0000e1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ce10  0800ce10  0000de10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ce18  0800ce18  0000e1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce18  0800ce18  0000de18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ce1c  0800ce1c  0000de1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800ce20  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002010  200001d4  0800cff4  0000e1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200021e4  0800cff4  0000e1e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c153  00000000  00000000  0000e204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a1e  00000000  00000000  0002a357  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001848  00000000  00000000  0002dd78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012ca  00000000  00000000  0002f5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023025  00000000  00000000  0003088a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cca2  00000000  00000000  000538af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0dc8  00000000  00000000  00070551  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00151319  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007cd4  00000000  00000000  0015135c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  00159030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c8b4 	.word	0x0800c8b4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	0800c8b4 	.word	0x0800c8b4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08c      	sub	sp, #48	@ 0x30
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800103a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	2220      	movs	r2, #32
 800104a:	2100      	movs	r1, #0
 800104c:	4618      	mov	r0, r3
 800104e:	f008 f8ed 	bl	800922c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001052:	4b32      	ldr	r3, [pc, #200]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001054:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001058:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800105a:	4b30      	ldr	r3, [pc, #192]	@ (800111c <MX_ADC1_Init+0xe8>)
 800105c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001060:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001062:	4b2e      	ldr	r3, [pc, #184]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001068:	4b2c      	ldr	r3, [pc, #176]	@ (800111c <MX_ADC1_Init+0xe8>)
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800106e:	4b2b      	ldr	r3, [pc, #172]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001070:	2200      	movs	r2, #0
 8001072:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001074:	4b29      	ldr	r3, [pc, #164]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001076:	2200      	movs	r2, #0
 8001078:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800107a:	4b28      	ldr	r3, [pc, #160]	@ (800111c <MX_ADC1_Init+0xe8>)
 800107c:	2204      	movs	r2, #4
 800107e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001080:	4b26      	ldr	r3, [pc, #152]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001082:	2200      	movs	r2, #0
 8001084:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001086:	4b25      	ldr	r3, [pc, #148]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001088:	2200      	movs	r2, #0
 800108a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800108c:	4b23      	ldr	r3, [pc, #140]	@ (800111c <MX_ADC1_Init+0xe8>)
 800108e:	2201      	movs	r2, #1
 8001090:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001092:	4b22      	ldr	r3, [pc, #136]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001094:	2200      	movs	r2, #0
 8001096:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800109a:	4b20      	ldr	r3, [pc, #128]	@ (800111c <MX_ADC1_Init+0xe8>)
 800109c:	2200      	movs	r2, #0
 800109e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010a0:	4b1e      	ldr	r3, [pc, #120]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010a6:	4b1d      	ldr	r3, [pc, #116]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010ae:	4b1b      	ldr	r3, [pc, #108]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010b4:	4b19      	ldr	r3, [pc, #100]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010bc:	4817      	ldr	r0, [pc, #92]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010be:	f001 fc79 	bl	80029b4 <HAL_ADC_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80010c8:	f000 fa39 	bl	800153e <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010cc:	2300      	movs	r3, #0
 80010ce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010d4:	4619      	mov	r1, r3
 80010d6:	4811      	ldr	r0, [pc, #68]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010d8:	f002 fa06 	bl	80034e8 <HAL_ADCEx_MultiModeConfigChannel>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80010e2:	f000 fa2c 	bl	800153e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80010e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001120 <MX_ADC1_Init+0xec>)
 80010e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010ea:	2306      	movs	r3, #6
 80010ec:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010f2:	237f      	movs	r3, #127	@ 0x7f
 80010f4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010f6:	2304      	movs	r3, #4
 80010f8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010fe:	1d3b      	adds	r3, r7, #4
 8001100:	4619      	mov	r1, r3
 8001102:	4806      	ldr	r0, [pc, #24]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001104:	f001 fdda 	bl	8002cbc <HAL_ADC_ConfigChannel>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800110e:	f000 fa16 	bl	800153e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001112:	bf00      	nop
 8001114:	3730      	adds	r7, #48	@ 0x30
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	200001f0 	.word	0x200001f0
 8001120:	0c900008 	.word	0x0c900008

08001124 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b09a      	sub	sp, #104	@ 0x68
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800113c:	f107 0310 	add.w	r3, r7, #16
 8001140:	2244      	movs	r2, #68	@ 0x44
 8001142:	2100      	movs	r1, #0
 8001144:	4618      	mov	r0, r3
 8001146:	f008 f871 	bl	800922c <memset>
  if(adcHandle->Instance==ADC1)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001152:	d134      	bne.n	80011be <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001154:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001158:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800115a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800115e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001160:	f107 0310 	add.w	r3, r7, #16
 8001164:	4618      	mov	r0, r3
 8001166:	f003 fe29 	bl	8004dbc <HAL_RCCEx_PeriphCLKConfig>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001170:	f000 f9e5 	bl	800153e <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001174:	4b14      	ldr	r3, [pc, #80]	@ (80011c8 <HAL_ADC_MspInit+0xa4>)
 8001176:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001178:	4a13      	ldr	r2, [pc, #76]	@ (80011c8 <HAL_ADC_MspInit+0xa4>)
 800117a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800117e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001180:	4b11      	ldr	r3, [pc, #68]	@ (80011c8 <HAL_ADC_MspInit+0xa4>)
 8001182:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001184:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118c:	4b0e      	ldr	r3, [pc, #56]	@ (80011c8 <HAL_ADC_MspInit+0xa4>)
 800118e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001190:	4a0d      	ldr	r2, [pc, #52]	@ (80011c8 <HAL_ADC_MspInit+0xa4>)
 8001192:	f043 0301 	orr.w	r3, r3, #1
 8001196:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001198:	4b0b      	ldr	r3, [pc, #44]	@ (80011c8 <HAL_ADC_MspInit+0xa4>)
 800119a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800119c:	f003 0301 	and.w	r3, r3, #1
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ToF2_Pin|ToF1_Pin;
 80011a4:	2305      	movs	r3, #5
 80011a6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011a8:	2303      	movs	r3, #3
 80011aa:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011b4:	4619      	mov	r1, r3
 80011b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011ba:	f002 fe87 	bl	8003ecc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011be:	bf00      	nop
 80011c0:	3768      	adds	r7, #104	@ 0x68
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40021000 	.word	0x40021000

080011cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80011d2:	4b12      	ldr	r3, [pc, #72]	@ (800121c <MX_DMA_Init+0x50>)
 80011d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011d6:	4a11      	ldr	r2, [pc, #68]	@ (800121c <MX_DMA_Init+0x50>)
 80011d8:	f043 0304 	orr.w	r3, r3, #4
 80011dc:	6493      	str	r3, [r2, #72]	@ 0x48
 80011de:	4b0f      	ldr	r3, [pc, #60]	@ (800121c <MX_DMA_Init+0x50>)
 80011e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011e2:	f003 0304 	and.w	r3, r3, #4
 80011e6:	607b      	str	r3, [r7, #4]
 80011e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011ea:	4b0c      	ldr	r3, [pc, #48]	@ (800121c <MX_DMA_Init+0x50>)
 80011ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011ee:	4a0b      	ldr	r2, [pc, #44]	@ (800121c <MX_DMA_Init+0x50>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	6493      	str	r3, [r2, #72]	@ 0x48
 80011f6:	4b09      	ldr	r3, [pc, #36]	@ (800121c <MX_DMA_Init+0x50>)
 80011f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	603b      	str	r3, [r7, #0]
 8001200:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001202:	2200      	movs	r2, #0
 8001204:	2100      	movs	r1, #0
 8001206:	200b      	movs	r0, #11
 8001208:	f002 faed 	bl	80037e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800120c:	200b      	movs	r0, #11
 800120e:	f002 fb04 	bl	800381a <HAL_NVIC_EnableIRQ>

}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40021000 	.word	0x40021000

08001220 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08a      	sub	sp, #40	@ 0x28
 8001224:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001226:	f107 0314 	add.w	r3, r7, #20
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]
 8001230:	609a      	str	r2, [r3, #8]
 8001232:	60da      	str	r2, [r3, #12]
 8001234:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001236:	4b42      	ldr	r3, [pc, #264]	@ (8001340 <MX_GPIO_Init+0x120>)
 8001238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800123a:	4a41      	ldr	r2, [pc, #260]	@ (8001340 <MX_GPIO_Init+0x120>)
 800123c:	f043 0304 	orr.w	r3, r3, #4
 8001240:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001242:	4b3f      	ldr	r3, [pc, #252]	@ (8001340 <MX_GPIO_Init+0x120>)
 8001244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001246:	f003 0304 	and.w	r3, r3, #4
 800124a:	613b      	str	r3, [r7, #16]
 800124c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800124e:	4b3c      	ldr	r3, [pc, #240]	@ (8001340 <MX_GPIO_Init+0x120>)
 8001250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001252:	4a3b      	ldr	r2, [pc, #236]	@ (8001340 <MX_GPIO_Init+0x120>)
 8001254:	f043 0320 	orr.w	r3, r3, #32
 8001258:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800125a:	4b39      	ldr	r3, [pc, #228]	@ (8001340 <MX_GPIO_Init+0x120>)
 800125c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800125e:	f003 0320 	and.w	r3, r3, #32
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001266:	4b36      	ldr	r3, [pc, #216]	@ (8001340 <MX_GPIO_Init+0x120>)
 8001268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800126a:	4a35      	ldr	r2, [pc, #212]	@ (8001340 <MX_GPIO_Init+0x120>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001272:	4b33      	ldr	r3, [pc, #204]	@ (8001340 <MX_GPIO_Init+0x120>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	60bb      	str	r3, [r7, #8]
 800127c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800127e:	4b30      	ldr	r3, [pc, #192]	@ (8001340 <MX_GPIO_Init+0x120>)
 8001280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001282:	4a2f      	ldr	r2, [pc, #188]	@ (8001340 <MX_GPIO_Init+0x120>)
 8001284:	f043 0302 	orr.w	r3, r3, #2
 8001288:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800128a:	4b2d      	ldr	r3, [pc, #180]	@ (8001340 <MX_GPIO_Init+0x120>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	607b      	str	r3, [r7, #4]
 8001294:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI1_CSN_Pin|EN_LIDAR_Pin|EN_MOT_Pin, GPIO_PIN_RESET);
 8001296:	2200      	movs	r2, #0
 8001298:	f44f 6141 	mov.w	r1, #3088	@ 0xc10
 800129c:	4829      	ldr	r0, [pc, #164]	@ (8001344 <MX_GPIO_Init+0x124>)
 800129e:	f002 ff97 	bl	80041d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 80012a2:	2200      	movs	r2, #0
 80012a4:	2103      	movs	r1, #3
 80012a6:	4828      	ldr	r0, [pc, #160]	@ (8001348 <MX_GPIO_Init+0x128>)
 80012a8:	f002 ff92 	bl	80041d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_START_Pin;
 80012ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b2:	2300      	movs	r3, #0
 80012b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_START_GPIO_Port, &GPIO_InitStruct);
 80012ba:	f107 0314 	add.w	r3, r7, #20
 80012be:	4619      	mov	r1, r3
 80012c0:	4820      	ldr	r0, [pc, #128]	@ (8001344 <MX_GPIO_Init+0x124>)
 80012c2:	f002 fe03 	bl	8003ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = AG_INT1_Pin|AG_INT2_Pin;
 80012c6:	2318      	movs	r3, #24
 80012c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012ca:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80012ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d4:	f107 0314 	add.w	r3, r7, #20
 80012d8:	4619      	mov	r1, r3
 80012da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012de:	f002 fdf5 	bl	8003ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SPI1_CSN_Pin|EN_LIDAR_Pin|EN_MOT_Pin;
 80012e2:	f44f 6341 	mov.w	r3, #3088	@ 0xc10
 80012e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e8:	2301      	movs	r3, #1
 80012ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f0:	2300      	movs	r3, #0
 80012f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	4619      	mov	r1, r3
 80012fa:	4812      	ldr	r0, [pc, #72]	@ (8001344 <MX_GPIO_Init+0x124>)
 80012fc:	f002 fde6 	bl	8003ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin;
 8001300:	2303      	movs	r3, #3
 8001302:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001304:	2301      	movs	r3, #1
 8001306:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130c:	2300      	movs	r3, #0
 800130e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	4619      	mov	r1, r3
 8001316:	480c      	ldr	r0, [pc, #48]	@ (8001348 <MX_GPIO_Init+0x128>)
 8001318:	f002 fdd8 	bl	8003ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_MODE_Pin;
 800131c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001320:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001322:	2300      	movs	r3, #0
 8001324:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_MODE_GPIO_Port, &GPIO_InitStruct);
 800132a:	f107 0314 	add.w	r3, r7, #20
 800132e:	4619      	mov	r1, r3
 8001330:	4805      	ldr	r0, [pc, #20]	@ (8001348 <MX_GPIO_Init+0x128>)
 8001332:	f002 fdcb 	bl	8003ecc <HAL_GPIO_Init>

}
 8001336:	bf00      	nop
 8001338:	3728      	adds	r7, #40	@ 0x28
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40021000 	.word	0x40021000
 8001344:	48000800 	.word	0x48000800
 8001348:	48000400 	.word	0x48000400

0800134c <__io_putchar>:
 * @brief Transmit a character over UART.
 * @param ch: Character to transmit.
 * @retval int: The transmitted character.
 */
int __io_putchar(int ch)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001354:	1d39      	adds	r1, r7, #4
 8001356:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800135a:	2201      	movs	r2, #1
 800135c:	4803      	ldr	r0, [pc, #12]	@ (800136c <__io_putchar+0x20>)
 800135e:	f005 f8c1 	bl	80064e4 <HAL_UART_Transmit>

	return ch;
 8001362:	687b      	ldr	r3, [r7, #4]
}
 8001364:	4618      	mov	r0, r3
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20001f0c 	.word	0x20001f0c

08001370 <HAL_UART_RxHalfCpltCallback>:
/**
 * @brief UART receive half complete callback.
 * @param huart: Pointer to the UART handle
 * @retval None
 */
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart) {
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a04      	ldr	r2, [pc, #16]	@ (8001390 <HAL_UART_RxHalfCpltCallback+0x20>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d102      	bne.n	8001388 <HAL_UART_RxHalfCpltCallback+0x18>
		YLIDARX2_ProcessDMAHalfComplete(&hlidar);
 8001382:	4804      	ldr	r0, [pc, #16]	@ (8001394 <HAL_UART_RxHalfCpltCallback+0x24>)
 8001384:	f000 ff22 	bl	80021cc <YLIDARX2_ProcessDMAHalfComplete>
	}
}
 8001388:	bf00      	nop
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40004400 	.word	0x40004400
 8001394:	2000025c 	.word	0x2000025c

08001398 <HAL_UART_RxCpltCallback>:
/**
 * @brief UART receive complete callback.
 * @param huart: Pointer to the UART handle
 * @retval None
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a04      	ldr	r2, [pc, #16]	@ (80013b8 <HAL_UART_RxCpltCallback+0x20>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d102      	bne.n	80013b0 <HAL_UART_RxCpltCallback+0x18>
		YLIDARX2_ProcessDMAComplete(&hlidar);
 80013aa:	4804      	ldr	r0, [pc, #16]	@ (80013bc <HAL_UART_RxCpltCallback+0x24>)
 80013ac:	f000 ff1c 	bl	80021e8 <YLIDARX2_ProcessDMAComplete>
	}
}
 80013b0:	bf00      	nop
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40004400 	.word	0x40004400
 80013bc:	2000025c 	.word	0x2000025c

080013c0 <HAL_UART_ErrorCallback>:
 * @brief UART error callback.
 * @param huart: Pointer to the UART handle
 * @retval None
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a1a      	ldr	r2, [pc, #104]	@ (8001438 <HAL_UART_ErrorCallback+0x78>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d12e      	bne.n	8001430 <HAL_UART_ErrorCallback+0x70>
	{
		if (HAL_UART_GetError(huart) & HAL_UART_ERROR_PE)
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f005 fe5c 	bl	8007090 <HAL_UART_GetError>
 80013d8:	4603      	mov	r3, r0
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d002      	beq.n	80013e8 <HAL_UART_ErrorCallback+0x28>
			DEBUG_PRINT("Parity Error!\r\n");
 80013e2:	4816      	ldr	r0, [pc, #88]	@ (800143c <HAL_UART_ErrorCallback+0x7c>)
 80013e4:	f007 fe22 	bl	800902c <puts>
		if (HAL_UART_GetError(huart) & HAL_UART_ERROR_NE)
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f005 fe51 	bl	8007090 <HAL_UART_GetError>
 80013ee:	4603      	mov	r3, r0
 80013f0:	f003 0302 	and.w	r3, r3, #2
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d002      	beq.n	80013fe <HAL_UART_ErrorCallback+0x3e>
			DEBUG_PRINT("Noise Error!\r\n");
 80013f8:	4811      	ldr	r0, [pc, #68]	@ (8001440 <HAL_UART_ErrorCallback+0x80>)
 80013fa:	f007 fe17 	bl	800902c <puts>
		if (HAL_UART_GetError(huart) & HAL_UART_ERROR_FE)
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f005 fe46 	bl	8007090 <HAL_UART_GetError>
 8001404:	4603      	mov	r3, r0
 8001406:	f003 0304 	and.w	r3, r3, #4
 800140a:	2b00      	cmp	r3, #0
 800140c:	d002      	beq.n	8001414 <HAL_UART_ErrorCallback+0x54>
			DEBUG_PRINT("Framing Error!\r\n");
 800140e:	480d      	ldr	r0, [pc, #52]	@ (8001444 <HAL_UART_ErrorCallback+0x84>)
 8001410:	f007 fe0c 	bl	800902c <puts>
		if (HAL_UART_GetError(huart) & HAL_UART_ERROR_ORE)
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f005 fe3b 	bl	8007090 <HAL_UART_GetError>
 800141a:	4603      	mov	r3, r0
 800141c:	f003 0308 	and.w	r3, r3, #8
 8001420:	2b00      	cmp	r3, #0
 8001422:	d002      	beq.n	800142a <HAL_UART_ErrorCallback+0x6a>
			DEBUG_PRINT("Overrun Error!\r\n");
 8001424:	4808      	ldr	r0, [pc, #32]	@ (8001448 <HAL_UART_ErrorCallback+0x88>)
 8001426:	f007 fe01 	bl	800902c <puts>

		YLIDARX2_RestartDMA(&hlidar);
 800142a:	4808      	ldr	r0, [pc, #32]	@ (800144c <HAL_UART_ErrorCallback+0x8c>)
 800142c:	f000 fea2 	bl	8002174 <YLIDARX2_RestartDMA>
	}
}
 8001430:	bf00      	nop
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40004400 	.word	0x40004400
 800143c:	0800c8d0 	.word	0x0800c8d0
 8001440:	0800c8e0 	.word	0x0800c8e0
 8001444:	0800c8f0 	.word	0x0800c8f0
 8001448:	0800c900 	.word	0x0800c900
 800144c:	2000025c 	.word	0x2000025c

08001450 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001454:	f001 f868 	bl	8002528 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001458:	f000 f826 	bl	80014a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800145c:	f7ff fee0 	bl	8001220 <MX_GPIO_Init>
  MX_DMA_Init();
 8001460:	f7ff feb4 	bl	80011cc <MX_DMA_Init>
  MX_SPI1_Init();
 8001464:	f000 f872 	bl	800154c <MX_SPI1_Init>
  MX_TIM1_Init();
 8001468:	f000 fa30 	bl	80018cc <MX_TIM1_Init>
  MX_TIM3_Init();
 800146c:	f000 faf6 	bl	8001a5c <MX_TIM3_Init>
  MX_TIM4_Init();
 8001470:	f000 fb4a 	bl	8001b08 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8001474:	f000 fcd6 	bl	8001e24 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001478:	f000 fc88 	bl	8001d8c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800147c:	f7ff fdda 	bl	8001034 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	printf("\r\n*** Waking up V-NOM ***\r\n");
 8001480:	4806      	ldr	r0, [pc, #24]	@ (800149c <main+0x4c>)
 8001482:	f007 fdd3 	bl	800902c <puts>
	/* Motors test & initialization *
	test_Motors();
	 */

	/* YLIDAR X2 Initialization with DMA */
	LIDAR_RX_GPIO_Port->PUPDR = GPIO_PULLDOWN;
 8001486:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800148a:	2202      	movs	r2, #2
 800148c:	60da      	str	r2, [r3, #12]
	YLIDARX2_InitDMA(&hlidar, &huart2);
 800148e:	4904      	ldr	r1, [pc, #16]	@ (80014a0 <main+0x50>)
 8001490:	4804      	ldr	r0, [pc, #16]	@ (80014a4 <main+0x54>)
 8001492:	f000 fe3d 	bl	8002110 <YLIDARX2_InitDMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8001496:	bf00      	nop
 8001498:	e7fd      	b.n	8001496 <main+0x46>
 800149a:	bf00      	nop
 800149c:	0800c910 	.word	0x0800c910
 80014a0:	20001fa0 	.word	0x20001fa0
 80014a4:	2000025c 	.word	0x2000025c

080014a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b094      	sub	sp, #80	@ 0x50
 80014ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ae:	f107 0318 	add.w	r3, r7, #24
 80014b2:	2238      	movs	r2, #56	@ 0x38
 80014b4:	2100      	movs	r1, #0
 80014b6:	4618      	mov	r0, r3
 80014b8:	f007 feb8 	bl	800922c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014bc:	1d3b      	adds	r3, r7, #4
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	609a      	str	r2, [r3, #8]
 80014c6:	60da      	str	r2, [r3, #12]
 80014c8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80014ca:	2000      	movs	r0, #0
 80014cc:	f002 fe98 	bl	8004200 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014d0:	2302      	movs	r3, #2
 80014d2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014d8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014da:	2340      	movs	r3, #64	@ 0x40
 80014dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014de:	2302      	movs	r3, #2
 80014e0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014e2:	2302      	movs	r3, #2
 80014e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80014e6:	2304      	movs	r3, #4
 80014e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80014ea:	2355      	movs	r3, #85	@ 0x55
 80014ec:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014ee:	2302      	movs	r3, #2
 80014f0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80014f2:	2302      	movs	r3, #2
 80014f4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014f6:	2302      	movs	r3, #2
 80014f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014fa:	f107 0318 	add.w	r3, r7, #24
 80014fe:	4618      	mov	r0, r3
 8001500:	f002 ff32 	bl	8004368 <HAL_RCC_OscConfig>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800150a:	f000 f818 	bl	800153e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800150e:	230f      	movs	r3, #15
 8001510:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001512:	2303      	movs	r3, #3
 8001514:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001516:	2300      	movs	r3, #0
 8001518:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800151a:	2300      	movs	r3, #0
 800151c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800151e:	2300      	movs	r3, #0
 8001520:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001522:	1d3b      	adds	r3, r7, #4
 8001524:	2104      	movs	r1, #4
 8001526:	4618      	mov	r0, r3
 8001528:	f003 fa30 	bl	800498c <HAL_RCC_ClockConfig>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001532:	f000 f804 	bl	800153e <Error_Handler>
  }
}
 8001536:	bf00      	nop
 8001538:	3750      	adds	r7, #80	@ 0x50
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800153e:	b480      	push	{r7}
 8001540:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001542:	b672      	cpsid	i
}
 8001544:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001546:	bf00      	nop
 8001548:	e7fd      	b.n	8001546 <Error_Handler+0x8>
	...

0800154c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001550:	4b1b      	ldr	r3, [pc, #108]	@ (80015c0 <MX_SPI1_Init+0x74>)
 8001552:	4a1c      	ldr	r2, [pc, #112]	@ (80015c4 <MX_SPI1_Init+0x78>)
 8001554:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001556:	4b1a      	ldr	r3, [pc, #104]	@ (80015c0 <MX_SPI1_Init+0x74>)
 8001558:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800155c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800155e:	4b18      	ldr	r3, [pc, #96]	@ (80015c0 <MX_SPI1_Init+0x74>)
 8001560:	2200      	movs	r2, #0
 8001562:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001564:	4b16      	ldr	r3, [pc, #88]	@ (80015c0 <MX_SPI1_Init+0x74>)
 8001566:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800156a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800156c:	4b14      	ldr	r3, [pc, #80]	@ (80015c0 <MX_SPI1_Init+0x74>)
 800156e:	2200      	movs	r2, #0
 8001570:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001572:	4b13      	ldr	r3, [pc, #76]	@ (80015c0 <MX_SPI1_Init+0x74>)
 8001574:	2200      	movs	r2, #0
 8001576:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001578:	4b11      	ldr	r3, [pc, #68]	@ (80015c0 <MX_SPI1_Init+0x74>)
 800157a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800157e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001580:	4b0f      	ldr	r3, [pc, #60]	@ (80015c0 <MX_SPI1_Init+0x74>)
 8001582:	2228      	movs	r2, #40	@ 0x28
 8001584:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001586:	4b0e      	ldr	r3, [pc, #56]	@ (80015c0 <MX_SPI1_Init+0x74>)
 8001588:	2200      	movs	r2, #0
 800158a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800158c:	4b0c      	ldr	r3, [pc, #48]	@ (80015c0 <MX_SPI1_Init+0x74>)
 800158e:	2200      	movs	r2, #0
 8001590:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001592:	4b0b      	ldr	r3, [pc, #44]	@ (80015c0 <MX_SPI1_Init+0x74>)
 8001594:	2200      	movs	r2, #0
 8001596:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001598:	4b09      	ldr	r3, [pc, #36]	@ (80015c0 <MX_SPI1_Init+0x74>)
 800159a:	2207      	movs	r2, #7
 800159c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800159e:	4b08      	ldr	r3, [pc, #32]	@ (80015c0 <MX_SPI1_Init+0x74>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015a4:	4b06      	ldr	r3, [pc, #24]	@ (80015c0 <MX_SPI1_Init+0x74>)
 80015a6:	2208      	movs	r2, #8
 80015a8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015aa:	4805      	ldr	r0, [pc, #20]	@ (80015c0 <MX_SPI1_Init+0x74>)
 80015ac:	f003 fdf6 	bl	800519c <HAL_SPI_Init>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80015b6:	f7ff ffc2 	bl	800153e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20001dc0 	.word	0x20001dc0
 80015c4:	40013000 	.word	0x40013000

080015c8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b08a      	sub	sp, #40	@ 0x28
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d0:	f107 0314 	add.w	r3, r7, #20
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	60da      	str	r2, [r3, #12]
 80015de:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a17      	ldr	r2, [pc, #92]	@ (8001644 <HAL_SPI_MspInit+0x7c>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d128      	bne.n	800163c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015ea:	4b17      	ldr	r3, [pc, #92]	@ (8001648 <HAL_SPI_MspInit+0x80>)
 80015ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015ee:	4a16      	ldr	r2, [pc, #88]	@ (8001648 <HAL_SPI_MspInit+0x80>)
 80015f0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80015f4:	6613      	str	r3, [r2, #96]	@ 0x60
 80015f6:	4b14      	ldr	r3, [pc, #80]	@ (8001648 <HAL_SPI_MspInit+0x80>)
 80015f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015fe:	613b      	str	r3, [r7, #16]
 8001600:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001602:	4b11      	ldr	r3, [pc, #68]	@ (8001648 <HAL_SPI_MspInit+0x80>)
 8001604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001606:	4a10      	ldr	r2, [pc, #64]	@ (8001648 <HAL_SPI_MspInit+0x80>)
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800160e:	4b0e      	ldr	r3, [pc, #56]	@ (8001648 <HAL_SPI_MspInit+0x80>)
 8001610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800161a:	23e0      	movs	r3, #224	@ 0xe0
 800161c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161e:	2302      	movs	r3, #2
 8001620:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001626:	2300      	movs	r3, #0
 8001628:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800162a:	2305      	movs	r3, #5
 800162c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162e:	f107 0314 	add.w	r3, r7, #20
 8001632:	4619      	mov	r1, r3
 8001634:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001638:	f002 fc48 	bl	8003ecc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800163c:	bf00      	nop
 800163e:	3728      	adds	r7, #40	@ 0x28
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40013000 	.word	0x40013000
 8001648:	40021000 	.word	0x40021000

0800164c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001652:	4b0f      	ldr	r3, [pc, #60]	@ (8001690 <HAL_MspInit+0x44>)
 8001654:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001656:	4a0e      	ldr	r2, [pc, #56]	@ (8001690 <HAL_MspInit+0x44>)
 8001658:	f043 0301 	orr.w	r3, r3, #1
 800165c:	6613      	str	r3, [r2, #96]	@ 0x60
 800165e:	4b0c      	ldr	r3, [pc, #48]	@ (8001690 <HAL_MspInit+0x44>)
 8001660:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	607b      	str	r3, [r7, #4]
 8001668:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800166a:	4b09      	ldr	r3, [pc, #36]	@ (8001690 <HAL_MspInit+0x44>)
 800166c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800166e:	4a08      	ldr	r2, [pc, #32]	@ (8001690 <HAL_MspInit+0x44>)
 8001670:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001674:	6593      	str	r3, [r2, #88]	@ 0x58
 8001676:	4b06      	ldr	r3, [pc, #24]	@ (8001690 <HAL_MspInit+0x44>)
 8001678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800167a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800167e:	603b      	str	r3, [r7, #0]
 8001680:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001682:	f002 fe61 	bl	8004348 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40021000 	.word	0x40021000

08001694 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001698:	bf00      	nop
 800169a:	e7fd      	b.n	8001698 <NMI_Handler+0x4>

0800169c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016a0:	bf00      	nop
 80016a2:	e7fd      	b.n	80016a0 <HardFault_Handler+0x4>

080016a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016a8:	bf00      	nop
 80016aa:	e7fd      	b.n	80016a8 <MemManage_Handler+0x4>

080016ac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016b0:	bf00      	nop
 80016b2:	e7fd      	b.n	80016b0 <BusFault_Handler+0x4>

080016b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016b8:	bf00      	nop
 80016ba:	e7fd      	b.n	80016b8 <UsageFault_Handler+0x4>

080016bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016c0:	bf00      	nop
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr

080016ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ca:	b480      	push	{r7}
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016ea:	f000 ff6f 	bl	80025cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
	...

080016f4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80016f8:	4802      	ldr	r0, [pc, #8]	@ (8001704 <DMA1_Channel1_IRQHandler+0x10>)
 80016fa:	f002 fa8c 	bl	8003c16 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20002034 	.word	0x20002034

08001708 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800170c:	4802      	ldr	r0, [pc, #8]	@ (8001718 <USART2_IRQHandler+0x10>)
 800170e:	f005 f967 	bl	80069e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20001fa0 	.word	0x20001fa0

0800171c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  return 1;
 8001720:	2301      	movs	r3, #1
}
 8001722:	4618      	mov	r0, r3
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <_kill>:

int _kill(int pid, int sig)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001736:	f007 fdcb 	bl	80092d0 <__errno>
 800173a:	4603      	mov	r3, r0
 800173c:	2216      	movs	r2, #22
 800173e:	601a      	str	r2, [r3, #0]
  return -1;
 8001740:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001744:	4618      	mov	r0, r3
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}

0800174c <_exit>:

void _exit (int status)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001754:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f7ff ffe7 	bl	800172c <_kill>
  while (1) {}    /* Make sure we hang here */
 800175e:	bf00      	nop
 8001760:	e7fd      	b.n	800175e <_exit+0x12>

08001762 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b086      	sub	sp, #24
 8001766:	af00      	add	r7, sp, #0
 8001768:	60f8      	str	r0, [r7, #12]
 800176a:	60b9      	str	r1, [r7, #8]
 800176c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800176e:	2300      	movs	r3, #0
 8001770:	617b      	str	r3, [r7, #20]
 8001772:	e00a      	b.n	800178a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001774:	f3af 8000 	nop.w
 8001778:	4601      	mov	r1, r0
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	1c5a      	adds	r2, r3, #1
 800177e:	60ba      	str	r2, [r7, #8]
 8001780:	b2ca      	uxtb	r2, r1
 8001782:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	3301      	adds	r3, #1
 8001788:	617b      	str	r3, [r7, #20]
 800178a:	697a      	ldr	r2, [r7, #20]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	429a      	cmp	r2, r3
 8001790:	dbf0      	blt.n	8001774 <_read+0x12>
  }

  return len;
 8001792:	687b      	ldr	r3, [r7, #4]
}
 8001794:	4618      	mov	r0, r3
 8001796:	3718      	adds	r7, #24
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]
 80017ac:	e009      	b.n	80017c2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	1c5a      	adds	r2, r3, #1
 80017b2:	60ba      	str	r2, [r7, #8]
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff fdc8 	bl	800134c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	3301      	adds	r3, #1
 80017c0:	617b      	str	r3, [r7, #20]
 80017c2:	697a      	ldr	r2, [r7, #20]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	dbf1      	blt.n	80017ae <_write+0x12>
  }
  return len;
 80017ca:	687b      	ldr	r3, [r7, #4]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3718      	adds	r7, #24
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <_close>:

int _close(int file)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017fc:	605a      	str	r2, [r3, #4]
  return 0;
 80017fe:	2300      	movs	r3, #0
}
 8001800:	4618      	mov	r0, r3
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <_isatty>:

int _isatty(int file)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001814:	2301      	movs	r3, #1
}
 8001816:	4618      	mov	r0, r3
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001822:	b480      	push	{r7}
 8001824:	b085      	sub	sp, #20
 8001826:	af00      	add	r7, sp, #0
 8001828:	60f8      	str	r0, [r7, #12]
 800182a:	60b9      	str	r1, [r7, #8]
 800182c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800182e:	2300      	movs	r3, #0
}
 8001830:	4618      	mov	r0, r3
 8001832:	3714      	adds	r7, #20
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001844:	4a14      	ldr	r2, [pc, #80]	@ (8001898 <_sbrk+0x5c>)
 8001846:	4b15      	ldr	r3, [pc, #84]	@ (800189c <_sbrk+0x60>)
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001850:	4b13      	ldr	r3, [pc, #76]	@ (80018a0 <_sbrk+0x64>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d102      	bne.n	800185e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001858:	4b11      	ldr	r3, [pc, #68]	@ (80018a0 <_sbrk+0x64>)
 800185a:	4a12      	ldr	r2, [pc, #72]	@ (80018a4 <_sbrk+0x68>)
 800185c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800185e:	4b10      	ldr	r3, [pc, #64]	@ (80018a0 <_sbrk+0x64>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4413      	add	r3, r2
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	429a      	cmp	r2, r3
 800186a:	d207      	bcs.n	800187c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800186c:	f007 fd30 	bl	80092d0 <__errno>
 8001870:	4603      	mov	r3, r0
 8001872:	220c      	movs	r2, #12
 8001874:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001876:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800187a:	e009      	b.n	8001890 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800187c:	4b08      	ldr	r3, [pc, #32]	@ (80018a0 <_sbrk+0x64>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001882:	4b07      	ldr	r3, [pc, #28]	@ (80018a0 <_sbrk+0x64>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4413      	add	r3, r2
 800188a:	4a05      	ldr	r2, [pc, #20]	@ (80018a0 <_sbrk+0x64>)
 800188c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800188e:	68fb      	ldr	r3, [r7, #12]
}
 8001890:	4618      	mov	r0, r3
 8001892:	3718      	adds	r7, #24
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	20008000 	.word	0x20008000
 800189c:	00000400 	.word	0x00000400
 80018a0:	20001e24 	.word	0x20001e24
 80018a4:	200021e8 	.word	0x200021e8

080018a8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80018ac:	4b06      	ldr	r3, [pc, #24]	@ (80018c8 <SystemInit+0x20>)
 80018ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018b2:	4a05      	ldr	r2, [pc, #20]	@ (80018c8 <SystemInit+0x20>)
 80018b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b09c      	sub	sp, #112	@ 0x70
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018d2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	605a      	str	r2, [r3, #4]
 80018dc:	609a      	str	r2, [r3, #8]
 80018de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018e0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018ec:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]
 80018fa:	611a      	str	r2, [r3, #16]
 80018fc:	615a      	str	r2, [r3, #20]
 80018fe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001900:	1d3b      	adds	r3, r7, #4
 8001902:	2234      	movs	r2, #52	@ 0x34
 8001904:	2100      	movs	r1, #0
 8001906:	4618      	mov	r0, r3
 8001908:	f007 fc90 	bl	800922c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800190c:	4b51      	ldr	r3, [pc, #324]	@ (8001a54 <MX_TIM1_Init+0x188>)
 800190e:	4a52      	ldr	r2, [pc, #328]	@ (8001a58 <MX_TIM1_Init+0x18c>)
 8001910:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001912:	4b50      	ldr	r3, [pc, #320]	@ (8001a54 <MX_TIM1_Init+0x188>)
 8001914:	2200      	movs	r2, #0
 8001916:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001918:	4b4e      	ldr	r3, [pc, #312]	@ (8001a54 <MX_TIM1_Init+0x188>)
 800191a:	2200      	movs	r2, #0
 800191c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800191e:	4b4d      	ldr	r3, [pc, #308]	@ (8001a54 <MX_TIM1_Init+0x188>)
 8001920:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001924:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001926:	4b4b      	ldr	r3, [pc, #300]	@ (8001a54 <MX_TIM1_Init+0x188>)
 8001928:	2200      	movs	r2, #0
 800192a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800192c:	4b49      	ldr	r3, [pc, #292]	@ (8001a54 <MX_TIM1_Init+0x188>)
 800192e:	2200      	movs	r2, #0
 8001930:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001932:	4b48      	ldr	r3, [pc, #288]	@ (8001a54 <MX_TIM1_Init+0x188>)
 8001934:	2200      	movs	r2, #0
 8001936:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001938:	4846      	ldr	r0, [pc, #280]	@ (8001a54 <MX_TIM1_Init+0x188>)
 800193a:	f003 fcda 	bl	80052f2 <HAL_TIM_Base_Init>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001944:	f7ff fdfb 	bl	800153e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001948:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800194c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800194e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001952:	4619      	mov	r1, r3
 8001954:	483f      	ldr	r0, [pc, #252]	@ (8001a54 <MX_TIM1_Init+0x188>)
 8001956:	f003 ff3f 	bl	80057d8 <HAL_TIM_ConfigClockSource>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001960:	f7ff fded 	bl	800153e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001964:	483b      	ldr	r0, [pc, #236]	@ (8001a54 <MX_TIM1_Init+0x188>)
 8001966:	f003 fd1b 	bl	80053a0 <HAL_TIM_PWM_Init>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001970:	f7ff fde5 	bl	800153e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001974:	2300      	movs	r3, #0
 8001976:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001978:	2300      	movs	r3, #0
 800197a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800197c:	2300      	movs	r3, #0
 800197e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001980:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001984:	4619      	mov	r1, r3
 8001986:	4833      	ldr	r0, [pc, #204]	@ (8001a54 <MX_TIM1_Init+0x188>)
 8001988:	f004 fc4e 	bl	8006228 <HAL_TIMEx_MasterConfigSynchronization>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001992:	f7ff fdd4 	bl	800153e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001996:	2360      	movs	r3, #96	@ 0x60
 8001998:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800199a:	2300      	movs	r3, #0
 800199c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800199e:	2300      	movs	r3, #0
 80019a0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019a2:	2300      	movs	r3, #0
 80019a4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019a6:	2300      	movs	r3, #0
 80019a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019aa:	2300      	movs	r3, #0
 80019ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019ae:	2300      	movs	r3, #0
 80019b0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019b2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80019b6:	2200      	movs	r2, #0
 80019b8:	4619      	mov	r1, r3
 80019ba:	4826      	ldr	r0, [pc, #152]	@ (8001a54 <MX_TIM1_Init+0x188>)
 80019bc:	f003 fdf8 	bl	80055b0 <HAL_TIM_PWM_ConfigChannel>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80019c6:	f7ff fdba 	bl	800153e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019ca:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80019ce:	2204      	movs	r2, #4
 80019d0:	4619      	mov	r1, r3
 80019d2:	4820      	ldr	r0, [pc, #128]	@ (8001a54 <MX_TIM1_Init+0x188>)
 80019d4:	f003 fdec 	bl	80055b0 <HAL_TIM_PWM_ConfigChannel>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80019de:	f7ff fdae 	bl	800153e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019e2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80019e6:	2208      	movs	r2, #8
 80019e8:	4619      	mov	r1, r3
 80019ea:	481a      	ldr	r0, [pc, #104]	@ (8001a54 <MX_TIM1_Init+0x188>)
 80019ec:	f003 fde0 	bl	80055b0 <HAL_TIM_PWM_ConfigChannel>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80019f6:	f7ff fda2 	bl	800153e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019fa:	2300      	movs	r3, #0
 80019fc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019fe:	2300      	movs	r3, #0
 8001a00:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a06:	2300      	movs	r3, #0
 8001a08:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a0e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a12:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a14:	2300      	movs	r3, #0
 8001a16:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a20:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a24:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001a26:	2300      	movs	r3, #0
 8001a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a32:	1d3b      	adds	r3, r7, #4
 8001a34:	4619      	mov	r1, r3
 8001a36:	4807      	ldr	r0, [pc, #28]	@ (8001a54 <MX_TIM1_Init+0x188>)
 8001a38:	f004 fc78 	bl	800632c <HAL_TIMEx_ConfigBreakDeadTime>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8001a42:	f7ff fd7c 	bl	800153e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a46:	4803      	ldr	r0, [pc, #12]	@ (8001a54 <MX_TIM1_Init+0x188>)
 8001a48:	f000 f94a 	bl	8001ce0 <HAL_TIM_MspPostInit>

}
 8001a4c:	bf00      	nop
 8001a4e:	3770      	adds	r7, #112	@ 0x70
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	20001e28 	.word	0x20001e28
 8001a58:	40012c00 	.word	0x40012c00

08001a5c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b08c      	sub	sp, #48	@ 0x30
 8001a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a62:	f107 030c 	add.w	r3, r7, #12
 8001a66:	2224      	movs	r2, #36	@ 0x24
 8001a68:	2100      	movs	r1, #0
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f007 fbde 	bl	800922c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a70:	463b      	mov	r3, r7
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	605a      	str	r2, [r3, #4]
 8001a78:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a7a:	4b21      	ldr	r3, [pc, #132]	@ (8001b00 <MX_TIM3_Init+0xa4>)
 8001a7c:	4a21      	ldr	r2, [pc, #132]	@ (8001b04 <MX_TIM3_Init+0xa8>)
 8001a7e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001a80:	4b1f      	ldr	r3, [pc, #124]	@ (8001b00 <MX_TIM3_Init+0xa4>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a86:	4b1e      	ldr	r3, [pc, #120]	@ (8001b00 <MX_TIM3_Init+0xa4>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001a8c:	4b1c      	ldr	r3, [pc, #112]	@ (8001b00 <MX_TIM3_Init+0xa4>)
 8001a8e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a92:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a94:	4b1a      	ldr	r3, [pc, #104]	@ (8001b00 <MX_TIM3_Init+0xa4>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a9a:	4b19      	ldr	r3, [pc, #100]	@ (8001b00 <MX_TIM3_Init+0xa4>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001aac:	2300      	movs	r3, #0
 8001aae:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001abc:	2300      	movs	r3, #0
 8001abe:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001ac4:	f107 030c 	add.w	r3, r7, #12
 8001ac8:	4619      	mov	r1, r3
 8001aca:	480d      	ldr	r0, [pc, #52]	@ (8001b00 <MX_TIM3_Init+0xa4>)
 8001acc:	f003 fcc9 	bl	8005462 <HAL_TIM_Encoder_Init>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001ad6:	f7ff fd32 	bl	800153e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ada:	2300      	movs	r3, #0
 8001adc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ae2:	463b      	mov	r3, r7
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4806      	ldr	r0, [pc, #24]	@ (8001b00 <MX_TIM3_Init+0xa4>)
 8001ae8:	f004 fb9e 	bl	8006228 <HAL_TIMEx_MasterConfigSynchronization>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001af2:	f7ff fd24 	bl	800153e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001af6:	bf00      	nop
 8001af8:	3730      	adds	r7, #48	@ 0x30
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20001e74 	.word	0x20001e74
 8001b04:	40000400 	.word	0x40000400

08001b08 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b08c      	sub	sp, #48	@ 0x30
 8001b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b0e:	f107 030c 	add.w	r3, r7, #12
 8001b12:	2224      	movs	r2, #36	@ 0x24
 8001b14:	2100      	movs	r1, #0
 8001b16:	4618      	mov	r0, r3
 8001b18:	f007 fb88 	bl	800922c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b1c:	463b      	mov	r3, r7
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	605a      	str	r2, [r3, #4]
 8001b24:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b26:	4b21      	ldr	r3, [pc, #132]	@ (8001bac <MX_TIM4_Init+0xa4>)
 8001b28:	4a21      	ldr	r2, [pc, #132]	@ (8001bb0 <MX_TIM4_Init+0xa8>)
 8001b2a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001b2c:	4b1f      	ldr	r3, [pc, #124]	@ (8001bac <MX_TIM4_Init+0xa4>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b32:	4b1e      	ldr	r3, [pc, #120]	@ (8001bac <MX_TIM4_Init+0xa4>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001b38:	4b1c      	ldr	r3, [pc, #112]	@ (8001bac <MX_TIM4_Init+0xa4>)
 8001b3a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b3e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b40:	4b1a      	ldr	r3, [pc, #104]	@ (8001bac <MX_TIM4_Init+0xa4>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b46:	4b19      	ldr	r3, [pc, #100]	@ (8001bac <MX_TIM4_Init+0xa4>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b50:	2300      	movs	r3, #0
 8001b52:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b54:	2301      	movs	r3, #1
 8001b56:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b60:	2300      	movs	r3, #0
 8001b62:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b64:	2301      	movs	r3, #1
 8001b66:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001b70:	f107 030c 	add.w	r3, r7, #12
 8001b74:	4619      	mov	r1, r3
 8001b76:	480d      	ldr	r0, [pc, #52]	@ (8001bac <MX_TIM4_Init+0xa4>)
 8001b78:	f003 fc73 	bl	8005462 <HAL_TIM_Encoder_Init>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001b82:	f7ff fcdc 	bl	800153e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b86:	2300      	movs	r3, #0
 8001b88:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b8e:	463b      	mov	r3, r7
 8001b90:	4619      	mov	r1, r3
 8001b92:	4806      	ldr	r0, [pc, #24]	@ (8001bac <MX_TIM4_Init+0xa4>)
 8001b94:	f004 fb48 	bl	8006228 <HAL_TIMEx_MasterConfigSynchronization>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001b9e:	f7ff fcce 	bl	800153e <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001ba2:	bf00      	nop
 8001ba4:	3730      	adds	r7, #48	@ 0x30
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	20001ec0 	.word	0x20001ec0
 8001bb0:	40000800 	.word	0x40000800

08001bb4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a0a      	ldr	r2, [pc, #40]	@ (8001bec <HAL_TIM_Base_MspInit+0x38>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d10b      	bne.n	8001bde <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf0 <HAL_TIM_Base_MspInit+0x3c>)
 8001bc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bca:	4a09      	ldr	r2, [pc, #36]	@ (8001bf0 <HAL_TIM_Base_MspInit+0x3c>)
 8001bcc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001bd0:	6613      	str	r3, [r2, #96]	@ 0x60
 8001bd2:	4b07      	ldr	r3, [pc, #28]	@ (8001bf0 <HAL_TIM_Base_MspInit+0x3c>)
 8001bd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bd6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001bde:	bf00      	nop
 8001be0:	3714      	adds	r7, #20
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	40012c00 	.word	0x40012c00
 8001bf0:	40021000 	.word	0x40021000

08001bf4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b08c      	sub	sp, #48	@ 0x30
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bfc:	f107 031c 	add.w	r3, r7, #28
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	605a      	str	r2, [r3, #4]
 8001c06:	609a      	str	r2, [r3, #8]
 8001c08:	60da      	str	r2, [r3, #12]
 8001c0a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a2f      	ldr	r2, [pc, #188]	@ (8001cd0 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d128      	bne.n	8001c68 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c16:	4b2f      	ldr	r3, [pc, #188]	@ (8001cd4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001c18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c1a:	4a2e      	ldr	r2, [pc, #184]	@ (8001cd4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001c1c:	f043 0302 	orr.w	r3, r3, #2
 8001c20:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c22:	4b2c      	ldr	r3, [pc, #176]	@ (8001cd4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	61bb      	str	r3, [r7, #24]
 8001c2c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c2e:	4b29      	ldr	r3, [pc, #164]	@ (8001cd4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001c30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c32:	4a28      	ldr	r2, [pc, #160]	@ (8001cd4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001c34:	f043 0302 	orr.w	r3, r3, #2
 8001c38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c3a:	4b26      	ldr	r3, [pc, #152]	@ (8001cd4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001c3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	617b      	str	r3, [r7, #20]
 8001c44:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001c46:	2330      	movs	r3, #48	@ 0x30
 8001c48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c52:	2300      	movs	r3, #0
 8001c54:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c56:	2302      	movs	r3, #2
 8001c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c5a:	f107 031c 	add.w	r3, r7, #28
 8001c5e:	4619      	mov	r1, r3
 8001c60:	481d      	ldr	r0, [pc, #116]	@ (8001cd8 <HAL_TIM_Encoder_MspInit+0xe4>)
 8001c62:	f002 f933 	bl	8003ecc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001c66:	e02e      	b.n	8001cc6 <HAL_TIM_Encoder_MspInit+0xd2>
  else if(tim_encoderHandle->Instance==TIM4)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a1b      	ldr	r2, [pc, #108]	@ (8001cdc <HAL_TIM_Encoder_MspInit+0xe8>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d129      	bne.n	8001cc6 <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c72:	4b18      	ldr	r3, [pc, #96]	@ (8001cd4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c76:	4a17      	ldr	r2, [pc, #92]	@ (8001cd4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001c78:	f043 0304 	orr.w	r3, r3, #4
 8001c7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c7e:	4b15      	ldr	r3, [pc, #84]	@ (8001cd4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001c80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c82:	f003 0304 	and.w	r3, r3, #4
 8001c86:	613b      	str	r3, [r7, #16]
 8001c88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c8a:	4b12      	ldr	r3, [pc, #72]	@ (8001cd4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001c8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c8e:	4a11      	ldr	r2, [pc, #68]	@ (8001cd4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001c90:	f043 0301 	orr.w	r3, r3, #1
 8001c94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c96:	4b0f      	ldr	r3, [pc, #60]	@ (8001cd4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001c98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	60fb      	str	r3, [r7, #12]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001ca2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001ca6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca8:	2302      	movs	r3, #2
 8001caa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cac:	2300      	movs	r3, #0
 8001cae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001cb4:	230a      	movs	r3, #10
 8001cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb8:	f107 031c 	add.w	r3, r7, #28
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cc2:	f002 f903 	bl	8003ecc <HAL_GPIO_Init>
}
 8001cc6:	bf00      	nop
 8001cc8:	3730      	adds	r7, #48	@ 0x30
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40000400 	.word	0x40000400
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	48000400 	.word	0x48000400
 8001cdc:	40000800 	.word	0x40000800

08001ce0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b08a      	sub	sp, #40	@ 0x28
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce8:	f107 0314 	add.w	r3, r7, #20
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	609a      	str	r2, [r3, #8]
 8001cf4:	60da      	str	r2, [r3, #12]
 8001cf6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a20      	ldr	r2, [pc, #128]	@ (8001d80 <HAL_TIM_MspPostInit+0xa0>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d13a      	bne.n	8001d78 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d02:	4b20      	ldr	r3, [pc, #128]	@ (8001d84 <HAL_TIM_MspPostInit+0xa4>)
 8001d04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d06:	4a1f      	ldr	r2, [pc, #124]	@ (8001d84 <HAL_TIM_MspPostInit+0xa4>)
 8001d08:	f043 0302 	orr.w	r3, r3, #2
 8001d0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d0e:	4b1d      	ldr	r3, [pc, #116]	@ (8001d84 <HAL_TIM_MspPostInit+0xa4>)
 8001d10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	613b      	str	r3, [r7, #16]
 8001d18:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1a:	4b1a      	ldr	r3, [pc, #104]	@ (8001d84 <HAL_TIM_MspPostInit+0xa4>)
 8001d1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d1e:	4a19      	ldr	r2, [pc, #100]	@ (8001d84 <HAL_TIM_MspPostInit+0xa4>)
 8001d20:	f043 0301 	orr.w	r3, r3, #1
 8001d24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d26:	4b17      	ldr	r3, [pc, #92]	@ (8001d84 <HAL_TIM_MspPostInit+0xa4>)
 8001d28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	68fb      	ldr	r3, [r7, #12]
    PB14     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001d32:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001d36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d40:	2300      	movs	r3, #0
 8001d42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001d44:	2306      	movs	r3, #6
 8001d46:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d48:	f107 0314 	add.w	r3, r7, #20
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	480e      	ldr	r0, [pc, #56]	@ (8001d88 <HAL_TIM_MspPostInit+0xa8>)
 8001d50:	f002 f8bc 	bl	8003ecc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001d54:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001d58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d62:	2300      	movs	r3, #0
 8001d64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001d66:	2306      	movs	r3, #6
 8001d68:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d6a:	f107 0314 	add.w	r3, r7, #20
 8001d6e:	4619      	mov	r1, r3
 8001d70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d74:	f002 f8aa 	bl	8003ecc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001d78:	bf00      	nop
 8001d7a:	3728      	adds	r7, #40	@ 0x28
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40012c00 	.word	0x40012c00
 8001d84:	40021000 	.word	0x40021000
 8001d88:	48000400 	.word	0x48000400

08001d8c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d90:	4b22      	ldr	r3, [pc, #136]	@ (8001e1c <MX_USART1_UART_Init+0x90>)
 8001d92:	4a23      	ldr	r2, [pc, #140]	@ (8001e20 <MX_USART1_UART_Init+0x94>)
 8001d94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d96:	4b21      	ldr	r3, [pc, #132]	@ (8001e1c <MX_USART1_UART_Init+0x90>)
 8001d98:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d9c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d9e:	4b1f      	ldr	r3, [pc, #124]	@ (8001e1c <MX_USART1_UART_Init+0x90>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001da4:	4b1d      	ldr	r3, [pc, #116]	@ (8001e1c <MX_USART1_UART_Init+0x90>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001daa:	4b1c      	ldr	r3, [pc, #112]	@ (8001e1c <MX_USART1_UART_Init+0x90>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001db0:	4b1a      	ldr	r3, [pc, #104]	@ (8001e1c <MX_USART1_UART_Init+0x90>)
 8001db2:	220c      	movs	r2, #12
 8001db4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001db6:	4b19      	ldr	r3, [pc, #100]	@ (8001e1c <MX_USART1_UART_Init+0x90>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dbc:	4b17      	ldr	r3, [pc, #92]	@ (8001e1c <MX_USART1_UART_Init+0x90>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dc2:	4b16      	ldr	r3, [pc, #88]	@ (8001e1c <MX_USART1_UART_Init+0x90>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001dc8:	4b14      	ldr	r3, [pc, #80]	@ (8001e1c <MX_USART1_UART_Init+0x90>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dce:	4b13      	ldr	r3, [pc, #76]	@ (8001e1c <MX_USART1_UART_Init+0x90>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001dd4:	4811      	ldr	r0, [pc, #68]	@ (8001e1c <MX_USART1_UART_Init+0x90>)
 8001dd6:	f004 fb35 	bl	8006444 <HAL_UART_Init>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001de0:	f7ff fbad 	bl	800153e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001de4:	2100      	movs	r1, #0
 8001de6:	480d      	ldr	r0, [pc, #52]	@ (8001e1c <MX_USART1_UART_Init+0x90>)
 8001de8:	f006 f8c0 	bl	8007f6c <HAL_UARTEx_SetTxFifoThreshold>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001df2:	f7ff fba4 	bl	800153e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001df6:	2100      	movs	r1, #0
 8001df8:	4808      	ldr	r0, [pc, #32]	@ (8001e1c <MX_USART1_UART_Init+0x90>)
 8001dfa:	f006 f8f5 	bl	8007fe8 <HAL_UARTEx_SetRxFifoThreshold>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001e04:	f7ff fb9b 	bl	800153e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001e08:	4804      	ldr	r0, [pc, #16]	@ (8001e1c <MX_USART1_UART_Init+0x90>)
 8001e0a:	f006 f876 	bl	8007efa <HAL_UARTEx_DisableFifoMode>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001e14:	f7ff fb93 	bl	800153e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e18:	bf00      	nop
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	20001f0c 	.word	0x20001f0c
 8001e20:	40013800 	.word	0x40013800

08001e24 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e28:	4b22      	ldr	r3, [pc, #136]	@ (8001eb4 <MX_USART2_UART_Init+0x90>)
 8001e2a:	4a23      	ldr	r2, [pc, #140]	@ (8001eb8 <MX_USART2_UART_Init+0x94>)
 8001e2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e2e:	4b21      	ldr	r3, [pc, #132]	@ (8001eb4 <MX_USART2_UART_Init+0x90>)
 8001e30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e36:	4b1f      	ldr	r3, [pc, #124]	@ (8001eb4 <MX_USART2_UART_Init+0x90>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e3c:	4b1d      	ldr	r3, [pc, #116]	@ (8001eb4 <MX_USART2_UART_Init+0x90>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e42:	4b1c      	ldr	r3, [pc, #112]	@ (8001eb4 <MX_USART2_UART_Init+0x90>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 8001e48:	4b1a      	ldr	r3, [pc, #104]	@ (8001eb4 <MX_USART2_UART_Init+0x90>)
 8001e4a:	2204      	movs	r2, #4
 8001e4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e4e:	4b19      	ldr	r3, [pc, #100]	@ (8001eb4 <MX_USART2_UART_Init+0x90>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e54:	4b17      	ldr	r3, [pc, #92]	@ (8001eb4 <MX_USART2_UART_Init+0x90>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e5a:	4b16      	ldr	r3, [pc, #88]	@ (8001eb4 <MX_USART2_UART_Init+0x90>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e60:	4b14      	ldr	r3, [pc, #80]	@ (8001eb4 <MX_USART2_UART_Init+0x90>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e66:	4b13      	ldr	r3, [pc, #76]	@ (8001eb4 <MX_USART2_UART_Init+0x90>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e6c:	4811      	ldr	r0, [pc, #68]	@ (8001eb4 <MX_USART2_UART_Init+0x90>)
 8001e6e:	f004 fae9 	bl	8006444 <HAL_UART_Init>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001e78:	f7ff fb61 	bl	800153e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	480d      	ldr	r0, [pc, #52]	@ (8001eb4 <MX_USART2_UART_Init+0x90>)
 8001e80:	f006 f874 	bl	8007f6c <HAL_UARTEx_SetTxFifoThreshold>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001e8a:	f7ff fb58 	bl	800153e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e8e:	2100      	movs	r1, #0
 8001e90:	4808      	ldr	r0, [pc, #32]	@ (8001eb4 <MX_USART2_UART_Init+0x90>)
 8001e92:	f006 f8a9 	bl	8007fe8 <HAL_UARTEx_SetRxFifoThreshold>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001e9c:	f7ff fb4f 	bl	800153e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001ea0:	4804      	ldr	r0, [pc, #16]	@ (8001eb4 <MX_USART2_UART_Init+0x90>)
 8001ea2:	f006 f82a 	bl	8007efa <HAL_UARTEx_DisableFifoMode>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001eac:	f7ff fb47 	bl	800153e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001eb0:	bf00      	nop
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	20001fa0 	.word	0x20001fa0
 8001eb8:	40004400 	.word	0x40004400

08001ebc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b09e      	sub	sp, #120	@ 0x78
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	605a      	str	r2, [r3, #4]
 8001ece:	609a      	str	r2, [r3, #8]
 8001ed0:	60da      	str	r2, [r3, #12]
 8001ed2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ed4:	f107 0320 	add.w	r3, r7, #32
 8001ed8:	2244      	movs	r2, #68	@ 0x44
 8001eda:	2100      	movs	r1, #0
 8001edc:	4618      	mov	r0, r3
 8001ede:	f007 f9a5 	bl	800922c <memset>
  if(uartHandle->Instance==USART1)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a65      	ldr	r2, [pc, #404]	@ (800207c <HAL_UART_MspInit+0x1c0>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d136      	bne.n	8001f5a <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001eec:	2301      	movs	r3, #1
 8001eee:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ef4:	f107 0320 	add.w	r3, r7, #32
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f002 ff5f 	bl	8004dbc <HAL_RCCEx_PeriphCLKConfig>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f04:	f7ff fb1b 	bl	800153e <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f08:	4b5d      	ldr	r3, [pc, #372]	@ (8002080 <HAL_UART_MspInit+0x1c4>)
 8001f0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f0c:	4a5c      	ldr	r2, [pc, #368]	@ (8002080 <HAL_UART_MspInit+0x1c4>)
 8001f0e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f12:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f14:	4b5a      	ldr	r3, [pc, #360]	@ (8002080 <HAL_UART_MspInit+0x1c4>)
 8001f16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f1c:	61fb      	str	r3, [r7, #28]
 8001f1e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f20:	4b57      	ldr	r3, [pc, #348]	@ (8002080 <HAL_UART_MspInit+0x1c4>)
 8001f22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f24:	4a56      	ldr	r2, [pc, #344]	@ (8002080 <HAL_UART_MspInit+0x1c4>)
 8001f26:	f043 0302 	orr.w	r3, r3, #2
 8001f2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f2c:	4b54      	ldr	r3, [pc, #336]	@ (8002080 <HAL_UART_MspInit+0x1c4>)
 8001f2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	61bb      	str	r3, [r7, #24]
 8001f36:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001f38:	23c0      	movs	r3, #192	@ 0xc0
 8001f3a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f40:	2300      	movs	r3, #0
 8001f42:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f44:	2300      	movs	r3, #0
 8001f46:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f48:	2307      	movs	r3, #7
 8001f4a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f4c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001f50:	4619      	mov	r1, r3
 8001f52:	484c      	ldr	r0, [pc, #304]	@ (8002084 <HAL_UART_MspInit+0x1c8>)
 8001f54:	f001 ffba 	bl	8003ecc <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001f58:	e08b      	b.n	8002072 <HAL_UART_MspInit+0x1b6>
  else if(uartHandle->Instance==USART2)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a4a      	ldr	r2, [pc, #296]	@ (8002088 <HAL_UART_MspInit+0x1cc>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	f040 8086 	bne.w	8002072 <HAL_UART_MspInit+0x1b6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001f66:	2302      	movs	r3, #2
 8001f68:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f6e:	f107 0320 	add.w	r3, r7, #32
 8001f72:	4618      	mov	r0, r3
 8001f74:	f002 ff22 	bl	8004dbc <HAL_RCCEx_PeriphCLKConfig>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8001f7e:	f7ff fade 	bl	800153e <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f82:	4b3f      	ldr	r3, [pc, #252]	@ (8002080 <HAL_UART_MspInit+0x1c4>)
 8001f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f86:	4a3e      	ldr	r2, [pc, #248]	@ (8002080 <HAL_UART_MspInit+0x1c4>)
 8001f88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f8e:	4b3c      	ldr	r3, [pc, #240]	@ (8002080 <HAL_UART_MspInit+0x1c4>)
 8001f90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f96:	617b      	str	r3, [r7, #20]
 8001f98:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9a:	4b39      	ldr	r3, [pc, #228]	@ (8002080 <HAL_UART_MspInit+0x1c4>)
 8001f9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f9e:	4a38      	ldr	r2, [pc, #224]	@ (8002080 <HAL_UART_MspInit+0x1c4>)
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fa6:	4b36      	ldr	r3, [pc, #216]	@ (8002080 <HAL_UART_MspInit+0x1c4>)
 8001fa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	613b      	str	r3, [r7, #16]
 8001fb0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fb2:	4b33      	ldr	r3, [pc, #204]	@ (8002080 <HAL_UART_MspInit+0x1c4>)
 8001fb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fb6:	4a32      	ldr	r2, [pc, #200]	@ (8002080 <HAL_UART_MspInit+0x1c4>)
 8001fb8:	f043 0302 	orr.w	r3, r3, #2
 8001fbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fbe:	4b30      	ldr	r3, [pc, #192]	@ (8002080 <HAL_UART_MspInit+0x1c4>)
 8001fc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	60fb      	str	r3, [r7, #12]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LIDAR_RX_Pin;
 8001fca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001fce:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fdc:	2307      	movs	r3, #7
 8001fde:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(LIDAR_RX_GPIO_Port, &GPIO_InitStruct);
 8001fe0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fea:	f001 ff6f 	bl	8003ecc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LIDAR_TX_Pin;
 8001fee:	2308      	movs	r3, #8
 8001ff0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ffe:	2307      	movs	r3, #7
 8002000:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(LIDAR_TX_GPIO_Port, &GPIO_InitStruct);
 8002002:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002006:	4619      	mov	r1, r3
 8002008:	481e      	ldr	r0, [pc, #120]	@ (8002084 <HAL_UART_MspInit+0x1c8>)
 800200a:	f001 ff5f 	bl	8003ecc <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel1;
 800200e:	4b1f      	ldr	r3, [pc, #124]	@ (800208c <HAL_UART_MspInit+0x1d0>)
 8002010:	4a1f      	ldr	r2, [pc, #124]	@ (8002090 <HAL_UART_MspInit+0x1d4>)
 8002012:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8002014:	4b1d      	ldr	r3, [pc, #116]	@ (800208c <HAL_UART_MspInit+0x1d0>)
 8002016:	221a      	movs	r2, #26
 8002018:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800201a:	4b1c      	ldr	r3, [pc, #112]	@ (800208c <HAL_UART_MspInit+0x1d0>)
 800201c:	2200      	movs	r2, #0
 800201e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002020:	4b1a      	ldr	r3, [pc, #104]	@ (800208c <HAL_UART_MspInit+0x1d0>)
 8002022:	2200      	movs	r2, #0
 8002024:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002026:	4b19      	ldr	r3, [pc, #100]	@ (800208c <HAL_UART_MspInit+0x1d0>)
 8002028:	2280      	movs	r2, #128	@ 0x80
 800202a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800202c:	4b17      	ldr	r3, [pc, #92]	@ (800208c <HAL_UART_MspInit+0x1d0>)
 800202e:	2200      	movs	r2, #0
 8002030:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002032:	4b16      	ldr	r3, [pc, #88]	@ (800208c <HAL_UART_MspInit+0x1d0>)
 8002034:	2200      	movs	r2, #0
 8002036:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002038:	4b14      	ldr	r3, [pc, #80]	@ (800208c <HAL_UART_MspInit+0x1d0>)
 800203a:	2220      	movs	r2, #32
 800203c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800203e:	4b13      	ldr	r3, [pc, #76]	@ (800208c <HAL_UART_MspInit+0x1d0>)
 8002040:	2200      	movs	r2, #0
 8002042:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002044:	4811      	ldr	r0, [pc, #68]	@ (800208c <HAL_UART_MspInit+0x1d0>)
 8002046:	f001 fc03 	bl	8003850 <HAL_DMA_Init>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <HAL_UART_MspInit+0x198>
      Error_Handler();
 8002050:	f7ff fa75 	bl	800153e <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a0d      	ldr	r2, [pc, #52]	@ (800208c <HAL_UART_MspInit+0x1d0>)
 8002058:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800205c:	4a0b      	ldr	r2, [pc, #44]	@ (800208c <HAL_UART_MspInit+0x1d0>)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002062:	2200      	movs	r2, #0
 8002064:	2100      	movs	r1, #0
 8002066:	2026      	movs	r0, #38	@ 0x26
 8002068:	f001 fbbd 	bl	80037e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800206c:	2026      	movs	r0, #38	@ 0x26
 800206e:	f001 fbd4 	bl	800381a <HAL_NVIC_EnableIRQ>
}
 8002072:	bf00      	nop
 8002074:	3778      	adds	r7, #120	@ 0x78
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	40013800 	.word	0x40013800
 8002080:	40021000 	.word	0x40021000
 8002084:	48000400 	.word	0x48000400
 8002088:	40004400 	.word	0x40004400
 800208c:	20002034 	.word	0x20002034
 8002090:	40020008 	.word	0x40020008

08002094 <Reset_Handler>:
 8002094:	480d      	ldr	r0, [pc, #52]	@ (80020cc <LoopForever+0x2>)
 8002096:	4685      	mov	sp, r0
 8002098:	f7ff fc06 	bl	80018a8 <SystemInit>
 800209c:	480c      	ldr	r0, [pc, #48]	@ (80020d0 <LoopForever+0x6>)
 800209e:	490d      	ldr	r1, [pc, #52]	@ (80020d4 <LoopForever+0xa>)
 80020a0:	4a0d      	ldr	r2, [pc, #52]	@ (80020d8 <LoopForever+0xe>)
 80020a2:	2300      	movs	r3, #0
 80020a4:	e002      	b.n	80020ac <LoopCopyDataInit>

080020a6 <CopyDataInit>:
 80020a6:	58d4      	ldr	r4, [r2, r3]
 80020a8:	50c4      	str	r4, [r0, r3]
 80020aa:	3304      	adds	r3, #4

080020ac <LoopCopyDataInit>:
 80020ac:	18c4      	adds	r4, r0, r3
 80020ae:	428c      	cmp	r4, r1
 80020b0:	d3f9      	bcc.n	80020a6 <CopyDataInit>
 80020b2:	4a0a      	ldr	r2, [pc, #40]	@ (80020dc <LoopForever+0x12>)
 80020b4:	4c0a      	ldr	r4, [pc, #40]	@ (80020e0 <LoopForever+0x16>)
 80020b6:	2300      	movs	r3, #0
 80020b8:	e001      	b.n	80020be <LoopFillZerobss>

080020ba <FillZerobss>:
 80020ba:	6013      	str	r3, [r2, #0]
 80020bc:	3204      	adds	r2, #4

080020be <LoopFillZerobss>:
 80020be:	42a2      	cmp	r2, r4
 80020c0:	d3fb      	bcc.n	80020ba <FillZerobss>
 80020c2:	f007 f90b 	bl	80092dc <__libc_init_array>
 80020c6:	f7ff f9c3 	bl	8001450 <main>

080020ca <LoopForever>:
 80020ca:	e7fe      	b.n	80020ca <LoopForever>
 80020cc:	20008000 	.word	0x20008000
 80020d0:	20000000 	.word	0x20000000
 80020d4:	200001d4 	.word	0x200001d4
 80020d8:	0800ce20 	.word	0x0800ce20
 80020dc:	200001d4 	.word	0x200001d4
 80020e0:	200021e4 	.word	0x200021e4

080020e4 <ADC1_2_IRQHandler>:
 80020e4:	e7fe      	b.n	80020e4 <ADC1_2_IRQHandler>

080020e6 <extract_uint16>:
 * @brief Extract a 16-bit unsigned integer from the byte stream.
 *
 * @param data Pointer to the byte stream.
 * @return Extracted 16-bit unsigned integer.
 */
static uint16_t extract_uint16(const uint8_t *data) {
 80020e6:	b480      	push	{r7}
 80020e8:	b083      	sub	sp, #12
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
	return (data[1] << 8) | data[0];
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	3301      	adds	r3, #1
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	021b      	lsls	r3, r3, #8
 80020f6:	b21a      	sxth	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	b21b      	sxth	r3, r3
 80020fe:	4313      	orrs	r3, r2
 8002100:	b21b      	sxth	r3, r3
 8002102:	b29b      	uxth	r3, r3
}
 8002104:	4618      	mov	r0, r3
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <YLIDARX2_InitDMA>:

void YLIDARX2_InitDMA(h_YLIDARX2_t *lidar, UART_HandleTypeDef *huart) {
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
	lidar->uart = huart;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	601a      	str	r2, [r3, #0]
	lidar->currentIndex = 0;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	f8a3 23ec 	strh.w	r2, [r3, #1004]	@ 0x3ec
	lidar->pointIndex = 0;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800212e:	2200      	movs	r2, #0
 8002130:	f8a3 2b60 	strh.w	r2, [r3, #2912]	@ 0xb60
	memset(lidar->dmaBuffer, 0, sizeof(lidar->dmaBuffer));
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	3304      	adds	r3, #4
 8002138:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800213c:	2100      	movs	r1, #0
 800213e:	4618      	mov	r0, r3
 8002140:	f007 f874 	bl	800922c <memset>

	HAL_UART_Abort(lidar->uart);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4618      	mov	r0, r3
 800214a:	f004 fb3b 	bl	80067c4 <HAL_UART_Abort>
	HAL_UART_Receive_DMA(lidar->uart, lidar->dmaBuffer, YLIDARX2_DMA_BUFFER_SIZE);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6818      	ldr	r0, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	3304      	adds	r3, #4
 8002156:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800215a:	4619      	mov	r1, r3
 800215c:	f004 fa50 	bl	8006600 <HAL_UART_Receive_DMA>

	DEBUG_PRINT("YLIDARX2 DMA Initialized\r\n");
 8002160:	4803      	ldr	r0, [pc, #12]	@ (8002170 <YLIDARX2_InitDMA+0x60>)
 8002162:	f006 ff63 	bl	800902c <puts>
}
 8002166:	bf00      	nop
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	0800c92c 	.word	0x0800c92c

08002174 <YLIDARX2_RestartDMA>:

void YLIDARX2_RestartDMA(h_YLIDARX2_t *lidar) {
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
	HAL_UART_Abort(lidar->uart);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4618      	mov	r0, r3
 8002182:	f004 fb1f 	bl	80067c4 <HAL_UART_Abort>
	HAL_UART_DMAStop(lidar->uart);                          // STOP Uart
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4618      	mov	r0, r3
 800218c:	f004 fa84 	bl	8006698 <HAL_UART_DMAStop>
	MX_USART2_UART_Init();                              	// INIT Uart
 8002190:	f7ff fe48 	bl	8001e24 <MX_USART2_UART_Init>
	__HAL_UART_CLEAR_IDLEFLAG(lidar->uart);                 // Clear Idle IT-Flag
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2210      	movs	r2, #16
 800219c:	621a      	str	r2, [r3, #32]
	__HAL_UART_ENABLE_IT(lidar->uart, UART_IT_IDLE);        // Enable Idle Interrupt
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f042 0210 	orr.w	r2, r2, #16
 80021b0:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(lidar->uart, lidar->dmaBuffer, YLIDARX2_DMA_BUFFER_SIZE);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6818      	ldr	r0, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	3304      	adds	r3, #4
 80021ba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80021be:	4619      	mov	r1, r3
 80021c0:	f004 fa1e 	bl	8006600 <HAL_UART_Receive_DMA>
}
 80021c4:	bf00      	nop
 80021c6:	3708      	adds	r7, #8
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <YLIDARX2_ProcessDMAHalfComplete>:

void YLIDARX2_ProcessDMAHalfComplete(h_YLIDARX2_t *lidar) {
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
	YLIDARX2_ProcessBuffer(lidar, 0, YLIDARX2_DMA_BUFFER_SIZE / 2);
 80021d4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80021d8:	2100      	movs	r1, #0
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 f814 	bl	8002208 <YLIDARX2_ProcessBuffer>
}
 80021e0:	bf00      	nop
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <YLIDARX2_ProcessDMAComplete>:

void YLIDARX2_ProcessDMAComplete(h_YLIDARX2_t *lidar) {
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
	YLIDARX2_ProcessBuffer(lidar, YLIDARX2_DMA_BUFFER_SIZE / 2, YLIDARX2_DMA_BUFFER_SIZE);
 80021f0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80021f4:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f000 f805 	bl	8002208 <YLIDARX2_ProcessBuffer>
}
 80021fe:	bf00      	nop
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
	...

08002208 <YLIDARX2_ProcessBuffer>:

void YLIDARX2_ProcessBuffer(h_YLIDARX2_t *lidar, uint16_t start, uint16_t end) {
 8002208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800220c:	b090      	sub	sp, #64	@ 0x40
 800220e:	af04      	add	r7, sp, #16
 8002210:	6078      	str	r0, [r7, #4]
 8002212:	460b      	mov	r3, r1
 8002214:	807b      	strh	r3, [r7, #2]
 8002216:	4613      	mov	r3, r2
 8002218:	803b      	strh	r3, [r7, #0]
	for (uint16_t i = start; i < end - FRAME_LENGTH_MIN; ) {
 800221a:	887b      	ldrh	r3, [r7, #2]
 800221c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800221e:	e16e      	b.n	80024fe <YLIDARX2_ProcessBuffer+0x2f6>
		uint16_t header = extract_uint16(&lidar->dmaBuffer[i]);
 8002220:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	4413      	add	r3, r2
 8002226:	3304      	adds	r3, #4
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff ff5c 	bl	80020e6 <extract_uint16>
 800222e:	4603      	mov	r3, r0
 8002230:	84fb      	strh	r3, [r7, #38]	@ 0x26

		if (header == PACKET_HEADER) {
 8002232:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002234:	f245 52aa 	movw	r2, #21930	@ 0x55aa
 8002238:	4293      	cmp	r3, r2
 800223a:	f040 815d 	bne.w	80024f8 <YLIDARX2_ProcessBuffer+0x2f0>
			uint8_t ct = lidar->dmaBuffer[i + 2];
 800223e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002240:	3302      	adds	r3, #2
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	4413      	add	r3, r2
 8002246:	791b      	ldrb	r3, [r3, #4]
 8002248:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			uint8_t lsn = lidar->dmaBuffer[i + 3];
 800224c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800224e:	3303      	adds	r3, #3
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	4413      	add	r3, r2
 8002254:	791b      	ldrb	r3, [r3, #4]
 8002256:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
			uint16_t fsa = extract_uint16(&lidar->dmaBuffer[i + 4]);
 800225a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800225c:	3304      	adds	r3, #4
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	4413      	add	r3, r2
 8002262:	3304      	adds	r3, #4
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff ff3e 	bl	80020e6 <extract_uint16>
 800226a:	4603      	mov	r3, r0
 800226c:	847b      	strh	r3, [r7, #34]	@ 0x22
			uint16_t lsa = extract_uint16(&lidar->dmaBuffer[i + 6]);
 800226e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002270:	3306      	adds	r3, #6
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	4413      	add	r3, r2
 8002276:	3304      	adds	r3, #4
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff ff34 	bl	80020e6 <extract_uint16>
 800227e:	4603      	mov	r3, r0
 8002280:	843b      	strh	r3, [r7, #32]
			uint16_t checksum = extract_uint16(&lidar->dmaBuffer[i + 8 + (lsn * 2)]);
 8002282:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002284:	f103 0208 	add.w	r2, r3, #8
 8002288:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	4413      	add	r3, r2
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	4413      	add	r3, r2
 8002294:	3304      	adds	r3, #4
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff ff25 	bl	80020e6 <extract_uint16>
 800229c:	4603      	mov	r3, r0
 800229e:	83fb      	strh	r3, [r7, #30]

			uint16_t calculatedChecksum = 0;
 80022a0:	2300      	movs	r3, #0
 80022a2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
			for (uint16_t j = i; j < i + 8 + (lsn * 2); j++) {
 80022a4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80022a6:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80022a8:	e00a      	b.n	80022c0 <YLIDARX2_ProcessBuffer+0xb8>
				calculatedChecksum ^= lidar->dmaBuffer[j];
 80022aa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	4413      	add	r3, r2
 80022b0:	791b      	ldrb	r3, [r3, #4]
 80022b2:	461a      	mov	r2, r3
 80022b4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80022b6:	4053      	eors	r3, r2
 80022b8:	85bb      	strh	r3, [r7, #44]	@ 0x2c
			for (uint16_t j = i; j < i + 8 + (lsn * 2); j++) {
 80022ba:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80022bc:	3301      	adds	r3, #1
 80022be:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80022c0:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80022c2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80022c4:	f103 0108 	add.w	r1, r3, #8
 80022c8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	440b      	add	r3, r1
 80022d0:	429a      	cmp	r2, r3
 80022d2:	dbea      	blt.n	80022aa <YLIDARX2_ProcessBuffer+0xa2>
			}

			if (calculatedChecksum == checksum) {
 80022d4:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80022d6:	8bfb      	ldrh	r3, [r7, #30]
 80022d8:	429a      	cmp	r2, r3
 80022da:	f040 8104 	bne.w	80024e6 <YLIDARX2_ProcessBuffer+0x2de>
				float startAngle = (fsa >> 1) / 64.0f;
 80022de:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80022e0:	085b      	lsrs	r3, r3, #1
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	ee07 3a90 	vmov	s15, r3
 80022e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022ec:	eddf 6a8a 	vldr	s13, [pc, #552]	@ 8002518 <YLIDARX2_ProcessBuffer+0x310>
 80022f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022f4:	edc7 7a06 	vstr	s15, [r7, #24]
				float endAngle = (lsa >> 1) / 64.0f;
 80022f8:	8c3b      	ldrh	r3, [r7, #32]
 80022fa:	085b      	lsrs	r3, r3, #1
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	ee07 3a90 	vmov	s15, r3
 8002302:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002306:	eddf 6a84 	vldr	s13, [pc, #528]	@ 8002518 <YLIDARX2_ProcessBuffer+0x310>
 800230a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800230e:	edc7 7a05 	vstr	s15, [r7, #20]
				float angleIncrement = (endAngle - startAngle) / (lsn - 1);
 8002312:	ed97 7a05 	vldr	s14, [r7, #20]
 8002316:	edd7 7a06 	vldr	s15, [r7, #24]
 800231a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800231e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002322:	3b01      	subs	r3, #1
 8002324:	ee07 3a90 	vmov	s15, r3
 8002328:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800232c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002330:	edc7 7a04 	vstr	s15, [r7, #16]

				for (uint8_t j = 0; j < lsn; j++) {
 8002334:	2300      	movs	r3, #0
 8002336:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 800233a:	e0c3      	b.n	80024c4 <YLIDARX2_ProcessBuffer+0x2bc>
					if (lidar->pointIndex >= YLIDARX2_MAX_POINTS) {
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002342:	f8b3 3b60 	ldrh.w	r3, [r3, #2912]	@ 0xb60
 8002346:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800234a:	d305      	bcc.n	8002358 <YLIDARX2_ProcessBuffer+0x150>
						lidar->pointIndex = 0;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002352:	2200      	movs	r2, #0
 8002354:	f8a3 2b60 	strh.w	r2, [r3, #2912]	@ 0xb60
					}

					uint16_t distance = extract_uint16(&lidar->dmaBuffer[i + 8 + (j * 2)]);
 8002358:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800235a:	f103 0208 	add.w	r2, r3, #8
 800235e:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	4413      	add	r3, r2
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	4413      	add	r3, r2
 800236a:	3304      	adds	r3, #4
 800236c:	4618      	mov	r0, r3
 800236e:	f7ff feba 	bl	80020e6 <extract_uint16>
 8002372:	4603      	mov	r3, r0
 8002374:	81fb      	strh	r3, [r7, #14]
					float angle = startAngle + (j * angleIncrement) - 180;
 8002376:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800237a:	ee07 3a90 	vmov	s15, r3
 800237e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002382:	edd7 7a04 	vldr	s15, [r7, #16]
 8002386:	ee27 7a27 	vmul.f32	s14, s14, s15
 800238a:	edd7 7a06 	vldr	s15, [r7, #24]
 800238e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002392:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 800251c <YLIDARX2_ProcessBuffer+0x314>
 8002396:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800239a:	edc7 7a02 	vstr	s15, [r7, #8]
					lidar->points[lidar->pointIndex].angle = angle;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023a4:	f8b3 3b60 	ldrh.w	r3, [r3, #2912]	@ 0xb60
 80023a8:	4619      	mov	r1, r3
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	460b      	mov	r3, r1
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	440b      	add	r3, r1
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	4413      	add	r3, r2
 80023b6:	f503 737c 	add.w	r3, r3, #1008	@ 0x3f0
 80023ba:	68ba      	ldr	r2, [r7, #8]
 80023bc:	601a      	str	r2, [r3, #0]
					lidar->points[lidar->pointIndex].distance = distance / 4.0f;
 80023be:	89fb      	ldrh	r3, [r7, #14]
 80023c0:	ee07 3a90 	vmov	s15, r3
 80023c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023ce:	f8b3 3b60 	ldrh.w	r3, [r3, #2912]	@ 0xb60
 80023d2:	4619      	mov	r1, r3
 80023d4:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80023d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	460b      	mov	r3, r1
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	440b      	add	r3, r1
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	4413      	add	r3, r2
 80023e8:	f503 737d 	add.w	r3, r3, #1012	@ 0x3f4
 80023ec:	edc3 7a00 	vstr	s15, [r3]
					lidar->points[lidar->pointIndex].intensity = (distance & 0x01) ? 1 : 0;
 80023f0:	89fb      	ldrh	r3, [r7, #14]
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80023fa:	f8b2 2b60 	ldrh.w	r2, [r2, #2912]	@ 0xb60
 80023fe:	4611      	mov	r1, r2
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	b2d8      	uxtb	r0, r3
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	460b      	mov	r3, r1
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	440b      	add	r3, r1
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	4413      	add	r3, r2
 8002412:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 8002416:	4602      	mov	r2, r0
 8002418:	701a      	strb	r2, [r3, #0]

					DEBUG_PRINT("Point %d: Angle %.2f°, Distance %.2f mm, Intensity %u\r\n",
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002420:	f8b3 3b60 	ldrh.w	r3, [r3, #2912]	@ 0xb60
 8002424:	4698      	mov	r8, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800242c:	f8b3 3b60 	ldrh.w	r3, [r3, #2912]	@ 0xb60
 8002430:	4619      	mov	r1, r3
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	460b      	mov	r3, r1
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	440b      	add	r3, r1
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4413      	add	r3, r2
 800243e:	f503 737c 	add.w	r3, r3, #1008	@ 0x3f0
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4618      	mov	r0, r3
 8002446:	f7fe f8a7 	bl	8000598 <__aeabi_f2d>
 800244a:	4604      	mov	r4, r0
 800244c:	460d      	mov	r5, r1
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002454:	f8b3 3b60 	ldrh.w	r3, [r3, #2912]	@ 0xb60
 8002458:	4619      	mov	r1, r3
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	460b      	mov	r3, r1
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	440b      	add	r3, r1
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	4413      	add	r3, r2
 8002466:	f503 737d 	add.w	r3, r3, #1012	@ 0x3f4
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4618      	mov	r0, r3
 800246e:	f7fe f893 	bl	8000598 <__aeabi_f2d>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002478:	f8b3 3b60 	ldrh.w	r3, [r3, #2912]	@ 0xb60
 800247c:	461e      	mov	r6, r3
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	4633      	mov	r3, r6
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	4433      	add	r3, r6
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	4413      	add	r3, r2
 800248a:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	9302      	str	r3, [sp, #8]
 8002492:	e9cd 0100 	strd	r0, r1, [sp]
 8002496:	4622      	mov	r2, r4
 8002498:	462b      	mov	r3, r5
 800249a:	4641      	mov	r1, r8
 800249c:	4820      	ldr	r0, [pc, #128]	@ (8002520 <YLIDARX2_ProcessBuffer+0x318>)
 800249e:	f006 fd5d 	bl	8008f5c <iprintf>
							lidar->pointIndex,
							lidar->points[lidar->pointIndex].angle,
							lidar->points[lidar->pointIndex].distance,
							lidar->points[lidar->pointIndex].intensity);

					lidar->pointIndex++;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024a8:	f8b3 3b60 	ldrh.w	r3, [r3, #2912]	@ 0xb60
 80024ac:	3301      	adds	r3, #1
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024b6:	f8a3 2b60 	strh.w	r2, [r3, #2912]	@ 0xb60
				for (uint8_t j = 0; j < lsn; j++) {
 80024ba:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80024be:	3301      	adds	r3, #1
 80024c0:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 80024c4:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 80024c8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80024cc:	429a      	cmp	r2, r3
 80024ce:	f4ff af35 	bcc.w	800233c <YLIDARX2_ProcessBuffer+0x134>
				}

				i += 10 + (lsn * 2); // Move to next packet
 80024d2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80024d6:	3305      	adds	r3, #5
 80024d8:	b29b      	uxth	r3, r3
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	b29a      	uxth	r2, r3
 80024de:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80024e0:	4413      	add	r3, r2
 80024e2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80024e4:	e00b      	b.n	80024fe <YLIDARX2_ProcessBuffer+0x2f6>
			} else {
				DEBUG_PRINT("Checksum failed at index %d\r\n", i);
 80024e6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80024e8:	4619      	mov	r1, r3
 80024ea:	480e      	ldr	r0, [pc, #56]	@ (8002524 <YLIDARX2_ProcessBuffer+0x31c>)
 80024ec:	f006 fd36 	bl	8008f5c <iprintf>
				i++;
 80024f0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80024f2:	3301      	adds	r3, #1
 80024f4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80024f6:	e002      	b.n	80024fe <YLIDARX2_ProcessBuffer+0x2f6>
			}
		} else {
			i++;
 80024f8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80024fa:	3301      	adds	r3, #1
 80024fc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	for (uint16_t i = start; i < end - FRAME_LENGTH_MIN; ) {
 80024fe:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8002500:	883b      	ldrh	r3, [r7, #0]
 8002502:	3b07      	subs	r3, #7
 8002504:	429a      	cmp	r2, r3
 8002506:	f6ff ae8b 	blt.w	8002220 <YLIDARX2_ProcessBuffer+0x18>
		}
	}
}
 800250a:	bf00      	nop
 800250c:	bf00      	nop
 800250e:	3730      	adds	r7, #48	@ 0x30
 8002510:	46bd      	mov	sp, r7
 8002512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002516:	bf00      	nop
 8002518:	42800000 	.word	0x42800000
 800251c:	43340000 	.word	0x43340000
 8002520:	0800c948 	.word	0x0800c948
 8002524:	0800c984 	.word	0x0800c984

08002528 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800252e:	2300      	movs	r3, #0
 8002530:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002532:	2003      	movs	r0, #3
 8002534:	f001 f94c 	bl	80037d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002538:	200f      	movs	r0, #15
 800253a:	f000 f80d 	bl	8002558 <HAL_InitTick>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d002      	beq.n	800254a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	71fb      	strb	r3, [r7, #7]
 8002548:	e001      	b.n	800254e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800254a:	f7ff f87f 	bl	800164c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800254e:	79fb      	ldrb	r3, [r7, #7]

}
 8002550:	4618      	mov	r0, r3
 8002552:	3708      	adds	r7, #8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002560:	2300      	movs	r3, #0
 8002562:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002564:	4b16      	ldr	r3, [pc, #88]	@ (80025c0 <HAL_InitTick+0x68>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d022      	beq.n	80025b2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800256c:	4b15      	ldr	r3, [pc, #84]	@ (80025c4 <HAL_InitTick+0x6c>)
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	4b13      	ldr	r3, [pc, #76]	@ (80025c0 <HAL_InitTick+0x68>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002578:	fbb1 f3f3 	udiv	r3, r1, r3
 800257c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002580:	4618      	mov	r0, r3
 8002582:	f001 f958 	bl	8003836 <HAL_SYSTICK_Config>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d10f      	bne.n	80025ac <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b0f      	cmp	r3, #15
 8002590:	d809      	bhi.n	80025a6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002592:	2200      	movs	r2, #0
 8002594:	6879      	ldr	r1, [r7, #4]
 8002596:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800259a:	f001 f924 	bl	80037e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800259e:	4a0a      	ldr	r2, [pc, #40]	@ (80025c8 <HAL_InitTick+0x70>)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6013      	str	r3, [r2, #0]
 80025a4:	e007      	b.n	80025b6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	73fb      	strb	r3, [r7, #15]
 80025aa:	e004      	b.n	80025b6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	73fb      	strb	r3, [r7, #15]
 80025b0:	e001      	b.n	80025b6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80025b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3710      	adds	r7, #16
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	20000008 	.word	0x20000008
 80025c4:	20000000 	.word	0x20000000
 80025c8:	20000004 	.word	0x20000004

080025cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025d0:	4b05      	ldr	r3, [pc, #20]	@ (80025e8 <HAL_IncTick+0x1c>)
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	4b05      	ldr	r3, [pc, #20]	@ (80025ec <HAL_IncTick+0x20>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4413      	add	r3, r2
 80025da:	4a03      	ldr	r2, [pc, #12]	@ (80025e8 <HAL_IncTick+0x1c>)
 80025dc:	6013      	str	r3, [r2, #0]
}
 80025de:	bf00      	nop
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr
 80025e8:	20002094 	.word	0x20002094
 80025ec:	20000008 	.word	0x20000008

080025f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  return uwTick;
 80025f4:	4b03      	ldr	r3, [pc, #12]	@ (8002604 <HAL_GetTick+0x14>)
 80025f6:	681b      	ldr	r3, [r3, #0]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	20002094 	.word	0x20002094

08002608 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	431a      	orrs	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	609a      	str	r2, [r3, #8]
}
 8002622:	bf00      	nop
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr

0800262e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800262e:	b480      	push	{r7}
 8002630:	b083      	sub	sp, #12
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
 8002636:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	431a      	orrs	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	609a      	str	r2, [r3, #8]
}
 8002648:	bf00      	nop
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002664:	4618      	mov	r0, r3
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002670:	b480      	push	{r7}
 8002672:	b087      	sub	sp, #28
 8002674:	af00      	add	r7, sp, #0
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	607a      	str	r2, [r7, #4]
 800267c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	3360      	adds	r3, #96	@ 0x60
 8002682:	461a      	mov	r2, r3
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	4413      	add	r3, r2
 800268a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	4b08      	ldr	r3, [pc, #32]	@ (80026b4 <LL_ADC_SetOffset+0x44>)
 8002692:	4013      	ands	r3, r2
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	430a      	orrs	r2, r1
 800269e:	4313      	orrs	r3, r2
 80026a0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80026a8:	bf00      	nop
 80026aa:	371c      	adds	r7, #28
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr
 80026b4:	03fff000 	.word	0x03fff000

080026b8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	3360      	adds	r3, #96	@ 0x60
 80026c6:	461a      	mov	r2, r3
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	4413      	add	r3, r2
 80026ce:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3714      	adds	r7, #20
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b087      	sub	sp, #28
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	3360      	adds	r3, #96	@ 0x60
 80026f4:	461a      	mov	r2, r3
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	4413      	add	r3, r2
 80026fc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	431a      	orrs	r2, r3
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800270e:	bf00      	nop
 8002710:	371c      	adds	r7, #28
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr

0800271a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800271a:	b480      	push	{r7}
 800271c:	b087      	sub	sp, #28
 800271e:	af00      	add	r7, sp, #0
 8002720:	60f8      	str	r0, [r7, #12]
 8002722:	60b9      	str	r1, [r7, #8]
 8002724:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	3360      	adds	r3, #96	@ 0x60
 800272a:	461a      	mov	r2, r3
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	4413      	add	r3, r2
 8002732:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	431a      	orrs	r2, r3
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002744:	bf00      	nop
 8002746:	371c      	adds	r7, #28
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002750:	b480      	push	{r7}
 8002752:	b087      	sub	sp, #28
 8002754:	af00      	add	r7, sp, #0
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	3360      	adds	r3, #96	@ 0x60
 8002760:	461a      	mov	r2, r3
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	4413      	add	r3, r2
 8002768:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	431a      	orrs	r2, r3
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800277a:	bf00      	nop
 800277c:	371c      	adds	r7, #28
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr

08002786 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002786:	b480      	push	{r7}
 8002788:	b083      	sub	sp, #12
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
 800278e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	695b      	ldr	r3, [r3, #20]
 8002794:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	431a      	orrs	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	615a      	str	r2, [r3, #20]
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b087      	sub	sp, #28
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	3330      	adds	r3, #48	@ 0x30
 80027bc:	461a      	mov	r2, r3
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	0a1b      	lsrs	r3, r3, #8
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	f003 030c 	and.w	r3, r3, #12
 80027c8:	4413      	add	r3, r2
 80027ca:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	f003 031f 	and.w	r3, r3, #31
 80027d6:	211f      	movs	r1, #31
 80027d8:	fa01 f303 	lsl.w	r3, r1, r3
 80027dc:	43db      	mvns	r3, r3
 80027de:	401a      	ands	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	0e9b      	lsrs	r3, r3, #26
 80027e4:	f003 011f 	and.w	r1, r3, #31
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	f003 031f 	and.w	r3, r3, #31
 80027ee:	fa01 f303 	lsl.w	r3, r1, r3
 80027f2:	431a      	orrs	r2, r3
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80027f8:	bf00      	nop
 80027fa:	371c      	adds	r7, #28
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002804:	b480      	push	{r7}
 8002806:	b087      	sub	sp, #28
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	3314      	adds	r3, #20
 8002814:	461a      	mov	r2, r3
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	0e5b      	lsrs	r3, r3, #25
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	f003 0304 	and.w	r3, r3, #4
 8002820:	4413      	add	r3, r2
 8002822:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	0d1b      	lsrs	r3, r3, #20
 800282c:	f003 031f 	and.w	r3, r3, #31
 8002830:	2107      	movs	r1, #7
 8002832:	fa01 f303 	lsl.w	r3, r1, r3
 8002836:	43db      	mvns	r3, r3
 8002838:	401a      	ands	r2, r3
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	0d1b      	lsrs	r3, r3, #20
 800283e:	f003 031f 	and.w	r3, r3, #31
 8002842:	6879      	ldr	r1, [r7, #4]
 8002844:	fa01 f303 	lsl.w	r3, r1, r3
 8002848:	431a      	orrs	r2, r3
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800284e:	bf00      	nop
 8002850:	371c      	adds	r7, #28
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
	...

0800285c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002874:	43db      	mvns	r3, r3
 8002876:	401a      	ands	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f003 0318 	and.w	r3, r3, #24
 800287e:	4908      	ldr	r1, [pc, #32]	@ (80028a0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002880:	40d9      	lsrs	r1, r3
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	400b      	ands	r3, r1
 8002886:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800288a:	431a      	orrs	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002892:	bf00      	nop
 8002894:	3714      	adds	r7, #20
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	0007ffff 	.word	0x0007ffff

080028a4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80028b4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	6093      	str	r3, [r2, #8]
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80028d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80028dc:	d101      	bne.n	80028e2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80028de:	2301      	movs	r3, #1
 80028e0:	e000      	b.n	80028e4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002900:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002904:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002928:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800292c:	d101      	bne.n	8002932 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800292e:	2301      	movs	r3, #1
 8002930:	e000      	b.n	8002934 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f003 0301 	and.w	r3, r3, #1
 8002950:	2b01      	cmp	r3, #1
 8002952:	d101      	bne.n	8002958 <LL_ADC_IsEnabled+0x18>
 8002954:	2301      	movs	r3, #1
 8002956:	e000      	b.n	800295a <LL_ADC_IsEnabled+0x1a>
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr

08002966 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002966:	b480      	push	{r7}
 8002968:	b083      	sub	sp, #12
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f003 0304 	and.w	r3, r3, #4
 8002976:	2b04      	cmp	r3, #4
 8002978:	d101      	bne.n	800297e <LL_ADC_REG_IsConversionOngoing+0x18>
 800297a:	2301      	movs	r3, #1
 800297c:	e000      	b.n	8002980 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f003 0308 	and.w	r3, r3, #8
 800299c:	2b08      	cmp	r3, #8
 800299e:	d101      	bne.n	80029a4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80029a0:	2301      	movs	r3, #1
 80029a2:	e000      	b.n	80029a6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
	...

080029b4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80029b4:	b590      	push	{r4, r7, lr}
 80029b6:	b089      	sub	sp, #36	@ 0x24
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029bc:	2300      	movs	r3, #0
 80029be:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80029c0:	2300      	movs	r3, #0
 80029c2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d101      	bne.n	80029ce <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e167      	b.n	8002c9e <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	695b      	ldr	r3, [r3, #20]
 80029d2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d109      	bne.n	80029f0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f7fe fba1 	bl	8001124 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7ff ff67 	bl	80028c8 <LL_ADC_IsDeepPowerDownEnabled>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d004      	beq.n	8002a0a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff ff4d 	bl	80028a4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7ff ff82 	bl	8002918 <LL_ADC_IsInternalRegulatorEnabled>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d115      	bne.n	8002a46 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7ff ff66 	bl	80028f0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a24:	4ba0      	ldr	r3, [pc, #640]	@ (8002ca8 <HAL_ADC_Init+0x2f4>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	099b      	lsrs	r3, r3, #6
 8002a2a:	4aa0      	ldr	r2, [pc, #640]	@ (8002cac <HAL_ADC_Init+0x2f8>)
 8002a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a30:	099b      	lsrs	r3, r3, #6
 8002a32:	3301      	adds	r3, #1
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002a38:	e002      	b.n	8002a40 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1f9      	bne.n	8002a3a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff ff64 	bl	8002918 <LL_ADC_IsInternalRegulatorEnabled>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d10d      	bne.n	8002a72 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a5a:	f043 0210 	orr.w	r2, r3, #16
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a66:	f043 0201 	orr.w	r2, r3, #1
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7ff ff75 	bl	8002966 <LL_ADC_REG_IsConversionOngoing>
 8002a7c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a82:	f003 0310 	and.w	r3, r3, #16
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f040 8100 	bne.w	8002c8c <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f040 80fc 	bne.w	8002c8c <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a98:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002a9c:	f043 0202 	orr.w	r2, r3, #2
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7ff ff49 	bl	8002940 <LL_ADC_IsEnabled>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d111      	bne.n	8002ad8 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ab4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002ab8:	f7ff ff42 	bl	8002940 <LL_ADC_IsEnabled>
 8002abc:	4604      	mov	r4, r0
 8002abe:	487c      	ldr	r0, [pc, #496]	@ (8002cb0 <HAL_ADC_Init+0x2fc>)
 8002ac0:	f7ff ff3e 	bl	8002940 <LL_ADC_IsEnabled>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	4323      	orrs	r3, r4
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d105      	bne.n	8002ad8 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	4878      	ldr	r0, [pc, #480]	@ (8002cb4 <HAL_ADC_Init+0x300>)
 8002ad4:	f7ff fd98 	bl	8002608 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	7f5b      	ldrb	r3, [r3, #29]
 8002adc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ae2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002ae8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002aee:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002af6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002af8:	4313      	orrs	r3, r2
 8002afa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d106      	bne.n	8002b14 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	045b      	lsls	r3, r3, #17
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d009      	beq.n	8002b30 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b20:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b28:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b2a:	69ba      	ldr	r2, [r7, #24]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68da      	ldr	r2, [r3, #12]
 8002b36:	4b60      	ldr	r3, [pc, #384]	@ (8002cb8 <HAL_ADC_Init+0x304>)
 8002b38:	4013      	ands	r3, r2
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	6812      	ldr	r2, [r2, #0]
 8002b3e:	69b9      	ldr	r1, [r7, #24]
 8002b40:	430b      	orrs	r3, r1
 8002b42:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	430a      	orrs	r2, r1
 8002b58:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7ff ff14 	bl	800298c <LL_ADC_INJ_IsConversionOngoing>
 8002b64:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d16d      	bne.n	8002c48 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d16a      	bne.n	8002c48 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b76:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002b7e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b80:	4313      	orrs	r3, r2
 8002b82:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002b8e:	f023 0302 	bic.w	r3, r3, #2
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	6812      	ldr	r2, [r2, #0]
 8002b96:	69b9      	ldr	r1, [r7, #24]
 8002b98:	430b      	orrs	r3, r1
 8002b9a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d017      	beq.n	8002bd4 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	691a      	ldr	r2, [r3, #16]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002bb2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002bbc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002bc0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	6911      	ldr	r1, [r2, #16]
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	6812      	ldr	r2, [r2, #0]
 8002bcc:	430b      	orrs	r3, r1
 8002bce:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002bd2:	e013      	b.n	8002bfc <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	691a      	ldr	r2, [r3, #16]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002be2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	6812      	ldr	r2, [r2, #0]
 8002bf0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002bf4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002bf8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d118      	bne.n	8002c38 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002c10:	f023 0304 	bic.w	r3, r3, #4
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002c1c:	4311      	orrs	r1, r2
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002c22:	4311      	orrs	r1, r2
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	431a      	orrs	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f042 0201 	orr.w	r2, r2, #1
 8002c34:	611a      	str	r2, [r3, #16]
 8002c36:	e007      	b.n	8002c48 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	691a      	ldr	r2, [r3, #16]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f022 0201 	bic.w	r2, r2, #1
 8002c46:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	695b      	ldr	r3, [r3, #20]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d10c      	bne.n	8002c6a <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c56:	f023 010f 	bic.w	r1, r3, #15
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a1b      	ldr	r3, [r3, #32]
 8002c5e:	1e5a      	subs	r2, r3, #1
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	430a      	orrs	r2, r1
 8002c66:	631a      	str	r2, [r3, #48]	@ 0x30
 8002c68:	e007      	b.n	8002c7a <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f022 020f 	bic.w	r2, r2, #15
 8002c78:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c7e:	f023 0303 	bic.w	r3, r3, #3
 8002c82:	f043 0201 	orr.w	r2, r3, #1
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002c8a:	e007      	b.n	8002c9c <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c90:	f043 0210 	orr.w	r2, r3, #16
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c9c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3724      	adds	r7, #36	@ 0x24
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd90      	pop	{r4, r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	20000000 	.word	0x20000000
 8002cac:	053e2d63 	.word	0x053e2d63
 8002cb0:	50000100 	.word	0x50000100
 8002cb4:	50000300 	.word	0x50000300
 8002cb8:	fff04007 	.word	0xfff04007

08002cbc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b0b6      	sub	sp, #216	@ 0xd8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d101      	bne.n	8002cde <HAL_ADC_ConfigChannel+0x22>
 8002cda:	2302      	movs	r3, #2
 8002cdc:	e3c8      	b.n	8003470 <HAL_ADC_ConfigChannel+0x7b4>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7ff fe3b 	bl	8002966 <LL_ADC_REG_IsConversionOngoing>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f040 83ad 	bne.w	8003452 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6818      	ldr	r0, [r3, #0]
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	6859      	ldr	r1, [r3, #4]
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	461a      	mov	r2, r3
 8002d06:	f7ff fd51 	bl	80027ac <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7ff fe29 	bl	8002966 <LL_ADC_REG_IsConversionOngoing>
 8002d14:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7ff fe35 	bl	800298c <LL_ADC_INJ_IsConversionOngoing>
 8002d22:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d26:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f040 81d9 	bne.w	80030e2 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	f040 81d4 	bne.w	80030e2 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d42:	d10f      	bne.n	8002d64 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6818      	ldr	r0, [r3, #0]
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	4619      	mov	r1, r3
 8002d50:	f7ff fd58 	bl	8002804 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7ff fd12 	bl	8002786 <LL_ADC_SetSamplingTimeCommonConfig>
 8002d62:	e00e      	b.n	8002d82 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6818      	ldr	r0, [r3, #0]
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	6819      	ldr	r1, [r3, #0]
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	461a      	mov	r2, r3
 8002d72:	f7ff fd47 	bl	8002804 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff fd02 	bl	8002786 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	695a      	ldr	r2, [r3, #20]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	08db      	lsrs	r3, r3, #3
 8002d8e:	f003 0303 	and.w	r3, r3, #3
 8002d92:	005b      	lsls	r3, r3, #1
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	2b04      	cmp	r3, #4
 8002da2:	d022      	beq.n	8002dea <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6818      	ldr	r0, [r3, #0]
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	6919      	ldr	r1, [r3, #16]
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002db4:	f7ff fc5c 	bl	8002670 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6818      	ldr	r0, [r3, #0]
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	6919      	ldr	r1, [r3, #16]
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	f7ff fca8 	bl	800271a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6818      	ldr	r0, [r3, #0]
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d102      	bne.n	8002de0 <HAL_ADC_ConfigChannel+0x124>
 8002dda:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002dde:	e000      	b.n	8002de2 <HAL_ADC_ConfigChannel+0x126>
 8002de0:	2300      	movs	r3, #0
 8002de2:	461a      	mov	r2, r3
 8002de4:	f7ff fcb4 	bl	8002750 <LL_ADC_SetOffsetSaturation>
 8002de8:	e17b      	b.n	80030e2 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2100      	movs	r1, #0
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7ff fc61 	bl	80026b8 <LL_ADC_GetOffsetChannel>
 8002df6:	4603      	mov	r3, r0
 8002df8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d10a      	bne.n	8002e16 <HAL_ADC_ConfigChannel+0x15a>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2100      	movs	r1, #0
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7ff fc56 	bl	80026b8 <LL_ADC_GetOffsetChannel>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	0e9b      	lsrs	r3, r3, #26
 8002e10:	f003 021f 	and.w	r2, r3, #31
 8002e14:	e01e      	b.n	8002e54 <HAL_ADC_ConfigChannel+0x198>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff fc4b 	bl	80026b8 <LL_ADC_GetOffsetChannel>
 8002e22:	4603      	mov	r3, r0
 8002e24:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e28:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002e2c:	fa93 f3a3 	rbit	r3, r3
 8002e30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e34:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002e38:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002e3c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d101      	bne.n	8002e48 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002e44:	2320      	movs	r3, #32
 8002e46:	e004      	b.n	8002e52 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002e48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e4c:	fab3 f383 	clz	r3, r3
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d105      	bne.n	8002e6c <HAL_ADC_ConfigChannel+0x1b0>
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	0e9b      	lsrs	r3, r3, #26
 8002e66:	f003 031f 	and.w	r3, r3, #31
 8002e6a:	e018      	b.n	8002e9e <HAL_ADC_ConfigChannel+0x1e2>
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e74:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002e78:	fa93 f3a3 	rbit	r3, r3
 8002e7c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002e80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002e88:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d101      	bne.n	8002e94 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002e90:	2320      	movs	r3, #32
 8002e92:	e004      	b.n	8002e9e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002e94:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002e98:	fab3 f383 	clz	r3, r3
 8002e9c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d106      	bne.n	8002eb0 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	2100      	movs	r1, #0
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff fc1a 	bl	80026e4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2101      	movs	r1, #1
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7ff fbfe 	bl	80026b8 <LL_ADC_GetOffsetChannel>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d10a      	bne.n	8002edc <HAL_ADC_ConfigChannel+0x220>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2101      	movs	r1, #1
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7ff fbf3 	bl	80026b8 <LL_ADC_GetOffsetChannel>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	0e9b      	lsrs	r3, r3, #26
 8002ed6:	f003 021f 	and.w	r2, r3, #31
 8002eda:	e01e      	b.n	8002f1a <HAL_ADC_ConfigChannel+0x25e>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2101      	movs	r1, #1
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7ff fbe8 	bl	80026b8 <LL_ADC_GetOffsetChannel>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002ef2:	fa93 f3a3 	rbit	r3, r3
 8002ef6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002efa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002efe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002f02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002f0a:	2320      	movs	r3, #32
 8002f0c:	e004      	b.n	8002f18 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002f0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002f12:	fab3 f383 	clz	r3, r3
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d105      	bne.n	8002f32 <HAL_ADC_ConfigChannel+0x276>
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	0e9b      	lsrs	r3, r3, #26
 8002f2c:	f003 031f 	and.w	r3, r3, #31
 8002f30:	e018      	b.n	8002f64 <HAL_ADC_ConfigChannel+0x2a8>
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f3e:	fa93 f3a3 	rbit	r3, r3
 8002f42:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002f46:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002f4a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002f4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d101      	bne.n	8002f5a <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002f56:	2320      	movs	r3, #32
 8002f58:	e004      	b.n	8002f64 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002f5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002f5e:	fab3 f383 	clz	r3, r3
 8002f62:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d106      	bne.n	8002f76 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	2101      	movs	r1, #1
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7ff fbb7 	bl	80026e4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2102      	movs	r1, #2
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7ff fb9b 	bl	80026b8 <LL_ADC_GetOffsetChannel>
 8002f82:	4603      	mov	r3, r0
 8002f84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d10a      	bne.n	8002fa2 <HAL_ADC_ConfigChannel+0x2e6>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2102      	movs	r1, #2
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7ff fb90 	bl	80026b8 <LL_ADC_GetOffsetChannel>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	0e9b      	lsrs	r3, r3, #26
 8002f9c:	f003 021f 	and.w	r2, r3, #31
 8002fa0:	e01e      	b.n	8002fe0 <HAL_ADC_ConfigChannel+0x324>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2102      	movs	r1, #2
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7ff fb85 	bl	80026b8 <LL_ADC_GetOffsetChannel>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002fb8:	fa93 f3a3 	rbit	r3, r3
 8002fbc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002fc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002fc4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002fc8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d101      	bne.n	8002fd4 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002fd0:	2320      	movs	r3, #32
 8002fd2:	e004      	b.n	8002fde <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002fd4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002fd8:	fab3 f383 	clz	r3, r3
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d105      	bne.n	8002ff8 <HAL_ADC_ConfigChannel+0x33c>
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	0e9b      	lsrs	r3, r3, #26
 8002ff2:	f003 031f 	and.w	r3, r3, #31
 8002ff6:	e016      	b.n	8003026 <HAL_ADC_ConfigChannel+0x36a>
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003000:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003004:	fa93 f3a3 	rbit	r3, r3
 8003008:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800300a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800300c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003010:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003014:	2b00      	cmp	r3, #0
 8003016:	d101      	bne.n	800301c <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8003018:	2320      	movs	r3, #32
 800301a:	e004      	b.n	8003026 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 800301c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003020:	fab3 f383 	clz	r3, r3
 8003024:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003026:	429a      	cmp	r2, r3
 8003028:	d106      	bne.n	8003038 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2200      	movs	r2, #0
 8003030:	2102      	movs	r1, #2
 8003032:	4618      	mov	r0, r3
 8003034:	f7ff fb56 	bl	80026e4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2103      	movs	r1, #3
 800303e:	4618      	mov	r0, r3
 8003040:	f7ff fb3a 	bl	80026b8 <LL_ADC_GetOffsetChannel>
 8003044:	4603      	mov	r3, r0
 8003046:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800304a:	2b00      	cmp	r3, #0
 800304c:	d10a      	bne.n	8003064 <HAL_ADC_ConfigChannel+0x3a8>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2103      	movs	r1, #3
 8003054:	4618      	mov	r0, r3
 8003056:	f7ff fb2f 	bl	80026b8 <LL_ADC_GetOffsetChannel>
 800305a:	4603      	mov	r3, r0
 800305c:	0e9b      	lsrs	r3, r3, #26
 800305e:	f003 021f 	and.w	r2, r3, #31
 8003062:	e017      	b.n	8003094 <HAL_ADC_ConfigChannel+0x3d8>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2103      	movs	r1, #3
 800306a:	4618      	mov	r0, r3
 800306c:	f7ff fb24 	bl	80026b8 <LL_ADC_GetOffsetChannel>
 8003070:	4603      	mov	r3, r0
 8003072:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003074:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003076:	fa93 f3a3 	rbit	r3, r3
 800307a:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800307c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800307e:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003080:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8003086:	2320      	movs	r3, #32
 8003088:	e003      	b.n	8003092 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800308a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800308c:	fab3 f383 	clz	r3, r3
 8003090:	b2db      	uxtb	r3, r3
 8003092:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800309c:	2b00      	cmp	r3, #0
 800309e:	d105      	bne.n	80030ac <HAL_ADC_ConfigChannel+0x3f0>
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	0e9b      	lsrs	r3, r3, #26
 80030a6:	f003 031f 	and.w	r3, r3, #31
 80030aa:	e011      	b.n	80030d0 <HAL_ADC_ConfigChannel+0x414>
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80030b4:	fa93 f3a3 	rbit	r3, r3
 80030b8:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80030ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80030bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80030be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d101      	bne.n	80030c8 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80030c4:	2320      	movs	r3, #32
 80030c6:	e003      	b.n	80030d0 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80030c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030ca:	fab3 f383 	clz	r3, r3
 80030ce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d106      	bne.n	80030e2 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2200      	movs	r2, #0
 80030da:	2103      	movs	r1, #3
 80030dc:	4618      	mov	r0, r3
 80030de:	f7ff fb01 	bl	80026e4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7ff fc2a 	bl	8002940 <LL_ADC_IsEnabled>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	f040 8140 	bne.w	8003374 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6818      	ldr	r0, [r3, #0]
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	6819      	ldr	r1, [r3, #0]
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	461a      	mov	r2, r3
 8003102:	f7ff fbab 	bl	800285c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	4a8f      	ldr	r2, [pc, #572]	@ (8003348 <HAL_ADC_ConfigChannel+0x68c>)
 800310c:	4293      	cmp	r3, r2
 800310e:	f040 8131 	bne.w	8003374 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800311e:	2b00      	cmp	r3, #0
 8003120:	d10b      	bne.n	800313a <HAL_ADC_ConfigChannel+0x47e>
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	0e9b      	lsrs	r3, r3, #26
 8003128:	3301      	adds	r3, #1
 800312a:	f003 031f 	and.w	r3, r3, #31
 800312e:	2b09      	cmp	r3, #9
 8003130:	bf94      	ite	ls
 8003132:	2301      	movls	r3, #1
 8003134:	2300      	movhi	r3, #0
 8003136:	b2db      	uxtb	r3, r3
 8003138:	e019      	b.n	800316e <HAL_ADC_ConfigChannel+0x4b2>
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003140:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003142:	fa93 f3a3 	rbit	r3, r3
 8003146:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003148:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800314a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800314c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8003152:	2320      	movs	r3, #32
 8003154:	e003      	b.n	800315e <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8003156:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003158:	fab3 f383 	clz	r3, r3
 800315c:	b2db      	uxtb	r3, r3
 800315e:	3301      	adds	r3, #1
 8003160:	f003 031f 	and.w	r3, r3, #31
 8003164:	2b09      	cmp	r3, #9
 8003166:	bf94      	ite	ls
 8003168:	2301      	movls	r3, #1
 800316a:	2300      	movhi	r3, #0
 800316c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800316e:	2b00      	cmp	r3, #0
 8003170:	d079      	beq.n	8003266 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800317a:	2b00      	cmp	r3, #0
 800317c:	d107      	bne.n	800318e <HAL_ADC_ConfigChannel+0x4d2>
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	0e9b      	lsrs	r3, r3, #26
 8003184:	3301      	adds	r3, #1
 8003186:	069b      	lsls	r3, r3, #26
 8003188:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800318c:	e015      	b.n	80031ba <HAL_ADC_ConfigChannel+0x4fe>
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003194:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003196:	fa93 f3a3 	rbit	r3, r3
 800319a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800319c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800319e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80031a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80031a6:	2320      	movs	r3, #32
 80031a8:	e003      	b.n	80031b2 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80031aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031ac:	fab3 f383 	clz	r3, r3
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	3301      	adds	r3, #1
 80031b4:	069b      	lsls	r3, r3, #26
 80031b6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d109      	bne.n	80031da <HAL_ADC_ConfigChannel+0x51e>
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	0e9b      	lsrs	r3, r3, #26
 80031cc:	3301      	adds	r3, #1
 80031ce:	f003 031f 	and.w	r3, r3, #31
 80031d2:	2101      	movs	r1, #1
 80031d4:	fa01 f303 	lsl.w	r3, r1, r3
 80031d8:	e017      	b.n	800320a <HAL_ADC_ConfigChannel+0x54e>
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031e2:	fa93 f3a3 	rbit	r3, r3
 80031e6:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80031e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80031ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80031f2:	2320      	movs	r3, #32
 80031f4:	e003      	b.n	80031fe <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80031f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031f8:	fab3 f383 	clz	r3, r3
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	3301      	adds	r3, #1
 8003200:	f003 031f 	and.w	r3, r3, #31
 8003204:	2101      	movs	r1, #1
 8003206:	fa01 f303 	lsl.w	r3, r1, r3
 800320a:	ea42 0103 	orr.w	r1, r2, r3
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003216:	2b00      	cmp	r3, #0
 8003218:	d10a      	bne.n	8003230 <HAL_ADC_ConfigChannel+0x574>
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	0e9b      	lsrs	r3, r3, #26
 8003220:	3301      	adds	r3, #1
 8003222:	f003 021f 	and.w	r2, r3, #31
 8003226:	4613      	mov	r3, r2
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	4413      	add	r3, r2
 800322c:	051b      	lsls	r3, r3, #20
 800322e:	e018      	b.n	8003262 <HAL_ADC_ConfigChannel+0x5a6>
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003238:	fa93 f3a3 	rbit	r3, r3
 800323c:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800323e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003240:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003242:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003244:	2b00      	cmp	r3, #0
 8003246:	d101      	bne.n	800324c <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8003248:	2320      	movs	r3, #32
 800324a:	e003      	b.n	8003254 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 800324c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800324e:	fab3 f383 	clz	r3, r3
 8003252:	b2db      	uxtb	r3, r3
 8003254:	3301      	adds	r3, #1
 8003256:	f003 021f 	and.w	r2, r3, #31
 800325a:	4613      	mov	r3, r2
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	4413      	add	r3, r2
 8003260:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003262:	430b      	orrs	r3, r1
 8003264:	e081      	b.n	800336a <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800326e:	2b00      	cmp	r3, #0
 8003270:	d107      	bne.n	8003282 <HAL_ADC_ConfigChannel+0x5c6>
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	0e9b      	lsrs	r3, r3, #26
 8003278:	3301      	adds	r3, #1
 800327a:	069b      	lsls	r3, r3, #26
 800327c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003280:	e015      	b.n	80032ae <HAL_ADC_ConfigChannel+0x5f2>
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800328a:	fa93 f3a3 	rbit	r3, r3
 800328e:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003292:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800329a:	2320      	movs	r3, #32
 800329c:	e003      	b.n	80032a6 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800329e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032a0:	fab3 f383 	clz	r3, r3
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	3301      	adds	r3, #1
 80032a8:	069b      	lsls	r3, r3, #26
 80032aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d109      	bne.n	80032ce <HAL_ADC_ConfigChannel+0x612>
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	0e9b      	lsrs	r3, r3, #26
 80032c0:	3301      	adds	r3, #1
 80032c2:	f003 031f 	and.w	r3, r3, #31
 80032c6:	2101      	movs	r1, #1
 80032c8:	fa01 f303 	lsl.w	r3, r1, r3
 80032cc:	e017      	b.n	80032fe <HAL_ADC_ConfigChannel+0x642>
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d4:	6a3b      	ldr	r3, [r7, #32]
 80032d6:	fa93 f3a3 	rbit	r3, r3
 80032da:	61fb      	str	r3, [r7, #28]
  return result;
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80032e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80032e6:	2320      	movs	r3, #32
 80032e8:	e003      	b.n	80032f2 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80032ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ec:	fab3 f383 	clz	r3, r3
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	3301      	adds	r3, #1
 80032f4:	f003 031f 	and.w	r3, r3, #31
 80032f8:	2101      	movs	r1, #1
 80032fa:	fa01 f303 	lsl.w	r3, r1, r3
 80032fe:	ea42 0103 	orr.w	r1, r2, r3
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800330a:	2b00      	cmp	r3, #0
 800330c:	d10d      	bne.n	800332a <HAL_ADC_ConfigChannel+0x66e>
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	0e9b      	lsrs	r3, r3, #26
 8003314:	3301      	adds	r3, #1
 8003316:	f003 021f 	and.w	r2, r3, #31
 800331a:	4613      	mov	r3, r2
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	4413      	add	r3, r2
 8003320:	3b1e      	subs	r3, #30
 8003322:	051b      	lsls	r3, r3, #20
 8003324:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003328:	e01e      	b.n	8003368 <HAL_ADC_ConfigChannel+0x6ac>
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	fa93 f3a3 	rbit	r3, r3
 8003336:	613b      	str	r3, [r7, #16]
  return result;
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d104      	bne.n	800334c <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8003342:	2320      	movs	r3, #32
 8003344:	e006      	b.n	8003354 <HAL_ADC_ConfigChannel+0x698>
 8003346:	bf00      	nop
 8003348:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	fab3 f383 	clz	r3, r3
 8003352:	b2db      	uxtb	r3, r3
 8003354:	3301      	adds	r3, #1
 8003356:	f003 021f 	and.w	r2, r3, #31
 800335a:	4613      	mov	r3, r2
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	4413      	add	r3, r2
 8003360:	3b1e      	subs	r3, #30
 8003362:	051b      	lsls	r3, r3, #20
 8003364:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003368:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800336a:	683a      	ldr	r2, [r7, #0]
 800336c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800336e:	4619      	mov	r1, r3
 8003370:	f7ff fa48 	bl	8002804 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	4b3f      	ldr	r3, [pc, #252]	@ (8003478 <HAL_ADC_ConfigChannel+0x7bc>)
 800337a:	4013      	ands	r3, r2
 800337c:	2b00      	cmp	r3, #0
 800337e:	d071      	beq.n	8003464 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003380:	483e      	ldr	r0, [pc, #248]	@ (800347c <HAL_ADC_ConfigChannel+0x7c0>)
 8003382:	f7ff f967 	bl	8002654 <LL_ADC_GetCommonPathInternalCh>
 8003386:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a3c      	ldr	r2, [pc, #240]	@ (8003480 <HAL_ADC_ConfigChannel+0x7c4>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d004      	beq.n	800339e <HAL_ADC_ConfigChannel+0x6e2>
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a3a      	ldr	r2, [pc, #232]	@ (8003484 <HAL_ADC_ConfigChannel+0x7c8>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d127      	bne.n	80033ee <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800339e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80033a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d121      	bne.n	80033ee <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80033b2:	d157      	bne.n	8003464 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80033b8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80033bc:	4619      	mov	r1, r3
 80033be:	482f      	ldr	r0, [pc, #188]	@ (800347c <HAL_ADC_ConfigChannel+0x7c0>)
 80033c0:	f7ff f935 	bl	800262e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80033c4:	4b30      	ldr	r3, [pc, #192]	@ (8003488 <HAL_ADC_ConfigChannel+0x7cc>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	099b      	lsrs	r3, r3, #6
 80033ca:	4a30      	ldr	r2, [pc, #192]	@ (800348c <HAL_ADC_ConfigChannel+0x7d0>)
 80033cc:	fba2 2303 	umull	r2, r3, r2, r3
 80033d0:	099b      	lsrs	r3, r3, #6
 80033d2:	1c5a      	adds	r2, r3, #1
 80033d4:	4613      	mov	r3, r2
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	4413      	add	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80033de:	e002      	b.n	80033e6 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	3b01      	subs	r3, #1
 80033e4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1f9      	bne.n	80033e0 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80033ec:	e03a      	b.n	8003464 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a27      	ldr	r2, [pc, #156]	@ (8003490 <HAL_ADC_ConfigChannel+0x7d4>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d113      	bne.n	8003420 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80033f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80033fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d10d      	bne.n	8003420 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a22      	ldr	r2, [pc, #136]	@ (8003494 <HAL_ADC_ConfigChannel+0x7d8>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d02a      	beq.n	8003464 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800340e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003412:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003416:	4619      	mov	r1, r3
 8003418:	4818      	ldr	r0, [pc, #96]	@ (800347c <HAL_ADC_ConfigChannel+0x7c0>)
 800341a:	f7ff f908 	bl	800262e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800341e:	e021      	b.n	8003464 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a1c      	ldr	r2, [pc, #112]	@ (8003498 <HAL_ADC_ConfigChannel+0x7dc>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d11c      	bne.n	8003464 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800342a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800342e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d116      	bne.n	8003464 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a16      	ldr	r2, [pc, #88]	@ (8003494 <HAL_ADC_ConfigChannel+0x7d8>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d011      	beq.n	8003464 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003440:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003444:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003448:	4619      	mov	r1, r3
 800344a:	480c      	ldr	r0, [pc, #48]	@ (800347c <HAL_ADC_ConfigChannel+0x7c0>)
 800344c:	f7ff f8ef 	bl	800262e <LL_ADC_SetCommonPathInternalCh>
 8003450:	e008      	b.n	8003464 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003456:	f043 0220 	orr.w	r2, r3, #32
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800346c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003470:	4618      	mov	r0, r3
 8003472:	37d8      	adds	r7, #216	@ 0xd8
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	80080000 	.word	0x80080000
 800347c:	50000300 	.word	0x50000300
 8003480:	c3210000 	.word	0xc3210000
 8003484:	90c00010 	.word	0x90c00010
 8003488:	20000000 	.word	0x20000000
 800348c:	053e2d63 	.word	0x053e2d63
 8003490:	c7520000 	.word	0xc7520000
 8003494:	50000100 	.word	0x50000100
 8003498:	cb840000 	.word	0xcb840000

0800349c <LL_ADC_IsEnabled>:
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f003 0301 	and.w	r3, r3, #1
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d101      	bne.n	80034b4 <LL_ADC_IsEnabled+0x18>
 80034b0:	2301      	movs	r3, #1
 80034b2:	e000      	b.n	80034b6 <LL_ADC_IsEnabled+0x1a>
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr

080034c2 <LL_ADC_REG_IsConversionOngoing>:
{
 80034c2:	b480      	push	{r7}
 80034c4:	b083      	sub	sp, #12
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 0304 	and.w	r3, r3, #4
 80034d2:	2b04      	cmp	r3, #4
 80034d4:	d101      	bne.n	80034da <LL_ADC_REG_IsConversionOngoing+0x18>
 80034d6:	2301      	movs	r3, #1
 80034d8:	e000      	b.n	80034dc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80034e8:	b590      	push	{r4, r7, lr}
 80034ea:	b0a1      	sub	sp, #132	@ 0x84
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034f2:	2300      	movs	r3, #0
 80034f4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d101      	bne.n	8003506 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003502:	2302      	movs	r3, #2
 8003504:	e08b      	b.n	800361e <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2201      	movs	r2, #1
 800350a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800350e:	2300      	movs	r3, #0
 8003510:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003512:	2300      	movs	r3, #0
 8003514:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800351e:	d102      	bne.n	8003526 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003520:	4b41      	ldr	r3, [pc, #260]	@ (8003628 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003522:	60bb      	str	r3, [r7, #8]
 8003524:	e001      	b.n	800352a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003526:	2300      	movs	r3, #0
 8003528:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d10b      	bne.n	8003548 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003534:	f043 0220 	orr.w	r2, r3, #32
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e06a      	b.n	800361e <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	4618      	mov	r0, r3
 800354c:	f7ff ffb9 	bl	80034c2 <LL_ADC_REG_IsConversionOngoing>
 8003550:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4618      	mov	r0, r3
 8003558:	f7ff ffb3 	bl	80034c2 <LL_ADC_REG_IsConversionOngoing>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d14c      	bne.n	80035fc <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003562:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003564:	2b00      	cmp	r3, #0
 8003566:	d149      	bne.n	80035fc <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003568:	4b30      	ldr	r3, [pc, #192]	@ (800362c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800356a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d028      	beq.n	80035c6 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003574:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	6859      	ldr	r1, [r3, #4]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003586:	035b      	lsls	r3, r3, #13
 8003588:	430b      	orrs	r3, r1
 800358a:	431a      	orrs	r2, r3
 800358c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800358e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003590:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003594:	f7ff ff82 	bl	800349c <LL_ADC_IsEnabled>
 8003598:	4604      	mov	r4, r0
 800359a:	4823      	ldr	r0, [pc, #140]	@ (8003628 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800359c:	f7ff ff7e 	bl	800349c <LL_ADC_IsEnabled>
 80035a0:	4603      	mov	r3, r0
 80035a2:	4323      	orrs	r3, r4
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d133      	bne.n	8003610 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80035a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80035b0:	f023 030f 	bic.w	r3, r3, #15
 80035b4:	683a      	ldr	r2, [r7, #0]
 80035b6:	6811      	ldr	r1, [r2, #0]
 80035b8:	683a      	ldr	r2, [r7, #0]
 80035ba:	6892      	ldr	r2, [r2, #8]
 80035bc:	430a      	orrs	r2, r1
 80035be:	431a      	orrs	r2, r3
 80035c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035c2:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80035c4:	e024      	b.n	8003610 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80035c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80035ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035d0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80035d2:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80035d6:	f7ff ff61 	bl	800349c <LL_ADC_IsEnabled>
 80035da:	4604      	mov	r4, r0
 80035dc:	4812      	ldr	r0, [pc, #72]	@ (8003628 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80035de:	f7ff ff5d 	bl	800349c <LL_ADC_IsEnabled>
 80035e2:	4603      	mov	r3, r0
 80035e4:	4323      	orrs	r3, r4
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d112      	bne.n	8003610 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80035ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80035f2:	f023 030f 	bic.w	r3, r3, #15
 80035f6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80035f8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80035fa:	e009      	b.n	8003610 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003600:	f043 0220 	orr.w	r2, r3, #32
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800360e:	e000      	b.n	8003612 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003610:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800361a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800361e:	4618      	mov	r0, r3
 8003620:	3784      	adds	r7, #132	@ 0x84
 8003622:	46bd      	mov	sp, r7
 8003624:	bd90      	pop	{r4, r7, pc}
 8003626:	bf00      	nop
 8003628:	50000100 	.word	0x50000100
 800362c:	50000300 	.word	0x50000300

08003630 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f003 0307 	and.w	r3, r3, #7
 800363e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003640:	4b0c      	ldr	r3, [pc, #48]	@ (8003674 <__NVIC_SetPriorityGrouping+0x44>)
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003646:	68ba      	ldr	r2, [r7, #8]
 8003648:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800364c:	4013      	ands	r3, r2
 800364e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003658:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800365c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003660:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003662:	4a04      	ldr	r2, [pc, #16]	@ (8003674 <__NVIC_SetPriorityGrouping+0x44>)
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	60d3      	str	r3, [r2, #12]
}
 8003668:	bf00      	nop
 800366a:	3714      	adds	r7, #20
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr
 8003674:	e000ed00 	.word	0xe000ed00

08003678 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800367c:	4b04      	ldr	r3, [pc, #16]	@ (8003690 <__NVIC_GetPriorityGrouping+0x18>)
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	0a1b      	lsrs	r3, r3, #8
 8003682:	f003 0307 	and.w	r3, r3, #7
}
 8003686:	4618      	mov	r0, r3
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr
 8003690:	e000ed00 	.word	0xe000ed00

08003694 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	4603      	mov	r3, r0
 800369c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800369e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	db0b      	blt.n	80036be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036a6:	79fb      	ldrb	r3, [r7, #7]
 80036a8:	f003 021f 	and.w	r2, r3, #31
 80036ac:	4907      	ldr	r1, [pc, #28]	@ (80036cc <__NVIC_EnableIRQ+0x38>)
 80036ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b2:	095b      	lsrs	r3, r3, #5
 80036b4:	2001      	movs	r0, #1
 80036b6:	fa00 f202 	lsl.w	r2, r0, r2
 80036ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80036be:	bf00      	nop
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	e000e100 	.word	0xe000e100

080036d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	4603      	mov	r3, r0
 80036d8:	6039      	str	r1, [r7, #0]
 80036da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	db0a      	blt.n	80036fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	b2da      	uxtb	r2, r3
 80036e8:	490c      	ldr	r1, [pc, #48]	@ (800371c <__NVIC_SetPriority+0x4c>)
 80036ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ee:	0112      	lsls	r2, r2, #4
 80036f0:	b2d2      	uxtb	r2, r2
 80036f2:	440b      	add	r3, r1
 80036f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036f8:	e00a      	b.n	8003710 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	b2da      	uxtb	r2, r3
 80036fe:	4908      	ldr	r1, [pc, #32]	@ (8003720 <__NVIC_SetPriority+0x50>)
 8003700:	79fb      	ldrb	r3, [r7, #7]
 8003702:	f003 030f 	and.w	r3, r3, #15
 8003706:	3b04      	subs	r3, #4
 8003708:	0112      	lsls	r2, r2, #4
 800370a:	b2d2      	uxtb	r2, r2
 800370c:	440b      	add	r3, r1
 800370e:	761a      	strb	r2, [r3, #24]
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr
 800371c:	e000e100 	.word	0xe000e100
 8003720:	e000ed00 	.word	0xe000ed00

08003724 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003724:	b480      	push	{r7}
 8003726:	b089      	sub	sp, #36	@ 0x24
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f003 0307 	and.w	r3, r3, #7
 8003736:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	f1c3 0307 	rsb	r3, r3, #7
 800373e:	2b04      	cmp	r3, #4
 8003740:	bf28      	it	cs
 8003742:	2304      	movcs	r3, #4
 8003744:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	3304      	adds	r3, #4
 800374a:	2b06      	cmp	r3, #6
 800374c:	d902      	bls.n	8003754 <NVIC_EncodePriority+0x30>
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	3b03      	subs	r3, #3
 8003752:	e000      	b.n	8003756 <NVIC_EncodePriority+0x32>
 8003754:	2300      	movs	r3, #0
 8003756:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003758:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	fa02 f303 	lsl.w	r3, r2, r3
 8003762:	43da      	mvns	r2, r3
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	401a      	ands	r2, r3
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800376c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	fa01 f303 	lsl.w	r3, r1, r3
 8003776:	43d9      	mvns	r1, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800377c:	4313      	orrs	r3, r2
         );
}
 800377e:	4618      	mov	r0, r3
 8003780:	3724      	adds	r7, #36	@ 0x24
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
	...

0800378c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	3b01      	subs	r3, #1
 8003798:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800379c:	d301      	bcc.n	80037a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800379e:	2301      	movs	r3, #1
 80037a0:	e00f      	b.n	80037c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037a2:	4a0a      	ldr	r2, [pc, #40]	@ (80037cc <SysTick_Config+0x40>)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	3b01      	subs	r3, #1
 80037a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037aa:	210f      	movs	r1, #15
 80037ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80037b0:	f7ff ff8e 	bl	80036d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037b4:	4b05      	ldr	r3, [pc, #20]	@ (80037cc <SysTick_Config+0x40>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037ba:	4b04      	ldr	r3, [pc, #16]	@ (80037cc <SysTick_Config+0x40>)
 80037bc:	2207      	movs	r2, #7
 80037be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	e000e010 	.word	0xe000e010

080037d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f7ff ff29 	bl	8003630 <__NVIC_SetPriorityGrouping>
}
 80037de:	bf00      	nop
 80037e0:	3708      	adds	r7, #8
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b086      	sub	sp, #24
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	4603      	mov	r3, r0
 80037ee:	60b9      	str	r1, [r7, #8]
 80037f0:	607a      	str	r2, [r7, #4]
 80037f2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80037f4:	f7ff ff40 	bl	8003678 <__NVIC_GetPriorityGrouping>
 80037f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	68b9      	ldr	r1, [r7, #8]
 80037fe:	6978      	ldr	r0, [r7, #20]
 8003800:	f7ff ff90 	bl	8003724 <NVIC_EncodePriority>
 8003804:	4602      	mov	r2, r0
 8003806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800380a:	4611      	mov	r1, r2
 800380c:	4618      	mov	r0, r3
 800380e:	f7ff ff5f 	bl	80036d0 <__NVIC_SetPriority>
}
 8003812:	bf00      	nop
 8003814:	3718      	adds	r7, #24
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b082      	sub	sp, #8
 800381e:	af00      	add	r7, sp, #0
 8003820:	4603      	mov	r3, r0
 8003822:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003828:	4618      	mov	r0, r3
 800382a:	f7ff ff33 	bl	8003694 <__NVIC_EnableIRQ>
}
 800382e:	bf00      	nop
 8003830:	3708      	adds	r7, #8
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}

08003836 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003836:	b580      	push	{r7, lr}
 8003838:	b082      	sub	sp, #8
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f7ff ffa4 	bl	800378c <SysTick_Config>
 8003844:	4603      	mov	r3, r0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3708      	adds	r7, #8
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
	...

08003850 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e08d      	b.n	800397e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	461a      	mov	r2, r3
 8003868:	4b47      	ldr	r3, [pc, #284]	@ (8003988 <HAL_DMA_Init+0x138>)
 800386a:	429a      	cmp	r2, r3
 800386c:	d80f      	bhi.n	800388e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	461a      	mov	r2, r3
 8003874:	4b45      	ldr	r3, [pc, #276]	@ (800398c <HAL_DMA_Init+0x13c>)
 8003876:	4413      	add	r3, r2
 8003878:	4a45      	ldr	r2, [pc, #276]	@ (8003990 <HAL_DMA_Init+0x140>)
 800387a:	fba2 2303 	umull	r2, r3, r2, r3
 800387e:	091b      	lsrs	r3, r3, #4
 8003880:	009a      	lsls	r2, r3, #2
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a42      	ldr	r2, [pc, #264]	@ (8003994 <HAL_DMA_Init+0x144>)
 800388a:	641a      	str	r2, [r3, #64]	@ 0x40
 800388c:	e00e      	b.n	80038ac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	461a      	mov	r2, r3
 8003894:	4b40      	ldr	r3, [pc, #256]	@ (8003998 <HAL_DMA_Init+0x148>)
 8003896:	4413      	add	r3, r2
 8003898:	4a3d      	ldr	r2, [pc, #244]	@ (8003990 <HAL_DMA_Init+0x140>)
 800389a:	fba2 2303 	umull	r2, r3, r2, r3
 800389e:	091b      	lsrs	r3, r3, #4
 80038a0:	009a      	lsls	r2, r3, #2
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a3c      	ldr	r2, [pc, #240]	@ (800399c <HAL_DMA_Init+0x14c>)
 80038aa:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2202      	movs	r2, #2
 80038b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80038c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80038d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a1b      	ldr	r3, [r3, #32]
 80038ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80038f0:	68fa      	ldr	r2, [r7, #12]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68fa      	ldr	r2, [r7, #12]
 80038fc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 fa82 	bl	8003e08 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800390c:	d102      	bne.n	8003914 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685a      	ldr	r2, [r3, #4]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800391c:	b2d2      	uxtb	r2, r2
 800391e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003928:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d010      	beq.n	8003954 <HAL_DMA_Init+0x104>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	2b04      	cmp	r3, #4
 8003938:	d80c      	bhi.n	8003954 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 faa2 	bl	8003e84 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003944:	2200      	movs	r2, #0
 8003946:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003950:	605a      	str	r2, [r3, #4]
 8003952:	e008      	b.n	8003966 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3710      	adds	r7, #16
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	40020407 	.word	0x40020407
 800398c:	bffdfff8 	.word	0xbffdfff8
 8003990:	cccccccd 	.word	0xcccccccd
 8003994:	40020000 	.word	0x40020000
 8003998:	bffdfbf8 	.word	0xbffdfbf8
 800399c:	40020400 	.word	0x40020400

080039a0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]
 80039ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039ae:	2300      	movs	r3, #0
 80039b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d101      	bne.n	80039c0 <HAL_DMA_Start_IT+0x20>
 80039bc:	2302      	movs	r3, #2
 80039be:	e066      	b.n	8003a8e <HAL_DMA_Start_IT+0xee>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d155      	bne.n	8003a80 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2202      	movs	r2, #2
 80039d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2200      	movs	r2, #0
 80039e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f022 0201 	bic.w	r2, r2, #1
 80039f0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	68b9      	ldr	r1, [r7, #8]
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	f000 f9c7 	bl	8003d8c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d008      	beq.n	8003a18 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f042 020e 	orr.w	r2, r2, #14
 8003a14:	601a      	str	r2, [r3, #0]
 8003a16:	e00f      	b.n	8003a38 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f022 0204 	bic.w	r2, r2, #4
 8003a26:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f042 020a 	orr.w	r2, r2, #10
 8003a36:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d007      	beq.n	8003a56 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a50:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a54:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d007      	beq.n	8003a6e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a6c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f042 0201 	orr.w	r2, r2, #1
 8003a7c:	601a      	str	r2, [r3, #0]
 8003a7e:	e005      	b.n	8003a8c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003a88:	2302      	movs	r3, #2
 8003a8a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003a8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3718      	adds	r7, #24
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b085      	sub	sp, #20
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d005      	beq.n	8003aba <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2204      	movs	r2, #4
 8003ab2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	73fb      	strb	r3, [r7, #15]
 8003ab8:	e037      	b.n	8003b2a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f022 020e 	bic.w	r2, r2, #14
 8003ac8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ad4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ad8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f022 0201 	bic.w	r2, r2, #1
 8003ae8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aee:	f003 021f 	and.w	r2, r3, #31
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af6:	2101      	movs	r1, #1
 8003af8:	fa01 f202 	lsl.w	r2, r1, r2
 8003afc:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003b06:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00c      	beq.n	8003b2a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b1a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b1e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003b28:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3714      	adds	r7, #20
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b50:	2300      	movs	r3, #0
 8003b52:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d00d      	beq.n	8003b7c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2204      	movs	r2, #4
 8003b64:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	73fb      	strb	r3, [r7, #15]
 8003b7a:	e047      	b.n	8003c0c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f022 020e 	bic.w	r2, r2, #14
 8003b8a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f022 0201 	bic.w	r2, r2, #1
 8003b9a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ba6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003baa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bb0:	f003 021f 	and.w	r2, r3, #31
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb8:	2101      	movs	r1, #1
 8003bba:	fa01 f202 	lsl.w	r2, r1, r2
 8003bbe:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003bc8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00c      	beq.n	8003bec <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bdc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003be0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003bea:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d003      	beq.n	8003c0c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	4798      	blx	r3
    }
  }
  return status;
 8003c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b084      	sub	sp, #16
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c32:	f003 031f 	and.w	r3, r3, #31
 8003c36:	2204      	movs	r2, #4
 8003c38:	409a      	lsls	r2, r3
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d026      	beq.n	8003c90 <HAL_DMA_IRQHandler+0x7a>
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	f003 0304 	and.w	r3, r3, #4
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d021      	beq.n	8003c90 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0320 	and.w	r3, r3, #32
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d107      	bne.n	8003c6a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f022 0204 	bic.w	r2, r2, #4
 8003c68:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c6e:	f003 021f 	and.w	r2, r3, #31
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c76:	2104      	movs	r1, #4
 8003c78:	fa01 f202 	lsl.w	r2, r1, r2
 8003c7c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d071      	beq.n	8003d6a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003c8e:	e06c      	b.n	8003d6a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c94:	f003 031f 	and.w	r3, r3, #31
 8003c98:	2202      	movs	r2, #2
 8003c9a:	409a      	lsls	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d02e      	beq.n	8003d02 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	f003 0302 	and.w	r3, r3, #2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d029      	beq.n	8003d02 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0320 	and.w	r3, r3, #32
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d10b      	bne.n	8003cd4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f022 020a 	bic.w	r2, r2, #10
 8003cca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cd8:	f003 021f 	and.w	r2, r3, #31
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ce0:	2102      	movs	r1, #2
 8003ce2:	fa01 f202 	lsl.w	r2, r1, r2
 8003ce6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d038      	beq.n	8003d6a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003d00:	e033      	b.n	8003d6a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d06:	f003 031f 	and.w	r3, r3, #31
 8003d0a:	2208      	movs	r2, #8
 8003d0c:	409a      	lsls	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	4013      	ands	r3, r2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d02a      	beq.n	8003d6c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	f003 0308 	and.w	r3, r3, #8
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d025      	beq.n	8003d6c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f022 020e 	bic.w	r2, r2, #14
 8003d2e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d34:	f003 021f 	and.w	r2, r3, #31
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d3c:	2101      	movs	r1, #1
 8003d3e:	fa01 f202 	lsl.w	r2, r1, r2
 8003d42:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d004      	beq.n	8003d6c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003d6a:	bf00      	nop
 8003d6c:	bf00      	nop
}
 8003d6e:	3710      	adds	r7, #16
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b085      	sub	sp, #20
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	607a      	str	r2, [r7, #4]
 8003d98:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003da2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d004      	beq.n	8003db6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003db4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dba:	f003 021f 	and.w	r2, r3, #31
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc2:	2101      	movs	r1, #1
 8003dc4:	fa01 f202 	lsl.w	r2, r1, r2
 8003dc8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	683a      	ldr	r2, [r7, #0]
 8003dd0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	2b10      	cmp	r3, #16
 8003dd8:	d108      	bne.n	8003dec <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68ba      	ldr	r2, [r7, #8]
 8003de8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003dea:	e007      	b.n	8003dfc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68ba      	ldr	r2, [r7, #8]
 8003df2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	60da      	str	r2, [r3, #12]
}
 8003dfc:	bf00      	nop
 8003dfe:	3714      	adds	r7, #20
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b087      	sub	sp, #28
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	461a      	mov	r2, r3
 8003e16:	4b16      	ldr	r3, [pc, #88]	@ (8003e70 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d802      	bhi.n	8003e22 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003e1c:	4b15      	ldr	r3, [pc, #84]	@ (8003e74 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003e1e:	617b      	str	r3, [r7, #20]
 8003e20:	e001      	b.n	8003e26 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8003e22:	4b15      	ldr	r3, [pc, #84]	@ (8003e78 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003e24:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	3b08      	subs	r3, #8
 8003e32:	4a12      	ldr	r2, [pc, #72]	@ (8003e7c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003e34:	fba2 2303 	umull	r2, r3, r2, r3
 8003e38:	091b      	lsrs	r3, r3, #4
 8003e3a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e40:	089b      	lsrs	r3, r3, #2
 8003e42:	009a      	lsls	r2, r3, #2
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	4413      	add	r3, r2
 8003e48:	461a      	mov	r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a0b      	ldr	r2, [pc, #44]	@ (8003e80 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003e52:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f003 031f 	and.w	r3, r3, #31
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	409a      	lsls	r2, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003e62:	bf00      	nop
 8003e64:	371c      	adds	r7, #28
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	40020407 	.word	0x40020407
 8003e74:	40020800 	.word	0x40020800
 8003e78:	40020820 	.word	0x40020820
 8003e7c:	cccccccd 	.word	0xcccccccd
 8003e80:	40020880 	.word	0x40020880

08003e84 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	4b0b      	ldr	r3, [pc, #44]	@ (8003ec4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003e98:	4413      	add	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a08      	ldr	r2, [pc, #32]	@ (8003ec8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003ea6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	f003 031f 	and.w	r3, r3, #31
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	409a      	lsls	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003eb8:	bf00      	nop
 8003eba:	3714      	adds	r7, #20
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr
 8003ec4:	1000823f 	.word	0x1000823f
 8003ec8:	40020940 	.word	0x40020940

08003ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b087      	sub	sp, #28
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003eda:	e15a      	b.n	8004192 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	2101      	movs	r1, #1
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ee8:	4013      	ands	r3, r2
 8003eea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f000 814c 	beq.w	800418c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f003 0303 	and.w	r3, r3, #3
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d005      	beq.n	8003f0c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d130      	bne.n	8003f6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	2203      	movs	r2, #3
 8003f18:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1c:	43db      	mvns	r3, r3
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	4013      	ands	r3, r2
 8003f22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	68da      	ldr	r2, [r3, #12]
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	005b      	lsls	r3, r3, #1
 8003f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	693a      	ldr	r2, [r7, #16]
 8003f3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f42:	2201      	movs	r2, #1
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4a:	43db      	mvns	r3, r3
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	4013      	ands	r3, r2
 8003f50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	091b      	lsrs	r3, r3, #4
 8003f58:	f003 0201 	and.w	r2, r3, #1
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	693a      	ldr	r2, [r7, #16]
 8003f6c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f003 0303 	and.w	r3, r3, #3
 8003f76:	2b03      	cmp	r3, #3
 8003f78:	d017      	beq.n	8003faa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	005b      	lsls	r3, r3, #1
 8003f84:	2203      	movs	r2, #3
 8003f86:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8a:	43db      	mvns	r3, r3
 8003f8c:	693a      	ldr	r2, [r7, #16]
 8003f8e:	4013      	ands	r3, r2
 8003f90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	689a      	ldr	r2, [r3, #8]
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	005b      	lsls	r3, r3, #1
 8003f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9e:	693a      	ldr	r2, [r7, #16]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f003 0303 	and.w	r3, r3, #3
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d123      	bne.n	8003ffe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	08da      	lsrs	r2, r3, #3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	3208      	adds	r2, #8
 8003fbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	f003 0307 	and.w	r3, r3, #7
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	220f      	movs	r2, #15
 8003fce:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd2:	43db      	mvns	r3, r3
 8003fd4:	693a      	ldr	r2, [r7, #16]
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	691a      	ldr	r2, [r3, #16]
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	f003 0307 	and.w	r3, r3, #7
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fea:	693a      	ldr	r2, [r7, #16]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	08da      	lsrs	r2, r3, #3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	3208      	adds	r2, #8
 8003ff8:	6939      	ldr	r1, [r7, #16]
 8003ffa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	005b      	lsls	r3, r3, #1
 8004008:	2203      	movs	r2, #3
 800400a:	fa02 f303 	lsl.w	r3, r2, r3
 800400e:	43db      	mvns	r3, r3
 8004010:	693a      	ldr	r2, [r7, #16]
 8004012:	4013      	ands	r3, r2
 8004014:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f003 0203 	and.w	r2, r3, #3
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	005b      	lsls	r3, r3, #1
 8004022:	fa02 f303 	lsl.w	r3, r2, r3
 8004026:	693a      	ldr	r2, [r7, #16]
 8004028:	4313      	orrs	r3, r2
 800402a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800403a:	2b00      	cmp	r3, #0
 800403c:	f000 80a6 	beq.w	800418c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004040:	4b5b      	ldr	r3, [pc, #364]	@ (80041b0 <HAL_GPIO_Init+0x2e4>)
 8004042:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004044:	4a5a      	ldr	r2, [pc, #360]	@ (80041b0 <HAL_GPIO_Init+0x2e4>)
 8004046:	f043 0301 	orr.w	r3, r3, #1
 800404a:	6613      	str	r3, [r2, #96]	@ 0x60
 800404c:	4b58      	ldr	r3, [pc, #352]	@ (80041b0 <HAL_GPIO_Init+0x2e4>)
 800404e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004050:	f003 0301 	and.w	r3, r3, #1
 8004054:	60bb      	str	r3, [r7, #8]
 8004056:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004058:	4a56      	ldr	r2, [pc, #344]	@ (80041b4 <HAL_GPIO_Init+0x2e8>)
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	089b      	lsrs	r3, r3, #2
 800405e:	3302      	adds	r3, #2
 8004060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004064:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	f003 0303 	and.w	r3, r3, #3
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	220f      	movs	r2, #15
 8004070:	fa02 f303 	lsl.w	r3, r2, r3
 8004074:	43db      	mvns	r3, r3
 8004076:	693a      	ldr	r2, [r7, #16]
 8004078:	4013      	ands	r3, r2
 800407a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004082:	d01f      	beq.n	80040c4 <HAL_GPIO_Init+0x1f8>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a4c      	ldr	r2, [pc, #304]	@ (80041b8 <HAL_GPIO_Init+0x2ec>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d019      	beq.n	80040c0 <HAL_GPIO_Init+0x1f4>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a4b      	ldr	r2, [pc, #300]	@ (80041bc <HAL_GPIO_Init+0x2f0>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d013      	beq.n	80040bc <HAL_GPIO_Init+0x1f0>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a4a      	ldr	r2, [pc, #296]	@ (80041c0 <HAL_GPIO_Init+0x2f4>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d00d      	beq.n	80040b8 <HAL_GPIO_Init+0x1ec>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a49      	ldr	r2, [pc, #292]	@ (80041c4 <HAL_GPIO_Init+0x2f8>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d007      	beq.n	80040b4 <HAL_GPIO_Init+0x1e8>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a48      	ldr	r2, [pc, #288]	@ (80041c8 <HAL_GPIO_Init+0x2fc>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d101      	bne.n	80040b0 <HAL_GPIO_Init+0x1e4>
 80040ac:	2305      	movs	r3, #5
 80040ae:	e00a      	b.n	80040c6 <HAL_GPIO_Init+0x1fa>
 80040b0:	2306      	movs	r3, #6
 80040b2:	e008      	b.n	80040c6 <HAL_GPIO_Init+0x1fa>
 80040b4:	2304      	movs	r3, #4
 80040b6:	e006      	b.n	80040c6 <HAL_GPIO_Init+0x1fa>
 80040b8:	2303      	movs	r3, #3
 80040ba:	e004      	b.n	80040c6 <HAL_GPIO_Init+0x1fa>
 80040bc:	2302      	movs	r3, #2
 80040be:	e002      	b.n	80040c6 <HAL_GPIO_Init+0x1fa>
 80040c0:	2301      	movs	r3, #1
 80040c2:	e000      	b.n	80040c6 <HAL_GPIO_Init+0x1fa>
 80040c4:	2300      	movs	r3, #0
 80040c6:	697a      	ldr	r2, [r7, #20]
 80040c8:	f002 0203 	and.w	r2, r2, #3
 80040cc:	0092      	lsls	r2, r2, #2
 80040ce:	4093      	lsls	r3, r2
 80040d0:	693a      	ldr	r2, [r7, #16]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040d6:	4937      	ldr	r1, [pc, #220]	@ (80041b4 <HAL_GPIO_Init+0x2e8>)
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	089b      	lsrs	r3, r3, #2
 80040dc:	3302      	adds	r3, #2
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80040e4:	4b39      	ldr	r3, [pc, #228]	@ (80041cc <HAL_GPIO_Init+0x300>)
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	43db      	mvns	r3, r3
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	4013      	ands	r3, r2
 80040f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d003      	beq.n	8004108 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004100:	693a      	ldr	r2, [r7, #16]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	4313      	orrs	r3, r2
 8004106:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004108:	4a30      	ldr	r2, [pc, #192]	@ (80041cc <HAL_GPIO_Init+0x300>)
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800410e:	4b2f      	ldr	r3, [pc, #188]	@ (80041cc <HAL_GPIO_Init+0x300>)
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	43db      	mvns	r3, r3
 8004118:	693a      	ldr	r2, [r7, #16]
 800411a:	4013      	ands	r3, r2
 800411c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d003      	beq.n	8004132 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	4313      	orrs	r3, r2
 8004130:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004132:	4a26      	ldr	r2, [pc, #152]	@ (80041cc <HAL_GPIO_Init+0x300>)
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004138:	4b24      	ldr	r3, [pc, #144]	@ (80041cc <HAL_GPIO_Init+0x300>)
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	43db      	mvns	r3, r3
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	4013      	ands	r3, r2
 8004146:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d003      	beq.n	800415c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004154:	693a      	ldr	r2, [r7, #16]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	4313      	orrs	r3, r2
 800415a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800415c:	4a1b      	ldr	r2, [pc, #108]	@ (80041cc <HAL_GPIO_Init+0x300>)
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004162:	4b1a      	ldr	r3, [pc, #104]	@ (80041cc <HAL_GPIO_Init+0x300>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	43db      	mvns	r3, r3
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	4013      	ands	r3, r2
 8004170:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d003      	beq.n	8004186 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800417e:	693a      	ldr	r2, [r7, #16]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	4313      	orrs	r3, r2
 8004184:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004186:	4a11      	ldr	r2, [pc, #68]	@ (80041cc <HAL_GPIO_Init+0x300>)
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	3301      	adds	r3, #1
 8004190:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	fa22 f303 	lsr.w	r3, r2, r3
 800419c:	2b00      	cmp	r3, #0
 800419e:	f47f ae9d 	bne.w	8003edc <HAL_GPIO_Init+0x10>
  }
}
 80041a2:	bf00      	nop
 80041a4:	bf00      	nop
 80041a6:	371c      	adds	r7, #28
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr
 80041b0:	40021000 	.word	0x40021000
 80041b4:	40010000 	.word	0x40010000
 80041b8:	48000400 	.word	0x48000400
 80041bc:	48000800 	.word	0x48000800
 80041c0:	48000c00 	.word	0x48000c00
 80041c4:	48001000 	.word	0x48001000
 80041c8:	48001400 	.word	0x48001400
 80041cc:	40010400 	.word	0x40010400

080041d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	460b      	mov	r3, r1
 80041da:	807b      	strh	r3, [r7, #2]
 80041dc:	4613      	mov	r3, r2
 80041de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80041e0:	787b      	ldrb	r3, [r7, #1]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d003      	beq.n	80041ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80041e6:	887a      	ldrh	r2, [r7, #2]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80041ec:	e002      	b.n	80041f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80041ee:	887a      	ldrh	r2, [r7, #2]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80041f4:	bf00      	nop
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d141      	bne.n	8004292 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800420e:	4b4b      	ldr	r3, [pc, #300]	@ (800433c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004216:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800421a:	d131      	bne.n	8004280 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800421c:	4b47      	ldr	r3, [pc, #284]	@ (800433c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800421e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004222:	4a46      	ldr	r2, [pc, #280]	@ (800433c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004224:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004228:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800422c:	4b43      	ldr	r3, [pc, #268]	@ (800433c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004234:	4a41      	ldr	r2, [pc, #260]	@ (800433c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004236:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800423a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800423c:	4b40      	ldr	r3, [pc, #256]	@ (8004340 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2232      	movs	r2, #50	@ 0x32
 8004242:	fb02 f303 	mul.w	r3, r2, r3
 8004246:	4a3f      	ldr	r2, [pc, #252]	@ (8004344 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004248:	fba2 2303 	umull	r2, r3, r2, r3
 800424c:	0c9b      	lsrs	r3, r3, #18
 800424e:	3301      	adds	r3, #1
 8004250:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004252:	e002      	b.n	800425a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	3b01      	subs	r3, #1
 8004258:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800425a:	4b38      	ldr	r3, [pc, #224]	@ (800433c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004262:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004266:	d102      	bne.n	800426e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d1f2      	bne.n	8004254 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800426e:	4b33      	ldr	r3, [pc, #204]	@ (800433c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004276:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800427a:	d158      	bne.n	800432e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e057      	b.n	8004330 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004280:	4b2e      	ldr	r3, [pc, #184]	@ (800433c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004282:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004286:	4a2d      	ldr	r2, [pc, #180]	@ (800433c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004288:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800428c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004290:	e04d      	b.n	800432e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004298:	d141      	bne.n	800431e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800429a:	4b28      	ldr	r3, [pc, #160]	@ (800433c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80042a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042a6:	d131      	bne.n	800430c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80042a8:	4b24      	ldr	r3, [pc, #144]	@ (800433c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042ae:	4a23      	ldr	r2, [pc, #140]	@ (800433c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042b4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80042b8:	4b20      	ldr	r3, [pc, #128]	@ (800433c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80042c0:	4a1e      	ldr	r2, [pc, #120]	@ (800433c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80042c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80042c8:	4b1d      	ldr	r3, [pc, #116]	@ (8004340 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2232      	movs	r2, #50	@ 0x32
 80042ce:	fb02 f303 	mul.w	r3, r2, r3
 80042d2:	4a1c      	ldr	r2, [pc, #112]	@ (8004344 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80042d4:	fba2 2303 	umull	r2, r3, r2, r3
 80042d8:	0c9b      	lsrs	r3, r3, #18
 80042da:	3301      	adds	r3, #1
 80042dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042de:	e002      	b.n	80042e6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	3b01      	subs	r3, #1
 80042e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042e6:	4b15      	ldr	r3, [pc, #84]	@ (800433c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042e8:	695b      	ldr	r3, [r3, #20]
 80042ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042f2:	d102      	bne.n	80042fa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1f2      	bne.n	80042e0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80042fa:	4b10      	ldr	r3, [pc, #64]	@ (800433c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004302:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004306:	d112      	bne.n	800432e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e011      	b.n	8004330 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800430c:	4b0b      	ldr	r3, [pc, #44]	@ (800433c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800430e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004312:	4a0a      	ldr	r2, [pc, #40]	@ (800433c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004314:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004318:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800431c:	e007      	b.n	800432e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800431e:	4b07      	ldr	r3, [pc, #28]	@ (800433c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004326:	4a05      	ldr	r2, [pc, #20]	@ (800433c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004328:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800432c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800432e:	2300      	movs	r3, #0
}
 8004330:	4618      	mov	r0, r3
 8004332:	3714      	adds	r7, #20
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr
 800433c:	40007000 	.word	0x40007000
 8004340:	20000000 	.word	0x20000000
 8004344:	431bde83 	.word	0x431bde83

08004348 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004348:	b480      	push	{r7}
 800434a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800434c:	4b05      	ldr	r3, [pc, #20]	@ (8004364 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	4a04      	ldr	r2, [pc, #16]	@ (8004364 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004352:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004356:	6093      	str	r3, [r2, #8]
}
 8004358:	bf00      	nop
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	40007000 	.word	0x40007000

08004368 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b088      	sub	sp, #32
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d101      	bne.n	800437a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e2fe      	b.n	8004978 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0301 	and.w	r3, r3, #1
 8004382:	2b00      	cmp	r3, #0
 8004384:	d075      	beq.n	8004472 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004386:	4b97      	ldr	r3, [pc, #604]	@ (80045e4 <HAL_RCC_OscConfig+0x27c>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f003 030c 	and.w	r3, r3, #12
 800438e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004390:	4b94      	ldr	r3, [pc, #592]	@ (80045e4 <HAL_RCC_OscConfig+0x27c>)
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	f003 0303 	and.w	r3, r3, #3
 8004398:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	2b0c      	cmp	r3, #12
 800439e:	d102      	bne.n	80043a6 <HAL_RCC_OscConfig+0x3e>
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	2b03      	cmp	r3, #3
 80043a4:	d002      	beq.n	80043ac <HAL_RCC_OscConfig+0x44>
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	2b08      	cmp	r3, #8
 80043aa:	d10b      	bne.n	80043c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043ac:	4b8d      	ldr	r3, [pc, #564]	@ (80045e4 <HAL_RCC_OscConfig+0x27c>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d05b      	beq.n	8004470 <HAL_RCC_OscConfig+0x108>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d157      	bne.n	8004470 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e2d9      	b.n	8004978 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043cc:	d106      	bne.n	80043dc <HAL_RCC_OscConfig+0x74>
 80043ce:	4b85      	ldr	r3, [pc, #532]	@ (80045e4 <HAL_RCC_OscConfig+0x27c>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a84      	ldr	r2, [pc, #528]	@ (80045e4 <HAL_RCC_OscConfig+0x27c>)
 80043d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043d8:	6013      	str	r3, [r2, #0]
 80043da:	e01d      	b.n	8004418 <HAL_RCC_OscConfig+0xb0>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043e4:	d10c      	bne.n	8004400 <HAL_RCC_OscConfig+0x98>
 80043e6:	4b7f      	ldr	r3, [pc, #508]	@ (80045e4 <HAL_RCC_OscConfig+0x27c>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a7e      	ldr	r2, [pc, #504]	@ (80045e4 <HAL_RCC_OscConfig+0x27c>)
 80043ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043f0:	6013      	str	r3, [r2, #0]
 80043f2:	4b7c      	ldr	r3, [pc, #496]	@ (80045e4 <HAL_RCC_OscConfig+0x27c>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a7b      	ldr	r2, [pc, #492]	@ (80045e4 <HAL_RCC_OscConfig+0x27c>)
 80043f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043fc:	6013      	str	r3, [r2, #0]
 80043fe:	e00b      	b.n	8004418 <HAL_RCC_OscConfig+0xb0>
 8004400:	4b78      	ldr	r3, [pc, #480]	@ (80045e4 <HAL_RCC_OscConfig+0x27c>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a77      	ldr	r2, [pc, #476]	@ (80045e4 <HAL_RCC_OscConfig+0x27c>)
 8004406:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800440a:	6013      	str	r3, [r2, #0]
 800440c:	4b75      	ldr	r3, [pc, #468]	@ (80045e4 <HAL_RCC_OscConfig+0x27c>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a74      	ldr	r2, [pc, #464]	@ (80045e4 <HAL_RCC_OscConfig+0x27c>)
 8004412:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004416:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d013      	beq.n	8004448 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004420:	f7fe f8e6 	bl	80025f0 <HAL_GetTick>
 8004424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004426:	e008      	b.n	800443a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004428:	f7fe f8e2 	bl	80025f0 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b64      	cmp	r3, #100	@ 0x64
 8004434:	d901      	bls.n	800443a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e29e      	b.n	8004978 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800443a:	4b6a      	ldr	r3, [pc, #424]	@ (80045e4 <HAL_RCC_OscConfig+0x27c>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d0f0      	beq.n	8004428 <HAL_RCC_OscConfig+0xc0>
 8004446:	e014      	b.n	8004472 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004448:	f7fe f8d2 	bl	80025f0 <HAL_GetTick>
 800444c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800444e:	e008      	b.n	8004462 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004450:	f7fe f8ce 	bl	80025f0 <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	2b64      	cmp	r3, #100	@ 0x64
 800445c:	d901      	bls.n	8004462 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e28a      	b.n	8004978 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004462:	4b60      	ldr	r3, [pc, #384]	@ (80045e4 <HAL_RCC_OscConfig+0x27c>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d1f0      	bne.n	8004450 <HAL_RCC_OscConfig+0xe8>
 800446e:	e000      	b.n	8004472 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004470:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0302 	and.w	r3, r3, #2
 800447a:	2b00      	cmp	r3, #0
 800447c:	d075      	beq.n	800456a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800447e:	4b59      	ldr	r3, [pc, #356]	@ (80045e4 <HAL_RCC_OscConfig+0x27c>)
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f003 030c 	and.w	r3, r3, #12
 8004486:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004488:	4b56      	ldr	r3, [pc, #344]	@ (80045e4 <HAL_RCC_OscConfig+0x27c>)
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	f003 0303 	and.w	r3, r3, #3
 8004490:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	2b0c      	cmp	r3, #12
 8004496:	d102      	bne.n	800449e <HAL_RCC_OscConfig+0x136>
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	2b02      	cmp	r3, #2
 800449c:	d002      	beq.n	80044a4 <HAL_RCC_OscConfig+0x13c>
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	2b04      	cmp	r3, #4
 80044a2:	d11f      	bne.n	80044e4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044a4:	4b4f      	ldr	r3, [pc, #316]	@ (80045e4 <HAL_RCC_OscConfig+0x27c>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d005      	beq.n	80044bc <HAL_RCC_OscConfig+0x154>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d101      	bne.n	80044bc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e25d      	b.n	8004978 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044bc:	4b49      	ldr	r3, [pc, #292]	@ (80045e4 <HAL_RCC_OscConfig+0x27c>)
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	061b      	lsls	r3, r3, #24
 80044ca:	4946      	ldr	r1, [pc, #280]	@ (80045e4 <HAL_RCC_OscConfig+0x27c>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80044d0:	4b45      	ldr	r3, [pc, #276]	@ (80045e8 <HAL_RCC_OscConfig+0x280>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4618      	mov	r0, r3
 80044d6:	f7fe f83f 	bl	8002558 <HAL_InitTick>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d043      	beq.n	8004568 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e249      	b.n	8004978 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d023      	beq.n	8004534 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044ec:	4b3d      	ldr	r3, [pc, #244]	@ (80045e4 <HAL_RCC_OscConfig+0x27c>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a3c      	ldr	r2, [pc, #240]	@ (80045e4 <HAL_RCC_OscConfig+0x27c>)
 80044f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f8:	f7fe f87a 	bl	80025f0 <HAL_GetTick>
 80044fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044fe:	e008      	b.n	8004512 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004500:	f7fe f876 	bl	80025f0 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	2b02      	cmp	r3, #2
 800450c:	d901      	bls.n	8004512 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e232      	b.n	8004978 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004512:	4b34      	ldr	r3, [pc, #208]	@ (80045e4 <HAL_RCC_OscConfig+0x27c>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800451a:	2b00      	cmp	r3, #0
 800451c:	d0f0      	beq.n	8004500 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800451e:	4b31      	ldr	r3, [pc, #196]	@ (80045e4 <HAL_RCC_OscConfig+0x27c>)
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	061b      	lsls	r3, r3, #24
 800452c:	492d      	ldr	r1, [pc, #180]	@ (80045e4 <HAL_RCC_OscConfig+0x27c>)
 800452e:	4313      	orrs	r3, r2
 8004530:	604b      	str	r3, [r1, #4]
 8004532:	e01a      	b.n	800456a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004534:	4b2b      	ldr	r3, [pc, #172]	@ (80045e4 <HAL_RCC_OscConfig+0x27c>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a2a      	ldr	r2, [pc, #168]	@ (80045e4 <HAL_RCC_OscConfig+0x27c>)
 800453a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800453e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004540:	f7fe f856 	bl	80025f0 <HAL_GetTick>
 8004544:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004546:	e008      	b.n	800455a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004548:	f7fe f852 	bl	80025f0 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	2b02      	cmp	r3, #2
 8004554:	d901      	bls.n	800455a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e20e      	b.n	8004978 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800455a:	4b22      	ldr	r3, [pc, #136]	@ (80045e4 <HAL_RCC_OscConfig+0x27c>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004562:	2b00      	cmp	r3, #0
 8004564:	d1f0      	bne.n	8004548 <HAL_RCC_OscConfig+0x1e0>
 8004566:	e000      	b.n	800456a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004568:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0308 	and.w	r3, r3, #8
 8004572:	2b00      	cmp	r3, #0
 8004574:	d041      	beq.n	80045fa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	695b      	ldr	r3, [r3, #20]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d01c      	beq.n	80045b8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800457e:	4b19      	ldr	r3, [pc, #100]	@ (80045e4 <HAL_RCC_OscConfig+0x27c>)
 8004580:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004584:	4a17      	ldr	r2, [pc, #92]	@ (80045e4 <HAL_RCC_OscConfig+0x27c>)
 8004586:	f043 0301 	orr.w	r3, r3, #1
 800458a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800458e:	f7fe f82f 	bl	80025f0 <HAL_GetTick>
 8004592:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004594:	e008      	b.n	80045a8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004596:	f7fe f82b 	bl	80025f0 <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d901      	bls.n	80045a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e1e7      	b.n	8004978 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80045a8:	4b0e      	ldr	r3, [pc, #56]	@ (80045e4 <HAL_RCC_OscConfig+0x27c>)
 80045aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045ae:	f003 0302 	and.w	r3, r3, #2
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d0ef      	beq.n	8004596 <HAL_RCC_OscConfig+0x22e>
 80045b6:	e020      	b.n	80045fa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045b8:	4b0a      	ldr	r3, [pc, #40]	@ (80045e4 <HAL_RCC_OscConfig+0x27c>)
 80045ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045be:	4a09      	ldr	r2, [pc, #36]	@ (80045e4 <HAL_RCC_OscConfig+0x27c>)
 80045c0:	f023 0301 	bic.w	r3, r3, #1
 80045c4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045c8:	f7fe f812 	bl	80025f0 <HAL_GetTick>
 80045cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045ce:	e00d      	b.n	80045ec <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045d0:	f7fe f80e 	bl	80025f0 <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d906      	bls.n	80045ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e1ca      	b.n	8004978 <HAL_RCC_OscConfig+0x610>
 80045e2:	bf00      	nop
 80045e4:	40021000 	.word	0x40021000
 80045e8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045ec:	4b8c      	ldr	r3, [pc, #560]	@ (8004820 <HAL_RCC_OscConfig+0x4b8>)
 80045ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1ea      	bne.n	80045d0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0304 	and.w	r3, r3, #4
 8004602:	2b00      	cmp	r3, #0
 8004604:	f000 80a6 	beq.w	8004754 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004608:	2300      	movs	r3, #0
 800460a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800460c:	4b84      	ldr	r3, [pc, #528]	@ (8004820 <HAL_RCC_OscConfig+0x4b8>)
 800460e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004610:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d101      	bne.n	800461c <HAL_RCC_OscConfig+0x2b4>
 8004618:	2301      	movs	r3, #1
 800461a:	e000      	b.n	800461e <HAL_RCC_OscConfig+0x2b6>
 800461c:	2300      	movs	r3, #0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00d      	beq.n	800463e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004622:	4b7f      	ldr	r3, [pc, #508]	@ (8004820 <HAL_RCC_OscConfig+0x4b8>)
 8004624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004626:	4a7e      	ldr	r2, [pc, #504]	@ (8004820 <HAL_RCC_OscConfig+0x4b8>)
 8004628:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800462c:	6593      	str	r3, [r2, #88]	@ 0x58
 800462e:	4b7c      	ldr	r3, [pc, #496]	@ (8004820 <HAL_RCC_OscConfig+0x4b8>)
 8004630:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004632:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004636:	60fb      	str	r3, [r7, #12]
 8004638:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800463a:	2301      	movs	r3, #1
 800463c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800463e:	4b79      	ldr	r3, [pc, #484]	@ (8004824 <HAL_RCC_OscConfig+0x4bc>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004646:	2b00      	cmp	r3, #0
 8004648:	d118      	bne.n	800467c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800464a:	4b76      	ldr	r3, [pc, #472]	@ (8004824 <HAL_RCC_OscConfig+0x4bc>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a75      	ldr	r2, [pc, #468]	@ (8004824 <HAL_RCC_OscConfig+0x4bc>)
 8004650:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004654:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004656:	f7fd ffcb 	bl	80025f0 <HAL_GetTick>
 800465a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800465c:	e008      	b.n	8004670 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800465e:	f7fd ffc7 	bl	80025f0 <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	2b02      	cmp	r3, #2
 800466a:	d901      	bls.n	8004670 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e183      	b.n	8004978 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004670:	4b6c      	ldr	r3, [pc, #432]	@ (8004824 <HAL_RCC_OscConfig+0x4bc>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004678:	2b00      	cmp	r3, #0
 800467a:	d0f0      	beq.n	800465e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	2b01      	cmp	r3, #1
 8004682:	d108      	bne.n	8004696 <HAL_RCC_OscConfig+0x32e>
 8004684:	4b66      	ldr	r3, [pc, #408]	@ (8004820 <HAL_RCC_OscConfig+0x4b8>)
 8004686:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800468a:	4a65      	ldr	r2, [pc, #404]	@ (8004820 <HAL_RCC_OscConfig+0x4b8>)
 800468c:	f043 0301 	orr.w	r3, r3, #1
 8004690:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004694:	e024      	b.n	80046e0 <HAL_RCC_OscConfig+0x378>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	2b05      	cmp	r3, #5
 800469c:	d110      	bne.n	80046c0 <HAL_RCC_OscConfig+0x358>
 800469e:	4b60      	ldr	r3, [pc, #384]	@ (8004820 <HAL_RCC_OscConfig+0x4b8>)
 80046a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046a4:	4a5e      	ldr	r2, [pc, #376]	@ (8004820 <HAL_RCC_OscConfig+0x4b8>)
 80046a6:	f043 0304 	orr.w	r3, r3, #4
 80046aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80046ae:	4b5c      	ldr	r3, [pc, #368]	@ (8004820 <HAL_RCC_OscConfig+0x4b8>)
 80046b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046b4:	4a5a      	ldr	r2, [pc, #360]	@ (8004820 <HAL_RCC_OscConfig+0x4b8>)
 80046b6:	f043 0301 	orr.w	r3, r3, #1
 80046ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80046be:	e00f      	b.n	80046e0 <HAL_RCC_OscConfig+0x378>
 80046c0:	4b57      	ldr	r3, [pc, #348]	@ (8004820 <HAL_RCC_OscConfig+0x4b8>)
 80046c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046c6:	4a56      	ldr	r2, [pc, #344]	@ (8004820 <HAL_RCC_OscConfig+0x4b8>)
 80046c8:	f023 0301 	bic.w	r3, r3, #1
 80046cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80046d0:	4b53      	ldr	r3, [pc, #332]	@ (8004820 <HAL_RCC_OscConfig+0x4b8>)
 80046d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046d6:	4a52      	ldr	r2, [pc, #328]	@ (8004820 <HAL_RCC_OscConfig+0x4b8>)
 80046d8:	f023 0304 	bic.w	r3, r3, #4
 80046dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d016      	beq.n	8004716 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046e8:	f7fd ff82 	bl	80025f0 <HAL_GetTick>
 80046ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046ee:	e00a      	b.n	8004706 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046f0:	f7fd ff7e 	bl	80025f0 <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046fe:	4293      	cmp	r3, r2
 8004700:	d901      	bls.n	8004706 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e138      	b.n	8004978 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004706:	4b46      	ldr	r3, [pc, #280]	@ (8004820 <HAL_RCC_OscConfig+0x4b8>)
 8004708:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800470c:	f003 0302 	and.w	r3, r3, #2
 8004710:	2b00      	cmp	r3, #0
 8004712:	d0ed      	beq.n	80046f0 <HAL_RCC_OscConfig+0x388>
 8004714:	e015      	b.n	8004742 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004716:	f7fd ff6b 	bl	80025f0 <HAL_GetTick>
 800471a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800471c:	e00a      	b.n	8004734 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800471e:	f7fd ff67 	bl	80025f0 <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	f241 3288 	movw	r2, #5000	@ 0x1388
 800472c:	4293      	cmp	r3, r2
 800472e:	d901      	bls.n	8004734 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e121      	b.n	8004978 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004734:	4b3a      	ldr	r3, [pc, #232]	@ (8004820 <HAL_RCC_OscConfig+0x4b8>)
 8004736:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1ed      	bne.n	800471e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004742:	7ffb      	ldrb	r3, [r7, #31]
 8004744:	2b01      	cmp	r3, #1
 8004746:	d105      	bne.n	8004754 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004748:	4b35      	ldr	r3, [pc, #212]	@ (8004820 <HAL_RCC_OscConfig+0x4b8>)
 800474a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800474c:	4a34      	ldr	r2, [pc, #208]	@ (8004820 <HAL_RCC_OscConfig+0x4b8>)
 800474e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004752:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0320 	and.w	r3, r3, #32
 800475c:	2b00      	cmp	r3, #0
 800475e:	d03c      	beq.n	80047da <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	699b      	ldr	r3, [r3, #24]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d01c      	beq.n	80047a2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004768:	4b2d      	ldr	r3, [pc, #180]	@ (8004820 <HAL_RCC_OscConfig+0x4b8>)
 800476a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800476e:	4a2c      	ldr	r2, [pc, #176]	@ (8004820 <HAL_RCC_OscConfig+0x4b8>)
 8004770:	f043 0301 	orr.w	r3, r3, #1
 8004774:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004778:	f7fd ff3a 	bl	80025f0 <HAL_GetTick>
 800477c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800477e:	e008      	b.n	8004792 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004780:	f7fd ff36 	bl	80025f0 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	2b02      	cmp	r3, #2
 800478c:	d901      	bls.n	8004792 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e0f2      	b.n	8004978 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004792:	4b23      	ldr	r3, [pc, #140]	@ (8004820 <HAL_RCC_OscConfig+0x4b8>)
 8004794:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004798:	f003 0302 	and.w	r3, r3, #2
 800479c:	2b00      	cmp	r3, #0
 800479e:	d0ef      	beq.n	8004780 <HAL_RCC_OscConfig+0x418>
 80047a0:	e01b      	b.n	80047da <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80047a2:	4b1f      	ldr	r3, [pc, #124]	@ (8004820 <HAL_RCC_OscConfig+0x4b8>)
 80047a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80047a8:	4a1d      	ldr	r2, [pc, #116]	@ (8004820 <HAL_RCC_OscConfig+0x4b8>)
 80047aa:	f023 0301 	bic.w	r3, r3, #1
 80047ae:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047b2:	f7fd ff1d 	bl	80025f0 <HAL_GetTick>
 80047b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80047b8:	e008      	b.n	80047cc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80047ba:	f7fd ff19 	bl	80025f0 <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d901      	bls.n	80047cc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e0d5      	b.n	8004978 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80047cc:	4b14      	ldr	r3, [pc, #80]	@ (8004820 <HAL_RCC_OscConfig+0x4b8>)
 80047ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d1ef      	bne.n	80047ba <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	69db      	ldr	r3, [r3, #28]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	f000 80c9 	beq.w	8004976 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047e4:	4b0e      	ldr	r3, [pc, #56]	@ (8004820 <HAL_RCC_OscConfig+0x4b8>)
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f003 030c 	and.w	r3, r3, #12
 80047ec:	2b0c      	cmp	r3, #12
 80047ee:	f000 8083 	beq.w	80048f8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	69db      	ldr	r3, [r3, #28]
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d15e      	bne.n	80048b8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047fa:	4b09      	ldr	r3, [pc, #36]	@ (8004820 <HAL_RCC_OscConfig+0x4b8>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a08      	ldr	r2, [pc, #32]	@ (8004820 <HAL_RCC_OscConfig+0x4b8>)
 8004800:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004804:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004806:	f7fd fef3 	bl	80025f0 <HAL_GetTick>
 800480a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800480c:	e00c      	b.n	8004828 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800480e:	f7fd feef 	bl	80025f0 <HAL_GetTick>
 8004812:	4602      	mov	r2, r0
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	2b02      	cmp	r3, #2
 800481a:	d905      	bls.n	8004828 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e0ab      	b.n	8004978 <HAL_RCC_OscConfig+0x610>
 8004820:	40021000 	.word	0x40021000
 8004824:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004828:	4b55      	ldr	r3, [pc, #340]	@ (8004980 <HAL_RCC_OscConfig+0x618>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1ec      	bne.n	800480e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004834:	4b52      	ldr	r3, [pc, #328]	@ (8004980 <HAL_RCC_OscConfig+0x618>)
 8004836:	68da      	ldr	r2, [r3, #12]
 8004838:	4b52      	ldr	r3, [pc, #328]	@ (8004984 <HAL_RCC_OscConfig+0x61c>)
 800483a:	4013      	ands	r3, r2
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	6a11      	ldr	r1, [r2, #32]
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004844:	3a01      	subs	r2, #1
 8004846:	0112      	lsls	r2, r2, #4
 8004848:	4311      	orrs	r1, r2
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800484e:	0212      	lsls	r2, r2, #8
 8004850:	4311      	orrs	r1, r2
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004856:	0852      	lsrs	r2, r2, #1
 8004858:	3a01      	subs	r2, #1
 800485a:	0552      	lsls	r2, r2, #21
 800485c:	4311      	orrs	r1, r2
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004862:	0852      	lsrs	r2, r2, #1
 8004864:	3a01      	subs	r2, #1
 8004866:	0652      	lsls	r2, r2, #25
 8004868:	4311      	orrs	r1, r2
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800486e:	06d2      	lsls	r2, r2, #27
 8004870:	430a      	orrs	r2, r1
 8004872:	4943      	ldr	r1, [pc, #268]	@ (8004980 <HAL_RCC_OscConfig+0x618>)
 8004874:	4313      	orrs	r3, r2
 8004876:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004878:	4b41      	ldr	r3, [pc, #260]	@ (8004980 <HAL_RCC_OscConfig+0x618>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a40      	ldr	r2, [pc, #256]	@ (8004980 <HAL_RCC_OscConfig+0x618>)
 800487e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004882:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004884:	4b3e      	ldr	r3, [pc, #248]	@ (8004980 <HAL_RCC_OscConfig+0x618>)
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	4a3d      	ldr	r2, [pc, #244]	@ (8004980 <HAL_RCC_OscConfig+0x618>)
 800488a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800488e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004890:	f7fd feae 	bl	80025f0 <HAL_GetTick>
 8004894:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004896:	e008      	b.n	80048aa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004898:	f7fd feaa 	bl	80025f0 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d901      	bls.n	80048aa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e066      	b.n	8004978 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048aa:	4b35      	ldr	r3, [pc, #212]	@ (8004980 <HAL_RCC_OscConfig+0x618>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d0f0      	beq.n	8004898 <HAL_RCC_OscConfig+0x530>
 80048b6:	e05e      	b.n	8004976 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048b8:	4b31      	ldr	r3, [pc, #196]	@ (8004980 <HAL_RCC_OscConfig+0x618>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a30      	ldr	r2, [pc, #192]	@ (8004980 <HAL_RCC_OscConfig+0x618>)
 80048be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80048c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048c4:	f7fd fe94 	bl	80025f0 <HAL_GetTick>
 80048c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048ca:	e008      	b.n	80048de <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048cc:	f7fd fe90 	bl	80025f0 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d901      	bls.n	80048de <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e04c      	b.n	8004978 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048de:	4b28      	ldr	r3, [pc, #160]	@ (8004980 <HAL_RCC_OscConfig+0x618>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d1f0      	bne.n	80048cc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80048ea:	4b25      	ldr	r3, [pc, #148]	@ (8004980 <HAL_RCC_OscConfig+0x618>)
 80048ec:	68da      	ldr	r2, [r3, #12]
 80048ee:	4924      	ldr	r1, [pc, #144]	@ (8004980 <HAL_RCC_OscConfig+0x618>)
 80048f0:	4b25      	ldr	r3, [pc, #148]	@ (8004988 <HAL_RCC_OscConfig+0x620>)
 80048f2:	4013      	ands	r3, r2
 80048f4:	60cb      	str	r3, [r1, #12]
 80048f6:	e03e      	b.n	8004976 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	69db      	ldr	r3, [r3, #28]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d101      	bne.n	8004904 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e039      	b.n	8004978 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004904:	4b1e      	ldr	r3, [pc, #120]	@ (8004980 <HAL_RCC_OscConfig+0x618>)
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	f003 0203 	and.w	r2, r3, #3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a1b      	ldr	r3, [r3, #32]
 8004914:	429a      	cmp	r2, r3
 8004916:	d12c      	bne.n	8004972 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004922:	3b01      	subs	r3, #1
 8004924:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004926:	429a      	cmp	r2, r3
 8004928:	d123      	bne.n	8004972 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004934:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004936:	429a      	cmp	r2, r3
 8004938:	d11b      	bne.n	8004972 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004944:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004946:	429a      	cmp	r2, r3
 8004948:	d113      	bne.n	8004972 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004954:	085b      	lsrs	r3, r3, #1
 8004956:	3b01      	subs	r3, #1
 8004958:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800495a:	429a      	cmp	r2, r3
 800495c:	d109      	bne.n	8004972 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004968:	085b      	lsrs	r3, r3, #1
 800496a:	3b01      	subs	r3, #1
 800496c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800496e:	429a      	cmp	r2, r3
 8004970:	d001      	beq.n	8004976 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e000      	b.n	8004978 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004976:	2300      	movs	r3, #0
}
 8004978:	4618      	mov	r0, r3
 800497a:	3720      	adds	r7, #32
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	40021000 	.word	0x40021000
 8004984:	019f800c 	.word	0x019f800c
 8004988:	feeefffc 	.word	0xfeeefffc

0800498c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b086      	sub	sp, #24
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004996:	2300      	movs	r3, #0
 8004998:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d101      	bne.n	80049a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e11e      	b.n	8004be2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049a4:	4b91      	ldr	r3, [pc, #580]	@ (8004bec <HAL_RCC_ClockConfig+0x260>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 030f 	and.w	r3, r3, #15
 80049ac:	683a      	ldr	r2, [r7, #0]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d910      	bls.n	80049d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049b2:	4b8e      	ldr	r3, [pc, #568]	@ (8004bec <HAL_RCC_ClockConfig+0x260>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f023 020f 	bic.w	r2, r3, #15
 80049ba:	498c      	ldr	r1, [pc, #560]	@ (8004bec <HAL_RCC_ClockConfig+0x260>)
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	4313      	orrs	r3, r2
 80049c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049c2:	4b8a      	ldr	r3, [pc, #552]	@ (8004bec <HAL_RCC_ClockConfig+0x260>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 030f 	and.w	r3, r3, #15
 80049ca:	683a      	ldr	r2, [r7, #0]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d001      	beq.n	80049d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e106      	b.n	8004be2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0301 	and.w	r3, r3, #1
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d073      	beq.n	8004ac8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	2b03      	cmp	r3, #3
 80049e6:	d129      	bne.n	8004a3c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049e8:	4b81      	ldr	r3, [pc, #516]	@ (8004bf0 <HAL_RCC_ClockConfig+0x264>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d101      	bne.n	80049f8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e0f4      	b.n	8004be2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80049f8:	f000 f99c 	bl	8004d34 <RCC_GetSysClockFreqFromPLLSource>
 80049fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	4a7c      	ldr	r2, [pc, #496]	@ (8004bf4 <HAL_RCC_ClockConfig+0x268>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d93f      	bls.n	8004a86 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004a06:	4b7a      	ldr	r3, [pc, #488]	@ (8004bf0 <HAL_RCC_ClockConfig+0x264>)
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d009      	beq.n	8004a26 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d033      	beq.n	8004a86 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d12f      	bne.n	8004a86 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004a26:	4b72      	ldr	r3, [pc, #456]	@ (8004bf0 <HAL_RCC_ClockConfig+0x264>)
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a2e:	4a70      	ldr	r2, [pc, #448]	@ (8004bf0 <HAL_RCC_ClockConfig+0x264>)
 8004a30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a34:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004a36:	2380      	movs	r3, #128	@ 0x80
 8004a38:	617b      	str	r3, [r7, #20]
 8004a3a:	e024      	b.n	8004a86 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d107      	bne.n	8004a54 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a44:	4b6a      	ldr	r3, [pc, #424]	@ (8004bf0 <HAL_RCC_ClockConfig+0x264>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d109      	bne.n	8004a64 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e0c6      	b.n	8004be2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a54:	4b66      	ldr	r3, [pc, #408]	@ (8004bf0 <HAL_RCC_ClockConfig+0x264>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d101      	bne.n	8004a64 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e0be      	b.n	8004be2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004a64:	f000 f8ce 	bl	8004c04 <HAL_RCC_GetSysClockFreq>
 8004a68:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	4a61      	ldr	r2, [pc, #388]	@ (8004bf4 <HAL_RCC_ClockConfig+0x268>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d909      	bls.n	8004a86 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004a72:	4b5f      	ldr	r3, [pc, #380]	@ (8004bf0 <HAL_RCC_ClockConfig+0x264>)
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a7a:	4a5d      	ldr	r2, [pc, #372]	@ (8004bf0 <HAL_RCC_ClockConfig+0x264>)
 8004a7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a80:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004a82:	2380      	movs	r3, #128	@ 0x80
 8004a84:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a86:	4b5a      	ldr	r3, [pc, #360]	@ (8004bf0 <HAL_RCC_ClockConfig+0x264>)
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f023 0203 	bic.w	r2, r3, #3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	4957      	ldr	r1, [pc, #348]	@ (8004bf0 <HAL_RCC_ClockConfig+0x264>)
 8004a94:	4313      	orrs	r3, r2
 8004a96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a98:	f7fd fdaa 	bl	80025f0 <HAL_GetTick>
 8004a9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a9e:	e00a      	b.n	8004ab6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004aa0:	f7fd fda6 	bl	80025f0 <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d901      	bls.n	8004ab6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e095      	b.n	8004be2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ab6:	4b4e      	ldr	r3, [pc, #312]	@ (8004bf0 <HAL_RCC_ClockConfig+0x264>)
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f003 020c 	and.w	r2, r3, #12
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d1eb      	bne.n	8004aa0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0302 	and.w	r3, r3, #2
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d023      	beq.n	8004b1c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0304 	and.w	r3, r3, #4
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d005      	beq.n	8004aec <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ae0:	4b43      	ldr	r3, [pc, #268]	@ (8004bf0 <HAL_RCC_ClockConfig+0x264>)
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	4a42      	ldr	r2, [pc, #264]	@ (8004bf0 <HAL_RCC_ClockConfig+0x264>)
 8004ae6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004aea:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0308 	and.w	r3, r3, #8
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d007      	beq.n	8004b08 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004af8:	4b3d      	ldr	r3, [pc, #244]	@ (8004bf0 <HAL_RCC_ClockConfig+0x264>)
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004b00:	4a3b      	ldr	r2, [pc, #236]	@ (8004bf0 <HAL_RCC_ClockConfig+0x264>)
 8004b02:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004b06:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b08:	4b39      	ldr	r3, [pc, #228]	@ (8004bf0 <HAL_RCC_ClockConfig+0x264>)
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	4936      	ldr	r1, [pc, #216]	@ (8004bf0 <HAL_RCC_ClockConfig+0x264>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	608b      	str	r3, [r1, #8]
 8004b1a:	e008      	b.n	8004b2e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	2b80      	cmp	r3, #128	@ 0x80
 8004b20:	d105      	bne.n	8004b2e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004b22:	4b33      	ldr	r3, [pc, #204]	@ (8004bf0 <HAL_RCC_ClockConfig+0x264>)
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	4a32      	ldr	r2, [pc, #200]	@ (8004bf0 <HAL_RCC_ClockConfig+0x264>)
 8004b28:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b2c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b2e:	4b2f      	ldr	r3, [pc, #188]	@ (8004bec <HAL_RCC_ClockConfig+0x260>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 030f 	and.w	r3, r3, #15
 8004b36:	683a      	ldr	r2, [r7, #0]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d21d      	bcs.n	8004b78 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b3c:	4b2b      	ldr	r3, [pc, #172]	@ (8004bec <HAL_RCC_ClockConfig+0x260>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f023 020f 	bic.w	r2, r3, #15
 8004b44:	4929      	ldr	r1, [pc, #164]	@ (8004bec <HAL_RCC_ClockConfig+0x260>)
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004b4c:	f7fd fd50 	bl	80025f0 <HAL_GetTick>
 8004b50:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b52:	e00a      	b.n	8004b6a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b54:	f7fd fd4c 	bl	80025f0 <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d901      	bls.n	8004b6a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e03b      	b.n	8004be2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b6a:	4b20      	ldr	r3, [pc, #128]	@ (8004bec <HAL_RCC_ClockConfig+0x260>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 030f 	and.w	r3, r3, #15
 8004b72:	683a      	ldr	r2, [r7, #0]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d1ed      	bne.n	8004b54 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0304 	and.w	r3, r3, #4
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d008      	beq.n	8004b96 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b84:	4b1a      	ldr	r3, [pc, #104]	@ (8004bf0 <HAL_RCC_ClockConfig+0x264>)
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	4917      	ldr	r1, [pc, #92]	@ (8004bf0 <HAL_RCC_ClockConfig+0x264>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0308 	and.w	r3, r3, #8
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d009      	beq.n	8004bb6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ba2:	4b13      	ldr	r3, [pc, #76]	@ (8004bf0 <HAL_RCC_ClockConfig+0x264>)
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	00db      	lsls	r3, r3, #3
 8004bb0:	490f      	ldr	r1, [pc, #60]	@ (8004bf0 <HAL_RCC_ClockConfig+0x264>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004bb6:	f000 f825 	bl	8004c04 <HAL_RCC_GetSysClockFreq>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8004bf0 <HAL_RCC_ClockConfig+0x264>)
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	091b      	lsrs	r3, r3, #4
 8004bc2:	f003 030f 	and.w	r3, r3, #15
 8004bc6:	490c      	ldr	r1, [pc, #48]	@ (8004bf8 <HAL_RCC_ClockConfig+0x26c>)
 8004bc8:	5ccb      	ldrb	r3, [r1, r3]
 8004bca:	f003 031f 	and.w	r3, r3, #31
 8004bce:	fa22 f303 	lsr.w	r3, r2, r3
 8004bd2:	4a0a      	ldr	r2, [pc, #40]	@ (8004bfc <HAL_RCC_ClockConfig+0x270>)
 8004bd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8004c00 <HAL_RCC_ClockConfig+0x274>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7fd fcbc 	bl	8002558 <HAL_InitTick>
 8004be0:	4603      	mov	r3, r0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3718      	adds	r7, #24
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	40022000 	.word	0x40022000
 8004bf0:	40021000 	.word	0x40021000
 8004bf4:	04c4b400 	.word	0x04c4b400
 8004bf8:	0800c9a4 	.word	0x0800c9a4
 8004bfc:	20000000 	.word	0x20000000
 8004c00:	20000004 	.word	0x20000004

08004c04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b087      	sub	sp, #28
 8004c08:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004c0a:	4b2c      	ldr	r3, [pc, #176]	@ (8004cbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f003 030c 	and.w	r3, r3, #12
 8004c12:	2b04      	cmp	r3, #4
 8004c14:	d102      	bne.n	8004c1c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004c16:	4b2a      	ldr	r3, [pc, #168]	@ (8004cc0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004c18:	613b      	str	r3, [r7, #16]
 8004c1a:	e047      	b.n	8004cac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004c1c:	4b27      	ldr	r3, [pc, #156]	@ (8004cbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	f003 030c 	and.w	r3, r3, #12
 8004c24:	2b08      	cmp	r3, #8
 8004c26:	d102      	bne.n	8004c2e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004c28:	4b25      	ldr	r3, [pc, #148]	@ (8004cc0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004c2a:	613b      	str	r3, [r7, #16]
 8004c2c:	e03e      	b.n	8004cac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004c2e:	4b23      	ldr	r3, [pc, #140]	@ (8004cbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f003 030c 	and.w	r3, r3, #12
 8004c36:	2b0c      	cmp	r3, #12
 8004c38:	d136      	bne.n	8004ca8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c3a:	4b20      	ldr	r3, [pc, #128]	@ (8004cbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	f003 0303 	and.w	r3, r3, #3
 8004c42:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c44:	4b1d      	ldr	r3, [pc, #116]	@ (8004cbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	091b      	lsrs	r3, r3, #4
 8004c4a:	f003 030f 	and.w	r3, r3, #15
 8004c4e:	3301      	adds	r3, #1
 8004c50:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2b03      	cmp	r3, #3
 8004c56:	d10c      	bne.n	8004c72 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c58:	4a19      	ldr	r2, [pc, #100]	@ (8004cc0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c60:	4a16      	ldr	r2, [pc, #88]	@ (8004cbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c62:	68d2      	ldr	r2, [r2, #12]
 8004c64:	0a12      	lsrs	r2, r2, #8
 8004c66:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004c6a:	fb02 f303 	mul.w	r3, r2, r3
 8004c6e:	617b      	str	r3, [r7, #20]
      break;
 8004c70:	e00c      	b.n	8004c8c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c72:	4a13      	ldr	r2, [pc, #76]	@ (8004cc0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c7a:	4a10      	ldr	r2, [pc, #64]	@ (8004cbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c7c:	68d2      	ldr	r2, [r2, #12]
 8004c7e:	0a12      	lsrs	r2, r2, #8
 8004c80:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004c84:	fb02 f303 	mul.w	r3, r2, r3
 8004c88:	617b      	str	r3, [r7, #20]
      break;
 8004c8a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8004cbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	0e5b      	lsrs	r3, r3, #25
 8004c92:	f003 0303 	and.w	r3, r3, #3
 8004c96:	3301      	adds	r3, #1
 8004c98:	005b      	lsls	r3, r3, #1
 8004c9a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004c9c:	697a      	ldr	r2, [r7, #20]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ca4:	613b      	str	r3, [r7, #16]
 8004ca6:	e001      	b.n	8004cac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004cac:	693b      	ldr	r3, [r7, #16]
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	371c      	adds	r7, #28
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	40021000 	.word	0x40021000
 8004cc0:	00f42400 	.word	0x00f42400

08004cc4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cc8:	4b03      	ldr	r3, [pc, #12]	@ (8004cd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004cca:	681b      	ldr	r3, [r3, #0]
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	20000000 	.word	0x20000000

08004cdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004ce0:	f7ff fff0 	bl	8004cc4 <HAL_RCC_GetHCLKFreq>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	4b06      	ldr	r3, [pc, #24]	@ (8004d00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	0a1b      	lsrs	r3, r3, #8
 8004cec:	f003 0307 	and.w	r3, r3, #7
 8004cf0:	4904      	ldr	r1, [pc, #16]	@ (8004d04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004cf2:	5ccb      	ldrb	r3, [r1, r3]
 8004cf4:	f003 031f 	and.w	r3, r3, #31
 8004cf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	40021000 	.word	0x40021000
 8004d04:	0800c9b4 	.word	0x0800c9b4

08004d08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004d0c:	f7ff ffda 	bl	8004cc4 <HAL_RCC_GetHCLKFreq>
 8004d10:	4602      	mov	r2, r0
 8004d12:	4b06      	ldr	r3, [pc, #24]	@ (8004d2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	0adb      	lsrs	r3, r3, #11
 8004d18:	f003 0307 	and.w	r3, r3, #7
 8004d1c:	4904      	ldr	r1, [pc, #16]	@ (8004d30 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d1e:	5ccb      	ldrb	r3, [r1, r3]
 8004d20:	f003 031f 	and.w	r3, r3, #31
 8004d24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	40021000 	.word	0x40021000
 8004d30:	0800c9b4 	.word	0x0800c9b4

08004d34 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b087      	sub	sp, #28
 8004d38:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d3a:	4b1e      	ldr	r3, [pc, #120]	@ (8004db4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	f003 0303 	and.w	r3, r3, #3
 8004d42:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d44:	4b1b      	ldr	r3, [pc, #108]	@ (8004db4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	091b      	lsrs	r3, r3, #4
 8004d4a:	f003 030f 	and.w	r3, r3, #15
 8004d4e:	3301      	adds	r3, #1
 8004d50:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	2b03      	cmp	r3, #3
 8004d56:	d10c      	bne.n	8004d72 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d58:	4a17      	ldr	r2, [pc, #92]	@ (8004db8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d60:	4a14      	ldr	r2, [pc, #80]	@ (8004db4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004d62:	68d2      	ldr	r2, [r2, #12]
 8004d64:	0a12      	lsrs	r2, r2, #8
 8004d66:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004d6a:	fb02 f303 	mul.w	r3, r2, r3
 8004d6e:	617b      	str	r3, [r7, #20]
    break;
 8004d70:	e00c      	b.n	8004d8c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d72:	4a11      	ldr	r2, [pc, #68]	@ (8004db8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d7a:	4a0e      	ldr	r2, [pc, #56]	@ (8004db4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004d7c:	68d2      	ldr	r2, [r2, #12]
 8004d7e:	0a12      	lsrs	r2, r2, #8
 8004d80:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004d84:	fb02 f303 	mul.w	r3, r2, r3
 8004d88:	617b      	str	r3, [r7, #20]
    break;
 8004d8a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d8c:	4b09      	ldr	r3, [pc, #36]	@ (8004db4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	0e5b      	lsrs	r3, r3, #25
 8004d92:	f003 0303 	and.w	r3, r3, #3
 8004d96:	3301      	adds	r3, #1
 8004d98:	005b      	lsls	r3, r3, #1
 8004d9a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004d9c:	697a      	ldr	r2, [r7, #20]
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004da4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004da6:	687b      	ldr	r3, [r7, #4]
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	371c      	adds	r7, #28
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr
 8004db4:	40021000 	.word	0x40021000
 8004db8:	00f42400 	.word	0x00f42400

08004dbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b086      	sub	sp, #24
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004dc8:	2300      	movs	r3, #0
 8004dca:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	f000 8098 	beq.w	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dde:	4b43      	ldr	r3, [pc, #268]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004de2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d10d      	bne.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dea:	4b40      	ldr	r3, [pc, #256]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004dec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dee:	4a3f      	ldr	r2, [pc, #252]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004df0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004df4:	6593      	str	r3, [r2, #88]	@ 0x58
 8004df6:	4b3d      	ldr	r3, [pc, #244]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004df8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dfe:	60bb      	str	r3, [r7, #8]
 8004e00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e02:	2301      	movs	r3, #1
 8004e04:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e06:	4b3a      	ldr	r3, [pc, #232]	@ (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a39      	ldr	r2, [pc, #228]	@ (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004e0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e10:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e12:	f7fd fbed 	bl	80025f0 <HAL_GetTick>
 8004e16:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e18:	e009      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e1a:	f7fd fbe9 	bl	80025f0 <HAL_GetTick>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d902      	bls.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	74fb      	strb	r3, [r7, #19]
        break;
 8004e2c:	e005      	b.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e2e:	4b30      	ldr	r3, [pc, #192]	@ (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d0ef      	beq.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004e3a:	7cfb      	ldrb	r3, [r7, #19]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d159      	bne.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004e40:	4b2a      	ldr	r3, [pc, #168]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e4a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d01e      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e56:	697a      	ldr	r2, [r7, #20]
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d019      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004e5c:	4b23      	ldr	r3, [pc, #140]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e66:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e68:	4b20      	ldr	r3, [pc, #128]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e6e:	4a1f      	ldr	r2, [pc, #124]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e78:	4b1c      	ldr	r3, [pc, #112]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e7e:	4a1b      	ldr	r2, [pc, #108]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004e88:	4a18      	ldr	r2, [pc, #96]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	f003 0301 	and.w	r3, r3, #1
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d016      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e9a:	f7fd fba9 	bl	80025f0 <HAL_GetTick>
 8004e9e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ea0:	e00b      	b.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ea2:	f7fd fba5 	bl	80025f0 <HAL_GetTick>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d902      	bls.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	74fb      	strb	r3, [r7, #19]
            break;
 8004eb8:	e006      	b.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004eba:	4b0c      	ldr	r3, [pc, #48]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ec0:	f003 0302 	and.w	r3, r3, #2
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d0ec      	beq.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004ec8:	7cfb      	ldrb	r3, [r7, #19]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d10b      	bne.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ece:	4b07      	ldr	r3, [pc, #28]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ed4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004edc:	4903      	ldr	r1, [pc, #12]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004ee4:	e008      	b.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004ee6:	7cfb      	ldrb	r3, [r7, #19]
 8004ee8:	74bb      	strb	r3, [r7, #18]
 8004eea:	e005      	b.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004eec:	40021000 	.word	0x40021000
 8004ef0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ef4:	7cfb      	ldrb	r3, [r7, #19]
 8004ef6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ef8:	7c7b      	ldrb	r3, [r7, #17]
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d105      	bne.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004efe:	4ba6      	ldr	r3, [pc, #664]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f02:	4aa5      	ldr	r2, [pc, #660]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f08:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0301 	and.w	r3, r3, #1
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00a      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f16:	4ba0      	ldr	r3, [pc, #640]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f1c:	f023 0203 	bic.w	r2, r3, #3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	499c      	ldr	r1, [pc, #624]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0302 	and.w	r3, r3, #2
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d00a      	beq.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f38:	4b97      	ldr	r3, [pc, #604]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f3e:	f023 020c 	bic.w	r2, r3, #12
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	4994      	ldr	r1, [pc, #592]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0304 	and.w	r3, r3, #4
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00a      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f5a:	4b8f      	ldr	r3, [pc, #572]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f60:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	498b      	ldr	r1, [pc, #556]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0308 	and.w	r3, r3, #8
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d00a      	beq.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004f7c:	4b86      	ldr	r3, [pc, #536]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f82:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	4983      	ldr	r1, [pc, #524]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 0320 	and.w	r3, r3, #32
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00a      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f9e:	4b7e      	ldr	r3, [pc, #504]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fa4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	695b      	ldr	r3, [r3, #20]
 8004fac:	497a      	ldr	r1, [pc, #488]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d00a      	beq.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004fc0:	4b75      	ldr	r3, [pc, #468]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fc6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	4972      	ldr	r1, [pc, #456]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d00a      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004fe2:	4b6d      	ldr	r3, [pc, #436]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fe8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	69db      	ldr	r3, [r3, #28]
 8004ff0:	4969      	ldr	r1, [pc, #420]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005000:	2b00      	cmp	r3, #0
 8005002:	d00a      	beq.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005004:	4b64      	ldr	r3, [pc, #400]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005006:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800500a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	4961      	ldr	r1, [pc, #388]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005014:	4313      	orrs	r3, r2
 8005016:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00a      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005026:	4b5c      	ldr	r3, [pc, #368]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005028:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800502c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005034:	4958      	ldr	r1, [pc, #352]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005036:	4313      	orrs	r3, r2
 8005038:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005044:	2b00      	cmp	r3, #0
 8005046:	d015      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005048:	4b53      	ldr	r3, [pc, #332]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800504a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800504e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005056:	4950      	ldr	r1, [pc, #320]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005058:	4313      	orrs	r3, r2
 800505a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005062:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005066:	d105      	bne.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005068:	4b4b      	ldr	r3, [pc, #300]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	4a4a      	ldr	r2, [pc, #296]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800506e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005072:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800507c:	2b00      	cmp	r3, #0
 800507e:	d015      	beq.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005080:	4b45      	ldr	r3, [pc, #276]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005082:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005086:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800508e:	4942      	ldr	r1, [pc, #264]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005090:	4313      	orrs	r3, r2
 8005092:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800509a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800509e:	d105      	bne.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050a0:	4b3d      	ldr	r3, [pc, #244]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	4a3c      	ldr	r2, [pc, #240]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80050aa:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d015      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80050b8:	4b37      	ldr	r3, [pc, #220]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050be:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050c6:	4934      	ldr	r1, [pc, #208]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050c8:	4313      	orrs	r3, r2
 80050ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80050d6:	d105      	bne.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050d8:	4b2f      	ldr	r3, [pc, #188]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	4a2e      	ldr	r2, [pc, #184]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80050e2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d015      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80050f0:	4b29      	ldr	r3, [pc, #164]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050f6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050fe:	4926      	ldr	r1, [pc, #152]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005100:	4313      	orrs	r3, r2
 8005102:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800510a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800510e:	d105      	bne.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005110:	4b21      	ldr	r3, [pc, #132]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	4a20      	ldr	r2, [pc, #128]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005116:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800511a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d015      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005128:	4b1b      	ldr	r3, [pc, #108]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800512a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800512e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005136:	4918      	ldr	r1, [pc, #96]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005138:	4313      	orrs	r3, r2
 800513a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005142:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005146:	d105      	bne.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005148:	4b13      	ldr	r3, [pc, #76]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	4a12      	ldr	r2, [pc, #72]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800514e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005152:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800515c:	2b00      	cmp	r3, #0
 800515e:	d015      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005160:	4b0d      	ldr	r3, [pc, #52]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005162:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005166:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800516e:	490a      	ldr	r1, [pc, #40]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005170:	4313      	orrs	r3, r2
 8005172:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800517a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800517e:	d105      	bne.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005180:	4b05      	ldr	r3, [pc, #20]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	4a04      	ldr	r2, [pc, #16]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005186:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800518a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800518c:	7cbb      	ldrb	r3, [r7, #18]
}
 800518e:	4618      	mov	r0, r3
 8005190:	3718      	adds	r7, #24
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	40021000 	.word	0x40021000

0800519c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d101      	bne.n	80051ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e09d      	b.n	80052ea <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d108      	bne.n	80051c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80051be:	d009      	beq.n	80051d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	61da      	str	r2, [r3, #28]
 80051c6:	e005      	b.n	80051d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d106      	bne.n	80051f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f7fc f9ea 	bl	80015c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2202      	movs	r2, #2
 80051f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800520a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005214:	d902      	bls.n	800521c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005216:	2300      	movs	r3, #0
 8005218:	60fb      	str	r3, [r7, #12]
 800521a:	e002      	b.n	8005222 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800521c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005220:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800522a:	d007      	beq.n	800523c <HAL_SPI_Init+0xa0>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005234:	d002      	beq.n	800523c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800524c:	431a      	orrs	r2, r3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	f003 0302 	and.w	r3, r3, #2
 8005256:	431a      	orrs	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	695b      	ldr	r3, [r3, #20]
 800525c:	f003 0301 	and.w	r3, r3, #1
 8005260:	431a      	orrs	r2, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800526a:	431a      	orrs	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	69db      	ldr	r3, [r3, #28]
 8005270:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005274:	431a      	orrs	r2, r3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800527e:	ea42 0103 	orr.w	r1, r2, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005286:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	430a      	orrs	r2, r1
 8005290:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	699b      	ldr	r3, [r3, #24]
 8005296:	0c1b      	lsrs	r3, r3, #16
 8005298:	f003 0204 	and.w	r2, r3, #4
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a0:	f003 0310 	and.w	r3, r3, #16
 80052a4:	431a      	orrs	r2, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052aa:	f003 0308 	and.w	r3, r3, #8
 80052ae:	431a      	orrs	r2, r3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80052b8:	ea42 0103 	orr.w	r1, r2, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	430a      	orrs	r2, r1
 80052c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	69da      	ldr	r2, [r3, #28]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80052d8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80052e8:	2300      	movs	r3, #0
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3710      	adds	r7, #16
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}

080052f2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052f2:	b580      	push	{r7, lr}
 80052f4:	b082      	sub	sp, #8
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d101      	bne.n	8005304 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	e049      	b.n	8005398 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800530a:	b2db      	uxtb	r3, r3
 800530c:	2b00      	cmp	r3, #0
 800530e:	d106      	bne.n	800531e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f7fc fc4b 	bl	8001bb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2202      	movs	r2, #2
 8005322:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	3304      	adds	r3, #4
 800532e:	4619      	mov	r1, r3
 8005330:	4610      	mov	r0, r2
 8005332:	f000 fb4b 	bl	80059cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2201      	movs	r2, #1
 800533a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2201      	movs	r2, #1
 8005342:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2201      	movs	r2, #1
 800534a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2201      	movs	r2, #1
 8005352:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2201      	movs	r2, #1
 800535a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2201      	movs	r2, #1
 8005362:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2201      	movs	r2, #1
 800536a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2201      	movs	r2, #1
 8005372:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2201      	movs	r2, #1
 800537a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2201      	movs	r2, #1
 8005382:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2201      	movs	r2, #1
 800538a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2201      	movs	r2, #1
 8005392:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	3708      	adds	r7, #8
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d101      	bne.n	80053b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e049      	b.n	8005446 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d106      	bne.n	80053cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 f841 	bl	800544e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2202      	movs	r2, #2
 80053d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	3304      	adds	r3, #4
 80053dc:	4619      	mov	r1, r3
 80053de:	4610      	mov	r0, r2
 80053e0:	f000 faf4 	bl	80059cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	3708      	adds	r7, #8
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}

0800544e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800544e:	b480      	push	{r7}
 8005450:	b083      	sub	sp, #12
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005456:	bf00      	nop
 8005458:	370c      	adds	r7, #12
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr

08005462 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005462:	b580      	push	{r7, lr}
 8005464:	b086      	sub	sp, #24
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
 800546a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d101      	bne.n	8005476 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e097      	b.n	80055a6 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800547c:	b2db      	uxtb	r3, r3
 800547e:	2b00      	cmp	r3, #0
 8005480:	d106      	bne.n	8005490 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f7fc fbb2 	bl	8001bf4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2202      	movs	r2, #2
 8005494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	6812      	ldr	r2, [r2, #0]
 80054a2:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80054a6:	f023 0307 	bic.w	r3, r3, #7
 80054aa:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	3304      	adds	r3, #4
 80054b4:	4619      	mov	r1, r3
 80054b6:	4610      	mov	r0, r2
 80054b8:	f000 fa88 	bl	80059cc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	6a1b      	ldr	r3, [r3, #32]
 80054d2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	697a      	ldr	r2, [r7, #20]
 80054da:	4313      	orrs	r3, r2
 80054dc:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054e4:	f023 0303 	bic.w	r3, r3, #3
 80054e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	689a      	ldr	r2, [r3, #8]
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	699b      	ldr	r3, [r3, #24]
 80054f2:	021b      	lsls	r3, r3, #8
 80054f4:	4313      	orrs	r3, r2
 80054f6:	693a      	ldr	r2, [r7, #16]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005502:	f023 030c 	bic.w	r3, r3, #12
 8005506:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800550e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005512:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	68da      	ldr	r2, [r3, #12]
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	69db      	ldr	r3, [r3, #28]
 800551c:	021b      	lsls	r3, r3, #8
 800551e:	4313      	orrs	r3, r2
 8005520:	693a      	ldr	r2, [r7, #16]
 8005522:	4313      	orrs	r3, r2
 8005524:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	011a      	lsls	r2, r3, #4
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	6a1b      	ldr	r3, [r3, #32]
 8005530:	031b      	lsls	r3, r3, #12
 8005532:	4313      	orrs	r3, r2
 8005534:	693a      	ldr	r2, [r7, #16]
 8005536:	4313      	orrs	r3, r2
 8005538:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005540:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005548:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	685a      	ldr	r2, [r3, #4]
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	011b      	lsls	r3, r3, #4
 8005554:	4313      	orrs	r3, r2
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	4313      	orrs	r3, r2
 800555a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	697a      	ldr	r2, [r7, #20]
 8005562:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	693a      	ldr	r2, [r7, #16]
 800556a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3718      	adds	r7, #24
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
	...

080055b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b086      	sub	sp, #24
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055bc:	2300      	movs	r3, #0
 80055be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d101      	bne.n	80055ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80055ca:	2302      	movs	r3, #2
 80055cc:	e0ff      	b.n	80057ce <HAL_TIM_PWM_ConfigChannel+0x21e>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2201      	movs	r2, #1
 80055d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2b14      	cmp	r3, #20
 80055da:	f200 80f0 	bhi.w	80057be <HAL_TIM_PWM_ConfigChannel+0x20e>
 80055de:	a201      	add	r2, pc, #4	@ (adr r2, 80055e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80055e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e4:	08005639 	.word	0x08005639
 80055e8:	080057bf 	.word	0x080057bf
 80055ec:	080057bf 	.word	0x080057bf
 80055f0:	080057bf 	.word	0x080057bf
 80055f4:	08005679 	.word	0x08005679
 80055f8:	080057bf 	.word	0x080057bf
 80055fc:	080057bf 	.word	0x080057bf
 8005600:	080057bf 	.word	0x080057bf
 8005604:	080056bb 	.word	0x080056bb
 8005608:	080057bf 	.word	0x080057bf
 800560c:	080057bf 	.word	0x080057bf
 8005610:	080057bf 	.word	0x080057bf
 8005614:	080056fb 	.word	0x080056fb
 8005618:	080057bf 	.word	0x080057bf
 800561c:	080057bf 	.word	0x080057bf
 8005620:	080057bf 	.word	0x080057bf
 8005624:	0800573d 	.word	0x0800573d
 8005628:	080057bf 	.word	0x080057bf
 800562c:	080057bf 	.word	0x080057bf
 8005630:	080057bf 	.word	0x080057bf
 8005634:	0800577d 	.word	0x0800577d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68b9      	ldr	r1, [r7, #8]
 800563e:	4618      	mov	r0, r3
 8005640:	f000 fa60 	bl	8005b04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	699a      	ldr	r2, [r3, #24]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f042 0208 	orr.w	r2, r2, #8
 8005652:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	699a      	ldr	r2, [r3, #24]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f022 0204 	bic.w	r2, r2, #4
 8005662:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	6999      	ldr	r1, [r3, #24]
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	691a      	ldr	r2, [r3, #16]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	430a      	orrs	r2, r1
 8005674:	619a      	str	r2, [r3, #24]
      break;
 8005676:	e0a5      	b.n	80057c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68b9      	ldr	r1, [r7, #8]
 800567e:	4618      	mov	r0, r3
 8005680:	f000 fad0 	bl	8005c24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	699a      	ldr	r2, [r3, #24]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005692:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	699a      	ldr	r2, [r3, #24]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	6999      	ldr	r1, [r3, #24]
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	021a      	lsls	r2, r3, #8
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	430a      	orrs	r2, r1
 80056b6:	619a      	str	r2, [r3, #24]
      break;
 80056b8:	e084      	b.n	80057c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	68b9      	ldr	r1, [r7, #8]
 80056c0:	4618      	mov	r0, r3
 80056c2:	f000 fb39 	bl	8005d38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	69da      	ldr	r2, [r3, #28]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f042 0208 	orr.w	r2, r2, #8
 80056d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	69da      	ldr	r2, [r3, #28]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f022 0204 	bic.w	r2, r2, #4
 80056e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	69d9      	ldr	r1, [r3, #28]
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	691a      	ldr	r2, [r3, #16]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	430a      	orrs	r2, r1
 80056f6:	61da      	str	r2, [r3, #28]
      break;
 80056f8:	e064      	b.n	80057c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	68b9      	ldr	r1, [r7, #8]
 8005700:	4618      	mov	r0, r3
 8005702:	f000 fba1 	bl	8005e48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	69da      	ldr	r2, [r3, #28]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005714:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	69da      	ldr	r2, [r3, #28]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005724:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	69d9      	ldr	r1, [r3, #28]
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	691b      	ldr	r3, [r3, #16]
 8005730:	021a      	lsls	r2, r3, #8
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	430a      	orrs	r2, r1
 8005738:	61da      	str	r2, [r3, #28]
      break;
 800573a:	e043      	b.n	80057c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68b9      	ldr	r1, [r7, #8]
 8005742:	4618      	mov	r0, r3
 8005744:	f000 fc0a 	bl	8005f5c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f042 0208 	orr.w	r2, r2, #8
 8005756:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f022 0204 	bic.w	r2, r2, #4
 8005766:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	691a      	ldr	r2, [r3, #16]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	430a      	orrs	r2, r1
 8005778:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800577a:	e023      	b.n	80057c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68b9      	ldr	r1, [r7, #8]
 8005782:	4618      	mov	r0, r3
 8005784:	f000 fc4e 	bl	8006024 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005796:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057a6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	021a      	lsls	r2, r3, #8
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	430a      	orrs	r2, r1
 80057ba:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80057bc:	e002      	b.n	80057c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	75fb      	strb	r3, [r7, #23]
      break;
 80057c2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80057cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3718      	adds	r7, #24
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop

080057d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057e2:	2300      	movs	r3, #0
 80057e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d101      	bne.n	80057f4 <HAL_TIM_ConfigClockSource+0x1c>
 80057f0:	2302      	movs	r3, #2
 80057f2:	e0de      	b.n	80059b2 <HAL_TIM_ConfigClockSource+0x1da>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2202      	movs	r2, #2
 8005800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005812:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005816:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800581e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	68ba      	ldr	r2, [r7, #8]
 8005826:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a63      	ldr	r2, [pc, #396]	@ (80059bc <HAL_TIM_ConfigClockSource+0x1e4>)
 800582e:	4293      	cmp	r3, r2
 8005830:	f000 80a9 	beq.w	8005986 <HAL_TIM_ConfigClockSource+0x1ae>
 8005834:	4a61      	ldr	r2, [pc, #388]	@ (80059bc <HAL_TIM_ConfigClockSource+0x1e4>)
 8005836:	4293      	cmp	r3, r2
 8005838:	f200 80ae 	bhi.w	8005998 <HAL_TIM_ConfigClockSource+0x1c0>
 800583c:	4a60      	ldr	r2, [pc, #384]	@ (80059c0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800583e:	4293      	cmp	r3, r2
 8005840:	f000 80a1 	beq.w	8005986 <HAL_TIM_ConfigClockSource+0x1ae>
 8005844:	4a5e      	ldr	r2, [pc, #376]	@ (80059c0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005846:	4293      	cmp	r3, r2
 8005848:	f200 80a6 	bhi.w	8005998 <HAL_TIM_ConfigClockSource+0x1c0>
 800584c:	4a5d      	ldr	r2, [pc, #372]	@ (80059c4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800584e:	4293      	cmp	r3, r2
 8005850:	f000 8099 	beq.w	8005986 <HAL_TIM_ConfigClockSource+0x1ae>
 8005854:	4a5b      	ldr	r2, [pc, #364]	@ (80059c4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005856:	4293      	cmp	r3, r2
 8005858:	f200 809e 	bhi.w	8005998 <HAL_TIM_ConfigClockSource+0x1c0>
 800585c:	4a5a      	ldr	r2, [pc, #360]	@ (80059c8 <HAL_TIM_ConfigClockSource+0x1f0>)
 800585e:	4293      	cmp	r3, r2
 8005860:	f000 8091 	beq.w	8005986 <HAL_TIM_ConfigClockSource+0x1ae>
 8005864:	4a58      	ldr	r2, [pc, #352]	@ (80059c8 <HAL_TIM_ConfigClockSource+0x1f0>)
 8005866:	4293      	cmp	r3, r2
 8005868:	f200 8096 	bhi.w	8005998 <HAL_TIM_ConfigClockSource+0x1c0>
 800586c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005870:	f000 8089 	beq.w	8005986 <HAL_TIM_ConfigClockSource+0x1ae>
 8005874:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005878:	f200 808e 	bhi.w	8005998 <HAL_TIM_ConfigClockSource+0x1c0>
 800587c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005880:	d03e      	beq.n	8005900 <HAL_TIM_ConfigClockSource+0x128>
 8005882:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005886:	f200 8087 	bhi.w	8005998 <HAL_TIM_ConfigClockSource+0x1c0>
 800588a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800588e:	f000 8086 	beq.w	800599e <HAL_TIM_ConfigClockSource+0x1c6>
 8005892:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005896:	d87f      	bhi.n	8005998 <HAL_TIM_ConfigClockSource+0x1c0>
 8005898:	2b70      	cmp	r3, #112	@ 0x70
 800589a:	d01a      	beq.n	80058d2 <HAL_TIM_ConfigClockSource+0xfa>
 800589c:	2b70      	cmp	r3, #112	@ 0x70
 800589e:	d87b      	bhi.n	8005998 <HAL_TIM_ConfigClockSource+0x1c0>
 80058a0:	2b60      	cmp	r3, #96	@ 0x60
 80058a2:	d050      	beq.n	8005946 <HAL_TIM_ConfigClockSource+0x16e>
 80058a4:	2b60      	cmp	r3, #96	@ 0x60
 80058a6:	d877      	bhi.n	8005998 <HAL_TIM_ConfigClockSource+0x1c0>
 80058a8:	2b50      	cmp	r3, #80	@ 0x50
 80058aa:	d03c      	beq.n	8005926 <HAL_TIM_ConfigClockSource+0x14e>
 80058ac:	2b50      	cmp	r3, #80	@ 0x50
 80058ae:	d873      	bhi.n	8005998 <HAL_TIM_ConfigClockSource+0x1c0>
 80058b0:	2b40      	cmp	r3, #64	@ 0x40
 80058b2:	d058      	beq.n	8005966 <HAL_TIM_ConfigClockSource+0x18e>
 80058b4:	2b40      	cmp	r3, #64	@ 0x40
 80058b6:	d86f      	bhi.n	8005998 <HAL_TIM_ConfigClockSource+0x1c0>
 80058b8:	2b30      	cmp	r3, #48	@ 0x30
 80058ba:	d064      	beq.n	8005986 <HAL_TIM_ConfigClockSource+0x1ae>
 80058bc:	2b30      	cmp	r3, #48	@ 0x30
 80058be:	d86b      	bhi.n	8005998 <HAL_TIM_ConfigClockSource+0x1c0>
 80058c0:	2b20      	cmp	r3, #32
 80058c2:	d060      	beq.n	8005986 <HAL_TIM_ConfigClockSource+0x1ae>
 80058c4:	2b20      	cmp	r3, #32
 80058c6:	d867      	bhi.n	8005998 <HAL_TIM_ConfigClockSource+0x1c0>
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d05c      	beq.n	8005986 <HAL_TIM_ConfigClockSource+0x1ae>
 80058cc:	2b10      	cmp	r3, #16
 80058ce:	d05a      	beq.n	8005986 <HAL_TIM_ConfigClockSource+0x1ae>
 80058d0:	e062      	b.n	8005998 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80058e2:	f000 fc81 	bl	80061e8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80058f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	68ba      	ldr	r2, [r7, #8]
 80058fc:	609a      	str	r2, [r3, #8]
      break;
 80058fe:	e04f      	b.n	80059a0 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005910:	f000 fc6a 	bl	80061e8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	689a      	ldr	r2, [r3, #8]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005922:	609a      	str	r2, [r3, #8]
      break;
 8005924:	e03c      	b.n	80059a0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005932:	461a      	mov	r2, r3
 8005934:	f000 fbdc 	bl	80060f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2150      	movs	r1, #80	@ 0x50
 800593e:	4618      	mov	r0, r3
 8005940:	f000 fc35 	bl	80061ae <TIM_ITRx_SetConfig>
      break;
 8005944:	e02c      	b.n	80059a0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005952:	461a      	mov	r2, r3
 8005954:	f000 fbfb 	bl	800614e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2160      	movs	r1, #96	@ 0x60
 800595e:	4618      	mov	r0, r3
 8005960:	f000 fc25 	bl	80061ae <TIM_ITRx_SetConfig>
      break;
 8005964:	e01c      	b.n	80059a0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005972:	461a      	mov	r2, r3
 8005974:	f000 fbbc 	bl	80060f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2140      	movs	r1, #64	@ 0x40
 800597e:	4618      	mov	r0, r3
 8005980:	f000 fc15 	bl	80061ae <TIM_ITRx_SetConfig>
      break;
 8005984:	e00c      	b.n	80059a0 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4619      	mov	r1, r3
 8005990:	4610      	mov	r0, r2
 8005992:	f000 fc0c 	bl	80061ae <TIM_ITRx_SetConfig>
      break;
 8005996:	e003      	b.n	80059a0 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	73fb      	strb	r3, [r7, #15]
      break;
 800599c:	e000      	b.n	80059a0 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800599e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80059b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3710      	adds	r7, #16
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	00100070 	.word	0x00100070
 80059c0:	00100040 	.word	0x00100040
 80059c4:	00100030 	.word	0x00100030
 80059c8:	00100020 	.word	0x00100020

080059cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b085      	sub	sp, #20
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4a42      	ldr	r2, [pc, #264]	@ (8005ae8 <TIM_Base_SetConfig+0x11c>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d00f      	beq.n	8005a04 <TIM_Base_SetConfig+0x38>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059ea:	d00b      	beq.n	8005a04 <TIM_Base_SetConfig+0x38>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4a3f      	ldr	r2, [pc, #252]	@ (8005aec <TIM_Base_SetConfig+0x120>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d007      	beq.n	8005a04 <TIM_Base_SetConfig+0x38>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a3e      	ldr	r2, [pc, #248]	@ (8005af0 <TIM_Base_SetConfig+0x124>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d003      	beq.n	8005a04 <TIM_Base_SetConfig+0x38>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a3d      	ldr	r2, [pc, #244]	@ (8005af4 <TIM_Base_SetConfig+0x128>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d108      	bne.n	8005a16 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	68fa      	ldr	r2, [r7, #12]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a33      	ldr	r2, [pc, #204]	@ (8005ae8 <TIM_Base_SetConfig+0x11c>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d01b      	beq.n	8005a56 <TIM_Base_SetConfig+0x8a>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a24:	d017      	beq.n	8005a56 <TIM_Base_SetConfig+0x8a>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a30      	ldr	r2, [pc, #192]	@ (8005aec <TIM_Base_SetConfig+0x120>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d013      	beq.n	8005a56 <TIM_Base_SetConfig+0x8a>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a2f      	ldr	r2, [pc, #188]	@ (8005af0 <TIM_Base_SetConfig+0x124>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d00f      	beq.n	8005a56 <TIM_Base_SetConfig+0x8a>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a2e      	ldr	r2, [pc, #184]	@ (8005af4 <TIM_Base_SetConfig+0x128>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d00b      	beq.n	8005a56 <TIM_Base_SetConfig+0x8a>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a2d      	ldr	r2, [pc, #180]	@ (8005af8 <TIM_Base_SetConfig+0x12c>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d007      	beq.n	8005a56 <TIM_Base_SetConfig+0x8a>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a2c      	ldr	r2, [pc, #176]	@ (8005afc <TIM_Base_SetConfig+0x130>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d003      	beq.n	8005a56 <TIM_Base_SetConfig+0x8a>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a2b      	ldr	r2, [pc, #172]	@ (8005b00 <TIM_Base_SetConfig+0x134>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d108      	bne.n	8005a68 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	695b      	ldr	r3, [r3, #20]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	689a      	ldr	r2, [r3, #8]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4a16      	ldr	r2, [pc, #88]	@ (8005ae8 <TIM_Base_SetConfig+0x11c>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d00f      	beq.n	8005ab4 <TIM_Base_SetConfig+0xe8>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a17      	ldr	r2, [pc, #92]	@ (8005af4 <TIM_Base_SetConfig+0x128>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d00b      	beq.n	8005ab4 <TIM_Base_SetConfig+0xe8>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a16      	ldr	r2, [pc, #88]	@ (8005af8 <TIM_Base_SetConfig+0x12c>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d007      	beq.n	8005ab4 <TIM_Base_SetConfig+0xe8>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a15      	ldr	r2, [pc, #84]	@ (8005afc <TIM_Base_SetConfig+0x130>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d003      	beq.n	8005ab4 <TIM_Base_SetConfig+0xe8>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a14      	ldr	r2, [pc, #80]	@ (8005b00 <TIM_Base_SetConfig+0x134>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d103      	bne.n	8005abc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	691a      	ldr	r2, [r3, #16]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	f003 0301 	and.w	r3, r3, #1
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d105      	bne.n	8005ada <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	f023 0201 	bic.w	r2, r3, #1
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	611a      	str	r2, [r3, #16]
  }
}
 8005ada:	bf00      	nop
 8005adc:	3714      	adds	r7, #20
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr
 8005ae6:	bf00      	nop
 8005ae8:	40012c00 	.word	0x40012c00
 8005aec:	40000400 	.word	0x40000400
 8005af0:	40000800 	.word	0x40000800
 8005af4:	40013400 	.word	0x40013400
 8005af8:	40014000 	.word	0x40014000
 8005afc:	40014400 	.word	0x40014400
 8005b00:	40014800 	.word	0x40014800

08005b04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b087      	sub	sp, #28
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a1b      	ldr	r3, [r3, #32]
 8005b12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6a1b      	ldr	r3, [r3, #32]
 8005b18:	f023 0201 	bic.w	r2, r3, #1
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	699b      	ldr	r3, [r3, #24]
 8005b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f023 0303 	bic.w	r3, r3, #3
 8005b3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	f023 0302 	bic.w	r3, r3, #2
 8005b50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	697a      	ldr	r2, [r7, #20]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4a2c      	ldr	r2, [pc, #176]	@ (8005c10 <TIM_OC1_SetConfig+0x10c>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d00f      	beq.n	8005b84 <TIM_OC1_SetConfig+0x80>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a2b      	ldr	r2, [pc, #172]	@ (8005c14 <TIM_OC1_SetConfig+0x110>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d00b      	beq.n	8005b84 <TIM_OC1_SetConfig+0x80>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a2a      	ldr	r2, [pc, #168]	@ (8005c18 <TIM_OC1_SetConfig+0x114>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d007      	beq.n	8005b84 <TIM_OC1_SetConfig+0x80>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a29      	ldr	r2, [pc, #164]	@ (8005c1c <TIM_OC1_SetConfig+0x118>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d003      	beq.n	8005b84 <TIM_OC1_SetConfig+0x80>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a28      	ldr	r2, [pc, #160]	@ (8005c20 <TIM_OC1_SetConfig+0x11c>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d10c      	bne.n	8005b9e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	f023 0308 	bic.w	r3, r3, #8
 8005b8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	697a      	ldr	r2, [r7, #20]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	f023 0304 	bic.w	r3, r3, #4
 8005b9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a1b      	ldr	r2, [pc, #108]	@ (8005c10 <TIM_OC1_SetConfig+0x10c>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d00f      	beq.n	8005bc6 <TIM_OC1_SetConfig+0xc2>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a1a      	ldr	r2, [pc, #104]	@ (8005c14 <TIM_OC1_SetConfig+0x110>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d00b      	beq.n	8005bc6 <TIM_OC1_SetConfig+0xc2>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a19      	ldr	r2, [pc, #100]	@ (8005c18 <TIM_OC1_SetConfig+0x114>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d007      	beq.n	8005bc6 <TIM_OC1_SetConfig+0xc2>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a18      	ldr	r2, [pc, #96]	@ (8005c1c <TIM_OC1_SetConfig+0x118>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d003      	beq.n	8005bc6 <TIM_OC1_SetConfig+0xc2>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a17      	ldr	r2, [pc, #92]	@ (8005c20 <TIM_OC1_SetConfig+0x11c>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d111      	bne.n	8005bea <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005bcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005bd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	695b      	ldr	r3, [r3, #20]
 8005bda:	693a      	ldr	r2, [r7, #16]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	699b      	ldr	r3, [r3, #24]
 8005be4:	693a      	ldr	r2, [r7, #16]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	693a      	ldr	r2, [r7, #16]
 8005bee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	685a      	ldr	r2, [r3, #4]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	697a      	ldr	r2, [r7, #20]
 8005c02:	621a      	str	r2, [r3, #32]
}
 8005c04:	bf00      	nop
 8005c06:	371c      	adds	r7, #28
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr
 8005c10:	40012c00 	.word	0x40012c00
 8005c14:	40013400 	.word	0x40013400
 8005c18:	40014000 	.word	0x40014000
 8005c1c:	40014400 	.word	0x40014400
 8005c20:	40014800 	.word	0x40014800

08005c24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b087      	sub	sp, #28
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a1b      	ldr	r3, [r3, #32]
 8005c32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6a1b      	ldr	r3, [r3, #32]
 8005c38:	f023 0210 	bic.w	r2, r3, #16
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	699b      	ldr	r3, [r3, #24]
 8005c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	021b      	lsls	r3, r3, #8
 8005c66:	68fa      	ldr	r2, [r7, #12]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	f023 0320 	bic.w	r3, r3, #32
 8005c72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	011b      	lsls	r3, r3, #4
 8005c7a:	697a      	ldr	r2, [r7, #20]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4a28      	ldr	r2, [pc, #160]	@ (8005d24 <TIM_OC2_SetConfig+0x100>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d003      	beq.n	8005c90 <TIM_OC2_SetConfig+0x6c>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a27      	ldr	r2, [pc, #156]	@ (8005d28 <TIM_OC2_SetConfig+0x104>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d10d      	bne.n	8005cac <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	011b      	lsls	r3, r3, #4
 8005c9e:	697a      	ldr	r2, [r7, #20]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005caa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4a1d      	ldr	r2, [pc, #116]	@ (8005d24 <TIM_OC2_SetConfig+0x100>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d00f      	beq.n	8005cd4 <TIM_OC2_SetConfig+0xb0>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4a1c      	ldr	r2, [pc, #112]	@ (8005d28 <TIM_OC2_SetConfig+0x104>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d00b      	beq.n	8005cd4 <TIM_OC2_SetConfig+0xb0>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a1b      	ldr	r2, [pc, #108]	@ (8005d2c <TIM_OC2_SetConfig+0x108>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d007      	beq.n	8005cd4 <TIM_OC2_SetConfig+0xb0>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a1a      	ldr	r2, [pc, #104]	@ (8005d30 <TIM_OC2_SetConfig+0x10c>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d003      	beq.n	8005cd4 <TIM_OC2_SetConfig+0xb0>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a19      	ldr	r2, [pc, #100]	@ (8005d34 <TIM_OC2_SetConfig+0x110>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d113      	bne.n	8005cfc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005cda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005ce2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	695b      	ldr	r3, [r3, #20]
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	693a      	ldr	r2, [r7, #16]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	699b      	ldr	r3, [r3, #24]
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	693a      	ldr	r2, [r7, #16]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	693a      	ldr	r2, [r7, #16]
 8005d00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	685a      	ldr	r2, [r3, #4]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	697a      	ldr	r2, [r7, #20]
 8005d14:	621a      	str	r2, [r3, #32]
}
 8005d16:	bf00      	nop
 8005d18:	371c      	adds	r7, #28
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop
 8005d24:	40012c00 	.word	0x40012c00
 8005d28:	40013400 	.word	0x40013400
 8005d2c:	40014000 	.word	0x40014000
 8005d30:	40014400 	.word	0x40014400
 8005d34:	40014800 	.word	0x40014800

08005d38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b087      	sub	sp, #28
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a1b      	ldr	r3, [r3, #32]
 8005d46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6a1b      	ldr	r3, [r3, #32]
 8005d4c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	69db      	ldr	r3, [r3, #28]
 8005d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f023 0303 	bic.w	r3, r3, #3
 8005d72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005d84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	021b      	lsls	r3, r3, #8
 8005d8c:	697a      	ldr	r2, [r7, #20]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a27      	ldr	r2, [pc, #156]	@ (8005e34 <TIM_OC3_SetConfig+0xfc>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d003      	beq.n	8005da2 <TIM_OC3_SetConfig+0x6a>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a26      	ldr	r2, [pc, #152]	@ (8005e38 <TIM_OC3_SetConfig+0x100>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d10d      	bne.n	8005dbe <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005da8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	021b      	lsls	r3, r3, #8
 8005db0:	697a      	ldr	r2, [r7, #20]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005dbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a1c      	ldr	r2, [pc, #112]	@ (8005e34 <TIM_OC3_SetConfig+0xfc>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d00f      	beq.n	8005de6 <TIM_OC3_SetConfig+0xae>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a1b      	ldr	r2, [pc, #108]	@ (8005e38 <TIM_OC3_SetConfig+0x100>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d00b      	beq.n	8005de6 <TIM_OC3_SetConfig+0xae>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a1a      	ldr	r2, [pc, #104]	@ (8005e3c <TIM_OC3_SetConfig+0x104>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d007      	beq.n	8005de6 <TIM_OC3_SetConfig+0xae>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a19      	ldr	r2, [pc, #100]	@ (8005e40 <TIM_OC3_SetConfig+0x108>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d003      	beq.n	8005de6 <TIM_OC3_SetConfig+0xae>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a18      	ldr	r2, [pc, #96]	@ (8005e44 <TIM_OC3_SetConfig+0x10c>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d113      	bne.n	8005e0e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005dec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005df4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	695b      	ldr	r3, [r3, #20]
 8005dfa:	011b      	lsls	r3, r3, #4
 8005dfc:	693a      	ldr	r2, [r7, #16]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	699b      	ldr	r3, [r3, #24]
 8005e06:	011b      	lsls	r3, r3, #4
 8005e08:	693a      	ldr	r2, [r7, #16]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	693a      	ldr	r2, [r7, #16]
 8005e12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	685a      	ldr	r2, [r3, #4]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	697a      	ldr	r2, [r7, #20]
 8005e26:	621a      	str	r2, [r3, #32]
}
 8005e28:	bf00      	nop
 8005e2a:	371c      	adds	r7, #28
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr
 8005e34:	40012c00 	.word	0x40012c00
 8005e38:	40013400 	.word	0x40013400
 8005e3c:	40014000 	.word	0x40014000
 8005e40:	40014400 	.word	0x40014400
 8005e44:	40014800 	.word	0x40014800

08005e48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b087      	sub	sp, #28
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6a1b      	ldr	r3, [r3, #32]
 8005e56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6a1b      	ldr	r3, [r3, #32]
 8005e5c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	69db      	ldr	r3, [r3, #28]
 8005e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	021b      	lsls	r3, r3, #8
 8005e8a:	68fa      	ldr	r2, [r7, #12]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005e96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	031b      	lsls	r3, r3, #12
 8005e9e:	697a      	ldr	r2, [r7, #20]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4a28      	ldr	r2, [pc, #160]	@ (8005f48 <TIM_OC4_SetConfig+0x100>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d003      	beq.n	8005eb4 <TIM_OC4_SetConfig+0x6c>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4a27      	ldr	r2, [pc, #156]	@ (8005f4c <TIM_OC4_SetConfig+0x104>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d10d      	bne.n	8005ed0 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005eba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	031b      	lsls	r3, r3, #12
 8005ec2:	697a      	ldr	r2, [r7, #20]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005ece:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	4a1d      	ldr	r2, [pc, #116]	@ (8005f48 <TIM_OC4_SetConfig+0x100>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d00f      	beq.n	8005ef8 <TIM_OC4_SetConfig+0xb0>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4a1c      	ldr	r2, [pc, #112]	@ (8005f4c <TIM_OC4_SetConfig+0x104>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d00b      	beq.n	8005ef8 <TIM_OC4_SetConfig+0xb0>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	4a1b      	ldr	r2, [pc, #108]	@ (8005f50 <TIM_OC4_SetConfig+0x108>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d007      	beq.n	8005ef8 <TIM_OC4_SetConfig+0xb0>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4a1a      	ldr	r2, [pc, #104]	@ (8005f54 <TIM_OC4_SetConfig+0x10c>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d003      	beq.n	8005ef8 <TIM_OC4_SetConfig+0xb0>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4a19      	ldr	r2, [pc, #100]	@ (8005f58 <TIM_OC4_SetConfig+0x110>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d113      	bne.n	8005f20 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005efe:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005f06:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	695b      	ldr	r3, [r3, #20]
 8005f0c:	019b      	lsls	r3, r3, #6
 8005f0e:	693a      	ldr	r2, [r7, #16]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	699b      	ldr	r3, [r3, #24]
 8005f18:	019b      	lsls	r3, r3, #6
 8005f1a:	693a      	ldr	r2, [r7, #16]
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	693a      	ldr	r2, [r7, #16]
 8005f24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	685a      	ldr	r2, [r3, #4]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	697a      	ldr	r2, [r7, #20]
 8005f38:	621a      	str	r2, [r3, #32]
}
 8005f3a:	bf00      	nop
 8005f3c:	371c      	adds	r7, #28
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop
 8005f48:	40012c00 	.word	0x40012c00
 8005f4c:	40013400 	.word	0x40013400
 8005f50:	40014000 	.word	0x40014000
 8005f54:	40014400 	.word	0x40014400
 8005f58:	40014800 	.word	0x40014800

08005f5c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b087      	sub	sp, #28
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a1b      	ldr	r3, [r3, #32]
 8005f6a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6a1b      	ldr	r3, [r3, #32]
 8005f70:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	68fa      	ldr	r2, [r7, #12]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005fa0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	041b      	lsls	r3, r3, #16
 8005fa8:	693a      	ldr	r2, [r7, #16]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a17      	ldr	r2, [pc, #92]	@ (8006010 <TIM_OC5_SetConfig+0xb4>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d00f      	beq.n	8005fd6 <TIM_OC5_SetConfig+0x7a>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4a16      	ldr	r2, [pc, #88]	@ (8006014 <TIM_OC5_SetConfig+0xb8>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d00b      	beq.n	8005fd6 <TIM_OC5_SetConfig+0x7a>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a15      	ldr	r2, [pc, #84]	@ (8006018 <TIM_OC5_SetConfig+0xbc>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d007      	beq.n	8005fd6 <TIM_OC5_SetConfig+0x7a>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a14      	ldr	r2, [pc, #80]	@ (800601c <TIM_OC5_SetConfig+0xc0>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d003      	beq.n	8005fd6 <TIM_OC5_SetConfig+0x7a>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4a13      	ldr	r2, [pc, #76]	@ (8006020 <TIM_OC5_SetConfig+0xc4>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d109      	bne.n	8005fea <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005fdc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	695b      	ldr	r3, [r3, #20]
 8005fe2:	021b      	lsls	r3, r3, #8
 8005fe4:	697a      	ldr	r2, [r7, #20]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	697a      	ldr	r2, [r7, #20]
 8005fee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	685a      	ldr	r2, [r3, #4]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	693a      	ldr	r2, [r7, #16]
 8006002:	621a      	str	r2, [r3, #32]
}
 8006004:	bf00      	nop
 8006006:	371c      	adds	r7, #28
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr
 8006010:	40012c00 	.word	0x40012c00
 8006014:	40013400 	.word	0x40013400
 8006018:	40014000 	.word	0x40014000
 800601c:	40014400 	.word	0x40014400
 8006020:	40014800 	.word	0x40014800

08006024 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006024:	b480      	push	{r7}
 8006026:	b087      	sub	sp, #28
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a1b      	ldr	r3, [r3, #32]
 8006032:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6a1b      	ldr	r3, [r3, #32]
 8006038:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800604a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006052:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006056:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	021b      	lsls	r3, r3, #8
 800605e:	68fa      	ldr	r2, [r7, #12]
 8006060:	4313      	orrs	r3, r2
 8006062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800606a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	051b      	lsls	r3, r3, #20
 8006072:	693a      	ldr	r2, [r7, #16]
 8006074:	4313      	orrs	r3, r2
 8006076:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4a18      	ldr	r2, [pc, #96]	@ (80060dc <TIM_OC6_SetConfig+0xb8>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d00f      	beq.n	80060a0 <TIM_OC6_SetConfig+0x7c>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4a17      	ldr	r2, [pc, #92]	@ (80060e0 <TIM_OC6_SetConfig+0xbc>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d00b      	beq.n	80060a0 <TIM_OC6_SetConfig+0x7c>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4a16      	ldr	r2, [pc, #88]	@ (80060e4 <TIM_OC6_SetConfig+0xc0>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d007      	beq.n	80060a0 <TIM_OC6_SetConfig+0x7c>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4a15      	ldr	r2, [pc, #84]	@ (80060e8 <TIM_OC6_SetConfig+0xc4>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d003      	beq.n	80060a0 <TIM_OC6_SetConfig+0x7c>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	4a14      	ldr	r2, [pc, #80]	@ (80060ec <TIM_OC6_SetConfig+0xc8>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d109      	bne.n	80060b4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80060a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	695b      	ldr	r3, [r3, #20]
 80060ac:	029b      	lsls	r3, r3, #10
 80060ae:	697a      	ldr	r2, [r7, #20]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	697a      	ldr	r2, [r7, #20]
 80060b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	68fa      	ldr	r2, [r7, #12]
 80060be:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	685a      	ldr	r2, [r3, #4]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	693a      	ldr	r2, [r7, #16]
 80060cc:	621a      	str	r2, [r3, #32]
}
 80060ce:	bf00      	nop
 80060d0:	371c      	adds	r7, #28
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	40012c00 	.word	0x40012c00
 80060e0:	40013400 	.word	0x40013400
 80060e4:	40014000 	.word	0x40014000
 80060e8:	40014400 	.word	0x40014400
 80060ec:	40014800 	.word	0x40014800

080060f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b087      	sub	sp, #28
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	60b9      	str	r1, [r7, #8]
 80060fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6a1b      	ldr	r3, [r3, #32]
 8006100:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6a1b      	ldr	r3, [r3, #32]
 8006106:	f023 0201 	bic.w	r2, r3, #1
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	699b      	ldr	r3, [r3, #24]
 8006112:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800611a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	011b      	lsls	r3, r3, #4
 8006120:	693a      	ldr	r2, [r7, #16]
 8006122:	4313      	orrs	r3, r2
 8006124:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	f023 030a 	bic.w	r3, r3, #10
 800612c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800612e:	697a      	ldr	r2, [r7, #20]
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	4313      	orrs	r3, r2
 8006134:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	693a      	ldr	r2, [r7, #16]
 800613a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	697a      	ldr	r2, [r7, #20]
 8006140:	621a      	str	r2, [r3, #32]
}
 8006142:	bf00      	nop
 8006144:	371c      	adds	r7, #28
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr

0800614e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800614e:	b480      	push	{r7}
 8006150:	b087      	sub	sp, #28
 8006152:	af00      	add	r7, sp, #0
 8006154:	60f8      	str	r0, [r7, #12]
 8006156:	60b9      	str	r1, [r7, #8]
 8006158:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	6a1b      	ldr	r3, [r3, #32]
 800615e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6a1b      	ldr	r3, [r3, #32]
 8006164:	f023 0210 	bic.w	r2, r3, #16
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	699b      	ldr	r3, [r3, #24]
 8006170:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006178:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	031b      	lsls	r3, r3, #12
 800617e:	693a      	ldr	r2, [r7, #16]
 8006180:	4313      	orrs	r3, r2
 8006182:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800618a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	011b      	lsls	r3, r3, #4
 8006190:	697a      	ldr	r2, [r7, #20]
 8006192:	4313      	orrs	r3, r2
 8006194:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	693a      	ldr	r2, [r7, #16]
 800619a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	697a      	ldr	r2, [r7, #20]
 80061a0:	621a      	str	r2, [r3, #32]
}
 80061a2:	bf00      	nop
 80061a4:	371c      	adds	r7, #28
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr

080061ae <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061ae:	b480      	push	{r7}
 80061b0:	b085      	sub	sp, #20
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
 80061b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80061c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061ca:	683a      	ldr	r2, [r7, #0]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	f043 0307 	orr.w	r3, r3, #7
 80061d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	68fa      	ldr	r2, [r7, #12]
 80061da:	609a      	str	r2, [r3, #8]
}
 80061dc:	bf00      	nop
 80061de:	3714      	adds	r7, #20
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b087      	sub	sp, #28
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	60b9      	str	r1, [r7, #8]
 80061f2:	607a      	str	r2, [r7, #4]
 80061f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006202:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	021a      	lsls	r2, r3, #8
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	431a      	orrs	r2, r3
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	4313      	orrs	r3, r2
 8006210:	697a      	ldr	r2, [r7, #20]
 8006212:	4313      	orrs	r3, r2
 8006214:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	697a      	ldr	r2, [r7, #20]
 800621a:	609a      	str	r2, [r3, #8]
}
 800621c:	bf00      	nop
 800621e:	371c      	adds	r7, #28
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006228:	b480      	push	{r7}
 800622a:	b085      	sub	sp, #20
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006238:	2b01      	cmp	r3, #1
 800623a:	d101      	bne.n	8006240 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800623c:	2302      	movs	r3, #2
 800623e:	e065      	b.n	800630c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2202      	movs	r2, #2
 800624c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a2c      	ldr	r2, [pc, #176]	@ (8006318 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d004      	beq.n	8006274 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a2b      	ldr	r2, [pc, #172]	@ (800631c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d108      	bne.n	8006286 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800627a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	68fa      	ldr	r2, [r7, #12]
 8006282:	4313      	orrs	r3, r2
 8006284:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800628c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006290:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	4313      	orrs	r3, r2
 800629a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	68fa      	ldr	r2, [r7, #12]
 80062a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a1b      	ldr	r2, [pc, #108]	@ (8006318 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d018      	beq.n	80062e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062b6:	d013      	beq.n	80062e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a18      	ldr	r2, [pc, #96]	@ (8006320 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d00e      	beq.n	80062e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a17      	ldr	r2, [pc, #92]	@ (8006324 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d009      	beq.n	80062e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a12      	ldr	r2, [pc, #72]	@ (800631c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d004      	beq.n	80062e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a13      	ldr	r2, [pc, #76]	@ (8006328 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d10c      	bne.n	80062fa <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	68ba      	ldr	r2, [r7, #8]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68ba      	ldr	r2, [r7, #8]
 80062f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2201      	movs	r2, #1
 80062fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800630a:	2300      	movs	r3, #0
}
 800630c:	4618      	mov	r0, r3
 800630e:	3714      	adds	r7, #20
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr
 8006318:	40012c00 	.word	0x40012c00
 800631c:	40013400 	.word	0x40013400
 8006320:	40000400 	.word	0x40000400
 8006324:	40000800 	.word	0x40000800
 8006328:	40014000 	.word	0x40014000

0800632c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800632c:	b480      	push	{r7}
 800632e:	b085      	sub	sp, #20
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006336:	2300      	movs	r3, #0
 8006338:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006340:	2b01      	cmp	r3, #1
 8006342:	d101      	bne.n	8006348 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006344:	2302      	movs	r3, #2
 8006346:	e073      	b.n	8006430 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	68db      	ldr	r3, [r3, #12]
 800635a:	4313      	orrs	r3, r2
 800635c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	4313      	orrs	r3, r2
 800636a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	4313      	orrs	r3, r2
 8006378:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4313      	orrs	r3, r2
 8006386:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	4313      	orrs	r3, r2
 8006394:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	695b      	ldr	r3, [r3, #20]
 80063a0:	4313      	orrs	r3, r2
 80063a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063ae:	4313      	orrs	r3, r2
 80063b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	699b      	ldr	r3, [r3, #24]
 80063bc:	041b      	lsls	r3, r3, #16
 80063be:	4313      	orrs	r3, r2
 80063c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	69db      	ldr	r3, [r3, #28]
 80063cc:	4313      	orrs	r3, r2
 80063ce:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a19      	ldr	r2, [pc, #100]	@ (800643c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d004      	beq.n	80063e4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a18      	ldr	r2, [pc, #96]	@ (8006440 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d11c      	bne.n	800641e <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063ee:	051b      	lsls	r3, r3, #20
 80063f0:	4313      	orrs	r3, r2
 80063f2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	6a1b      	ldr	r3, [r3, #32]
 80063fe:	4313      	orrs	r3, r2
 8006400:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800640c:	4313      	orrs	r3, r2
 800640e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800641a:	4313      	orrs	r3, r2
 800641c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2200      	movs	r2, #0
 800642a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800642e:	2300      	movs	r3, #0
}
 8006430:	4618      	mov	r0, r3
 8006432:	3714      	adds	r7, #20
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr
 800643c:	40012c00 	.word	0x40012c00
 8006440:	40013400 	.word	0x40013400

08006444 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b082      	sub	sp, #8
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d101      	bne.n	8006456 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	e042      	b.n	80064dc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800645c:	2b00      	cmp	r3, #0
 800645e:	d106      	bne.n	800646e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f7fb fd27 	bl	8001ebc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2224      	movs	r2, #36	@ 0x24
 8006472:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f022 0201 	bic.w	r2, r2, #1
 8006484:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800648a:	2b00      	cmp	r3, #0
 800648c:	d002      	beq.n	8006494 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f001 f8d8 	bl	8007644 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f000 fe09 	bl	80070ac <UART_SetConfig>
 800649a:	4603      	mov	r3, r0
 800649c:	2b01      	cmp	r3, #1
 800649e:	d101      	bne.n	80064a4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	e01b      	b.n	80064dc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	685a      	ldr	r2, [r3, #4]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80064b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	689a      	ldr	r2, [r3, #8]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80064c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f042 0201 	orr.w	r2, r2, #1
 80064d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f001 f957 	bl	8007788 <UART_CheckIdleState>
 80064da:	4603      	mov	r3, r0
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3708      	adds	r7, #8
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}

080064e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b08a      	sub	sp, #40	@ 0x28
 80064e8:	af02      	add	r7, sp, #8
 80064ea:	60f8      	str	r0, [r7, #12]
 80064ec:	60b9      	str	r1, [r7, #8]
 80064ee:	603b      	str	r3, [r7, #0]
 80064f0:	4613      	mov	r3, r2
 80064f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064fa:	2b20      	cmp	r3, #32
 80064fc:	d17b      	bne.n	80065f6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d002      	beq.n	800650a <HAL_UART_Transmit+0x26>
 8006504:	88fb      	ldrh	r3, [r7, #6]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d101      	bne.n	800650e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e074      	b.n	80065f8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2200      	movs	r2, #0
 8006512:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2221      	movs	r2, #33	@ 0x21
 800651a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800651e:	f7fc f867 	bl	80025f0 <HAL_GetTick>
 8006522:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	88fa      	ldrh	r2, [r7, #6]
 8006528:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	88fa      	ldrh	r2, [r7, #6]
 8006530:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800653c:	d108      	bne.n	8006550 <HAL_UART_Transmit+0x6c>
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	691b      	ldr	r3, [r3, #16]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d104      	bne.n	8006550 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006546:	2300      	movs	r3, #0
 8006548:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	61bb      	str	r3, [r7, #24]
 800654e:	e003      	b.n	8006558 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006554:	2300      	movs	r3, #0
 8006556:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006558:	e030      	b.n	80065bc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	9300      	str	r3, [sp, #0]
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	2200      	movs	r2, #0
 8006562:	2180      	movs	r1, #128	@ 0x80
 8006564:	68f8      	ldr	r0, [r7, #12]
 8006566:	f001 f9b9 	bl	80078dc <UART_WaitOnFlagUntilTimeout>
 800656a:	4603      	mov	r3, r0
 800656c:	2b00      	cmp	r3, #0
 800656e:	d005      	beq.n	800657c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2220      	movs	r2, #32
 8006574:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006578:	2303      	movs	r3, #3
 800657a:	e03d      	b.n	80065f8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d10b      	bne.n	800659a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006582:	69bb      	ldr	r3, [r7, #24]
 8006584:	881b      	ldrh	r3, [r3, #0]
 8006586:	461a      	mov	r2, r3
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006590:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006592:	69bb      	ldr	r3, [r7, #24]
 8006594:	3302      	adds	r3, #2
 8006596:	61bb      	str	r3, [r7, #24]
 8006598:	e007      	b.n	80065aa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800659a:	69fb      	ldr	r3, [r7, #28]
 800659c:	781a      	ldrb	r2, [r3, #0]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80065a4:	69fb      	ldr	r3, [r7, #28]
 80065a6:	3301      	adds	r3, #1
 80065a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	3b01      	subs	r3, #1
 80065b4:	b29a      	uxth	r2, r3
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d1c8      	bne.n	800655a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	9300      	str	r3, [sp, #0]
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	2200      	movs	r2, #0
 80065d0:	2140      	movs	r1, #64	@ 0x40
 80065d2:	68f8      	ldr	r0, [r7, #12]
 80065d4:	f001 f982 	bl	80078dc <UART_WaitOnFlagUntilTimeout>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d005      	beq.n	80065ea <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2220      	movs	r2, #32
 80065e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80065e6:	2303      	movs	r3, #3
 80065e8:	e006      	b.n	80065f8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2220      	movs	r2, #32
 80065ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80065f2:	2300      	movs	r3, #0
 80065f4:	e000      	b.n	80065f8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80065f6:	2302      	movs	r3, #2
  }
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3720      	adds	r7, #32
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}

08006600 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b08a      	sub	sp, #40	@ 0x28
 8006604:	af00      	add	r7, sp, #0
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	60b9      	str	r1, [r7, #8]
 800660a:	4613      	mov	r3, r2
 800660c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006614:	2b20      	cmp	r3, #32
 8006616:	d137      	bne.n	8006688 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d002      	beq.n	8006624 <HAL_UART_Receive_DMA+0x24>
 800661e:	88fb      	ldrh	r3, [r7, #6]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d101      	bne.n	8006628 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	e030      	b.n	800668a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2200      	movs	r2, #0
 800662c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a18      	ldr	r2, [pc, #96]	@ (8006694 <HAL_UART_Receive_DMA+0x94>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d01f      	beq.n	8006678 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006642:	2b00      	cmp	r3, #0
 8006644:	d018      	beq.n	8006678 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	e853 3f00 	ldrex	r3, [r3]
 8006652:	613b      	str	r3, [r7, #16]
   return(result);
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800665a:	627b      	str	r3, [r7, #36]	@ 0x24
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	461a      	mov	r2, r3
 8006662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006664:	623b      	str	r3, [r7, #32]
 8006666:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006668:	69f9      	ldr	r1, [r7, #28]
 800666a:	6a3a      	ldr	r2, [r7, #32]
 800666c:	e841 2300 	strex	r3, r2, [r1]
 8006670:	61bb      	str	r3, [r7, #24]
   return(result);
 8006672:	69bb      	ldr	r3, [r7, #24]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d1e6      	bne.n	8006646 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006678:	88fb      	ldrh	r3, [r7, #6]
 800667a:	461a      	mov	r2, r3
 800667c:	68b9      	ldr	r1, [r7, #8]
 800667e:	68f8      	ldr	r0, [r7, #12]
 8006680:	f001 f99a 	bl	80079b8 <UART_Start_Receive_DMA>
 8006684:	4603      	mov	r3, r0
 8006686:	e000      	b.n	800668a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006688:	2302      	movs	r3, #2
  }
}
 800668a:	4618      	mov	r0, r3
 800668c:	3728      	adds	r7, #40	@ 0x28
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
 8006692:	bf00      	nop
 8006694:	40008000 	.word	0x40008000

08006698 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b090      	sub	sp, #64	@ 0x40
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80066ae:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066ba:	2b80      	cmp	r3, #128	@ 0x80
 80066bc:	d139      	bne.n	8006732 <HAL_UART_DMAStop+0x9a>
 80066be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066c0:	2b21      	cmp	r3, #33	@ 0x21
 80066c2:	d136      	bne.n	8006732 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	3308      	adds	r3, #8
 80066ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066cc:	6a3b      	ldr	r3, [r7, #32]
 80066ce:	e853 3f00 	ldrex	r3, [r3]
 80066d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066da:	637b      	str	r3, [r7, #52]	@ 0x34
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	3308      	adds	r3, #8
 80066e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80066e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80066e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80066ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80066ec:	e841 2300 	strex	r3, r2, [r1]
 80066f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80066f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d1e5      	bne.n	80066c4 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d015      	beq.n	800672c <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006704:	4618      	mov	r0, r3
 8006706:	f7fd f9c6 	bl	8003a96 <HAL_DMA_Abort>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d00d      	beq.n	800672c <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006714:	4618      	mov	r0, r3
 8006716:	f7fd fb2d 	bl	8003d74 <HAL_DMA_GetError>
 800671a:	4603      	mov	r3, r0
 800671c:	2b20      	cmp	r3, #32
 800671e:	d105      	bne.n	800672c <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2210      	movs	r2, #16
 8006724:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8006728:	2303      	movs	r3, #3
 800672a:	e047      	b.n	80067bc <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f001 f9e9 	bl	8007b04 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800673c:	2b40      	cmp	r3, #64	@ 0x40
 800673e:	d13c      	bne.n	80067ba <HAL_UART_DMAStop+0x122>
 8006740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006742:	2b22      	cmp	r3, #34	@ 0x22
 8006744:	d139      	bne.n	80067ba <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	3308      	adds	r3, #8
 800674c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	e853 3f00 	ldrex	r3, [r3]
 8006754:	60bb      	str	r3, [r7, #8]
   return(result);
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800675c:	633b      	str	r3, [r7, #48]	@ 0x30
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	3308      	adds	r3, #8
 8006764:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006766:	61ba      	str	r2, [r7, #24]
 8006768:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800676a:	6979      	ldr	r1, [r7, #20]
 800676c:	69ba      	ldr	r2, [r7, #24]
 800676e:	e841 2300 	strex	r3, r2, [r1]
 8006772:	613b      	str	r3, [r7, #16]
   return(result);
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d1e5      	bne.n	8006746 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006780:	2b00      	cmp	r3, #0
 8006782:	d017      	beq.n	80067b4 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800678a:	4618      	mov	r0, r3
 800678c:	f7fd f983 	bl	8003a96 <HAL_DMA_Abort>
 8006790:	4603      	mov	r3, r0
 8006792:	2b00      	cmp	r3, #0
 8006794:	d00e      	beq.n	80067b4 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800679c:	4618      	mov	r0, r3
 800679e:	f7fd fae9 	bl	8003d74 <HAL_DMA_GetError>
 80067a2:	4603      	mov	r3, r0
 80067a4:	2b20      	cmp	r3, #32
 80067a6:	d105      	bne.n	80067b4 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2210      	movs	r2, #16
 80067ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 80067b0:	2303      	movs	r3, #3
 80067b2:	e003      	b.n	80067bc <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f001 f9e6 	bl	8007b86 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80067ba:	2300      	movs	r3, #0
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3740      	adds	r7, #64	@ 0x40
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b0a0      	sub	sp, #128	@ 0x80
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80067d4:	e853 3f00 	ldrex	r3, [r3]
 80067d8:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80067da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80067dc:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 80067e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	461a      	mov	r2, r3
 80067e8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80067ea:	66bb      	str	r3, [r7, #104]	@ 0x68
 80067ec:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ee:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80067f0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80067f2:	e841 2300 	strex	r3, r2, [r1]
 80067f6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80067f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d1e6      	bne.n	80067cc <HAL_UART_Abort+0x8>
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	3308      	adds	r3, #8
 8006804:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006806:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006808:	e853 3f00 	ldrex	r3, [r3]
 800680c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800680e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006810:	f023 5384 	bic.w	r3, r3, #276824064	@ 0x10800000
 8006814:	f023 0301 	bic.w	r3, r3, #1
 8006818:	67bb      	str	r3, [r7, #120]	@ 0x78
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	3308      	adds	r3, #8
 8006820:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8006822:	657a      	str	r2, [r7, #84]	@ 0x54
 8006824:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006826:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006828:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800682a:	e841 2300 	strex	r3, r2, [r1]
 800682e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006830:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006832:	2b00      	cmp	r3, #0
 8006834:	d1e3      	bne.n	80067fe <HAL_UART_Abort+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800683a:	2b01      	cmp	r3, #1
 800683c:	d118      	bne.n	8006870 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006844:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006846:	e853 3f00 	ldrex	r3, [r3]
 800684a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800684c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800684e:	f023 0310 	bic.w	r3, r3, #16
 8006852:	677b      	str	r3, [r7, #116]	@ 0x74
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	461a      	mov	r2, r3
 800685a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800685c:	643b      	str	r3, [r7, #64]	@ 0x40
 800685e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006860:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006862:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006864:	e841 2300 	strex	r3, r2, [r1]
 8006868:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800686a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800686c:	2b00      	cmp	r3, #0
 800686e:	d1e6      	bne.n	800683e <HAL_UART_Abort+0x7a>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800687a:	2b80      	cmp	r3, #128	@ 0x80
 800687c:	d137      	bne.n	80068ee <HAL_UART_Abort+0x12a>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	3308      	adds	r3, #8
 8006884:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006886:	6a3b      	ldr	r3, [r7, #32]
 8006888:	e853 3f00 	ldrex	r3, [r3]
 800688c:	61fb      	str	r3, [r7, #28]
   return(result);
 800688e:	69fb      	ldr	r3, [r7, #28]
 8006890:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006894:	673b      	str	r3, [r7, #112]	@ 0x70
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	3308      	adds	r3, #8
 800689c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800689e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80068a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80068a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80068a6:	e841 2300 	strex	r3, r2, [r1]
 80068aa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80068ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d1e5      	bne.n	800687e <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d019      	beq.n	80068ee <HAL_UART_Abort+0x12a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80068be:	2200      	movs	r2, #0
 80068c0:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80068c6:	4618      	mov	r0, r3
 80068c8:	f7fd f8e5 	bl	8003a96 <HAL_DMA_Abort>
 80068cc:	4603      	mov	r3, r0
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00d      	beq.n	80068ee <HAL_UART_Abort+0x12a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80068d6:	4618      	mov	r0, r3
 80068d8:	f7fd fa4c 	bl	8003d74 <HAL_DMA_GetError>
 80068dc:	4603      	mov	r3, r0
 80068de:	2b20      	cmp	r3, #32
 80068e0:	d105      	bne.n	80068ee <HAL_UART_Abort+0x12a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2210      	movs	r2, #16
 80068e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 80068ea:	2303      	movs	r3, #3
 80068ec:	e073      	b.n	80069d6 <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068f8:	2b40      	cmp	r3, #64	@ 0x40
 80068fa:	d13b      	bne.n	8006974 <HAL_UART_Abort+0x1b0>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	3308      	adds	r3, #8
 8006902:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	e853 3f00 	ldrex	r3, [r3]
 800690a:	60bb      	str	r3, [r7, #8]
   return(result);
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006912:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	3308      	adds	r3, #8
 800691a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800691c:	61ba      	str	r2, [r7, #24]
 800691e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006920:	6979      	ldr	r1, [r7, #20]
 8006922:	69ba      	ldr	r2, [r7, #24]
 8006924:	e841 2300 	strex	r3, r2, [r1]
 8006928:	613b      	str	r3, [r7, #16]
   return(result);
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d1e5      	bne.n	80068fc <HAL_UART_Abort+0x138>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006936:	2b00      	cmp	r3, #0
 8006938:	d01c      	beq.n	8006974 <HAL_UART_Abort+0x1b0>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006940:	2200      	movs	r2, #0
 8006942:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800694a:	4618      	mov	r0, r3
 800694c:	f7fd f8a3 	bl	8003a96 <HAL_DMA_Abort>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d00e      	beq.n	8006974 <HAL_UART_Abort+0x1b0>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800695c:	4618      	mov	r0, r3
 800695e:	f7fd fa09 	bl	8003d74 <HAL_DMA_GetError>
 8006962:	4603      	mov	r3, r0
 8006964:	2b20      	cmp	r3, #32
 8006966:	d105      	bne.n	8006974 <HAL_UART_Abort+0x1b0>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2210      	movs	r2, #16
 800696c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8006970:	2303      	movs	r3, #3
 8006972:	e030      	b.n	80069d6 <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	220f      	movs	r2, #15
 800698a:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006990:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006994:	d107      	bne.n	80069a6 <HAL_UART_Abort+0x1e2>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	699a      	ldr	r2, [r3, #24]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f042 0210 	orr.w	r2, r2, #16
 80069a4:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	699a      	ldr	r2, [r3, #24]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f042 0208 	orr.w	r2, r2, #8
 80069b4:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2220      	movs	r2, #32
 80069ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2220      	movs	r2, #32
 80069c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	66da      	str	r2, [r3, #108]	@ 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3780      	adds	r7, #128	@ 0x80
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
	...

080069e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b0ba      	sub	sp, #232	@ 0xe8
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	69db      	ldr	r3, [r3, #28]
 80069ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006a06:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006a0a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006a0e:	4013      	ands	r3, r2
 8006a10:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006a14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d11b      	bne.n	8006a54 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006a1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a20:	f003 0320 	and.w	r3, r3, #32
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d015      	beq.n	8006a54 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a2c:	f003 0320 	and.w	r3, r3, #32
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d105      	bne.n	8006a40 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006a34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d009      	beq.n	8006a54 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	f000 8300 	beq.w	800704a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	4798      	blx	r3
      }
      return;
 8006a52:	e2fa      	b.n	800704a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006a54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	f000 8123 	beq.w	8006ca4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006a5e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006a62:	4b8d      	ldr	r3, [pc, #564]	@ (8006c98 <HAL_UART_IRQHandler+0x2b8>)
 8006a64:	4013      	ands	r3, r2
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d106      	bne.n	8006a78 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006a6a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006a6e:	4b8b      	ldr	r3, [pc, #556]	@ (8006c9c <HAL_UART_IRQHandler+0x2bc>)
 8006a70:	4013      	ands	r3, r2
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	f000 8116 	beq.w	8006ca4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006a78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a7c:	f003 0301 	and.w	r3, r3, #1
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d011      	beq.n	8006aa8 <HAL_UART_IRQHandler+0xc8>
 8006a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d00b      	beq.n	8006aa8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	2201      	movs	r2, #1
 8006a96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a9e:	f043 0201 	orr.w	r2, r3, #1
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006aa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006aac:	f003 0302 	and.w	r3, r3, #2
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d011      	beq.n	8006ad8 <HAL_UART_IRQHandler+0xf8>
 8006ab4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ab8:	f003 0301 	and.w	r3, r3, #1
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d00b      	beq.n	8006ad8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2202      	movs	r2, #2
 8006ac6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ace:	f043 0204 	orr.w	r2, r3, #4
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006adc:	f003 0304 	and.w	r3, r3, #4
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d011      	beq.n	8006b08 <HAL_UART_IRQHandler+0x128>
 8006ae4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ae8:	f003 0301 	and.w	r3, r3, #1
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d00b      	beq.n	8006b08 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	2204      	movs	r2, #4
 8006af6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006afe:	f043 0202 	orr.w	r2, r3, #2
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006b08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b0c:	f003 0308 	and.w	r3, r3, #8
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d017      	beq.n	8006b44 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006b14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b18:	f003 0320 	and.w	r3, r3, #32
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d105      	bne.n	8006b2c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006b20:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006b24:	4b5c      	ldr	r3, [pc, #368]	@ (8006c98 <HAL_UART_IRQHandler+0x2b8>)
 8006b26:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d00b      	beq.n	8006b44 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	2208      	movs	r2, #8
 8006b32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b3a:	f043 0208 	orr.w	r2, r3, #8
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006b44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d012      	beq.n	8006b76 <HAL_UART_IRQHandler+0x196>
 8006b50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b54:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d00c      	beq.n	8006b76 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006b64:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b6c:	f043 0220 	orr.w	r2, r3, #32
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	f000 8266 	beq.w	800704e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006b82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b86:	f003 0320 	and.w	r3, r3, #32
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d013      	beq.n	8006bb6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006b8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b92:	f003 0320 	and.w	r3, r3, #32
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d105      	bne.n	8006ba6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006b9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d007      	beq.n	8006bb6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d003      	beq.n	8006bb6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bbc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bca:	2b40      	cmp	r3, #64	@ 0x40
 8006bcc:	d005      	beq.n	8006bda <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006bce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006bd2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d054      	beq.n	8006c84 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 ffd3 	bl	8007b86 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bea:	2b40      	cmp	r3, #64	@ 0x40
 8006bec:	d146      	bne.n	8006c7c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	3308      	adds	r3, #8
 8006bf4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006bfc:	e853 3f00 	ldrex	r3, [r3]
 8006c00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006c04:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006c08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	3308      	adds	r3, #8
 8006c16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006c1a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006c1e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006c26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006c2a:	e841 2300 	strex	r3, r2, [r1]
 8006c2e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006c32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d1d9      	bne.n	8006bee <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d017      	beq.n	8006c74 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c4a:	4a15      	ldr	r2, [pc, #84]	@ (8006ca0 <HAL_UART_IRQHandler+0x2c0>)
 8006c4c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c54:	4618      	mov	r0, r3
 8006c56:	f7fc ff77 	bl	8003b48 <HAL_DMA_Abort_IT>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d019      	beq.n	8006c94 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006c6e:	4610      	mov	r0, r2
 8006c70:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c72:	e00f      	b.n	8006c94 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f7fa fba3 	bl	80013c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c7a:	e00b      	b.n	8006c94 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f7fa fb9f 	bl	80013c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c82:	e007      	b.n	8006c94 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f7fa fb9b 	bl	80013c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006c92:	e1dc      	b.n	800704e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c94:	bf00      	nop
    return;
 8006c96:	e1da      	b.n	800704e <HAL_UART_IRQHandler+0x66e>
 8006c98:	10000001 	.word	0x10000001
 8006c9c:	04000120 	.word	0x04000120
 8006ca0:	08007e3d 	.word	0x08007e3d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	f040 8170 	bne.w	8006f8e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cb2:	f003 0310 	and.w	r3, r3, #16
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	f000 8169 	beq.w	8006f8e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006cbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cc0:	f003 0310 	and.w	r3, r3, #16
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	f000 8162 	beq.w	8006f8e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	2210      	movs	r2, #16
 8006cd0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cdc:	2b40      	cmp	r3, #64	@ 0x40
 8006cde:	f040 80d8 	bne.w	8006e92 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006cf0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	f000 80af 	beq.w	8006e58 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006d00:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006d04:	429a      	cmp	r2, r3
 8006d06:	f080 80a7 	bcs.w	8006e58 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006d10:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f003 0320 	and.w	r3, r3, #32
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	f040 8087 	bne.w	8006e36 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d30:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006d34:	e853 3f00 	ldrex	r3, [r3]
 8006d38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006d3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006d40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006d52:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006d56:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d5a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006d5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006d62:	e841 2300 	strex	r3, r2, [r1]
 8006d66:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006d6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d1da      	bne.n	8006d28 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	3308      	adds	r3, #8
 8006d78:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006d7c:	e853 3f00 	ldrex	r3, [r3]
 8006d80:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006d82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006d84:	f023 0301 	bic.w	r3, r3, #1
 8006d88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	3308      	adds	r3, #8
 8006d92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006d96:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006d9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d9c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006d9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006da2:	e841 2300 	strex	r3, r2, [r1]
 8006da6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006da8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d1e1      	bne.n	8006d72 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	3308      	adds	r3, #8
 8006db4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006db8:	e853 3f00 	ldrex	r3, [r3]
 8006dbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006dbe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006dc0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006dc4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	3308      	adds	r3, #8
 8006dce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006dd2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006dd4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006dd8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006dda:	e841 2300 	strex	r3, r2, [r1]
 8006dde:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006de0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d1e3      	bne.n	8006dae <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2220      	movs	r2, #32
 8006dea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006dfc:	e853 3f00 	ldrex	r3, [r3]
 8006e00:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006e02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e04:	f023 0310 	bic.w	r3, r3, #16
 8006e08:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	461a      	mov	r2, r3
 8006e12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e16:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006e18:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e1a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006e1c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006e1e:	e841 2300 	strex	r3, r2, [r1]
 8006e22:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006e24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d1e4      	bne.n	8006df4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e30:	4618      	mov	r0, r3
 8006e32:	f7fc fe30 	bl	8003a96 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2202      	movs	r2, #2
 8006e3a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	1ad3      	subs	r3, r2, r3
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	4619      	mov	r1, r3
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f000 f911 	bl	8007078 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006e56:	e0fc      	b.n	8007052 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006e5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006e62:	429a      	cmp	r2, r3
 8006e64:	f040 80f5 	bne.w	8007052 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f003 0320 	and.w	r3, r3, #32
 8006e76:	2b20      	cmp	r3, #32
 8006e78:	f040 80eb 	bne.w	8007052 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2202      	movs	r2, #2
 8006e80:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006e88:	4619      	mov	r1, r3
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 f8f4 	bl	8007078 <HAL_UARTEx_RxEventCallback>
      return;
 8006e90:	e0df      	b.n	8007052 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	1ad3      	subs	r3, r2, r3
 8006ea2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	f000 80d1 	beq.w	8007056 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8006eb4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	f000 80cc 	beq.w	8007056 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ec6:	e853 3f00 	ldrex	r3, [r3]
 8006eca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006ecc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ece:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ed2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	461a      	mov	r2, r3
 8006edc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006ee0:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ee2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006ee6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ee8:	e841 2300 	strex	r3, r2, [r1]
 8006eec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006eee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d1e4      	bne.n	8006ebe <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	3308      	adds	r3, #8
 8006efa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006efe:	e853 3f00 	ldrex	r3, [r3]
 8006f02:	623b      	str	r3, [r7, #32]
   return(result);
 8006f04:	6a3b      	ldr	r3, [r7, #32]
 8006f06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f0a:	f023 0301 	bic.w	r3, r3, #1
 8006f0e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	3308      	adds	r3, #8
 8006f18:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006f1c:	633a      	str	r2, [r7, #48]	@ 0x30
 8006f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f20:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f24:	e841 2300 	strex	r3, r2, [r1]
 8006f28:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d1e1      	bne.n	8006ef4 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2220      	movs	r2, #32
 8006f34:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2200      	movs	r2, #0
 8006f42:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	e853 3f00 	ldrex	r3, [r3]
 8006f50:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f023 0310 	bic.w	r3, r3, #16
 8006f58:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	461a      	mov	r2, r3
 8006f62:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006f66:	61fb      	str	r3, [r7, #28]
 8006f68:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f6a:	69b9      	ldr	r1, [r7, #24]
 8006f6c:	69fa      	ldr	r2, [r7, #28]
 8006f6e:	e841 2300 	strex	r3, r2, [r1]
 8006f72:	617b      	str	r3, [r7, #20]
   return(result);
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d1e4      	bne.n	8006f44 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2202      	movs	r2, #2
 8006f7e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006f84:	4619      	mov	r1, r3
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f000 f876 	bl	8007078 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006f8c:	e063      	b.n	8007056 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d00e      	beq.n	8006fb8 <HAL_UART_IRQHandler+0x5d8>
 8006f9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d008      	beq.n	8006fb8 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006fae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f000 ff84 	bl	8007ebe <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006fb6:	e051      	b.n	800705c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006fb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d014      	beq.n	8006fee <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006fc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d105      	bne.n	8006fdc <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006fd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006fd4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d008      	beq.n	8006fee <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d03a      	beq.n	800705a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	4798      	blx	r3
    }
    return;
 8006fec:	e035      	b.n	800705a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006fee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ff2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d009      	beq.n	800700e <HAL_UART_IRQHandler+0x62e>
 8006ffa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ffe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007002:	2b00      	cmp	r3, #0
 8007004:	d003      	beq.n	800700e <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f000 ff2e 	bl	8007e68 <UART_EndTransmit_IT>
    return;
 800700c:	e026      	b.n	800705c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800700e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007012:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007016:	2b00      	cmp	r3, #0
 8007018:	d009      	beq.n	800702e <HAL_UART_IRQHandler+0x64e>
 800701a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800701e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007022:	2b00      	cmp	r3, #0
 8007024:	d003      	beq.n	800702e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 ff5d 	bl	8007ee6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800702c:	e016      	b.n	800705c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800702e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007032:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007036:	2b00      	cmp	r3, #0
 8007038:	d010      	beq.n	800705c <HAL_UART_IRQHandler+0x67c>
 800703a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800703e:	2b00      	cmp	r3, #0
 8007040:	da0c      	bge.n	800705c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 ff45 	bl	8007ed2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007048:	e008      	b.n	800705c <HAL_UART_IRQHandler+0x67c>
      return;
 800704a:	bf00      	nop
 800704c:	e006      	b.n	800705c <HAL_UART_IRQHandler+0x67c>
    return;
 800704e:	bf00      	nop
 8007050:	e004      	b.n	800705c <HAL_UART_IRQHandler+0x67c>
      return;
 8007052:	bf00      	nop
 8007054:	e002      	b.n	800705c <HAL_UART_IRQHandler+0x67c>
      return;
 8007056:	bf00      	nop
 8007058:	e000      	b.n	800705c <HAL_UART_IRQHandler+0x67c>
    return;
 800705a:	bf00      	nop
  }
}
 800705c:	37e8      	adds	r7, #232	@ 0xe8
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop

08007064 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007064:	b480      	push	{r7}
 8007066:	b083      	sub	sp, #12
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800706c:	bf00      	nop
 800706e:	370c      	adds	r7, #12
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr

08007078 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007078:	b480      	push	{r7}
 800707a:	b083      	sub	sp, #12
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	460b      	mov	r3, r1
 8007082:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007084:	bf00      	nop
 8007086:	370c      	adds	r7, #12
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr

08007090 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8007090:	b480      	push	{r7}
 8007092:	b083      	sub	sp, #12
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800709e:	4618      	mov	r0, r3
 80070a0:	370c      	adds	r7, #12
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr
	...

080070ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80070b0:	b08c      	sub	sp, #48	@ 0x30
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80070b6:	2300      	movs	r3, #0
 80070b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	689a      	ldr	r2, [r3, #8]
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	691b      	ldr	r3, [r3, #16]
 80070c4:	431a      	orrs	r2, r3
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	695b      	ldr	r3, [r3, #20]
 80070ca:	431a      	orrs	r2, r3
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	69db      	ldr	r3, [r3, #28]
 80070d0:	4313      	orrs	r3, r2
 80070d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	4bab      	ldr	r3, [pc, #684]	@ (8007388 <UART_SetConfig+0x2dc>)
 80070dc:	4013      	ands	r3, r2
 80070de:	697a      	ldr	r2, [r7, #20]
 80070e0:	6812      	ldr	r2, [r2, #0]
 80070e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80070e4:	430b      	orrs	r3, r1
 80070e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	68da      	ldr	r2, [r3, #12]
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	430a      	orrs	r2, r1
 80070fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	699b      	ldr	r3, [r3, #24]
 8007102:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4aa0      	ldr	r2, [pc, #640]	@ (800738c <UART_SetConfig+0x2e0>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d004      	beq.n	8007118 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	6a1b      	ldr	r3, [r3, #32]
 8007112:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007114:	4313      	orrs	r3, r2
 8007116:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007122:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007126:	697a      	ldr	r2, [r7, #20]
 8007128:	6812      	ldr	r2, [r2, #0]
 800712a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800712c:	430b      	orrs	r3, r1
 800712e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007136:	f023 010f 	bic.w	r1, r3, #15
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	430a      	orrs	r2, r1
 8007144:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a91      	ldr	r2, [pc, #580]	@ (8007390 <UART_SetConfig+0x2e4>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d125      	bne.n	800719c <UART_SetConfig+0xf0>
 8007150:	4b90      	ldr	r3, [pc, #576]	@ (8007394 <UART_SetConfig+0x2e8>)
 8007152:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007156:	f003 0303 	and.w	r3, r3, #3
 800715a:	2b03      	cmp	r3, #3
 800715c:	d81a      	bhi.n	8007194 <UART_SetConfig+0xe8>
 800715e:	a201      	add	r2, pc, #4	@ (adr r2, 8007164 <UART_SetConfig+0xb8>)
 8007160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007164:	08007175 	.word	0x08007175
 8007168:	08007185 	.word	0x08007185
 800716c:	0800717d 	.word	0x0800717d
 8007170:	0800718d 	.word	0x0800718d
 8007174:	2301      	movs	r3, #1
 8007176:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800717a:	e0d6      	b.n	800732a <UART_SetConfig+0x27e>
 800717c:	2302      	movs	r3, #2
 800717e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007182:	e0d2      	b.n	800732a <UART_SetConfig+0x27e>
 8007184:	2304      	movs	r3, #4
 8007186:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800718a:	e0ce      	b.n	800732a <UART_SetConfig+0x27e>
 800718c:	2308      	movs	r3, #8
 800718e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007192:	e0ca      	b.n	800732a <UART_SetConfig+0x27e>
 8007194:	2310      	movs	r3, #16
 8007196:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800719a:	e0c6      	b.n	800732a <UART_SetConfig+0x27e>
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a7d      	ldr	r2, [pc, #500]	@ (8007398 <UART_SetConfig+0x2ec>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d138      	bne.n	8007218 <UART_SetConfig+0x16c>
 80071a6:	4b7b      	ldr	r3, [pc, #492]	@ (8007394 <UART_SetConfig+0x2e8>)
 80071a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071ac:	f003 030c 	and.w	r3, r3, #12
 80071b0:	2b0c      	cmp	r3, #12
 80071b2:	d82d      	bhi.n	8007210 <UART_SetConfig+0x164>
 80071b4:	a201      	add	r2, pc, #4	@ (adr r2, 80071bc <UART_SetConfig+0x110>)
 80071b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ba:	bf00      	nop
 80071bc:	080071f1 	.word	0x080071f1
 80071c0:	08007211 	.word	0x08007211
 80071c4:	08007211 	.word	0x08007211
 80071c8:	08007211 	.word	0x08007211
 80071cc:	08007201 	.word	0x08007201
 80071d0:	08007211 	.word	0x08007211
 80071d4:	08007211 	.word	0x08007211
 80071d8:	08007211 	.word	0x08007211
 80071dc:	080071f9 	.word	0x080071f9
 80071e0:	08007211 	.word	0x08007211
 80071e4:	08007211 	.word	0x08007211
 80071e8:	08007211 	.word	0x08007211
 80071ec:	08007209 	.word	0x08007209
 80071f0:	2300      	movs	r3, #0
 80071f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071f6:	e098      	b.n	800732a <UART_SetConfig+0x27e>
 80071f8:	2302      	movs	r3, #2
 80071fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071fe:	e094      	b.n	800732a <UART_SetConfig+0x27e>
 8007200:	2304      	movs	r3, #4
 8007202:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007206:	e090      	b.n	800732a <UART_SetConfig+0x27e>
 8007208:	2308      	movs	r3, #8
 800720a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800720e:	e08c      	b.n	800732a <UART_SetConfig+0x27e>
 8007210:	2310      	movs	r3, #16
 8007212:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007216:	e088      	b.n	800732a <UART_SetConfig+0x27e>
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a5f      	ldr	r2, [pc, #380]	@ (800739c <UART_SetConfig+0x2f0>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d125      	bne.n	800726e <UART_SetConfig+0x1c2>
 8007222:	4b5c      	ldr	r3, [pc, #368]	@ (8007394 <UART_SetConfig+0x2e8>)
 8007224:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007228:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800722c:	2b30      	cmp	r3, #48	@ 0x30
 800722e:	d016      	beq.n	800725e <UART_SetConfig+0x1b2>
 8007230:	2b30      	cmp	r3, #48	@ 0x30
 8007232:	d818      	bhi.n	8007266 <UART_SetConfig+0x1ba>
 8007234:	2b20      	cmp	r3, #32
 8007236:	d00a      	beq.n	800724e <UART_SetConfig+0x1a2>
 8007238:	2b20      	cmp	r3, #32
 800723a:	d814      	bhi.n	8007266 <UART_SetConfig+0x1ba>
 800723c:	2b00      	cmp	r3, #0
 800723e:	d002      	beq.n	8007246 <UART_SetConfig+0x19a>
 8007240:	2b10      	cmp	r3, #16
 8007242:	d008      	beq.n	8007256 <UART_SetConfig+0x1aa>
 8007244:	e00f      	b.n	8007266 <UART_SetConfig+0x1ba>
 8007246:	2300      	movs	r3, #0
 8007248:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800724c:	e06d      	b.n	800732a <UART_SetConfig+0x27e>
 800724e:	2302      	movs	r3, #2
 8007250:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007254:	e069      	b.n	800732a <UART_SetConfig+0x27e>
 8007256:	2304      	movs	r3, #4
 8007258:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800725c:	e065      	b.n	800732a <UART_SetConfig+0x27e>
 800725e:	2308      	movs	r3, #8
 8007260:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007264:	e061      	b.n	800732a <UART_SetConfig+0x27e>
 8007266:	2310      	movs	r3, #16
 8007268:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800726c:	e05d      	b.n	800732a <UART_SetConfig+0x27e>
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a4b      	ldr	r2, [pc, #300]	@ (80073a0 <UART_SetConfig+0x2f4>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d125      	bne.n	80072c4 <UART_SetConfig+0x218>
 8007278:	4b46      	ldr	r3, [pc, #280]	@ (8007394 <UART_SetConfig+0x2e8>)
 800727a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800727e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007282:	2bc0      	cmp	r3, #192	@ 0xc0
 8007284:	d016      	beq.n	80072b4 <UART_SetConfig+0x208>
 8007286:	2bc0      	cmp	r3, #192	@ 0xc0
 8007288:	d818      	bhi.n	80072bc <UART_SetConfig+0x210>
 800728a:	2b80      	cmp	r3, #128	@ 0x80
 800728c:	d00a      	beq.n	80072a4 <UART_SetConfig+0x1f8>
 800728e:	2b80      	cmp	r3, #128	@ 0x80
 8007290:	d814      	bhi.n	80072bc <UART_SetConfig+0x210>
 8007292:	2b00      	cmp	r3, #0
 8007294:	d002      	beq.n	800729c <UART_SetConfig+0x1f0>
 8007296:	2b40      	cmp	r3, #64	@ 0x40
 8007298:	d008      	beq.n	80072ac <UART_SetConfig+0x200>
 800729a:	e00f      	b.n	80072bc <UART_SetConfig+0x210>
 800729c:	2300      	movs	r3, #0
 800729e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072a2:	e042      	b.n	800732a <UART_SetConfig+0x27e>
 80072a4:	2302      	movs	r3, #2
 80072a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072aa:	e03e      	b.n	800732a <UART_SetConfig+0x27e>
 80072ac:	2304      	movs	r3, #4
 80072ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072b2:	e03a      	b.n	800732a <UART_SetConfig+0x27e>
 80072b4:	2308      	movs	r3, #8
 80072b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072ba:	e036      	b.n	800732a <UART_SetConfig+0x27e>
 80072bc:	2310      	movs	r3, #16
 80072be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072c2:	e032      	b.n	800732a <UART_SetConfig+0x27e>
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a30      	ldr	r2, [pc, #192]	@ (800738c <UART_SetConfig+0x2e0>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d12a      	bne.n	8007324 <UART_SetConfig+0x278>
 80072ce:	4b31      	ldr	r3, [pc, #196]	@ (8007394 <UART_SetConfig+0x2e8>)
 80072d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072d4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80072d8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80072dc:	d01a      	beq.n	8007314 <UART_SetConfig+0x268>
 80072de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80072e2:	d81b      	bhi.n	800731c <UART_SetConfig+0x270>
 80072e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80072e8:	d00c      	beq.n	8007304 <UART_SetConfig+0x258>
 80072ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80072ee:	d815      	bhi.n	800731c <UART_SetConfig+0x270>
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d003      	beq.n	80072fc <UART_SetConfig+0x250>
 80072f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072f8:	d008      	beq.n	800730c <UART_SetConfig+0x260>
 80072fa:	e00f      	b.n	800731c <UART_SetConfig+0x270>
 80072fc:	2300      	movs	r3, #0
 80072fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007302:	e012      	b.n	800732a <UART_SetConfig+0x27e>
 8007304:	2302      	movs	r3, #2
 8007306:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800730a:	e00e      	b.n	800732a <UART_SetConfig+0x27e>
 800730c:	2304      	movs	r3, #4
 800730e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007312:	e00a      	b.n	800732a <UART_SetConfig+0x27e>
 8007314:	2308      	movs	r3, #8
 8007316:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800731a:	e006      	b.n	800732a <UART_SetConfig+0x27e>
 800731c:	2310      	movs	r3, #16
 800731e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007322:	e002      	b.n	800732a <UART_SetConfig+0x27e>
 8007324:	2310      	movs	r3, #16
 8007326:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a17      	ldr	r2, [pc, #92]	@ (800738c <UART_SetConfig+0x2e0>)
 8007330:	4293      	cmp	r3, r2
 8007332:	f040 80a8 	bne.w	8007486 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007336:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800733a:	2b08      	cmp	r3, #8
 800733c:	d834      	bhi.n	80073a8 <UART_SetConfig+0x2fc>
 800733e:	a201      	add	r2, pc, #4	@ (adr r2, 8007344 <UART_SetConfig+0x298>)
 8007340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007344:	08007369 	.word	0x08007369
 8007348:	080073a9 	.word	0x080073a9
 800734c:	08007371 	.word	0x08007371
 8007350:	080073a9 	.word	0x080073a9
 8007354:	08007377 	.word	0x08007377
 8007358:	080073a9 	.word	0x080073a9
 800735c:	080073a9 	.word	0x080073a9
 8007360:	080073a9 	.word	0x080073a9
 8007364:	0800737f 	.word	0x0800737f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007368:	f7fd fcb8 	bl	8004cdc <HAL_RCC_GetPCLK1Freq>
 800736c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800736e:	e021      	b.n	80073b4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007370:	4b0c      	ldr	r3, [pc, #48]	@ (80073a4 <UART_SetConfig+0x2f8>)
 8007372:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007374:	e01e      	b.n	80073b4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007376:	f7fd fc45 	bl	8004c04 <HAL_RCC_GetSysClockFreq>
 800737a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800737c:	e01a      	b.n	80073b4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800737e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007382:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007384:	e016      	b.n	80073b4 <UART_SetConfig+0x308>
 8007386:	bf00      	nop
 8007388:	cfff69f3 	.word	0xcfff69f3
 800738c:	40008000 	.word	0x40008000
 8007390:	40013800 	.word	0x40013800
 8007394:	40021000 	.word	0x40021000
 8007398:	40004400 	.word	0x40004400
 800739c:	40004800 	.word	0x40004800
 80073a0:	40004c00 	.word	0x40004c00
 80073a4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80073a8:	2300      	movs	r3, #0
 80073aa:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80073ac:	2301      	movs	r3, #1
 80073ae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80073b2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80073b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	f000 812a 	beq.w	8007610 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073c0:	4a9e      	ldr	r2, [pc, #632]	@ (800763c <UART_SetConfig+0x590>)
 80073c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073c6:	461a      	mov	r2, r3
 80073c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80073ce:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	685a      	ldr	r2, [r3, #4]
 80073d4:	4613      	mov	r3, r2
 80073d6:	005b      	lsls	r3, r3, #1
 80073d8:	4413      	add	r3, r2
 80073da:	69ba      	ldr	r2, [r7, #24]
 80073dc:	429a      	cmp	r2, r3
 80073de:	d305      	bcc.n	80073ec <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80073e6:	69ba      	ldr	r2, [r7, #24]
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d903      	bls.n	80073f4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80073f2:	e10d      	b.n	8007610 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073f6:	2200      	movs	r2, #0
 80073f8:	60bb      	str	r3, [r7, #8]
 80073fa:	60fa      	str	r2, [r7, #12]
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007400:	4a8e      	ldr	r2, [pc, #568]	@ (800763c <UART_SetConfig+0x590>)
 8007402:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007406:	b29b      	uxth	r3, r3
 8007408:	2200      	movs	r2, #0
 800740a:	603b      	str	r3, [r7, #0]
 800740c:	607a      	str	r2, [r7, #4]
 800740e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007412:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007416:	f7f9 fc5f 	bl	8000cd8 <__aeabi_uldivmod>
 800741a:	4602      	mov	r2, r0
 800741c:	460b      	mov	r3, r1
 800741e:	4610      	mov	r0, r2
 8007420:	4619      	mov	r1, r3
 8007422:	f04f 0200 	mov.w	r2, #0
 8007426:	f04f 0300 	mov.w	r3, #0
 800742a:	020b      	lsls	r3, r1, #8
 800742c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007430:	0202      	lsls	r2, r0, #8
 8007432:	6979      	ldr	r1, [r7, #20]
 8007434:	6849      	ldr	r1, [r1, #4]
 8007436:	0849      	lsrs	r1, r1, #1
 8007438:	2000      	movs	r0, #0
 800743a:	460c      	mov	r4, r1
 800743c:	4605      	mov	r5, r0
 800743e:	eb12 0804 	adds.w	r8, r2, r4
 8007442:	eb43 0905 	adc.w	r9, r3, r5
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	469a      	mov	sl, r3
 800744e:	4693      	mov	fp, r2
 8007450:	4652      	mov	r2, sl
 8007452:	465b      	mov	r3, fp
 8007454:	4640      	mov	r0, r8
 8007456:	4649      	mov	r1, r9
 8007458:	f7f9 fc3e 	bl	8000cd8 <__aeabi_uldivmod>
 800745c:	4602      	mov	r2, r0
 800745e:	460b      	mov	r3, r1
 8007460:	4613      	mov	r3, r2
 8007462:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007464:	6a3b      	ldr	r3, [r7, #32]
 8007466:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800746a:	d308      	bcc.n	800747e <UART_SetConfig+0x3d2>
 800746c:	6a3b      	ldr	r3, [r7, #32]
 800746e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007472:	d204      	bcs.n	800747e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	6a3a      	ldr	r2, [r7, #32]
 800747a:	60da      	str	r2, [r3, #12]
 800747c:	e0c8      	b.n	8007610 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800747e:	2301      	movs	r3, #1
 8007480:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007484:	e0c4      	b.n	8007610 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	69db      	ldr	r3, [r3, #28]
 800748a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800748e:	d167      	bne.n	8007560 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8007490:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007494:	2b08      	cmp	r3, #8
 8007496:	d828      	bhi.n	80074ea <UART_SetConfig+0x43e>
 8007498:	a201      	add	r2, pc, #4	@ (adr r2, 80074a0 <UART_SetConfig+0x3f4>)
 800749a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800749e:	bf00      	nop
 80074a0:	080074c5 	.word	0x080074c5
 80074a4:	080074cd 	.word	0x080074cd
 80074a8:	080074d5 	.word	0x080074d5
 80074ac:	080074eb 	.word	0x080074eb
 80074b0:	080074db 	.word	0x080074db
 80074b4:	080074eb 	.word	0x080074eb
 80074b8:	080074eb 	.word	0x080074eb
 80074bc:	080074eb 	.word	0x080074eb
 80074c0:	080074e3 	.word	0x080074e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074c4:	f7fd fc0a 	bl	8004cdc <HAL_RCC_GetPCLK1Freq>
 80074c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80074ca:	e014      	b.n	80074f6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074cc:	f7fd fc1c 	bl	8004d08 <HAL_RCC_GetPCLK2Freq>
 80074d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80074d2:	e010      	b.n	80074f6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074d4:	4b5a      	ldr	r3, [pc, #360]	@ (8007640 <UART_SetConfig+0x594>)
 80074d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80074d8:	e00d      	b.n	80074f6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074da:	f7fd fb93 	bl	8004c04 <HAL_RCC_GetSysClockFreq>
 80074de:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80074e0:	e009      	b.n	80074f6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80074e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80074e8:	e005      	b.n	80074f6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80074ea:	2300      	movs	r3, #0
 80074ec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80074ee:	2301      	movs	r3, #1
 80074f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80074f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80074f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	f000 8089 	beq.w	8007610 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007502:	4a4e      	ldr	r2, [pc, #312]	@ (800763c <UART_SetConfig+0x590>)
 8007504:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007508:	461a      	mov	r2, r3
 800750a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800750c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007510:	005a      	lsls	r2, r3, #1
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	085b      	lsrs	r3, r3, #1
 8007518:	441a      	add	r2, r3
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007522:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007524:	6a3b      	ldr	r3, [r7, #32]
 8007526:	2b0f      	cmp	r3, #15
 8007528:	d916      	bls.n	8007558 <UART_SetConfig+0x4ac>
 800752a:	6a3b      	ldr	r3, [r7, #32]
 800752c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007530:	d212      	bcs.n	8007558 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007532:	6a3b      	ldr	r3, [r7, #32]
 8007534:	b29b      	uxth	r3, r3
 8007536:	f023 030f 	bic.w	r3, r3, #15
 800753a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800753c:	6a3b      	ldr	r3, [r7, #32]
 800753e:	085b      	lsrs	r3, r3, #1
 8007540:	b29b      	uxth	r3, r3
 8007542:	f003 0307 	and.w	r3, r3, #7
 8007546:	b29a      	uxth	r2, r3
 8007548:	8bfb      	ldrh	r3, [r7, #30]
 800754a:	4313      	orrs	r3, r2
 800754c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	8bfa      	ldrh	r2, [r7, #30]
 8007554:	60da      	str	r2, [r3, #12]
 8007556:	e05b      	b.n	8007610 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800755e:	e057      	b.n	8007610 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007560:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007564:	2b08      	cmp	r3, #8
 8007566:	d828      	bhi.n	80075ba <UART_SetConfig+0x50e>
 8007568:	a201      	add	r2, pc, #4	@ (adr r2, 8007570 <UART_SetConfig+0x4c4>)
 800756a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800756e:	bf00      	nop
 8007570:	08007595 	.word	0x08007595
 8007574:	0800759d 	.word	0x0800759d
 8007578:	080075a5 	.word	0x080075a5
 800757c:	080075bb 	.word	0x080075bb
 8007580:	080075ab 	.word	0x080075ab
 8007584:	080075bb 	.word	0x080075bb
 8007588:	080075bb 	.word	0x080075bb
 800758c:	080075bb 	.word	0x080075bb
 8007590:	080075b3 	.word	0x080075b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007594:	f7fd fba2 	bl	8004cdc <HAL_RCC_GetPCLK1Freq>
 8007598:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800759a:	e014      	b.n	80075c6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800759c:	f7fd fbb4 	bl	8004d08 <HAL_RCC_GetPCLK2Freq>
 80075a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80075a2:	e010      	b.n	80075c6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075a4:	4b26      	ldr	r3, [pc, #152]	@ (8007640 <UART_SetConfig+0x594>)
 80075a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80075a8:	e00d      	b.n	80075c6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075aa:	f7fd fb2b 	bl	8004c04 <HAL_RCC_GetSysClockFreq>
 80075ae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80075b0:	e009      	b.n	80075c6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80075b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80075b8:	e005      	b.n	80075c6 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80075ba:	2300      	movs	r3, #0
 80075bc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80075c4:	bf00      	nop
    }

    if (pclk != 0U)
 80075c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d021      	beq.n	8007610 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075d0:	4a1a      	ldr	r2, [pc, #104]	@ (800763c <UART_SetConfig+0x590>)
 80075d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075d6:	461a      	mov	r2, r3
 80075d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075da:	fbb3 f2f2 	udiv	r2, r3, r2
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	085b      	lsrs	r3, r3, #1
 80075e4:	441a      	add	r2, r3
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80075ee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075f0:	6a3b      	ldr	r3, [r7, #32]
 80075f2:	2b0f      	cmp	r3, #15
 80075f4:	d909      	bls.n	800760a <UART_SetConfig+0x55e>
 80075f6:	6a3b      	ldr	r3, [r7, #32]
 80075f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075fc:	d205      	bcs.n	800760a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80075fe:	6a3b      	ldr	r3, [r7, #32]
 8007600:	b29a      	uxth	r2, r3
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	60da      	str	r2, [r3, #12]
 8007608:	e002      	b.n	8007610 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800760a:	2301      	movs	r3, #1
 800760c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	2201      	movs	r2, #1
 8007614:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	2201      	movs	r2, #1
 800761c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	2200      	movs	r2, #0
 8007624:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	2200      	movs	r2, #0
 800762a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800762c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007630:	4618      	mov	r0, r3
 8007632:	3730      	adds	r7, #48	@ 0x30
 8007634:	46bd      	mov	sp, r7
 8007636:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800763a:	bf00      	nop
 800763c:	0800c9bc 	.word	0x0800c9bc
 8007640:	00f42400 	.word	0x00f42400

08007644 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007644:	b480      	push	{r7}
 8007646:	b083      	sub	sp, #12
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007650:	f003 0308 	and.w	r3, r3, #8
 8007654:	2b00      	cmp	r3, #0
 8007656:	d00a      	beq.n	800766e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	430a      	orrs	r2, r1
 800766c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007672:	f003 0301 	and.w	r3, r3, #1
 8007676:	2b00      	cmp	r3, #0
 8007678:	d00a      	beq.n	8007690 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	430a      	orrs	r2, r1
 800768e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007694:	f003 0302 	and.w	r3, r3, #2
 8007698:	2b00      	cmp	r3, #0
 800769a:	d00a      	beq.n	80076b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	430a      	orrs	r2, r1
 80076b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076b6:	f003 0304 	and.w	r3, r3, #4
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d00a      	beq.n	80076d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	430a      	orrs	r2, r1
 80076d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076d8:	f003 0310 	and.w	r3, r3, #16
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d00a      	beq.n	80076f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	430a      	orrs	r2, r1
 80076f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076fa:	f003 0320 	and.w	r3, r3, #32
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d00a      	beq.n	8007718 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	430a      	orrs	r2, r1
 8007716:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800771c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007720:	2b00      	cmp	r3, #0
 8007722:	d01a      	beq.n	800775a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	430a      	orrs	r2, r1
 8007738:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800773e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007742:	d10a      	bne.n	800775a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	430a      	orrs	r2, r1
 8007758:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800775e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007762:	2b00      	cmp	r3, #0
 8007764:	d00a      	beq.n	800777c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	430a      	orrs	r2, r1
 800777a:	605a      	str	r2, [r3, #4]
  }
}
 800777c:	bf00      	nop
 800777e:	370c      	adds	r7, #12
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr

08007788 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b098      	sub	sp, #96	@ 0x60
 800778c:	af02      	add	r7, sp, #8
 800778e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007798:	f7fa ff2a 	bl	80025f0 <HAL_GetTick>
 800779c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f003 0308 	and.w	r3, r3, #8
 80077a8:	2b08      	cmp	r3, #8
 80077aa:	d12f      	bne.n	800780c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80077b0:	9300      	str	r3, [sp, #0]
 80077b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077b4:	2200      	movs	r2, #0
 80077b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 f88e 	bl	80078dc <UART_WaitOnFlagUntilTimeout>
 80077c0:	4603      	mov	r3, r0
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d022      	beq.n	800780c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077ce:	e853 3f00 	ldrex	r3, [r3]
 80077d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80077d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80077da:	653b      	str	r3, [r7, #80]	@ 0x50
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	461a      	mov	r2, r3
 80077e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80077e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80077e6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80077ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80077ec:	e841 2300 	strex	r3, r2, [r1]
 80077f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80077f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d1e6      	bne.n	80077c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2220      	movs	r2, #32
 80077fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2200      	movs	r2, #0
 8007804:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007808:	2303      	movs	r3, #3
 800780a:	e063      	b.n	80078d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f003 0304 	and.w	r3, r3, #4
 8007816:	2b04      	cmp	r3, #4
 8007818:	d149      	bne.n	80078ae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800781a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800781e:	9300      	str	r3, [sp, #0]
 8007820:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007822:	2200      	movs	r2, #0
 8007824:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 f857 	bl	80078dc <UART_WaitOnFlagUntilTimeout>
 800782e:	4603      	mov	r3, r0
 8007830:	2b00      	cmp	r3, #0
 8007832:	d03c      	beq.n	80078ae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800783a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800783c:	e853 3f00 	ldrex	r3, [r3]
 8007840:	623b      	str	r3, [r7, #32]
   return(result);
 8007842:	6a3b      	ldr	r3, [r7, #32]
 8007844:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007848:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	461a      	mov	r2, r3
 8007850:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007852:	633b      	str	r3, [r7, #48]	@ 0x30
 8007854:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007856:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007858:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800785a:	e841 2300 	strex	r3, r2, [r1]
 800785e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007862:	2b00      	cmp	r3, #0
 8007864:	d1e6      	bne.n	8007834 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	3308      	adds	r3, #8
 800786c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	e853 3f00 	ldrex	r3, [r3]
 8007874:	60fb      	str	r3, [r7, #12]
   return(result);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	f023 0301 	bic.w	r3, r3, #1
 800787c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	3308      	adds	r3, #8
 8007884:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007886:	61fa      	str	r2, [r7, #28]
 8007888:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800788a:	69b9      	ldr	r1, [r7, #24]
 800788c:	69fa      	ldr	r2, [r7, #28]
 800788e:	e841 2300 	strex	r3, r2, [r1]
 8007892:	617b      	str	r3, [r7, #20]
   return(result);
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d1e5      	bne.n	8007866 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2220      	movs	r2, #32
 800789e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2200      	movs	r2, #0
 80078a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078aa:	2303      	movs	r3, #3
 80078ac:	e012      	b.n	80078d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2220      	movs	r2, #32
 80078b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2220      	movs	r2, #32
 80078ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2200      	movs	r2, #0
 80078c2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2200      	movs	r2, #0
 80078c8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2200      	movs	r2, #0
 80078ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80078d2:	2300      	movs	r3, #0
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3758      	adds	r7, #88	@ 0x58
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}

080078dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b084      	sub	sp, #16
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	60f8      	str	r0, [r7, #12]
 80078e4:	60b9      	str	r1, [r7, #8]
 80078e6:	603b      	str	r3, [r7, #0]
 80078e8:	4613      	mov	r3, r2
 80078ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078ec:	e04f      	b.n	800798e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078ee:	69bb      	ldr	r3, [r7, #24]
 80078f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80078f4:	d04b      	beq.n	800798e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078f6:	f7fa fe7b 	bl	80025f0 <HAL_GetTick>
 80078fa:	4602      	mov	r2, r0
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	1ad3      	subs	r3, r2, r3
 8007900:	69ba      	ldr	r2, [r7, #24]
 8007902:	429a      	cmp	r2, r3
 8007904:	d302      	bcc.n	800790c <UART_WaitOnFlagUntilTimeout+0x30>
 8007906:	69bb      	ldr	r3, [r7, #24]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d101      	bne.n	8007910 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800790c:	2303      	movs	r3, #3
 800790e:	e04e      	b.n	80079ae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f003 0304 	and.w	r3, r3, #4
 800791a:	2b00      	cmp	r3, #0
 800791c:	d037      	beq.n	800798e <UART_WaitOnFlagUntilTimeout+0xb2>
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	2b80      	cmp	r3, #128	@ 0x80
 8007922:	d034      	beq.n	800798e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	2b40      	cmp	r3, #64	@ 0x40
 8007928:	d031      	beq.n	800798e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	69db      	ldr	r3, [r3, #28]
 8007930:	f003 0308 	and.w	r3, r3, #8
 8007934:	2b08      	cmp	r3, #8
 8007936:	d110      	bne.n	800795a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	2208      	movs	r2, #8
 800793e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007940:	68f8      	ldr	r0, [r7, #12]
 8007942:	f000 f920 	bl	8007b86 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2208      	movs	r2, #8
 800794a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2200      	movs	r2, #0
 8007952:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007956:	2301      	movs	r3, #1
 8007958:	e029      	b.n	80079ae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	69db      	ldr	r3, [r3, #28]
 8007960:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007964:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007968:	d111      	bne.n	800798e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007972:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007974:	68f8      	ldr	r0, [r7, #12]
 8007976:	f000 f906 	bl	8007b86 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2220      	movs	r2, #32
 800797e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2200      	movs	r2, #0
 8007986:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800798a:	2303      	movs	r3, #3
 800798c:	e00f      	b.n	80079ae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	69da      	ldr	r2, [r3, #28]
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	4013      	ands	r3, r2
 8007998:	68ba      	ldr	r2, [r7, #8]
 800799a:	429a      	cmp	r2, r3
 800799c:	bf0c      	ite	eq
 800799e:	2301      	moveq	r3, #1
 80079a0:	2300      	movne	r3, #0
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	461a      	mov	r2, r3
 80079a6:	79fb      	ldrb	r3, [r7, #7]
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d0a0      	beq.n	80078ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80079ac:	2300      	movs	r3, #0
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3710      	adds	r7, #16
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
	...

080079b8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b096      	sub	sp, #88	@ 0x58
 80079bc:	af00      	add	r7, sp, #0
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	60b9      	str	r1, [r7, #8]
 80079c2:	4613      	mov	r3, r2
 80079c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	68ba      	ldr	r2, [r7, #8]
 80079ca:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	88fa      	ldrh	r2, [r7, #6]
 80079d0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2200      	movs	r2, #0
 80079d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2222      	movs	r2, #34	@ 0x22
 80079e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d02d      	beq.n	8007a4a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079f4:	4a40      	ldr	r2, [pc, #256]	@ (8007af8 <UART_Start_Receive_DMA+0x140>)
 80079f6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079fe:	4a3f      	ldr	r2, [pc, #252]	@ (8007afc <UART_Start_Receive_DMA+0x144>)
 8007a00:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a08:	4a3d      	ldr	r2, [pc, #244]	@ (8007b00 <UART_Start_Receive_DMA+0x148>)
 8007a0a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a12:	2200      	movs	r2, #0
 8007a14:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	3324      	adds	r3, #36	@ 0x24
 8007a22:	4619      	mov	r1, r3
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a28:	461a      	mov	r2, r3
 8007a2a:	88fb      	ldrh	r3, [r7, #6]
 8007a2c:	f7fb ffb8 	bl	80039a0 <HAL_DMA_Start_IT>
 8007a30:	4603      	mov	r3, r0
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d009      	beq.n	8007a4a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2210      	movs	r2, #16
 8007a3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2220      	movs	r2, #32
 8007a42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8007a46:	2301      	movs	r3, #1
 8007a48:	e051      	b.n	8007aee <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	691b      	ldr	r3, [r3, #16]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d018      	beq.n	8007a84 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a5a:	e853 3f00 	ldrex	r3, [r3]
 8007a5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007a60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a66:	657b      	str	r3, [r7, #84]	@ 0x54
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a70:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007a72:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a74:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007a76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007a78:	e841 2300 	strex	r3, r2, [r1]
 8007a7c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007a7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d1e6      	bne.n	8007a52 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	3308      	adds	r3, #8
 8007a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a8e:	e853 3f00 	ldrex	r3, [r3]
 8007a92:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a96:	f043 0301 	orr.w	r3, r3, #1
 8007a9a:	653b      	str	r3, [r7, #80]	@ 0x50
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	3308      	adds	r3, #8
 8007aa2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007aa4:	637a      	str	r2, [r7, #52]	@ 0x34
 8007aa6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007aaa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007aac:	e841 2300 	strex	r3, r2, [r1]
 8007ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007ab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d1e5      	bne.n	8007a84 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	3308      	adds	r3, #8
 8007abe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	e853 3f00 	ldrex	r3, [r3]
 8007ac6:	613b      	str	r3, [r7, #16]
   return(result);
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ace:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	3308      	adds	r3, #8
 8007ad6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007ad8:	623a      	str	r2, [r7, #32]
 8007ada:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007adc:	69f9      	ldr	r1, [r7, #28]
 8007ade:	6a3a      	ldr	r2, [r7, #32]
 8007ae0:	e841 2300 	strex	r3, r2, [r1]
 8007ae4:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ae6:	69bb      	ldr	r3, [r7, #24]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d1e5      	bne.n	8007ab8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8007aec:	2300      	movs	r3, #0
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3758      	adds	r7, #88	@ 0x58
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}
 8007af6:	bf00      	nop
 8007af8:	08007c53 	.word	0x08007c53
 8007afc:	08007d7f 	.word	0x08007d7f
 8007b00:	08007dbd 	.word	0x08007dbd

08007b04 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b08f      	sub	sp, #60	@ 0x3c
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b12:	6a3b      	ldr	r3, [r7, #32]
 8007b14:	e853 3f00 	ldrex	r3, [r3]
 8007b18:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b1a:	69fb      	ldr	r3, [r7, #28]
 8007b1c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007b20:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	461a      	mov	r2, r3
 8007b28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007b2c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b2e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007b30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b32:	e841 2300 	strex	r3, r2, [r1]
 8007b36:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d1e6      	bne.n	8007b0c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	3308      	adds	r3, #8
 8007b44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	e853 3f00 	ldrex	r3, [r3]
 8007b4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007b54:	633b      	str	r3, [r7, #48]	@ 0x30
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	3308      	adds	r3, #8
 8007b5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b5e:	61ba      	str	r2, [r7, #24]
 8007b60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b62:	6979      	ldr	r1, [r7, #20]
 8007b64:	69ba      	ldr	r2, [r7, #24]
 8007b66:	e841 2300 	strex	r3, r2, [r1]
 8007b6a:	613b      	str	r3, [r7, #16]
   return(result);
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d1e5      	bne.n	8007b3e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2220      	movs	r2, #32
 8007b76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8007b7a:	bf00      	nop
 8007b7c:	373c      	adds	r7, #60	@ 0x3c
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b84:	4770      	bx	lr

08007b86 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b86:	b480      	push	{r7}
 8007b88:	b095      	sub	sp, #84	@ 0x54
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b96:	e853 3f00 	ldrex	r3, [r3]
 8007b9a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b9e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ba2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	461a      	mov	r2, r3
 8007baa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007bac:	643b      	str	r3, [r7, #64]	@ 0x40
 8007bae:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007bb2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007bb4:	e841 2300 	strex	r3, r2, [r1]
 8007bb8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d1e6      	bne.n	8007b8e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	3308      	adds	r3, #8
 8007bc6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc8:	6a3b      	ldr	r3, [r7, #32]
 8007bca:	e853 3f00 	ldrex	r3, [r3]
 8007bce:	61fb      	str	r3, [r7, #28]
   return(result);
 8007bd0:	69fb      	ldr	r3, [r7, #28]
 8007bd2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007bd6:	f023 0301 	bic.w	r3, r3, #1
 8007bda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	3308      	adds	r3, #8
 8007be2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007be4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007be6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007bea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007bec:	e841 2300 	strex	r3, r2, [r1]
 8007bf0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d1e3      	bne.n	8007bc0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007bfc:	2b01      	cmp	r3, #1
 8007bfe:	d118      	bne.n	8007c32 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	e853 3f00 	ldrex	r3, [r3]
 8007c0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	f023 0310 	bic.w	r3, r3, #16
 8007c14:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c1e:	61bb      	str	r3, [r7, #24]
 8007c20:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c22:	6979      	ldr	r1, [r7, #20]
 8007c24:	69ba      	ldr	r2, [r7, #24]
 8007c26:	e841 2300 	strex	r3, r2, [r1]
 8007c2a:	613b      	str	r3, [r7, #16]
   return(result);
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d1e6      	bne.n	8007c00 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2220      	movs	r2, #32
 8007c36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2200      	movs	r2, #0
 8007c44:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007c46:	bf00      	nop
 8007c48:	3754      	adds	r7, #84	@ 0x54
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c50:	4770      	bx	lr

08007c52 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007c52:	b580      	push	{r7, lr}
 8007c54:	b09c      	sub	sp, #112	@ 0x70
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c5e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f003 0320 	and.w	r3, r3, #32
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d171      	bne.n	8007d52 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8007c6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c70:	2200      	movs	r2, #0
 8007c72:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c7e:	e853 3f00 	ldrex	r3, [r3]
 8007c82:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007c84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c86:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c8a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007c8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	461a      	mov	r2, r3
 8007c92:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007c94:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007c96:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c98:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007c9a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007c9c:	e841 2300 	strex	r3, r2, [r1]
 8007ca0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007ca2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d1e6      	bne.n	8007c76 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ca8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	3308      	adds	r3, #8
 8007cae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cb2:	e853 3f00 	ldrex	r3, [r3]
 8007cb6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007cb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cba:	f023 0301 	bic.w	r3, r3, #1
 8007cbe:	667b      	str	r3, [r7, #100]	@ 0x64
 8007cc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	3308      	adds	r3, #8
 8007cc6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007cc8:	647a      	str	r2, [r7, #68]	@ 0x44
 8007cca:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ccc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007cce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007cd0:	e841 2300 	strex	r3, r2, [r1]
 8007cd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007cd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d1e5      	bne.n	8007ca8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cdc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	3308      	adds	r3, #8
 8007ce2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ce6:	e853 3f00 	ldrex	r3, [r3]
 8007cea:	623b      	str	r3, [r7, #32]
   return(result);
 8007cec:	6a3b      	ldr	r3, [r7, #32]
 8007cee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007cf2:	663b      	str	r3, [r7, #96]	@ 0x60
 8007cf4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	3308      	adds	r3, #8
 8007cfa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007cfc:	633a      	str	r2, [r7, #48]	@ 0x30
 8007cfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d00:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d04:	e841 2300 	strex	r3, r2, [r1]
 8007d08:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d1e5      	bne.n	8007cdc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007d10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d12:	2220      	movs	r2, #32
 8007d14:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d118      	bne.n	8007d52 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	e853 3f00 	ldrex	r3, [r3]
 8007d2c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f023 0310 	bic.w	r3, r3, #16
 8007d34:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007d36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007d3e:	61fb      	str	r3, [r7, #28]
 8007d40:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d42:	69b9      	ldr	r1, [r7, #24]
 8007d44:	69fa      	ldr	r2, [r7, #28]
 8007d46:	e841 2300 	strex	r3, r2, [r1]
 8007d4a:	617b      	str	r3, [r7, #20]
   return(result);
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d1e6      	bne.n	8007d20 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d54:	2200      	movs	r2, #0
 8007d56:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d107      	bne.n	8007d70 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d62:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007d66:	4619      	mov	r1, r3
 8007d68:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007d6a:	f7ff f985 	bl	8007078 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007d6e:	e002      	b.n	8007d76 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007d70:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007d72:	f7f9 fb11 	bl	8001398 <HAL_UART_RxCpltCallback>
}
 8007d76:	bf00      	nop
 8007d78:	3770      	adds	r7, #112	@ 0x70
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}

08007d7e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007d7e:	b580      	push	{r7, lr}
 8007d80:	b084      	sub	sp, #16
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d8a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d109      	bne.n	8007dae <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007da0:	085b      	lsrs	r3, r3, #1
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	4619      	mov	r1, r3
 8007da6:	68f8      	ldr	r0, [r7, #12]
 8007da8:	f7ff f966 	bl	8007078 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007dac:	e002      	b.n	8007db4 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8007dae:	68f8      	ldr	r0, [r7, #12]
 8007db0:	f7f9 fade 	bl	8001370 <HAL_UART_RxHalfCpltCallback>
}
 8007db4:	bf00      	nop
 8007db6:	3710      	adds	r7, #16
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b086      	sub	sp, #24
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dc8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dd0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007dd8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	689b      	ldr	r3, [r3, #8]
 8007de0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007de4:	2b80      	cmp	r3, #128	@ 0x80
 8007de6:	d109      	bne.n	8007dfc <UART_DMAError+0x40>
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	2b21      	cmp	r3, #33	@ 0x21
 8007dec:	d106      	bne.n	8007dfc <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	2200      	movs	r2, #0
 8007df2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8007df6:	6978      	ldr	r0, [r7, #20]
 8007df8:	f7ff fe84 	bl	8007b04 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e06:	2b40      	cmp	r3, #64	@ 0x40
 8007e08:	d109      	bne.n	8007e1e <UART_DMAError+0x62>
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2b22      	cmp	r3, #34	@ 0x22
 8007e0e:	d106      	bne.n	8007e1e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	2200      	movs	r2, #0
 8007e14:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8007e18:	6978      	ldr	r0, [r7, #20]
 8007e1a:	f7ff feb4 	bl	8007b86 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e24:	f043 0210 	orr.w	r2, r3, #16
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e2e:	6978      	ldr	r0, [r7, #20]
 8007e30:	f7f9 fac6 	bl	80013c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e34:	bf00      	nop
 8007e36:	3718      	adds	r7, #24
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b084      	sub	sp, #16
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e48:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	2200      	movs	r2, #0
 8007e56:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e5a:	68f8      	ldr	r0, [r7, #12]
 8007e5c:	f7f9 fab0 	bl	80013c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e60:	bf00      	nop
 8007e62:	3710      	adds	r7, #16
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b088      	sub	sp, #32
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	e853 3f00 	ldrex	r3, [r3]
 8007e7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e84:	61fb      	str	r3, [r7, #28]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	69fb      	ldr	r3, [r7, #28]
 8007e8e:	61bb      	str	r3, [r7, #24]
 8007e90:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e92:	6979      	ldr	r1, [r7, #20]
 8007e94:	69ba      	ldr	r2, [r7, #24]
 8007e96:	e841 2300 	strex	r3, r2, [r1]
 8007e9a:	613b      	str	r3, [r7, #16]
   return(result);
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d1e6      	bne.n	8007e70 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2220      	movs	r2, #32
 8007ea6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2200      	movs	r2, #0
 8007eae:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f7ff f8d7 	bl	8007064 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007eb6:	bf00      	nop
 8007eb8:	3720      	adds	r7, #32
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}

08007ebe <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007ebe:	b480      	push	{r7}
 8007ec0:	b083      	sub	sp, #12
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007ec6:	bf00      	nop
 8007ec8:	370c      	adds	r7, #12
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed0:	4770      	bx	lr

08007ed2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007ed2:	b480      	push	{r7}
 8007ed4:	b083      	sub	sp, #12
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007eda:	bf00      	nop
 8007edc:	370c      	adds	r7, #12
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr

08007ee6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007ee6:	b480      	push	{r7}
 8007ee8:	b083      	sub	sp, #12
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007eee:	bf00      	nop
 8007ef0:	370c      	adds	r7, #12
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef8:	4770      	bx	lr

08007efa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007efa:	b480      	push	{r7}
 8007efc:	b085      	sub	sp, #20
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	d101      	bne.n	8007f10 <HAL_UARTEx_DisableFifoMode+0x16>
 8007f0c:	2302      	movs	r3, #2
 8007f0e:	e027      	b.n	8007f60 <HAL_UARTEx_DisableFifoMode+0x66>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2201      	movs	r2, #1
 8007f14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2224      	movs	r2, #36	@ 0x24
 8007f1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	681a      	ldr	r2, [r3, #0]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f022 0201 	bic.w	r2, r2, #1
 8007f36:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007f3e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2200      	movs	r2, #0
 8007f44:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	68fa      	ldr	r2, [r7, #12]
 8007f4c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2220      	movs	r2, #32
 8007f52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007f5e:	2300      	movs	r3, #0
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3714      	adds	r7, #20
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr

08007f6c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b084      	sub	sp, #16
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d101      	bne.n	8007f84 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007f80:	2302      	movs	r3, #2
 8007f82:	e02d      	b.n	8007fe0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2201      	movs	r2, #1
 8007f88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2224      	movs	r2, #36	@ 0x24
 8007f90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	681a      	ldr	r2, [r3, #0]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f022 0201 	bic.w	r2, r2, #1
 8007faa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	689b      	ldr	r3, [r3, #8]
 8007fb2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	683a      	ldr	r2, [r7, #0]
 8007fbc:	430a      	orrs	r2, r1
 8007fbe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 f84f 	bl	8008064 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	68fa      	ldr	r2, [r7, #12]
 8007fcc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2220      	movs	r2, #32
 8007fd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007fde:	2300      	movs	r3, #0
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3710      	adds	r7, #16
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}

08007fe8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b084      	sub	sp, #16
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	d101      	bne.n	8008000 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007ffc:	2302      	movs	r3, #2
 8007ffe:	e02d      	b.n	800805c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2201      	movs	r2, #1
 8008004:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2224      	movs	r2, #36	@ 0x24
 800800c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f022 0201 	bic.w	r2, r2, #1
 8008026:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	689b      	ldr	r3, [r3, #8]
 800802e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	683a      	ldr	r2, [r7, #0]
 8008038:	430a      	orrs	r2, r1
 800803a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f000 f811 	bl	8008064 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	68fa      	ldr	r2, [r7, #12]
 8008048:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2220      	movs	r2, #32
 800804e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2200      	movs	r2, #0
 8008056:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800805a:	2300      	movs	r3, #0
}
 800805c:	4618      	mov	r0, r3
 800805e:	3710      	adds	r7, #16
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008064:	b480      	push	{r7}
 8008066:	b085      	sub	sp, #20
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008070:	2b00      	cmp	r3, #0
 8008072:	d108      	bne.n	8008086 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2201      	movs	r2, #1
 8008078:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2201      	movs	r2, #1
 8008080:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008084:	e031      	b.n	80080ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008086:	2308      	movs	r3, #8
 8008088:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800808a:	2308      	movs	r3, #8
 800808c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	689b      	ldr	r3, [r3, #8]
 8008094:	0e5b      	lsrs	r3, r3, #25
 8008096:	b2db      	uxtb	r3, r3
 8008098:	f003 0307 	and.w	r3, r3, #7
 800809c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	689b      	ldr	r3, [r3, #8]
 80080a4:	0f5b      	lsrs	r3, r3, #29
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	f003 0307 	and.w	r3, r3, #7
 80080ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80080ae:	7bbb      	ldrb	r3, [r7, #14]
 80080b0:	7b3a      	ldrb	r2, [r7, #12]
 80080b2:	4911      	ldr	r1, [pc, #68]	@ (80080f8 <UARTEx_SetNbDataToProcess+0x94>)
 80080b4:	5c8a      	ldrb	r2, [r1, r2]
 80080b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80080ba:	7b3a      	ldrb	r2, [r7, #12]
 80080bc:	490f      	ldr	r1, [pc, #60]	@ (80080fc <UARTEx_SetNbDataToProcess+0x98>)
 80080be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80080c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80080c4:	b29a      	uxth	r2, r3
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80080cc:	7bfb      	ldrb	r3, [r7, #15]
 80080ce:	7b7a      	ldrb	r2, [r7, #13]
 80080d0:	4909      	ldr	r1, [pc, #36]	@ (80080f8 <UARTEx_SetNbDataToProcess+0x94>)
 80080d2:	5c8a      	ldrb	r2, [r1, r2]
 80080d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80080d8:	7b7a      	ldrb	r2, [r7, #13]
 80080da:	4908      	ldr	r1, [pc, #32]	@ (80080fc <UARTEx_SetNbDataToProcess+0x98>)
 80080dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80080de:	fb93 f3f2 	sdiv	r3, r3, r2
 80080e2:	b29a      	uxth	r2, r3
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80080ea:	bf00      	nop
 80080ec:	3714      	adds	r7, #20
 80080ee:	46bd      	mov	sp, r7
 80080f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f4:	4770      	bx	lr
 80080f6:	bf00      	nop
 80080f8:	0800c9d4 	.word	0x0800c9d4
 80080fc:	0800c9dc 	.word	0x0800c9dc

08008100 <__cvt>:
 8008100:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008104:	ec57 6b10 	vmov	r6, r7, d0
 8008108:	2f00      	cmp	r7, #0
 800810a:	460c      	mov	r4, r1
 800810c:	4619      	mov	r1, r3
 800810e:	463b      	mov	r3, r7
 8008110:	bfbb      	ittet	lt
 8008112:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008116:	461f      	movlt	r7, r3
 8008118:	2300      	movge	r3, #0
 800811a:	232d      	movlt	r3, #45	@ 0x2d
 800811c:	700b      	strb	r3, [r1, #0]
 800811e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008120:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008124:	4691      	mov	r9, r2
 8008126:	f023 0820 	bic.w	r8, r3, #32
 800812a:	bfbc      	itt	lt
 800812c:	4632      	movlt	r2, r6
 800812e:	4616      	movlt	r6, r2
 8008130:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008134:	d005      	beq.n	8008142 <__cvt+0x42>
 8008136:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800813a:	d100      	bne.n	800813e <__cvt+0x3e>
 800813c:	3401      	adds	r4, #1
 800813e:	2102      	movs	r1, #2
 8008140:	e000      	b.n	8008144 <__cvt+0x44>
 8008142:	2103      	movs	r1, #3
 8008144:	ab03      	add	r3, sp, #12
 8008146:	9301      	str	r3, [sp, #4]
 8008148:	ab02      	add	r3, sp, #8
 800814a:	9300      	str	r3, [sp, #0]
 800814c:	ec47 6b10 	vmov	d0, r6, r7
 8008150:	4653      	mov	r3, sl
 8008152:	4622      	mov	r2, r4
 8008154:	f001 f978 	bl	8009448 <_dtoa_r>
 8008158:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800815c:	4605      	mov	r5, r0
 800815e:	d119      	bne.n	8008194 <__cvt+0x94>
 8008160:	f019 0f01 	tst.w	r9, #1
 8008164:	d00e      	beq.n	8008184 <__cvt+0x84>
 8008166:	eb00 0904 	add.w	r9, r0, r4
 800816a:	2200      	movs	r2, #0
 800816c:	2300      	movs	r3, #0
 800816e:	4630      	mov	r0, r6
 8008170:	4639      	mov	r1, r7
 8008172:	f7f8 fcd1 	bl	8000b18 <__aeabi_dcmpeq>
 8008176:	b108      	cbz	r0, 800817c <__cvt+0x7c>
 8008178:	f8cd 900c 	str.w	r9, [sp, #12]
 800817c:	2230      	movs	r2, #48	@ 0x30
 800817e:	9b03      	ldr	r3, [sp, #12]
 8008180:	454b      	cmp	r3, r9
 8008182:	d31e      	bcc.n	80081c2 <__cvt+0xc2>
 8008184:	9b03      	ldr	r3, [sp, #12]
 8008186:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008188:	1b5b      	subs	r3, r3, r5
 800818a:	4628      	mov	r0, r5
 800818c:	6013      	str	r3, [r2, #0]
 800818e:	b004      	add	sp, #16
 8008190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008194:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008198:	eb00 0904 	add.w	r9, r0, r4
 800819c:	d1e5      	bne.n	800816a <__cvt+0x6a>
 800819e:	7803      	ldrb	r3, [r0, #0]
 80081a0:	2b30      	cmp	r3, #48	@ 0x30
 80081a2:	d10a      	bne.n	80081ba <__cvt+0xba>
 80081a4:	2200      	movs	r2, #0
 80081a6:	2300      	movs	r3, #0
 80081a8:	4630      	mov	r0, r6
 80081aa:	4639      	mov	r1, r7
 80081ac:	f7f8 fcb4 	bl	8000b18 <__aeabi_dcmpeq>
 80081b0:	b918      	cbnz	r0, 80081ba <__cvt+0xba>
 80081b2:	f1c4 0401 	rsb	r4, r4, #1
 80081b6:	f8ca 4000 	str.w	r4, [sl]
 80081ba:	f8da 3000 	ldr.w	r3, [sl]
 80081be:	4499      	add	r9, r3
 80081c0:	e7d3      	b.n	800816a <__cvt+0x6a>
 80081c2:	1c59      	adds	r1, r3, #1
 80081c4:	9103      	str	r1, [sp, #12]
 80081c6:	701a      	strb	r2, [r3, #0]
 80081c8:	e7d9      	b.n	800817e <__cvt+0x7e>

080081ca <__exponent>:
 80081ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081cc:	2900      	cmp	r1, #0
 80081ce:	bfba      	itte	lt
 80081d0:	4249      	neglt	r1, r1
 80081d2:	232d      	movlt	r3, #45	@ 0x2d
 80081d4:	232b      	movge	r3, #43	@ 0x2b
 80081d6:	2909      	cmp	r1, #9
 80081d8:	7002      	strb	r2, [r0, #0]
 80081da:	7043      	strb	r3, [r0, #1]
 80081dc:	dd29      	ble.n	8008232 <__exponent+0x68>
 80081de:	f10d 0307 	add.w	r3, sp, #7
 80081e2:	461d      	mov	r5, r3
 80081e4:	270a      	movs	r7, #10
 80081e6:	461a      	mov	r2, r3
 80081e8:	fbb1 f6f7 	udiv	r6, r1, r7
 80081ec:	fb07 1416 	mls	r4, r7, r6, r1
 80081f0:	3430      	adds	r4, #48	@ 0x30
 80081f2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80081f6:	460c      	mov	r4, r1
 80081f8:	2c63      	cmp	r4, #99	@ 0x63
 80081fa:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80081fe:	4631      	mov	r1, r6
 8008200:	dcf1      	bgt.n	80081e6 <__exponent+0x1c>
 8008202:	3130      	adds	r1, #48	@ 0x30
 8008204:	1e94      	subs	r4, r2, #2
 8008206:	f803 1c01 	strb.w	r1, [r3, #-1]
 800820a:	1c41      	adds	r1, r0, #1
 800820c:	4623      	mov	r3, r4
 800820e:	42ab      	cmp	r3, r5
 8008210:	d30a      	bcc.n	8008228 <__exponent+0x5e>
 8008212:	f10d 0309 	add.w	r3, sp, #9
 8008216:	1a9b      	subs	r3, r3, r2
 8008218:	42ac      	cmp	r4, r5
 800821a:	bf88      	it	hi
 800821c:	2300      	movhi	r3, #0
 800821e:	3302      	adds	r3, #2
 8008220:	4403      	add	r3, r0
 8008222:	1a18      	subs	r0, r3, r0
 8008224:	b003      	add	sp, #12
 8008226:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008228:	f813 6b01 	ldrb.w	r6, [r3], #1
 800822c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008230:	e7ed      	b.n	800820e <__exponent+0x44>
 8008232:	2330      	movs	r3, #48	@ 0x30
 8008234:	3130      	adds	r1, #48	@ 0x30
 8008236:	7083      	strb	r3, [r0, #2]
 8008238:	70c1      	strb	r1, [r0, #3]
 800823a:	1d03      	adds	r3, r0, #4
 800823c:	e7f1      	b.n	8008222 <__exponent+0x58>
	...

08008240 <_printf_float>:
 8008240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008244:	b08d      	sub	sp, #52	@ 0x34
 8008246:	460c      	mov	r4, r1
 8008248:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800824c:	4616      	mov	r6, r2
 800824e:	461f      	mov	r7, r3
 8008250:	4605      	mov	r5, r0
 8008252:	f000 fff3 	bl	800923c <_localeconv_r>
 8008256:	6803      	ldr	r3, [r0, #0]
 8008258:	9304      	str	r3, [sp, #16]
 800825a:	4618      	mov	r0, r3
 800825c:	f7f8 f830 	bl	80002c0 <strlen>
 8008260:	2300      	movs	r3, #0
 8008262:	930a      	str	r3, [sp, #40]	@ 0x28
 8008264:	f8d8 3000 	ldr.w	r3, [r8]
 8008268:	9005      	str	r0, [sp, #20]
 800826a:	3307      	adds	r3, #7
 800826c:	f023 0307 	bic.w	r3, r3, #7
 8008270:	f103 0208 	add.w	r2, r3, #8
 8008274:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008278:	f8d4 b000 	ldr.w	fp, [r4]
 800827c:	f8c8 2000 	str.w	r2, [r8]
 8008280:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008284:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008288:	9307      	str	r3, [sp, #28]
 800828a:	f8cd 8018 	str.w	r8, [sp, #24]
 800828e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008292:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008296:	4b9c      	ldr	r3, [pc, #624]	@ (8008508 <_printf_float+0x2c8>)
 8008298:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800829c:	f7f8 fc6e 	bl	8000b7c <__aeabi_dcmpun>
 80082a0:	bb70      	cbnz	r0, 8008300 <_printf_float+0xc0>
 80082a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80082a6:	4b98      	ldr	r3, [pc, #608]	@ (8008508 <_printf_float+0x2c8>)
 80082a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80082ac:	f7f8 fc48 	bl	8000b40 <__aeabi_dcmple>
 80082b0:	bb30      	cbnz	r0, 8008300 <_printf_float+0xc0>
 80082b2:	2200      	movs	r2, #0
 80082b4:	2300      	movs	r3, #0
 80082b6:	4640      	mov	r0, r8
 80082b8:	4649      	mov	r1, r9
 80082ba:	f7f8 fc37 	bl	8000b2c <__aeabi_dcmplt>
 80082be:	b110      	cbz	r0, 80082c6 <_printf_float+0x86>
 80082c0:	232d      	movs	r3, #45	@ 0x2d
 80082c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80082c6:	4a91      	ldr	r2, [pc, #580]	@ (800850c <_printf_float+0x2cc>)
 80082c8:	4b91      	ldr	r3, [pc, #580]	@ (8008510 <_printf_float+0x2d0>)
 80082ca:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80082ce:	bf94      	ite	ls
 80082d0:	4690      	movls	r8, r2
 80082d2:	4698      	movhi	r8, r3
 80082d4:	2303      	movs	r3, #3
 80082d6:	6123      	str	r3, [r4, #16]
 80082d8:	f02b 0304 	bic.w	r3, fp, #4
 80082dc:	6023      	str	r3, [r4, #0]
 80082de:	f04f 0900 	mov.w	r9, #0
 80082e2:	9700      	str	r7, [sp, #0]
 80082e4:	4633      	mov	r3, r6
 80082e6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80082e8:	4621      	mov	r1, r4
 80082ea:	4628      	mov	r0, r5
 80082ec:	f000 f9d2 	bl	8008694 <_printf_common>
 80082f0:	3001      	adds	r0, #1
 80082f2:	f040 808d 	bne.w	8008410 <_printf_float+0x1d0>
 80082f6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80082fa:	b00d      	add	sp, #52	@ 0x34
 80082fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008300:	4642      	mov	r2, r8
 8008302:	464b      	mov	r3, r9
 8008304:	4640      	mov	r0, r8
 8008306:	4649      	mov	r1, r9
 8008308:	f7f8 fc38 	bl	8000b7c <__aeabi_dcmpun>
 800830c:	b140      	cbz	r0, 8008320 <_printf_float+0xe0>
 800830e:	464b      	mov	r3, r9
 8008310:	2b00      	cmp	r3, #0
 8008312:	bfbc      	itt	lt
 8008314:	232d      	movlt	r3, #45	@ 0x2d
 8008316:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800831a:	4a7e      	ldr	r2, [pc, #504]	@ (8008514 <_printf_float+0x2d4>)
 800831c:	4b7e      	ldr	r3, [pc, #504]	@ (8008518 <_printf_float+0x2d8>)
 800831e:	e7d4      	b.n	80082ca <_printf_float+0x8a>
 8008320:	6863      	ldr	r3, [r4, #4]
 8008322:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008326:	9206      	str	r2, [sp, #24]
 8008328:	1c5a      	adds	r2, r3, #1
 800832a:	d13b      	bne.n	80083a4 <_printf_float+0x164>
 800832c:	2306      	movs	r3, #6
 800832e:	6063      	str	r3, [r4, #4]
 8008330:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008334:	2300      	movs	r3, #0
 8008336:	6022      	str	r2, [r4, #0]
 8008338:	9303      	str	r3, [sp, #12]
 800833a:	ab0a      	add	r3, sp, #40	@ 0x28
 800833c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008340:	ab09      	add	r3, sp, #36	@ 0x24
 8008342:	9300      	str	r3, [sp, #0]
 8008344:	6861      	ldr	r1, [r4, #4]
 8008346:	ec49 8b10 	vmov	d0, r8, r9
 800834a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800834e:	4628      	mov	r0, r5
 8008350:	f7ff fed6 	bl	8008100 <__cvt>
 8008354:	9b06      	ldr	r3, [sp, #24]
 8008356:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008358:	2b47      	cmp	r3, #71	@ 0x47
 800835a:	4680      	mov	r8, r0
 800835c:	d129      	bne.n	80083b2 <_printf_float+0x172>
 800835e:	1cc8      	adds	r0, r1, #3
 8008360:	db02      	blt.n	8008368 <_printf_float+0x128>
 8008362:	6863      	ldr	r3, [r4, #4]
 8008364:	4299      	cmp	r1, r3
 8008366:	dd41      	ble.n	80083ec <_printf_float+0x1ac>
 8008368:	f1aa 0a02 	sub.w	sl, sl, #2
 800836c:	fa5f fa8a 	uxtb.w	sl, sl
 8008370:	3901      	subs	r1, #1
 8008372:	4652      	mov	r2, sl
 8008374:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008378:	9109      	str	r1, [sp, #36]	@ 0x24
 800837a:	f7ff ff26 	bl	80081ca <__exponent>
 800837e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008380:	1813      	adds	r3, r2, r0
 8008382:	2a01      	cmp	r2, #1
 8008384:	4681      	mov	r9, r0
 8008386:	6123      	str	r3, [r4, #16]
 8008388:	dc02      	bgt.n	8008390 <_printf_float+0x150>
 800838a:	6822      	ldr	r2, [r4, #0]
 800838c:	07d2      	lsls	r2, r2, #31
 800838e:	d501      	bpl.n	8008394 <_printf_float+0x154>
 8008390:	3301      	adds	r3, #1
 8008392:	6123      	str	r3, [r4, #16]
 8008394:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008398:	2b00      	cmp	r3, #0
 800839a:	d0a2      	beq.n	80082e2 <_printf_float+0xa2>
 800839c:	232d      	movs	r3, #45	@ 0x2d
 800839e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80083a2:	e79e      	b.n	80082e2 <_printf_float+0xa2>
 80083a4:	9a06      	ldr	r2, [sp, #24]
 80083a6:	2a47      	cmp	r2, #71	@ 0x47
 80083a8:	d1c2      	bne.n	8008330 <_printf_float+0xf0>
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d1c0      	bne.n	8008330 <_printf_float+0xf0>
 80083ae:	2301      	movs	r3, #1
 80083b0:	e7bd      	b.n	800832e <_printf_float+0xee>
 80083b2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80083b6:	d9db      	bls.n	8008370 <_printf_float+0x130>
 80083b8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80083bc:	d118      	bne.n	80083f0 <_printf_float+0x1b0>
 80083be:	2900      	cmp	r1, #0
 80083c0:	6863      	ldr	r3, [r4, #4]
 80083c2:	dd0b      	ble.n	80083dc <_printf_float+0x19c>
 80083c4:	6121      	str	r1, [r4, #16]
 80083c6:	b913      	cbnz	r3, 80083ce <_printf_float+0x18e>
 80083c8:	6822      	ldr	r2, [r4, #0]
 80083ca:	07d0      	lsls	r0, r2, #31
 80083cc:	d502      	bpl.n	80083d4 <_printf_float+0x194>
 80083ce:	3301      	adds	r3, #1
 80083d0:	440b      	add	r3, r1
 80083d2:	6123      	str	r3, [r4, #16]
 80083d4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80083d6:	f04f 0900 	mov.w	r9, #0
 80083da:	e7db      	b.n	8008394 <_printf_float+0x154>
 80083dc:	b913      	cbnz	r3, 80083e4 <_printf_float+0x1a4>
 80083de:	6822      	ldr	r2, [r4, #0]
 80083e0:	07d2      	lsls	r2, r2, #31
 80083e2:	d501      	bpl.n	80083e8 <_printf_float+0x1a8>
 80083e4:	3302      	adds	r3, #2
 80083e6:	e7f4      	b.n	80083d2 <_printf_float+0x192>
 80083e8:	2301      	movs	r3, #1
 80083ea:	e7f2      	b.n	80083d2 <_printf_float+0x192>
 80083ec:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80083f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80083f2:	4299      	cmp	r1, r3
 80083f4:	db05      	blt.n	8008402 <_printf_float+0x1c2>
 80083f6:	6823      	ldr	r3, [r4, #0]
 80083f8:	6121      	str	r1, [r4, #16]
 80083fa:	07d8      	lsls	r0, r3, #31
 80083fc:	d5ea      	bpl.n	80083d4 <_printf_float+0x194>
 80083fe:	1c4b      	adds	r3, r1, #1
 8008400:	e7e7      	b.n	80083d2 <_printf_float+0x192>
 8008402:	2900      	cmp	r1, #0
 8008404:	bfd4      	ite	le
 8008406:	f1c1 0202 	rsble	r2, r1, #2
 800840a:	2201      	movgt	r2, #1
 800840c:	4413      	add	r3, r2
 800840e:	e7e0      	b.n	80083d2 <_printf_float+0x192>
 8008410:	6823      	ldr	r3, [r4, #0]
 8008412:	055a      	lsls	r2, r3, #21
 8008414:	d407      	bmi.n	8008426 <_printf_float+0x1e6>
 8008416:	6923      	ldr	r3, [r4, #16]
 8008418:	4642      	mov	r2, r8
 800841a:	4631      	mov	r1, r6
 800841c:	4628      	mov	r0, r5
 800841e:	47b8      	blx	r7
 8008420:	3001      	adds	r0, #1
 8008422:	d12b      	bne.n	800847c <_printf_float+0x23c>
 8008424:	e767      	b.n	80082f6 <_printf_float+0xb6>
 8008426:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800842a:	f240 80dd 	bls.w	80085e8 <_printf_float+0x3a8>
 800842e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008432:	2200      	movs	r2, #0
 8008434:	2300      	movs	r3, #0
 8008436:	f7f8 fb6f 	bl	8000b18 <__aeabi_dcmpeq>
 800843a:	2800      	cmp	r0, #0
 800843c:	d033      	beq.n	80084a6 <_printf_float+0x266>
 800843e:	4a37      	ldr	r2, [pc, #220]	@ (800851c <_printf_float+0x2dc>)
 8008440:	2301      	movs	r3, #1
 8008442:	4631      	mov	r1, r6
 8008444:	4628      	mov	r0, r5
 8008446:	47b8      	blx	r7
 8008448:	3001      	adds	r0, #1
 800844a:	f43f af54 	beq.w	80082f6 <_printf_float+0xb6>
 800844e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008452:	4543      	cmp	r3, r8
 8008454:	db02      	blt.n	800845c <_printf_float+0x21c>
 8008456:	6823      	ldr	r3, [r4, #0]
 8008458:	07d8      	lsls	r0, r3, #31
 800845a:	d50f      	bpl.n	800847c <_printf_float+0x23c>
 800845c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008460:	4631      	mov	r1, r6
 8008462:	4628      	mov	r0, r5
 8008464:	47b8      	blx	r7
 8008466:	3001      	adds	r0, #1
 8008468:	f43f af45 	beq.w	80082f6 <_printf_float+0xb6>
 800846c:	f04f 0900 	mov.w	r9, #0
 8008470:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8008474:	f104 0a1a 	add.w	sl, r4, #26
 8008478:	45c8      	cmp	r8, r9
 800847a:	dc09      	bgt.n	8008490 <_printf_float+0x250>
 800847c:	6823      	ldr	r3, [r4, #0]
 800847e:	079b      	lsls	r3, r3, #30
 8008480:	f100 8103 	bmi.w	800868a <_printf_float+0x44a>
 8008484:	68e0      	ldr	r0, [r4, #12]
 8008486:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008488:	4298      	cmp	r0, r3
 800848a:	bfb8      	it	lt
 800848c:	4618      	movlt	r0, r3
 800848e:	e734      	b.n	80082fa <_printf_float+0xba>
 8008490:	2301      	movs	r3, #1
 8008492:	4652      	mov	r2, sl
 8008494:	4631      	mov	r1, r6
 8008496:	4628      	mov	r0, r5
 8008498:	47b8      	blx	r7
 800849a:	3001      	adds	r0, #1
 800849c:	f43f af2b 	beq.w	80082f6 <_printf_float+0xb6>
 80084a0:	f109 0901 	add.w	r9, r9, #1
 80084a4:	e7e8      	b.n	8008478 <_printf_float+0x238>
 80084a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	dc39      	bgt.n	8008520 <_printf_float+0x2e0>
 80084ac:	4a1b      	ldr	r2, [pc, #108]	@ (800851c <_printf_float+0x2dc>)
 80084ae:	2301      	movs	r3, #1
 80084b0:	4631      	mov	r1, r6
 80084b2:	4628      	mov	r0, r5
 80084b4:	47b8      	blx	r7
 80084b6:	3001      	adds	r0, #1
 80084b8:	f43f af1d 	beq.w	80082f6 <_printf_float+0xb6>
 80084bc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80084c0:	ea59 0303 	orrs.w	r3, r9, r3
 80084c4:	d102      	bne.n	80084cc <_printf_float+0x28c>
 80084c6:	6823      	ldr	r3, [r4, #0]
 80084c8:	07d9      	lsls	r1, r3, #31
 80084ca:	d5d7      	bpl.n	800847c <_printf_float+0x23c>
 80084cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084d0:	4631      	mov	r1, r6
 80084d2:	4628      	mov	r0, r5
 80084d4:	47b8      	blx	r7
 80084d6:	3001      	adds	r0, #1
 80084d8:	f43f af0d 	beq.w	80082f6 <_printf_float+0xb6>
 80084dc:	f04f 0a00 	mov.w	sl, #0
 80084e0:	f104 0b1a 	add.w	fp, r4, #26
 80084e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084e6:	425b      	negs	r3, r3
 80084e8:	4553      	cmp	r3, sl
 80084ea:	dc01      	bgt.n	80084f0 <_printf_float+0x2b0>
 80084ec:	464b      	mov	r3, r9
 80084ee:	e793      	b.n	8008418 <_printf_float+0x1d8>
 80084f0:	2301      	movs	r3, #1
 80084f2:	465a      	mov	r2, fp
 80084f4:	4631      	mov	r1, r6
 80084f6:	4628      	mov	r0, r5
 80084f8:	47b8      	blx	r7
 80084fa:	3001      	adds	r0, #1
 80084fc:	f43f aefb 	beq.w	80082f6 <_printf_float+0xb6>
 8008500:	f10a 0a01 	add.w	sl, sl, #1
 8008504:	e7ee      	b.n	80084e4 <_printf_float+0x2a4>
 8008506:	bf00      	nop
 8008508:	7fefffff 	.word	0x7fefffff
 800850c:	0800c9e4 	.word	0x0800c9e4
 8008510:	0800c9e8 	.word	0x0800c9e8
 8008514:	0800c9ec 	.word	0x0800c9ec
 8008518:	0800c9f0 	.word	0x0800c9f0
 800851c:	0800c9f4 	.word	0x0800c9f4
 8008520:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008522:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008526:	4553      	cmp	r3, sl
 8008528:	bfa8      	it	ge
 800852a:	4653      	movge	r3, sl
 800852c:	2b00      	cmp	r3, #0
 800852e:	4699      	mov	r9, r3
 8008530:	dc36      	bgt.n	80085a0 <_printf_float+0x360>
 8008532:	f04f 0b00 	mov.w	fp, #0
 8008536:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800853a:	f104 021a 	add.w	r2, r4, #26
 800853e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008540:	9306      	str	r3, [sp, #24]
 8008542:	eba3 0309 	sub.w	r3, r3, r9
 8008546:	455b      	cmp	r3, fp
 8008548:	dc31      	bgt.n	80085ae <_printf_float+0x36e>
 800854a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800854c:	459a      	cmp	sl, r3
 800854e:	dc3a      	bgt.n	80085c6 <_printf_float+0x386>
 8008550:	6823      	ldr	r3, [r4, #0]
 8008552:	07da      	lsls	r2, r3, #31
 8008554:	d437      	bmi.n	80085c6 <_printf_float+0x386>
 8008556:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008558:	ebaa 0903 	sub.w	r9, sl, r3
 800855c:	9b06      	ldr	r3, [sp, #24]
 800855e:	ebaa 0303 	sub.w	r3, sl, r3
 8008562:	4599      	cmp	r9, r3
 8008564:	bfa8      	it	ge
 8008566:	4699      	movge	r9, r3
 8008568:	f1b9 0f00 	cmp.w	r9, #0
 800856c:	dc33      	bgt.n	80085d6 <_printf_float+0x396>
 800856e:	f04f 0800 	mov.w	r8, #0
 8008572:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008576:	f104 0b1a 	add.w	fp, r4, #26
 800857a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800857c:	ebaa 0303 	sub.w	r3, sl, r3
 8008580:	eba3 0309 	sub.w	r3, r3, r9
 8008584:	4543      	cmp	r3, r8
 8008586:	f77f af79 	ble.w	800847c <_printf_float+0x23c>
 800858a:	2301      	movs	r3, #1
 800858c:	465a      	mov	r2, fp
 800858e:	4631      	mov	r1, r6
 8008590:	4628      	mov	r0, r5
 8008592:	47b8      	blx	r7
 8008594:	3001      	adds	r0, #1
 8008596:	f43f aeae 	beq.w	80082f6 <_printf_float+0xb6>
 800859a:	f108 0801 	add.w	r8, r8, #1
 800859e:	e7ec      	b.n	800857a <_printf_float+0x33a>
 80085a0:	4642      	mov	r2, r8
 80085a2:	4631      	mov	r1, r6
 80085a4:	4628      	mov	r0, r5
 80085a6:	47b8      	blx	r7
 80085a8:	3001      	adds	r0, #1
 80085aa:	d1c2      	bne.n	8008532 <_printf_float+0x2f2>
 80085ac:	e6a3      	b.n	80082f6 <_printf_float+0xb6>
 80085ae:	2301      	movs	r3, #1
 80085b0:	4631      	mov	r1, r6
 80085b2:	4628      	mov	r0, r5
 80085b4:	9206      	str	r2, [sp, #24]
 80085b6:	47b8      	blx	r7
 80085b8:	3001      	adds	r0, #1
 80085ba:	f43f ae9c 	beq.w	80082f6 <_printf_float+0xb6>
 80085be:	9a06      	ldr	r2, [sp, #24]
 80085c0:	f10b 0b01 	add.w	fp, fp, #1
 80085c4:	e7bb      	b.n	800853e <_printf_float+0x2fe>
 80085c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085ca:	4631      	mov	r1, r6
 80085cc:	4628      	mov	r0, r5
 80085ce:	47b8      	blx	r7
 80085d0:	3001      	adds	r0, #1
 80085d2:	d1c0      	bne.n	8008556 <_printf_float+0x316>
 80085d4:	e68f      	b.n	80082f6 <_printf_float+0xb6>
 80085d6:	9a06      	ldr	r2, [sp, #24]
 80085d8:	464b      	mov	r3, r9
 80085da:	4442      	add	r2, r8
 80085dc:	4631      	mov	r1, r6
 80085de:	4628      	mov	r0, r5
 80085e0:	47b8      	blx	r7
 80085e2:	3001      	adds	r0, #1
 80085e4:	d1c3      	bne.n	800856e <_printf_float+0x32e>
 80085e6:	e686      	b.n	80082f6 <_printf_float+0xb6>
 80085e8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80085ec:	f1ba 0f01 	cmp.w	sl, #1
 80085f0:	dc01      	bgt.n	80085f6 <_printf_float+0x3b6>
 80085f2:	07db      	lsls	r3, r3, #31
 80085f4:	d536      	bpl.n	8008664 <_printf_float+0x424>
 80085f6:	2301      	movs	r3, #1
 80085f8:	4642      	mov	r2, r8
 80085fa:	4631      	mov	r1, r6
 80085fc:	4628      	mov	r0, r5
 80085fe:	47b8      	blx	r7
 8008600:	3001      	adds	r0, #1
 8008602:	f43f ae78 	beq.w	80082f6 <_printf_float+0xb6>
 8008606:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800860a:	4631      	mov	r1, r6
 800860c:	4628      	mov	r0, r5
 800860e:	47b8      	blx	r7
 8008610:	3001      	adds	r0, #1
 8008612:	f43f ae70 	beq.w	80082f6 <_printf_float+0xb6>
 8008616:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800861a:	2200      	movs	r2, #0
 800861c:	2300      	movs	r3, #0
 800861e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008622:	f7f8 fa79 	bl	8000b18 <__aeabi_dcmpeq>
 8008626:	b9c0      	cbnz	r0, 800865a <_printf_float+0x41a>
 8008628:	4653      	mov	r3, sl
 800862a:	f108 0201 	add.w	r2, r8, #1
 800862e:	4631      	mov	r1, r6
 8008630:	4628      	mov	r0, r5
 8008632:	47b8      	blx	r7
 8008634:	3001      	adds	r0, #1
 8008636:	d10c      	bne.n	8008652 <_printf_float+0x412>
 8008638:	e65d      	b.n	80082f6 <_printf_float+0xb6>
 800863a:	2301      	movs	r3, #1
 800863c:	465a      	mov	r2, fp
 800863e:	4631      	mov	r1, r6
 8008640:	4628      	mov	r0, r5
 8008642:	47b8      	blx	r7
 8008644:	3001      	adds	r0, #1
 8008646:	f43f ae56 	beq.w	80082f6 <_printf_float+0xb6>
 800864a:	f108 0801 	add.w	r8, r8, #1
 800864e:	45d0      	cmp	r8, sl
 8008650:	dbf3      	blt.n	800863a <_printf_float+0x3fa>
 8008652:	464b      	mov	r3, r9
 8008654:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008658:	e6df      	b.n	800841a <_printf_float+0x1da>
 800865a:	f04f 0800 	mov.w	r8, #0
 800865e:	f104 0b1a 	add.w	fp, r4, #26
 8008662:	e7f4      	b.n	800864e <_printf_float+0x40e>
 8008664:	2301      	movs	r3, #1
 8008666:	4642      	mov	r2, r8
 8008668:	e7e1      	b.n	800862e <_printf_float+0x3ee>
 800866a:	2301      	movs	r3, #1
 800866c:	464a      	mov	r2, r9
 800866e:	4631      	mov	r1, r6
 8008670:	4628      	mov	r0, r5
 8008672:	47b8      	blx	r7
 8008674:	3001      	adds	r0, #1
 8008676:	f43f ae3e 	beq.w	80082f6 <_printf_float+0xb6>
 800867a:	f108 0801 	add.w	r8, r8, #1
 800867e:	68e3      	ldr	r3, [r4, #12]
 8008680:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008682:	1a5b      	subs	r3, r3, r1
 8008684:	4543      	cmp	r3, r8
 8008686:	dcf0      	bgt.n	800866a <_printf_float+0x42a>
 8008688:	e6fc      	b.n	8008484 <_printf_float+0x244>
 800868a:	f04f 0800 	mov.w	r8, #0
 800868e:	f104 0919 	add.w	r9, r4, #25
 8008692:	e7f4      	b.n	800867e <_printf_float+0x43e>

08008694 <_printf_common>:
 8008694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008698:	4616      	mov	r6, r2
 800869a:	4698      	mov	r8, r3
 800869c:	688a      	ldr	r2, [r1, #8]
 800869e:	690b      	ldr	r3, [r1, #16]
 80086a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80086a4:	4293      	cmp	r3, r2
 80086a6:	bfb8      	it	lt
 80086a8:	4613      	movlt	r3, r2
 80086aa:	6033      	str	r3, [r6, #0]
 80086ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80086b0:	4607      	mov	r7, r0
 80086b2:	460c      	mov	r4, r1
 80086b4:	b10a      	cbz	r2, 80086ba <_printf_common+0x26>
 80086b6:	3301      	adds	r3, #1
 80086b8:	6033      	str	r3, [r6, #0]
 80086ba:	6823      	ldr	r3, [r4, #0]
 80086bc:	0699      	lsls	r1, r3, #26
 80086be:	bf42      	ittt	mi
 80086c0:	6833      	ldrmi	r3, [r6, #0]
 80086c2:	3302      	addmi	r3, #2
 80086c4:	6033      	strmi	r3, [r6, #0]
 80086c6:	6825      	ldr	r5, [r4, #0]
 80086c8:	f015 0506 	ands.w	r5, r5, #6
 80086cc:	d106      	bne.n	80086dc <_printf_common+0x48>
 80086ce:	f104 0a19 	add.w	sl, r4, #25
 80086d2:	68e3      	ldr	r3, [r4, #12]
 80086d4:	6832      	ldr	r2, [r6, #0]
 80086d6:	1a9b      	subs	r3, r3, r2
 80086d8:	42ab      	cmp	r3, r5
 80086da:	dc26      	bgt.n	800872a <_printf_common+0x96>
 80086dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80086e0:	6822      	ldr	r2, [r4, #0]
 80086e2:	3b00      	subs	r3, #0
 80086e4:	bf18      	it	ne
 80086e6:	2301      	movne	r3, #1
 80086e8:	0692      	lsls	r2, r2, #26
 80086ea:	d42b      	bmi.n	8008744 <_printf_common+0xb0>
 80086ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80086f0:	4641      	mov	r1, r8
 80086f2:	4638      	mov	r0, r7
 80086f4:	47c8      	blx	r9
 80086f6:	3001      	adds	r0, #1
 80086f8:	d01e      	beq.n	8008738 <_printf_common+0xa4>
 80086fa:	6823      	ldr	r3, [r4, #0]
 80086fc:	6922      	ldr	r2, [r4, #16]
 80086fe:	f003 0306 	and.w	r3, r3, #6
 8008702:	2b04      	cmp	r3, #4
 8008704:	bf02      	ittt	eq
 8008706:	68e5      	ldreq	r5, [r4, #12]
 8008708:	6833      	ldreq	r3, [r6, #0]
 800870a:	1aed      	subeq	r5, r5, r3
 800870c:	68a3      	ldr	r3, [r4, #8]
 800870e:	bf0c      	ite	eq
 8008710:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008714:	2500      	movne	r5, #0
 8008716:	4293      	cmp	r3, r2
 8008718:	bfc4      	itt	gt
 800871a:	1a9b      	subgt	r3, r3, r2
 800871c:	18ed      	addgt	r5, r5, r3
 800871e:	2600      	movs	r6, #0
 8008720:	341a      	adds	r4, #26
 8008722:	42b5      	cmp	r5, r6
 8008724:	d11a      	bne.n	800875c <_printf_common+0xc8>
 8008726:	2000      	movs	r0, #0
 8008728:	e008      	b.n	800873c <_printf_common+0xa8>
 800872a:	2301      	movs	r3, #1
 800872c:	4652      	mov	r2, sl
 800872e:	4641      	mov	r1, r8
 8008730:	4638      	mov	r0, r7
 8008732:	47c8      	blx	r9
 8008734:	3001      	adds	r0, #1
 8008736:	d103      	bne.n	8008740 <_printf_common+0xac>
 8008738:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800873c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008740:	3501      	adds	r5, #1
 8008742:	e7c6      	b.n	80086d2 <_printf_common+0x3e>
 8008744:	18e1      	adds	r1, r4, r3
 8008746:	1c5a      	adds	r2, r3, #1
 8008748:	2030      	movs	r0, #48	@ 0x30
 800874a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800874e:	4422      	add	r2, r4
 8008750:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008754:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008758:	3302      	adds	r3, #2
 800875a:	e7c7      	b.n	80086ec <_printf_common+0x58>
 800875c:	2301      	movs	r3, #1
 800875e:	4622      	mov	r2, r4
 8008760:	4641      	mov	r1, r8
 8008762:	4638      	mov	r0, r7
 8008764:	47c8      	blx	r9
 8008766:	3001      	adds	r0, #1
 8008768:	d0e6      	beq.n	8008738 <_printf_common+0xa4>
 800876a:	3601      	adds	r6, #1
 800876c:	e7d9      	b.n	8008722 <_printf_common+0x8e>
	...

08008770 <_printf_i>:
 8008770:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008774:	7e0f      	ldrb	r7, [r1, #24]
 8008776:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008778:	2f78      	cmp	r7, #120	@ 0x78
 800877a:	4691      	mov	r9, r2
 800877c:	4680      	mov	r8, r0
 800877e:	460c      	mov	r4, r1
 8008780:	469a      	mov	sl, r3
 8008782:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008786:	d807      	bhi.n	8008798 <_printf_i+0x28>
 8008788:	2f62      	cmp	r7, #98	@ 0x62
 800878a:	d80a      	bhi.n	80087a2 <_printf_i+0x32>
 800878c:	2f00      	cmp	r7, #0
 800878e:	f000 80d2 	beq.w	8008936 <_printf_i+0x1c6>
 8008792:	2f58      	cmp	r7, #88	@ 0x58
 8008794:	f000 80b9 	beq.w	800890a <_printf_i+0x19a>
 8008798:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800879c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80087a0:	e03a      	b.n	8008818 <_printf_i+0xa8>
 80087a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80087a6:	2b15      	cmp	r3, #21
 80087a8:	d8f6      	bhi.n	8008798 <_printf_i+0x28>
 80087aa:	a101      	add	r1, pc, #4	@ (adr r1, 80087b0 <_printf_i+0x40>)
 80087ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80087b0:	08008809 	.word	0x08008809
 80087b4:	0800881d 	.word	0x0800881d
 80087b8:	08008799 	.word	0x08008799
 80087bc:	08008799 	.word	0x08008799
 80087c0:	08008799 	.word	0x08008799
 80087c4:	08008799 	.word	0x08008799
 80087c8:	0800881d 	.word	0x0800881d
 80087cc:	08008799 	.word	0x08008799
 80087d0:	08008799 	.word	0x08008799
 80087d4:	08008799 	.word	0x08008799
 80087d8:	08008799 	.word	0x08008799
 80087dc:	0800891d 	.word	0x0800891d
 80087e0:	08008847 	.word	0x08008847
 80087e4:	080088d7 	.word	0x080088d7
 80087e8:	08008799 	.word	0x08008799
 80087ec:	08008799 	.word	0x08008799
 80087f0:	0800893f 	.word	0x0800893f
 80087f4:	08008799 	.word	0x08008799
 80087f8:	08008847 	.word	0x08008847
 80087fc:	08008799 	.word	0x08008799
 8008800:	08008799 	.word	0x08008799
 8008804:	080088df 	.word	0x080088df
 8008808:	6833      	ldr	r3, [r6, #0]
 800880a:	1d1a      	adds	r2, r3, #4
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	6032      	str	r2, [r6, #0]
 8008810:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008814:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008818:	2301      	movs	r3, #1
 800881a:	e09d      	b.n	8008958 <_printf_i+0x1e8>
 800881c:	6833      	ldr	r3, [r6, #0]
 800881e:	6820      	ldr	r0, [r4, #0]
 8008820:	1d19      	adds	r1, r3, #4
 8008822:	6031      	str	r1, [r6, #0]
 8008824:	0606      	lsls	r6, r0, #24
 8008826:	d501      	bpl.n	800882c <_printf_i+0xbc>
 8008828:	681d      	ldr	r5, [r3, #0]
 800882a:	e003      	b.n	8008834 <_printf_i+0xc4>
 800882c:	0645      	lsls	r5, r0, #25
 800882e:	d5fb      	bpl.n	8008828 <_printf_i+0xb8>
 8008830:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008834:	2d00      	cmp	r5, #0
 8008836:	da03      	bge.n	8008840 <_printf_i+0xd0>
 8008838:	232d      	movs	r3, #45	@ 0x2d
 800883a:	426d      	negs	r5, r5
 800883c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008840:	4859      	ldr	r0, [pc, #356]	@ (80089a8 <_printf_i+0x238>)
 8008842:	230a      	movs	r3, #10
 8008844:	e011      	b.n	800886a <_printf_i+0xfa>
 8008846:	6821      	ldr	r1, [r4, #0]
 8008848:	6833      	ldr	r3, [r6, #0]
 800884a:	0608      	lsls	r0, r1, #24
 800884c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008850:	d402      	bmi.n	8008858 <_printf_i+0xe8>
 8008852:	0649      	lsls	r1, r1, #25
 8008854:	bf48      	it	mi
 8008856:	b2ad      	uxthmi	r5, r5
 8008858:	2f6f      	cmp	r7, #111	@ 0x6f
 800885a:	4853      	ldr	r0, [pc, #332]	@ (80089a8 <_printf_i+0x238>)
 800885c:	6033      	str	r3, [r6, #0]
 800885e:	bf14      	ite	ne
 8008860:	230a      	movne	r3, #10
 8008862:	2308      	moveq	r3, #8
 8008864:	2100      	movs	r1, #0
 8008866:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800886a:	6866      	ldr	r6, [r4, #4]
 800886c:	60a6      	str	r6, [r4, #8]
 800886e:	2e00      	cmp	r6, #0
 8008870:	bfa2      	ittt	ge
 8008872:	6821      	ldrge	r1, [r4, #0]
 8008874:	f021 0104 	bicge.w	r1, r1, #4
 8008878:	6021      	strge	r1, [r4, #0]
 800887a:	b90d      	cbnz	r5, 8008880 <_printf_i+0x110>
 800887c:	2e00      	cmp	r6, #0
 800887e:	d04b      	beq.n	8008918 <_printf_i+0x1a8>
 8008880:	4616      	mov	r6, r2
 8008882:	fbb5 f1f3 	udiv	r1, r5, r3
 8008886:	fb03 5711 	mls	r7, r3, r1, r5
 800888a:	5dc7      	ldrb	r7, [r0, r7]
 800888c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008890:	462f      	mov	r7, r5
 8008892:	42bb      	cmp	r3, r7
 8008894:	460d      	mov	r5, r1
 8008896:	d9f4      	bls.n	8008882 <_printf_i+0x112>
 8008898:	2b08      	cmp	r3, #8
 800889a:	d10b      	bne.n	80088b4 <_printf_i+0x144>
 800889c:	6823      	ldr	r3, [r4, #0]
 800889e:	07df      	lsls	r7, r3, #31
 80088a0:	d508      	bpl.n	80088b4 <_printf_i+0x144>
 80088a2:	6923      	ldr	r3, [r4, #16]
 80088a4:	6861      	ldr	r1, [r4, #4]
 80088a6:	4299      	cmp	r1, r3
 80088a8:	bfde      	ittt	le
 80088aa:	2330      	movle	r3, #48	@ 0x30
 80088ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80088b0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80088b4:	1b92      	subs	r2, r2, r6
 80088b6:	6122      	str	r2, [r4, #16]
 80088b8:	f8cd a000 	str.w	sl, [sp]
 80088bc:	464b      	mov	r3, r9
 80088be:	aa03      	add	r2, sp, #12
 80088c0:	4621      	mov	r1, r4
 80088c2:	4640      	mov	r0, r8
 80088c4:	f7ff fee6 	bl	8008694 <_printf_common>
 80088c8:	3001      	adds	r0, #1
 80088ca:	d14a      	bne.n	8008962 <_printf_i+0x1f2>
 80088cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80088d0:	b004      	add	sp, #16
 80088d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088d6:	6823      	ldr	r3, [r4, #0]
 80088d8:	f043 0320 	orr.w	r3, r3, #32
 80088dc:	6023      	str	r3, [r4, #0]
 80088de:	4833      	ldr	r0, [pc, #204]	@ (80089ac <_printf_i+0x23c>)
 80088e0:	2778      	movs	r7, #120	@ 0x78
 80088e2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80088e6:	6823      	ldr	r3, [r4, #0]
 80088e8:	6831      	ldr	r1, [r6, #0]
 80088ea:	061f      	lsls	r7, r3, #24
 80088ec:	f851 5b04 	ldr.w	r5, [r1], #4
 80088f0:	d402      	bmi.n	80088f8 <_printf_i+0x188>
 80088f2:	065f      	lsls	r7, r3, #25
 80088f4:	bf48      	it	mi
 80088f6:	b2ad      	uxthmi	r5, r5
 80088f8:	6031      	str	r1, [r6, #0]
 80088fa:	07d9      	lsls	r1, r3, #31
 80088fc:	bf44      	itt	mi
 80088fe:	f043 0320 	orrmi.w	r3, r3, #32
 8008902:	6023      	strmi	r3, [r4, #0]
 8008904:	b11d      	cbz	r5, 800890e <_printf_i+0x19e>
 8008906:	2310      	movs	r3, #16
 8008908:	e7ac      	b.n	8008864 <_printf_i+0xf4>
 800890a:	4827      	ldr	r0, [pc, #156]	@ (80089a8 <_printf_i+0x238>)
 800890c:	e7e9      	b.n	80088e2 <_printf_i+0x172>
 800890e:	6823      	ldr	r3, [r4, #0]
 8008910:	f023 0320 	bic.w	r3, r3, #32
 8008914:	6023      	str	r3, [r4, #0]
 8008916:	e7f6      	b.n	8008906 <_printf_i+0x196>
 8008918:	4616      	mov	r6, r2
 800891a:	e7bd      	b.n	8008898 <_printf_i+0x128>
 800891c:	6833      	ldr	r3, [r6, #0]
 800891e:	6825      	ldr	r5, [r4, #0]
 8008920:	6961      	ldr	r1, [r4, #20]
 8008922:	1d18      	adds	r0, r3, #4
 8008924:	6030      	str	r0, [r6, #0]
 8008926:	062e      	lsls	r6, r5, #24
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	d501      	bpl.n	8008930 <_printf_i+0x1c0>
 800892c:	6019      	str	r1, [r3, #0]
 800892e:	e002      	b.n	8008936 <_printf_i+0x1c6>
 8008930:	0668      	lsls	r0, r5, #25
 8008932:	d5fb      	bpl.n	800892c <_printf_i+0x1bc>
 8008934:	8019      	strh	r1, [r3, #0]
 8008936:	2300      	movs	r3, #0
 8008938:	6123      	str	r3, [r4, #16]
 800893a:	4616      	mov	r6, r2
 800893c:	e7bc      	b.n	80088b8 <_printf_i+0x148>
 800893e:	6833      	ldr	r3, [r6, #0]
 8008940:	1d1a      	adds	r2, r3, #4
 8008942:	6032      	str	r2, [r6, #0]
 8008944:	681e      	ldr	r6, [r3, #0]
 8008946:	6862      	ldr	r2, [r4, #4]
 8008948:	2100      	movs	r1, #0
 800894a:	4630      	mov	r0, r6
 800894c:	f7f7 fc68 	bl	8000220 <memchr>
 8008950:	b108      	cbz	r0, 8008956 <_printf_i+0x1e6>
 8008952:	1b80      	subs	r0, r0, r6
 8008954:	6060      	str	r0, [r4, #4]
 8008956:	6863      	ldr	r3, [r4, #4]
 8008958:	6123      	str	r3, [r4, #16]
 800895a:	2300      	movs	r3, #0
 800895c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008960:	e7aa      	b.n	80088b8 <_printf_i+0x148>
 8008962:	6923      	ldr	r3, [r4, #16]
 8008964:	4632      	mov	r2, r6
 8008966:	4649      	mov	r1, r9
 8008968:	4640      	mov	r0, r8
 800896a:	47d0      	blx	sl
 800896c:	3001      	adds	r0, #1
 800896e:	d0ad      	beq.n	80088cc <_printf_i+0x15c>
 8008970:	6823      	ldr	r3, [r4, #0]
 8008972:	079b      	lsls	r3, r3, #30
 8008974:	d413      	bmi.n	800899e <_printf_i+0x22e>
 8008976:	68e0      	ldr	r0, [r4, #12]
 8008978:	9b03      	ldr	r3, [sp, #12]
 800897a:	4298      	cmp	r0, r3
 800897c:	bfb8      	it	lt
 800897e:	4618      	movlt	r0, r3
 8008980:	e7a6      	b.n	80088d0 <_printf_i+0x160>
 8008982:	2301      	movs	r3, #1
 8008984:	4632      	mov	r2, r6
 8008986:	4649      	mov	r1, r9
 8008988:	4640      	mov	r0, r8
 800898a:	47d0      	blx	sl
 800898c:	3001      	adds	r0, #1
 800898e:	d09d      	beq.n	80088cc <_printf_i+0x15c>
 8008990:	3501      	adds	r5, #1
 8008992:	68e3      	ldr	r3, [r4, #12]
 8008994:	9903      	ldr	r1, [sp, #12]
 8008996:	1a5b      	subs	r3, r3, r1
 8008998:	42ab      	cmp	r3, r5
 800899a:	dcf2      	bgt.n	8008982 <_printf_i+0x212>
 800899c:	e7eb      	b.n	8008976 <_printf_i+0x206>
 800899e:	2500      	movs	r5, #0
 80089a0:	f104 0619 	add.w	r6, r4, #25
 80089a4:	e7f5      	b.n	8008992 <_printf_i+0x222>
 80089a6:	bf00      	nop
 80089a8:	0800c9f6 	.word	0x0800c9f6
 80089ac:	0800ca07 	.word	0x0800ca07

080089b0 <_scanf_float>:
 80089b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089b4:	b087      	sub	sp, #28
 80089b6:	4617      	mov	r7, r2
 80089b8:	9303      	str	r3, [sp, #12]
 80089ba:	688b      	ldr	r3, [r1, #8]
 80089bc:	1e5a      	subs	r2, r3, #1
 80089be:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80089c2:	bf81      	itttt	hi
 80089c4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80089c8:	eb03 0b05 	addhi.w	fp, r3, r5
 80089cc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80089d0:	608b      	strhi	r3, [r1, #8]
 80089d2:	680b      	ldr	r3, [r1, #0]
 80089d4:	460a      	mov	r2, r1
 80089d6:	f04f 0500 	mov.w	r5, #0
 80089da:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80089de:	f842 3b1c 	str.w	r3, [r2], #28
 80089e2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80089e6:	4680      	mov	r8, r0
 80089e8:	460c      	mov	r4, r1
 80089ea:	bf98      	it	ls
 80089ec:	f04f 0b00 	movls.w	fp, #0
 80089f0:	9201      	str	r2, [sp, #4]
 80089f2:	4616      	mov	r6, r2
 80089f4:	46aa      	mov	sl, r5
 80089f6:	46a9      	mov	r9, r5
 80089f8:	9502      	str	r5, [sp, #8]
 80089fa:	68a2      	ldr	r2, [r4, #8]
 80089fc:	b152      	cbz	r2, 8008a14 <_scanf_float+0x64>
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	781b      	ldrb	r3, [r3, #0]
 8008a02:	2b4e      	cmp	r3, #78	@ 0x4e
 8008a04:	d864      	bhi.n	8008ad0 <_scanf_float+0x120>
 8008a06:	2b40      	cmp	r3, #64	@ 0x40
 8008a08:	d83c      	bhi.n	8008a84 <_scanf_float+0xd4>
 8008a0a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008a0e:	b2c8      	uxtb	r0, r1
 8008a10:	280e      	cmp	r0, #14
 8008a12:	d93a      	bls.n	8008a8a <_scanf_float+0xda>
 8008a14:	f1b9 0f00 	cmp.w	r9, #0
 8008a18:	d003      	beq.n	8008a22 <_scanf_float+0x72>
 8008a1a:	6823      	ldr	r3, [r4, #0]
 8008a1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a20:	6023      	str	r3, [r4, #0]
 8008a22:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008a26:	f1ba 0f01 	cmp.w	sl, #1
 8008a2a:	f200 8117 	bhi.w	8008c5c <_scanf_float+0x2ac>
 8008a2e:	9b01      	ldr	r3, [sp, #4]
 8008a30:	429e      	cmp	r6, r3
 8008a32:	f200 8108 	bhi.w	8008c46 <_scanf_float+0x296>
 8008a36:	2001      	movs	r0, #1
 8008a38:	b007      	add	sp, #28
 8008a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a3e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008a42:	2a0d      	cmp	r2, #13
 8008a44:	d8e6      	bhi.n	8008a14 <_scanf_float+0x64>
 8008a46:	a101      	add	r1, pc, #4	@ (adr r1, 8008a4c <_scanf_float+0x9c>)
 8008a48:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008a4c:	08008b93 	.word	0x08008b93
 8008a50:	08008a15 	.word	0x08008a15
 8008a54:	08008a15 	.word	0x08008a15
 8008a58:	08008a15 	.word	0x08008a15
 8008a5c:	08008bf3 	.word	0x08008bf3
 8008a60:	08008bcb 	.word	0x08008bcb
 8008a64:	08008a15 	.word	0x08008a15
 8008a68:	08008a15 	.word	0x08008a15
 8008a6c:	08008ba1 	.word	0x08008ba1
 8008a70:	08008a15 	.word	0x08008a15
 8008a74:	08008a15 	.word	0x08008a15
 8008a78:	08008a15 	.word	0x08008a15
 8008a7c:	08008a15 	.word	0x08008a15
 8008a80:	08008b59 	.word	0x08008b59
 8008a84:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008a88:	e7db      	b.n	8008a42 <_scanf_float+0x92>
 8008a8a:	290e      	cmp	r1, #14
 8008a8c:	d8c2      	bhi.n	8008a14 <_scanf_float+0x64>
 8008a8e:	a001      	add	r0, pc, #4	@ (adr r0, 8008a94 <_scanf_float+0xe4>)
 8008a90:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008a94:	08008b49 	.word	0x08008b49
 8008a98:	08008a15 	.word	0x08008a15
 8008a9c:	08008b49 	.word	0x08008b49
 8008aa0:	08008bdf 	.word	0x08008bdf
 8008aa4:	08008a15 	.word	0x08008a15
 8008aa8:	08008af1 	.word	0x08008af1
 8008aac:	08008b2f 	.word	0x08008b2f
 8008ab0:	08008b2f 	.word	0x08008b2f
 8008ab4:	08008b2f 	.word	0x08008b2f
 8008ab8:	08008b2f 	.word	0x08008b2f
 8008abc:	08008b2f 	.word	0x08008b2f
 8008ac0:	08008b2f 	.word	0x08008b2f
 8008ac4:	08008b2f 	.word	0x08008b2f
 8008ac8:	08008b2f 	.word	0x08008b2f
 8008acc:	08008b2f 	.word	0x08008b2f
 8008ad0:	2b6e      	cmp	r3, #110	@ 0x6e
 8008ad2:	d809      	bhi.n	8008ae8 <_scanf_float+0x138>
 8008ad4:	2b60      	cmp	r3, #96	@ 0x60
 8008ad6:	d8b2      	bhi.n	8008a3e <_scanf_float+0x8e>
 8008ad8:	2b54      	cmp	r3, #84	@ 0x54
 8008ada:	d07b      	beq.n	8008bd4 <_scanf_float+0x224>
 8008adc:	2b59      	cmp	r3, #89	@ 0x59
 8008ade:	d199      	bne.n	8008a14 <_scanf_float+0x64>
 8008ae0:	2d07      	cmp	r5, #7
 8008ae2:	d197      	bne.n	8008a14 <_scanf_float+0x64>
 8008ae4:	2508      	movs	r5, #8
 8008ae6:	e02c      	b.n	8008b42 <_scanf_float+0x192>
 8008ae8:	2b74      	cmp	r3, #116	@ 0x74
 8008aea:	d073      	beq.n	8008bd4 <_scanf_float+0x224>
 8008aec:	2b79      	cmp	r3, #121	@ 0x79
 8008aee:	e7f6      	b.n	8008ade <_scanf_float+0x12e>
 8008af0:	6821      	ldr	r1, [r4, #0]
 8008af2:	05c8      	lsls	r0, r1, #23
 8008af4:	d51b      	bpl.n	8008b2e <_scanf_float+0x17e>
 8008af6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008afa:	6021      	str	r1, [r4, #0]
 8008afc:	f109 0901 	add.w	r9, r9, #1
 8008b00:	f1bb 0f00 	cmp.w	fp, #0
 8008b04:	d003      	beq.n	8008b0e <_scanf_float+0x15e>
 8008b06:	3201      	adds	r2, #1
 8008b08:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8008b0c:	60a2      	str	r2, [r4, #8]
 8008b0e:	68a3      	ldr	r3, [r4, #8]
 8008b10:	3b01      	subs	r3, #1
 8008b12:	60a3      	str	r3, [r4, #8]
 8008b14:	6923      	ldr	r3, [r4, #16]
 8008b16:	3301      	adds	r3, #1
 8008b18:	6123      	str	r3, [r4, #16]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	3b01      	subs	r3, #1
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	607b      	str	r3, [r7, #4]
 8008b22:	f340 8087 	ble.w	8008c34 <_scanf_float+0x284>
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	3301      	adds	r3, #1
 8008b2a:	603b      	str	r3, [r7, #0]
 8008b2c:	e765      	b.n	80089fa <_scanf_float+0x4a>
 8008b2e:	eb1a 0105 	adds.w	r1, sl, r5
 8008b32:	f47f af6f 	bne.w	8008a14 <_scanf_float+0x64>
 8008b36:	6822      	ldr	r2, [r4, #0]
 8008b38:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008b3c:	6022      	str	r2, [r4, #0]
 8008b3e:	460d      	mov	r5, r1
 8008b40:	468a      	mov	sl, r1
 8008b42:	f806 3b01 	strb.w	r3, [r6], #1
 8008b46:	e7e2      	b.n	8008b0e <_scanf_float+0x15e>
 8008b48:	6822      	ldr	r2, [r4, #0]
 8008b4a:	0610      	lsls	r0, r2, #24
 8008b4c:	f57f af62 	bpl.w	8008a14 <_scanf_float+0x64>
 8008b50:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008b54:	6022      	str	r2, [r4, #0]
 8008b56:	e7f4      	b.n	8008b42 <_scanf_float+0x192>
 8008b58:	f1ba 0f00 	cmp.w	sl, #0
 8008b5c:	d10e      	bne.n	8008b7c <_scanf_float+0x1cc>
 8008b5e:	f1b9 0f00 	cmp.w	r9, #0
 8008b62:	d10e      	bne.n	8008b82 <_scanf_float+0x1d2>
 8008b64:	6822      	ldr	r2, [r4, #0]
 8008b66:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008b6a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008b6e:	d108      	bne.n	8008b82 <_scanf_float+0x1d2>
 8008b70:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008b74:	6022      	str	r2, [r4, #0]
 8008b76:	f04f 0a01 	mov.w	sl, #1
 8008b7a:	e7e2      	b.n	8008b42 <_scanf_float+0x192>
 8008b7c:	f1ba 0f02 	cmp.w	sl, #2
 8008b80:	d055      	beq.n	8008c2e <_scanf_float+0x27e>
 8008b82:	2d01      	cmp	r5, #1
 8008b84:	d002      	beq.n	8008b8c <_scanf_float+0x1dc>
 8008b86:	2d04      	cmp	r5, #4
 8008b88:	f47f af44 	bne.w	8008a14 <_scanf_float+0x64>
 8008b8c:	3501      	adds	r5, #1
 8008b8e:	b2ed      	uxtb	r5, r5
 8008b90:	e7d7      	b.n	8008b42 <_scanf_float+0x192>
 8008b92:	f1ba 0f01 	cmp.w	sl, #1
 8008b96:	f47f af3d 	bne.w	8008a14 <_scanf_float+0x64>
 8008b9a:	f04f 0a02 	mov.w	sl, #2
 8008b9e:	e7d0      	b.n	8008b42 <_scanf_float+0x192>
 8008ba0:	b97d      	cbnz	r5, 8008bc2 <_scanf_float+0x212>
 8008ba2:	f1b9 0f00 	cmp.w	r9, #0
 8008ba6:	f47f af38 	bne.w	8008a1a <_scanf_float+0x6a>
 8008baa:	6822      	ldr	r2, [r4, #0]
 8008bac:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008bb0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008bb4:	f040 8108 	bne.w	8008dc8 <_scanf_float+0x418>
 8008bb8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008bbc:	6022      	str	r2, [r4, #0]
 8008bbe:	2501      	movs	r5, #1
 8008bc0:	e7bf      	b.n	8008b42 <_scanf_float+0x192>
 8008bc2:	2d03      	cmp	r5, #3
 8008bc4:	d0e2      	beq.n	8008b8c <_scanf_float+0x1dc>
 8008bc6:	2d05      	cmp	r5, #5
 8008bc8:	e7de      	b.n	8008b88 <_scanf_float+0x1d8>
 8008bca:	2d02      	cmp	r5, #2
 8008bcc:	f47f af22 	bne.w	8008a14 <_scanf_float+0x64>
 8008bd0:	2503      	movs	r5, #3
 8008bd2:	e7b6      	b.n	8008b42 <_scanf_float+0x192>
 8008bd4:	2d06      	cmp	r5, #6
 8008bd6:	f47f af1d 	bne.w	8008a14 <_scanf_float+0x64>
 8008bda:	2507      	movs	r5, #7
 8008bdc:	e7b1      	b.n	8008b42 <_scanf_float+0x192>
 8008bde:	6822      	ldr	r2, [r4, #0]
 8008be0:	0591      	lsls	r1, r2, #22
 8008be2:	f57f af17 	bpl.w	8008a14 <_scanf_float+0x64>
 8008be6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008bea:	6022      	str	r2, [r4, #0]
 8008bec:	f8cd 9008 	str.w	r9, [sp, #8]
 8008bf0:	e7a7      	b.n	8008b42 <_scanf_float+0x192>
 8008bf2:	6822      	ldr	r2, [r4, #0]
 8008bf4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008bf8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008bfc:	d006      	beq.n	8008c0c <_scanf_float+0x25c>
 8008bfe:	0550      	lsls	r0, r2, #21
 8008c00:	f57f af08 	bpl.w	8008a14 <_scanf_float+0x64>
 8008c04:	f1b9 0f00 	cmp.w	r9, #0
 8008c08:	f000 80de 	beq.w	8008dc8 <_scanf_float+0x418>
 8008c0c:	0591      	lsls	r1, r2, #22
 8008c0e:	bf58      	it	pl
 8008c10:	9902      	ldrpl	r1, [sp, #8]
 8008c12:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008c16:	bf58      	it	pl
 8008c18:	eba9 0101 	subpl.w	r1, r9, r1
 8008c1c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008c20:	bf58      	it	pl
 8008c22:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008c26:	6022      	str	r2, [r4, #0]
 8008c28:	f04f 0900 	mov.w	r9, #0
 8008c2c:	e789      	b.n	8008b42 <_scanf_float+0x192>
 8008c2e:	f04f 0a03 	mov.w	sl, #3
 8008c32:	e786      	b.n	8008b42 <_scanf_float+0x192>
 8008c34:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008c38:	4639      	mov	r1, r7
 8008c3a:	4640      	mov	r0, r8
 8008c3c:	4798      	blx	r3
 8008c3e:	2800      	cmp	r0, #0
 8008c40:	f43f aedb 	beq.w	80089fa <_scanf_float+0x4a>
 8008c44:	e6e6      	b.n	8008a14 <_scanf_float+0x64>
 8008c46:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008c4a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008c4e:	463a      	mov	r2, r7
 8008c50:	4640      	mov	r0, r8
 8008c52:	4798      	blx	r3
 8008c54:	6923      	ldr	r3, [r4, #16]
 8008c56:	3b01      	subs	r3, #1
 8008c58:	6123      	str	r3, [r4, #16]
 8008c5a:	e6e8      	b.n	8008a2e <_scanf_float+0x7e>
 8008c5c:	1e6b      	subs	r3, r5, #1
 8008c5e:	2b06      	cmp	r3, #6
 8008c60:	d824      	bhi.n	8008cac <_scanf_float+0x2fc>
 8008c62:	2d02      	cmp	r5, #2
 8008c64:	d836      	bhi.n	8008cd4 <_scanf_float+0x324>
 8008c66:	9b01      	ldr	r3, [sp, #4]
 8008c68:	429e      	cmp	r6, r3
 8008c6a:	f67f aee4 	bls.w	8008a36 <_scanf_float+0x86>
 8008c6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008c72:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008c76:	463a      	mov	r2, r7
 8008c78:	4640      	mov	r0, r8
 8008c7a:	4798      	blx	r3
 8008c7c:	6923      	ldr	r3, [r4, #16]
 8008c7e:	3b01      	subs	r3, #1
 8008c80:	6123      	str	r3, [r4, #16]
 8008c82:	e7f0      	b.n	8008c66 <_scanf_float+0x2b6>
 8008c84:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008c88:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008c8c:	463a      	mov	r2, r7
 8008c8e:	4640      	mov	r0, r8
 8008c90:	4798      	blx	r3
 8008c92:	6923      	ldr	r3, [r4, #16]
 8008c94:	3b01      	subs	r3, #1
 8008c96:	6123      	str	r3, [r4, #16]
 8008c98:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008c9c:	fa5f fa8a 	uxtb.w	sl, sl
 8008ca0:	f1ba 0f02 	cmp.w	sl, #2
 8008ca4:	d1ee      	bne.n	8008c84 <_scanf_float+0x2d4>
 8008ca6:	3d03      	subs	r5, #3
 8008ca8:	b2ed      	uxtb	r5, r5
 8008caa:	1b76      	subs	r6, r6, r5
 8008cac:	6823      	ldr	r3, [r4, #0]
 8008cae:	05da      	lsls	r2, r3, #23
 8008cb0:	d530      	bpl.n	8008d14 <_scanf_float+0x364>
 8008cb2:	055b      	lsls	r3, r3, #21
 8008cb4:	d511      	bpl.n	8008cda <_scanf_float+0x32a>
 8008cb6:	9b01      	ldr	r3, [sp, #4]
 8008cb8:	429e      	cmp	r6, r3
 8008cba:	f67f aebc 	bls.w	8008a36 <_scanf_float+0x86>
 8008cbe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008cc2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008cc6:	463a      	mov	r2, r7
 8008cc8:	4640      	mov	r0, r8
 8008cca:	4798      	blx	r3
 8008ccc:	6923      	ldr	r3, [r4, #16]
 8008cce:	3b01      	subs	r3, #1
 8008cd0:	6123      	str	r3, [r4, #16]
 8008cd2:	e7f0      	b.n	8008cb6 <_scanf_float+0x306>
 8008cd4:	46aa      	mov	sl, r5
 8008cd6:	46b3      	mov	fp, r6
 8008cd8:	e7de      	b.n	8008c98 <_scanf_float+0x2e8>
 8008cda:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008cde:	6923      	ldr	r3, [r4, #16]
 8008ce0:	2965      	cmp	r1, #101	@ 0x65
 8008ce2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8008ce6:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8008cea:	6123      	str	r3, [r4, #16]
 8008cec:	d00c      	beq.n	8008d08 <_scanf_float+0x358>
 8008cee:	2945      	cmp	r1, #69	@ 0x45
 8008cf0:	d00a      	beq.n	8008d08 <_scanf_float+0x358>
 8008cf2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008cf6:	463a      	mov	r2, r7
 8008cf8:	4640      	mov	r0, r8
 8008cfa:	4798      	blx	r3
 8008cfc:	6923      	ldr	r3, [r4, #16]
 8008cfe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008d02:	3b01      	subs	r3, #1
 8008d04:	1eb5      	subs	r5, r6, #2
 8008d06:	6123      	str	r3, [r4, #16]
 8008d08:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008d0c:	463a      	mov	r2, r7
 8008d0e:	4640      	mov	r0, r8
 8008d10:	4798      	blx	r3
 8008d12:	462e      	mov	r6, r5
 8008d14:	6822      	ldr	r2, [r4, #0]
 8008d16:	f012 0210 	ands.w	r2, r2, #16
 8008d1a:	d001      	beq.n	8008d20 <_scanf_float+0x370>
 8008d1c:	2000      	movs	r0, #0
 8008d1e:	e68b      	b.n	8008a38 <_scanf_float+0x88>
 8008d20:	7032      	strb	r2, [r6, #0]
 8008d22:	6823      	ldr	r3, [r4, #0]
 8008d24:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008d28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d2c:	d11c      	bne.n	8008d68 <_scanf_float+0x3b8>
 8008d2e:	9b02      	ldr	r3, [sp, #8]
 8008d30:	454b      	cmp	r3, r9
 8008d32:	eba3 0209 	sub.w	r2, r3, r9
 8008d36:	d123      	bne.n	8008d80 <_scanf_float+0x3d0>
 8008d38:	9901      	ldr	r1, [sp, #4]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	4640      	mov	r0, r8
 8008d3e:	f002 fcfb 	bl	800b738 <_strtod_r>
 8008d42:	9b03      	ldr	r3, [sp, #12]
 8008d44:	6821      	ldr	r1, [r4, #0]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f011 0f02 	tst.w	r1, #2
 8008d4c:	ec57 6b10 	vmov	r6, r7, d0
 8008d50:	f103 0204 	add.w	r2, r3, #4
 8008d54:	d01f      	beq.n	8008d96 <_scanf_float+0x3e6>
 8008d56:	9903      	ldr	r1, [sp, #12]
 8008d58:	600a      	str	r2, [r1, #0]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	e9c3 6700 	strd	r6, r7, [r3]
 8008d60:	68e3      	ldr	r3, [r4, #12]
 8008d62:	3301      	adds	r3, #1
 8008d64:	60e3      	str	r3, [r4, #12]
 8008d66:	e7d9      	b.n	8008d1c <_scanf_float+0x36c>
 8008d68:	9b04      	ldr	r3, [sp, #16]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d0e4      	beq.n	8008d38 <_scanf_float+0x388>
 8008d6e:	9905      	ldr	r1, [sp, #20]
 8008d70:	230a      	movs	r3, #10
 8008d72:	3101      	adds	r1, #1
 8008d74:	4640      	mov	r0, r8
 8008d76:	f002 fd5f 	bl	800b838 <_strtol_r>
 8008d7a:	9b04      	ldr	r3, [sp, #16]
 8008d7c:	9e05      	ldr	r6, [sp, #20]
 8008d7e:	1ac2      	subs	r2, r0, r3
 8008d80:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008d84:	429e      	cmp	r6, r3
 8008d86:	bf28      	it	cs
 8008d88:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008d8c:	4910      	ldr	r1, [pc, #64]	@ (8008dd0 <_scanf_float+0x420>)
 8008d8e:	4630      	mov	r0, r6
 8008d90:	f000 f954 	bl	800903c <siprintf>
 8008d94:	e7d0      	b.n	8008d38 <_scanf_float+0x388>
 8008d96:	f011 0f04 	tst.w	r1, #4
 8008d9a:	9903      	ldr	r1, [sp, #12]
 8008d9c:	600a      	str	r2, [r1, #0]
 8008d9e:	d1dc      	bne.n	8008d5a <_scanf_float+0x3aa>
 8008da0:	681d      	ldr	r5, [r3, #0]
 8008da2:	4632      	mov	r2, r6
 8008da4:	463b      	mov	r3, r7
 8008da6:	4630      	mov	r0, r6
 8008da8:	4639      	mov	r1, r7
 8008daa:	f7f7 fee7 	bl	8000b7c <__aeabi_dcmpun>
 8008dae:	b128      	cbz	r0, 8008dbc <_scanf_float+0x40c>
 8008db0:	4808      	ldr	r0, [pc, #32]	@ (8008dd4 <_scanf_float+0x424>)
 8008db2:	f000 fabb 	bl	800932c <nanf>
 8008db6:	ed85 0a00 	vstr	s0, [r5]
 8008dba:	e7d1      	b.n	8008d60 <_scanf_float+0x3b0>
 8008dbc:	4630      	mov	r0, r6
 8008dbe:	4639      	mov	r1, r7
 8008dc0:	f7f7 ff3a 	bl	8000c38 <__aeabi_d2f>
 8008dc4:	6028      	str	r0, [r5, #0]
 8008dc6:	e7cb      	b.n	8008d60 <_scanf_float+0x3b0>
 8008dc8:	f04f 0900 	mov.w	r9, #0
 8008dcc:	e629      	b.n	8008a22 <_scanf_float+0x72>
 8008dce:	bf00      	nop
 8008dd0:	0800ca18 	.word	0x0800ca18
 8008dd4:	0800cdad 	.word	0x0800cdad

08008dd8 <std>:
 8008dd8:	2300      	movs	r3, #0
 8008dda:	b510      	push	{r4, lr}
 8008ddc:	4604      	mov	r4, r0
 8008dde:	e9c0 3300 	strd	r3, r3, [r0]
 8008de2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008de6:	6083      	str	r3, [r0, #8]
 8008de8:	8181      	strh	r1, [r0, #12]
 8008dea:	6643      	str	r3, [r0, #100]	@ 0x64
 8008dec:	81c2      	strh	r2, [r0, #14]
 8008dee:	6183      	str	r3, [r0, #24]
 8008df0:	4619      	mov	r1, r3
 8008df2:	2208      	movs	r2, #8
 8008df4:	305c      	adds	r0, #92	@ 0x5c
 8008df6:	f000 fa19 	bl	800922c <memset>
 8008dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8008e30 <std+0x58>)
 8008dfc:	6263      	str	r3, [r4, #36]	@ 0x24
 8008dfe:	4b0d      	ldr	r3, [pc, #52]	@ (8008e34 <std+0x5c>)
 8008e00:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008e02:	4b0d      	ldr	r3, [pc, #52]	@ (8008e38 <std+0x60>)
 8008e04:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008e06:	4b0d      	ldr	r3, [pc, #52]	@ (8008e3c <std+0x64>)
 8008e08:	6323      	str	r3, [r4, #48]	@ 0x30
 8008e0a:	4b0d      	ldr	r3, [pc, #52]	@ (8008e40 <std+0x68>)
 8008e0c:	6224      	str	r4, [r4, #32]
 8008e0e:	429c      	cmp	r4, r3
 8008e10:	d006      	beq.n	8008e20 <std+0x48>
 8008e12:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008e16:	4294      	cmp	r4, r2
 8008e18:	d002      	beq.n	8008e20 <std+0x48>
 8008e1a:	33d0      	adds	r3, #208	@ 0xd0
 8008e1c:	429c      	cmp	r4, r3
 8008e1e:	d105      	bne.n	8008e2c <std+0x54>
 8008e20:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008e24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e28:	f000 ba7c 	b.w	8009324 <__retarget_lock_init_recursive>
 8008e2c:	bd10      	pop	{r4, pc}
 8008e2e:	bf00      	nop
 8008e30:	0800907d 	.word	0x0800907d
 8008e34:	0800909f 	.word	0x0800909f
 8008e38:	080090d7 	.word	0x080090d7
 8008e3c:	080090fb 	.word	0x080090fb
 8008e40:	20002098 	.word	0x20002098

08008e44 <stdio_exit_handler>:
 8008e44:	4a02      	ldr	r2, [pc, #8]	@ (8008e50 <stdio_exit_handler+0xc>)
 8008e46:	4903      	ldr	r1, [pc, #12]	@ (8008e54 <stdio_exit_handler+0x10>)
 8008e48:	4803      	ldr	r0, [pc, #12]	@ (8008e58 <stdio_exit_handler+0x14>)
 8008e4a:	f000 b869 	b.w	8008f20 <_fwalk_sglue>
 8008e4e:	bf00      	nop
 8008e50:	2000000c 	.word	0x2000000c
 8008e54:	0800be79 	.word	0x0800be79
 8008e58:	2000001c 	.word	0x2000001c

08008e5c <cleanup_stdio>:
 8008e5c:	6841      	ldr	r1, [r0, #4]
 8008e5e:	4b0c      	ldr	r3, [pc, #48]	@ (8008e90 <cleanup_stdio+0x34>)
 8008e60:	4299      	cmp	r1, r3
 8008e62:	b510      	push	{r4, lr}
 8008e64:	4604      	mov	r4, r0
 8008e66:	d001      	beq.n	8008e6c <cleanup_stdio+0x10>
 8008e68:	f003 f806 	bl	800be78 <_fflush_r>
 8008e6c:	68a1      	ldr	r1, [r4, #8]
 8008e6e:	4b09      	ldr	r3, [pc, #36]	@ (8008e94 <cleanup_stdio+0x38>)
 8008e70:	4299      	cmp	r1, r3
 8008e72:	d002      	beq.n	8008e7a <cleanup_stdio+0x1e>
 8008e74:	4620      	mov	r0, r4
 8008e76:	f002 ffff 	bl	800be78 <_fflush_r>
 8008e7a:	68e1      	ldr	r1, [r4, #12]
 8008e7c:	4b06      	ldr	r3, [pc, #24]	@ (8008e98 <cleanup_stdio+0x3c>)
 8008e7e:	4299      	cmp	r1, r3
 8008e80:	d004      	beq.n	8008e8c <cleanup_stdio+0x30>
 8008e82:	4620      	mov	r0, r4
 8008e84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e88:	f002 bff6 	b.w	800be78 <_fflush_r>
 8008e8c:	bd10      	pop	{r4, pc}
 8008e8e:	bf00      	nop
 8008e90:	20002098 	.word	0x20002098
 8008e94:	20002100 	.word	0x20002100
 8008e98:	20002168 	.word	0x20002168

08008e9c <global_stdio_init.part.0>:
 8008e9c:	b510      	push	{r4, lr}
 8008e9e:	4b0b      	ldr	r3, [pc, #44]	@ (8008ecc <global_stdio_init.part.0+0x30>)
 8008ea0:	4c0b      	ldr	r4, [pc, #44]	@ (8008ed0 <global_stdio_init.part.0+0x34>)
 8008ea2:	4a0c      	ldr	r2, [pc, #48]	@ (8008ed4 <global_stdio_init.part.0+0x38>)
 8008ea4:	601a      	str	r2, [r3, #0]
 8008ea6:	4620      	mov	r0, r4
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	2104      	movs	r1, #4
 8008eac:	f7ff ff94 	bl	8008dd8 <std>
 8008eb0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008eb4:	2201      	movs	r2, #1
 8008eb6:	2109      	movs	r1, #9
 8008eb8:	f7ff ff8e 	bl	8008dd8 <std>
 8008ebc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008ec0:	2202      	movs	r2, #2
 8008ec2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ec6:	2112      	movs	r1, #18
 8008ec8:	f7ff bf86 	b.w	8008dd8 <std>
 8008ecc:	200021d0 	.word	0x200021d0
 8008ed0:	20002098 	.word	0x20002098
 8008ed4:	08008e45 	.word	0x08008e45

08008ed8 <__sfp_lock_acquire>:
 8008ed8:	4801      	ldr	r0, [pc, #4]	@ (8008ee0 <__sfp_lock_acquire+0x8>)
 8008eda:	f000 ba24 	b.w	8009326 <__retarget_lock_acquire_recursive>
 8008ede:	bf00      	nop
 8008ee0:	200021d9 	.word	0x200021d9

08008ee4 <__sfp_lock_release>:
 8008ee4:	4801      	ldr	r0, [pc, #4]	@ (8008eec <__sfp_lock_release+0x8>)
 8008ee6:	f000 ba1f 	b.w	8009328 <__retarget_lock_release_recursive>
 8008eea:	bf00      	nop
 8008eec:	200021d9 	.word	0x200021d9

08008ef0 <__sinit>:
 8008ef0:	b510      	push	{r4, lr}
 8008ef2:	4604      	mov	r4, r0
 8008ef4:	f7ff fff0 	bl	8008ed8 <__sfp_lock_acquire>
 8008ef8:	6a23      	ldr	r3, [r4, #32]
 8008efa:	b11b      	cbz	r3, 8008f04 <__sinit+0x14>
 8008efc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f00:	f7ff bff0 	b.w	8008ee4 <__sfp_lock_release>
 8008f04:	4b04      	ldr	r3, [pc, #16]	@ (8008f18 <__sinit+0x28>)
 8008f06:	6223      	str	r3, [r4, #32]
 8008f08:	4b04      	ldr	r3, [pc, #16]	@ (8008f1c <__sinit+0x2c>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d1f5      	bne.n	8008efc <__sinit+0xc>
 8008f10:	f7ff ffc4 	bl	8008e9c <global_stdio_init.part.0>
 8008f14:	e7f2      	b.n	8008efc <__sinit+0xc>
 8008f16:	bf00      	nop
 8008f18:	08008e5d 	.word	0x08008e5d
 8008f1c:	200021d0 	.word	0x200021d0

08008f20 <_fwalk_sglue>:
 8008f20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f24:	4607      	mov	r7, r0
 8008f26:	4688      	mov	r8, r1
 8008f28:	4614      	mov	r4, r2
 8008f2a:	2600      	movs	r6, #0
 8008f2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008f30:	f1b9 0901 	subs.w	r9, r9, #1
 8008f34:	d505      	bpl.n	8008f42 <_fwalk_sglue+0x22>
 8008f36:	6824      	ldr	r4, [r4, #0]
 8008f38:	2c00      	cmp	r4, #0
 8008f3a:	d1f7      	bne.n	8008f2c <_fwalk_sglue+0xc>
 8008f3c:	4630      	mov	r0, r6
 8008f3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f42:	89ab      	ldrh	r3, [r5, #12]
 8008f44:	2b01      	cmp	r3, #1
 8008f46:	d907      	bls.n	8008f58 <_fwalk_sglue+0x38>
 8008f48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f4c:	3301      	adds	r3, #1
 8008f4e:	d003      	beq.n	8008f58 <_fwalk_sglue+0x38>
 8008f50:	4629      	mov	r1, r5
 8008f52:	4638      	mov	r0, r7
 8008f54:	47c0      	blx	r8
 8008f56:	4306      	orrs	r6, r0
 8008f58:	3568      	adds	r5, #104	@ 0x68
 8008f5a:	e7e9      	b.n	8008f30 <_fwalk_sglue+0x10>

08008f5c <iprintf>:
 8008f5c:	b40f      	push	{r0, r1, r2, r3}
 8008f5e:	b507      	push	{r0, r1, r2, lr}
 8008f60:	4906      	ldr	r1, [pc, #24]	@ (8008f7c <iprintf+0x20>)
 8008f62:	ab04      	add	r3, sp, #16
 8008f64:	6808      	ldr	r0, [r1, #0]
 8008f66:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f6a:	6881      	ldr	r1, [r0, #8]
 8008f6c:	9301      	str	r3, [sp, #4]
 8008f6e:	f002 fde7 	bl	800bb40 <_vfiprintf_r>
 8008f72:	b003      	add	sp, #12
 8008f74:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f78:	b004      	add	sp, #16
 8008f7a:	4770      	bx	lr
 8008f7c:	20000018 	.word	0x20000018

08008f80 <_puts_r>:
 8008f80:	6a03      	ldr	r3, [r0, #32]
 8008f82:	b570      	push	{r4, r5, r6, lr}
 8008f84:	6884      	ldr	r4, [r0, #8]
 8008f86:	4605      	mov	r5, r0
 8008f88:	460e      	mov	r6, r1
 8008f8a:	b90b      	cbnz	r3, 8008f90 <_puts_r+0x10>
 8008f8c:	f7ff ffb0 	bl	8008ef0 <__sinit>
 8008f90:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008f92:	07db      	lsls	r3, r3, #31
 8008f94:	d405      	bmi.n	8008fa2 <_puts_r+0x22>
 8008f96:	89a3      	ldrh	r3, [r4, #12]
 8008f98:	0598      	lsls	r0, r3, #22
 8008f9a:	d402      	bmi.n	8008fa2 <_puts_r+0x22>
 8008f9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f9e:	f000 f9c2 	bl	8009326 <__retarget_lock_acquire_recursive>
 8008fa2:	89a3      	ldrh	r3, [r4, #12]
 8008fa4:	0719      	lsls	r1, r3, #28
 8008fa6:	d502      	bpl.n	8008fae <_puts_r+0x2e>
 8008fa8:	6923      	ldr	r3, [r4, #16]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d135      	bne.n	800901a <_puts_r+0x9a>
 8008fae:	4621      	mov	r1, r4
 8008fb0:	4628      	mov	r0, r5
 8008fb2:	f000 f8e5 	bl	8009180 <__swsetup_r>
 8008fb6:	b380      	cbz	r0, 800901a <_puts_r+0x9a>
 8008fb8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8008fbc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008fbe:	07da      	lsls	r2, r3, #31
 8008fc0:	d405      	bmi.n	8008fce <_puts_r+0x4e>
 8008fc2:	89a3      	ldrh	r3, [r4, #12]
 8008fc4:	059b      	lsls	r3, r3, #22
 8008fc6:	d402      	bmi.n	8008fce <_puts_r+0x4e>
 8008fc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008fca:	f000 f9ad 	bl	8009328 <__retarget_lock_release_recursive>
 8008fce:	4628      	mov	r0, r5
 8008fd0:	bd70      	pop	{r4, r5, r6, pc}
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	da04      	bge.n	8008fe0 <_puts_r+0x60>
 8008fd6:	69a2      	ldr	r2, [r4, #24]
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	dc17      	bgt.n	800900c <_puts_r+0x8c>
 8008fdc:	290a      	cmp	r1, #10
 8008fde:	d015      	beq.n	800900c <_puts_r+0x8c>
 8008fe0:	6823      	ldr	r3, [r4, #0]
 8008fe2:	1c5a      	adds	r2, r3, #1
 8008fe4:	6022      	str	r2, [r4, #0]
 8008fe6:	7019      	strb	r1, [r3, #0]
 8008fe8:	68a3      	ldr	r3, [r4, #8]
 8008fea:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008fee:	3b01      	subs	r3, #1
 8008ff0:	60a3      	str	r3, [r4, #8]
 8008ff2:	2900      	cmp	r1, #0
 8008ff4:	d1ed      	bne.n	8008fd2 <_puts_r+0x52>
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	da11      	bge.n	800901e <_puts_r+0x9e>
 8008ffa:	4622      	mov	r2, r4
 8008ffc:	210a      	movs	r1, #10
 8008ffe:	4628      	mov	r0, r5
 8009000:	f000 f87f 	bl	8009102 <__swbuf_r>
 8009004:	3001      	adds	r0, #1
 8009006:	d0d7      	beq.n	8008fb8 <_puts_r+0x38>
 8009008:	250a      	movs	r5, #10
 800900a:	e7d7      	b.n	8008fbc <_puts_r+0x3c>
 800900c:	4622      	mov	r2, r4
 800900e:	4628      	mov	r0, r5
 8009010:	f000 f877 	bl	8009102 <__swbuf_r>
 8009014:	3001      	adds	r0, #1
 8009016:	d1e7      	bne.n	8008fe8 <_puts_r+0x68>
 8009018:	e7ce      	b.n	8008fb8 <_puts_r+0x38>
 800901a:	3e01      	subs	r6, #1
 800901c:	e7e4      	b.n	8008fe8 <_puts_r+0x68>
 800901e:	6823      	ldr	r3, [r4, #0]
 8009020:	1c5a      	adds	r2, r3, #1
 8009022:	6022      	str	r2, [r4, #0]
 8009024:	220a      	movs	r2, #10
 8009026:	701a      	strb	r2, [r3, #0]
 8009028:	e7ee      	b.n	8009008 <_puts_r+0x88>
	...

0800902c <puts>:
 800902c:	4b02      	ldr	r3, [pc, #8]	@ (8009038 <puts+0xc>)
 800902e:	4601      	mov	r1, r0
 8009030:	6818      	ldr	r0, [r3, #0]
 8009032:	f7ff bfa5 	b.w	8008f80 <_puts_r>
 8009036:	bf00      	nop
 8009038:	20000018 	.word	0x20000018

0800903c <siprintf>:
 800903c:	b40e      	push	{r1, r2, r3}
 800903e:	b500      	push	{lr}
 8009040:	b09c      	sub	sp, #112	@ 0x70
 8009042:	ab1d      	add	r3, sp, #116	@ 0x74
 8009044:	9002      	str	r0, [sp, #8]
 8009046:	9006      	str	r0, [sp, #24]
 8009048:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800904c:	4809      	ldr	r0, [pc, #36]	@ (8009074 <siprintf+0x38>)
 800904e:	9107      	str	r1, [sp, #28]
 8009050:	9104      	str	r1, [sp, #16]
 8009052:	4909      	ldr	r1, [pc, #36]	@ (8009078 <siprintf+0x3c>)
 8009054:	f853 2b04 	ldr.w	r2, [r3], #4
 8009058:	9105      	str	r1, [sp, #20]
 800905a:	6800      	ldr	r0, [r0, #0]
 800905c:	9301      	str	r3, [sp, #4]
 800905e:	a902      	add	r1, sp, #8
 8009060:	f002 fc48 	bl	800b8f4 <_svfiprintf_r>
 8009064:	9b02      	ldr	r3, [sp, #8]
 8009066:	2200      	movs	r2, #0
 8009068:	701a      	strb	r2, [r3, #0]
 800906a:	b01c      	add	sp, #112	@ 0x70
 800906c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009070:	b003      	add	sp, #12
 8009072:	4770      	bx	lr
 8009074:	20000018 	.word	0x20000018
 8009078:	ffff0208 	.word	0xffff0208

0800907c <__sread>:
 800907c:	b510      	push	{r4, lr}
 800907e:	460c      	mov	r4, r1
 8009080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009084:	f000 f900 	bl	8009288 <_read_r>
 8009088:	2800      	cmp	r0, #0
 800908a:	bfab      	itete	ge
 800908c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800908e:	89a3      	ldrhlt	r3, [r4, #12]
 8009090:	181b      	addge	r3, r3, r0
 8009092:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009096:	bfac      	ite	ge
 8009098:	6563      	strge	r3, [r4, #84]	@ 0x54
 800909a:	81a3      	strhlt	r3, [r4, #12]
 800909c:	bd10      	pop	{r4, pc}

0800909e <__swrite>:
 800909e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090a2:	461f      	mov	r7, r3
 80090a4:	898b      	ldrh	r3, [r1, #12]
 80090a6:	05db      	lsls	r3, r3, #23
 80090a8:	4605      	mov	r5, r0
 80090aa:	460c      	mov	r4, r1
 80090ac:	4616      	mov	r6, r2
 80090ae:	d505      	bpl.n	80090bc <__swrite+0x1e>
 80090b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090b4:	2302      	movs	r3, #2
 80090b6:	2200      	movs	r2, #0
 80090b8:	f000 f8d4 	bl	8009264 <_lseek_r>
 80090bc:	89a3      	ldrh	r3, [r4, #12]
 80090be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80090c6:	81a3      	strh	r3, [r4, #12]
 80090c8:	4632      	mov	r2, r6
 80090ca:	463b      	mov	r3, r7
 80090cc:	4628      	mov	r0, r5
 80090ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090d2:	f000 b8eb 	b.w	80092ac <_write_r>

080090d6 <__sseek>:
 80090d6:	b510      	push	{r4, lr}
 80090d8:	460c      	mov	r4, r1
 80090da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090de:	f000 f8c1 	bl	8009264 <_lseek_r>
 80090e2:	1c43      	adds	r3, r0, #1
 80090e4:	89a3      	ldrh	r3, [r4, #12]
 80090e6:	bf15      	itete	ne
 80090e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80090ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80090ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80090f2:	81a3      	strheq	r3, [r4, #12]
 80090f4:	bf18      	it	ne
 80090f6:	81a3      	strhne	r3, [r4, #12]
 80090f8:	bd10      	pop	{r4, pc}

080090fa <__sclose>:
 80090fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090fe:	f000 b8a1 	b.w	8009244 <_close_r>

08009102 <__swbuf_r>:
 8009102:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009104:	460e      	mov	r6, r1
 8009106:	4614      	mov	r4, r2
 8009108:	4605      	mov	r5, r0
 800910a:	b118      	cbz	r0, 8009114 <__swbuf_r+0x12>
 800910c:	6a03      	ldr	r3, [r0, #32]
 800910e:	b90b      	cbnz	r3, 8009114 <__swbuf_r+0x12>
 8009110:	f7ff feee 	bl	8008ef0 <__sinit>
 8009114:	69a3      	ldr	r3, [r4, #24]
 8009116:	60a3      	str	r3, [r4, #8]
 8009118:	89a3      	ldrh	r3, [r4, #12]
 800911a:	071a      	lsls	r2, r3, #28
 800911c:	d501      	bpl.n	8009122 <__swbuf_r+0x20>
 800911e:	6923      	ldr	r3, [r4, #16]
 8009120:	b943      	cbnz	r3, 8009134 <__swbuf_r+0x32>
 8009122:	4621      	mov	r1, r4
 8009124:	4628      	mov	r0, r5
 8009126:	f000 f82b 	bl	8009180 <__swsetup_r>
 800912a:	b118      	cbz	r0, 8009134 <__swbuf_r+0x32>
 800912c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8009130:	4638      	mov	r0, r7
 8009132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009134:	6823      	ldr	r3, [r4, #0]
 8009136:	6922      	ldr	r2, [r4, #16]
 8009138:	1a98      	subs	r0, r3, r2
 800913a:	6963      	ldr	r3, [r4, #20]
 800913c:	b2f6      	uxtb	r6, r6
 800913e:	4283      	cmp	r3, r0
 8009140:	4637      	mov	r7, r6
 8009142:	dc05      	bgt.n	8009150 <__swbuf_r+0x4e>
 8009144:	4621      	mov	r1, r4
 8009146:	4628      	mov	r0, r5
 8009148:	f002 fe96 	bl	800be78 <_fflush_r>
 800914c:	2800      	cmp	r0, #0
 800914e:	d1ed      	bne.n	800912c <__swbuf_r+0x2a>
 8009150:	68a3      	ldr	r3, [r4, #8]
 8009152:	3b01      	subs	r3, #1
 8009154:	60a3      	str	r3, [r4, #8]
 8009156:	6823      	ldr	r3, [r4, #0]
 8009158:	1c5a      	adds	r2, r3, #1
 800915a:	6022      	str	r2, [r4, #0]
 800915c:	701e      	strb	r6, [r3, #0]
 800915e:	6962      	ldr	r2, [r4, #20]
 8009160:	1c43      	adds	r3, r0, #1
 8009162:	429a      	cmp	r2, r3
 8009164:	d004      	beq.n	8009170 <__swbuf_r+0x6e>
 8009166:	89a3      	ldrh	r3, [r4, #12]
 8009168:	07db      	lsls	r3, r3, #31
 800916a:	d5e1      	bpl.n	8009130 <__swbuf_r+0x2e>
 800916c:	2e0a      	cmp	r6, #10
 800916e:	d1df      	bne.n	8009130 <__swbuf_r+0x2e>
 8009170:	4621      	mov	r1, r4
 8009172:	4628      	mov	r0, r5
 8009174:	f002 fe80 	bl	800be78 <_fflush_r>
 8009178:	2800      	cmp	r0, #0
 800917a:	d0d9      	beq.n	8009130 <__swbuf_r+0x2e>
 800917c:	e7d6      	b.n	800912c <__swbuf_r+0x2a>
	...

08009180 <__swsetup_r>:
 8009180:	b538      	push	{r3, r4, r5, lr}
 8009182:	4b29      	ldr	r3, [pc, #164]	@ (8009228 <__swsetup_r+0xa8>)
 8009184:	4605      	mov	r5, r0
 8009186:	6818      	ldr	r0, [r3, #0]
 8009188:	460c      	mov	r4, r1
 800918a:	b118      	cbz	r0, 8009194 <__swsetup_r+0x14>
 800918c:	6a03      	ldr	r3, [r0, #32]
 800918e:	b90b      	cbnz	r3, 8009194 <__swsetup_r+0x14>
 8009190:	f7ff feae 	bl	8008ef0 <__sinit>
 8009194:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009198:	0719      	lsls	r1, r3, #28
 800919a:	d422      	bmi.n	80091e2 <__swsetup_r+0x62>
 800919c:	06da      	lsls	r2, r3, #27
 800919e:	d407      	bmi.n	80091b0 <__swsetup_r+0x30>
 80091a0:	2209      	movs	r2, #9
 80091a2:	602a      	str	r2, [r5, #0]
 80091a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80091a8:	81a3      	strh	r3, [r4, #12]
 80091aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80091ae:	e033      	b.n	8009218 <__swsetup_r+0x98>
 80091b0:	0758      	lsls	r0, r3, #29
 80091b2:	d512      	bpl.n	80091da <__swsetup_r+0x5a>
 80091b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80091b6:	b141      	cbz	r1, 80091ca <__swsetup_r+0x4a>
 80091b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80091bc:	4299      	cmp	r1, r3
 80091be:	d002      	beq.n	80091c6 <__swsetup_r+0x46>
 80091c0:	4628      	mov	r0, r5
 80091c2:	f000 ff05 	bl	8009fd0 <_free_r>
 80091c6:	2300      	movs	r3, #0
 80091c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80091ca:	89a3      	ldrh	r3, [r4, #12]
 80091cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80091d0:	81a3      	strh	r3, [r4, #12]
 80091d2:	2300      	movs	r3, #0
 80091d4:	6063      	str	r3, [r4, #4]
 80091d6:	6923      	ldr	r3, [r4, #16]
 80091d8:	6023      	str	r3, [r4, #0]
 80091da:	89a3      	ldrh	r3, [r4, #12]
 80091dc:	f043 0308 	orr.w	r3, r3, #8
 80091e0:	81a3      	strh	r3, [r4, #12]
 80091e2:	6923      	ldr	r3, [r4, #16]
 80091e4:	b94b      	cbnz	r3, 80091fa <__swsetup_r+0x7a>
 80091e6:	89a3      	ldrh	r3, [r4, #12]
 80091e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80091ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091f0:	d003      	beq.n	80091fa <__swsetup_r+0x7a>
 80091f2:	4621      	mov	r1, r4
 80091f4:	4628      	mov	r0, r5
 80091f6:	f002 fe8d 	bl	800bf14 <__smakebuf_r>
 80091fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091fe:	f013 0201 	ands.w	r2, r3, #1
 8009202:	d00a      	beq.n	800921a <__swsetup_r+0x9a>
 8009204:	2200      	movs	r2, #0
 8009206:	60a2      	str	r2, [r4, #8]
 8009208:	6962      	ldr	r2, [r4, #20]
 800920a:	4252      	negs	r2, r2
 800920c:	61a2      	str	r2, [r4, #24]
 800920e:	6922      	ldr	r2, [r4, #16]
 8009210:	b942      	cbnz	r2, 8009224 <__swsetup_r+0xa4>
 8009212:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009216:	d1c5      	bne.n	80091a4 <__swsetup_r+0x24>
 8009218:	bd38      	pop	{r3, r4, r5, pc}
 800921a:	0799      	lsls	r1, r3, #30
 800921c:	bf58      	it	pl
 800921e:	6962      	ldrpl	r2, [r4, #20]
 8009220:	60a2      	str	r2, [r4, #8]
 8009222:	e7f4      	b.n	800920e <__swsetup_r+0x8e>
 8009224:	2000      	movs	r0, #0
 8009226:	e7f7      	b.n	8009218 <__swsetup_r+0x98>
 8009228:	20000018 	.word	0x20000018

0800922c <memset>:
 800922c:	4402      	add	r2, r0
 800922e:	4603      	mov	r3, r0
 8009230:	4293      	cmp	r3, r2
 8009232:	d100      	bne.n	8009236 <memset+0xa>
 8009234:	4770      	bx	lr
 8009236:	f803 1b01 	strb.w	r1, [r3], #1
 800923a:	e7f9      	b.n	8009230 <memset+0x4>

0800923c <_localeconv_r>:
 800923c:	4800      	ldr	r0, [pc, #0]	@ (8009240 <_localeconv_r+0x4>)
 800923e:	4770      	bx	lr
 8009240:	20000158 	.word	0x20000158

08009244 <_close_r>:
 8009244:	b538      	push	{r3, r4, r5, lr}
 8009246:	4d06      	ldr	r5, [pc, #24]	@ (8009260 <_close_r+0x1c>)
 8009248:	2300      	movs	r3, #0
 800924a:	4604      	mov	r4, r0
 800924c:	4608      	mov	r0, r1
 800924e:	602b      	str	r3, [r5, #0]
 8009250:	f7f8 fac0 	bl	80017d4 <_close>
 8009254:	1c43      	adds	r3, r0, #1
 8009256:	d102      	bne.n	800925e <_close_r+0x1a>
 8009258:	682b      	ldr	r3, [r5, #0]
 800925a:	b103      	cbz	r3, 800925e <_close_r+0x1a>
 800925c:	6023      	str	r3, [r4, #0]
 800925e:	bd38      	pop	{r3, r4, r5, pc}
 8009260:	200021d4 	.word	0x200021d4

08009264 <_lseek_r>:
 8009264:	b538      	push	{r3, r4, r5, lr}
 8009266:	4d07      	ldr	r5, [pc, #28]	@ (8009284 <_lseek_r+0x20>)
 8009268:	4604      	mov	r4, r0
 800926a:	4608      	mov	r0, r1
 800926c:	4611      	mov	r1, r2
 800926e:	2200      	movs	r2, #0
 8009270:	602a      	str	r2, [r5, #0]
 8009272:	461a      	mov	r2, r3
 8009274:	f7f8 fad5 	bl	8001822 <_lseek>
 8009278:	1c43      	adds	r3, r0, #1
 800927a:	d102      	bne.n	8009282 <_lseek_r+0x1e>
 800927c:	682b      	ldr	r3, [r5, #0]
 800927e:	b103      	cbz	r3, 8009282 <_lseek_r+0x1e>
 8009280:	6023      	str	r3, [r4, #0]
 8009282:	bd38      	pop	{r3, r4, r5, pc}
 8009284:	200021d4 	.word	0x200021d4

08009288 <_read_r>:
 8009288:	b538      	push	{r3, r4, r5, lr}
 800928a:	4d07      	ldr	r5, [pc, #28]	@ (80092a8 <_read_r+0x20>)
 800928c:	4604      	mov	r4, r0
 800928e:	4608      	mov	r0, r1
 8009290:	4611      	mov	r1, r2
 8009292:	2200      	movs	r2, #0
 8009294:	602a      	str	r2, [r5, #0]
 8009296:	461a      	mov	r2, r3
 8009298:	f7f8 fa63 	bl	8001762 <_read>
 800929c:	1c43      	adds	r3, r0, #1
 800929e:	d102      	bne.n	80092a6 <_read_r+0x1e>
 80092a0:	682b      	ldr	r3, [r5, #0]
 80092a2:	b103      	cbz	r3, 80092a6 <_read_r+0x1e>
 80092a4:	6023      	str	r3, [r4, #0]
 80092a6:	bd38      	pop	{r3, r4, r5, pc}
 80092a8:	200021d4 	.word	0x200021d4

080092ac <_write_r>:
 80092ac:	b538      	push	{r3, r4, r5, lr}
 80092ae:	4d07      	ldr	r5, [pc, #28]	@ (80092cc <_write_r+0x20>)
 80092b0:	4604      	mov	r4, r0
 80092b2:	4608      	mov	r0, r1
 80092b4:	4611      	mov	r1, r2
 80092b6:	2200      	movs	r2, #0
 80092b8:	602a      	str	r2, [r5, #0]
 80092ba:	461a      	mov	r2, r3
 80092bc:	f7f8 fa6e 	bl	800179c <_write>
 80092c0:	1c43      	adds	r3, r0, #1
 80092c2:	d102      	bne.n	80092ca <_write_r+0x1e>
 80092c4:	682b      	ldr	r3, [r5, #0]
 80092c6:	b103      	cbz	r3, 80092ca <_write_r+0x1e>
 80092c8:	6023      	str	r3, [r4, #0]
 80092ca:	bd38      	pop	{r3, r4, r5, pc}
 80092cc:	200021d4 	.word	0x200021d4

080092d0 <__errno>:
 80092d0:	4b01      	ldr	r3, [pc, #4]	@ (80092d8 <__errno+0x8>)
 80092d2:	6818      	ldr	r0, [r3, #0]
 80092d4:	4770      	bx	lr
 80092d6:	bf00      	nop
 80092d8:	20000018 	.word	0x20000018

080092dc <__libc_init_array>:
 80092dc:	b570      	push	{r4, r5, r6, lr}
 80092de:	4d0d      	ldr	r5, [pc, #52]	@ (8009314 <__libc_init_array+0x38>)
 80092e0:	4c0d      	ldr	r4, [pc, #52]	@ (8009318 <__libc_init_array+0x3c>)
 80092e2:	1b64      	subs	r4, r4, r5
 80092e4:	10a4      	asrs	r4, r4, #2
 80092e6:	2600      	movs	r6, #0
 80092e8:	42a6      	cmp	r6, r4
 80092ea:	d109      	bne.n	8009300 <__libc_init_array+0x24>
 80092ec:	4d0b      	ldr	r5, [pc, #44]	@ (800931c <__libc_init_array+0x40>)
 80092ee:	4c0c      	ldr	r4, [pc, #48]	@ (8009320 <__libc_init_array+0x44>)
 80092f0:	f003 fae0 	bl	800c8b4 <_init>
 80092f4:	1b64      	subs	r4, r4, r5
 80092f6:	10a4      	asrs	r4, r4, #2
 80092f8:	2600      	movs	r6, #0
 80092fa:	42a6      	cmp	r6, r4
 80092fc:	d105      	bne.n	800930a <__libc_init_array+0x2e>
 80092fe:	bd70      	pop	{r4, r5, r6, pc}
 8009300:	f855 3b04 	ldr.w	r3, [r5], #4
 8009304:	4798      	blx	r3
 8009306:	3601      	adds	r6, #1
 8009308:	e7ee      	b.n	80092e8 <__libc_init_array+0xc>
 800930a:	f855 3b04 	ldr.w	r3, [r5], #4
 800930e:	4798      	blx	r3
 8009310:	3601      	adds	r6, #1
 8009312:	e7f2      	b.n	80092fa <__libc_init_array+0x1e>
 8009314:	0800ce18 	.word	0x0800ce18
 8009318:	0800ce18 	.word	0x0800ce18
 800931c:	0800ce18 	.word	0x0800ce18
 8009320:	0800ce1c 	.word	0x0800ce1c

08009324 <__retarget_lock_init_recursive>:
 8009324:	4770      	bx	lr

08009326 <__retarget_lock_acquire_recursive>:
 8009326:	4770      	bx	lr

08009328 <__retarget_lock_release_recursive>:
 8009328:	4770      	bx	lr
	...

0800932c <nanf>:
 800932c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009334 <nanf+0x8>
 8009330:	4770      	bx	lr
 8009332:	bf00      	nop
 8009334:	7fc00000 	.word	0x7fc00000

08009338 <quorem>:
 8009338:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800933c:	6903      	ldr	r3, [r0, #16]
 800933e:	690c      	ldr	r4, [r1, #16]
 8009340:	42a3      	cmp	r3, r4
 8009342:	4607      	mov	r7, r0
 8009344:	db7e      	blt.n	8009444 <quorem+0x10c>
 8009346:	3c01      	subs	r4, #1
 8009348:	f101 0814 	add.w	r8, r1, #20
 800934c:	00a3      	lsls	r3, r4, #2
 800934e:	f100 0514 	add.w	r5, r0, #20
 8009352:	9300      	str	r3, [sp, #0]
 8009354:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009358:	9301      	str	r3, [sp, #4]
 800935a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800935e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009362:	3301      	adds	r3, #1
 8009364:	429a      	cmp	r2, r3
 8009366:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800936a:	fbb2 f6f3 	udiv	r6, r2, r3
 800936e:	d32e      	bcc.n	80093ce <quorem+0x96>
 8009370:	f04f 0a00 	mov.w	sl, #0
 8009374:	46c4      	mov	ip, r8
 8009376:	46ae      	mov	lr, r5
 8009378:	46d3      	mov	fp, sl
 800937a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800937e:	b298      	uxth	r0, r3
 8009380:	fb06 a000 	mla	r0, r6, r0, sl
 8009384:	0c02      	lsrs	r2, r0, #16
 8009386:	0c1b      	lsrs	r3, r3, #16
 8009388:	fb06 2303 	mla	r3, r6, r3, r2
 800938c:	f8de 2000 	ldr.w	r2, [lr]
 8009390:	b280      	uxth	r0, r0
 8009392:	b292      	uxth	r2, r2
 8009394:	1a12      	subs	r2, r2, r0
 8009396:	445a      	add	r2, fp
 8009398:	f8de 0000 	ldr.w	r0, [lr]
 800939c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80093a0:	b29b      	uxth	r3, r3
 80093a2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80093a6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80093aa:	b292      	uxth	r2, r2
 80093ac:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80093b0:	45e1      	cmp	r9, ip
 80093b2:	f84e 2b04 	str.w	r2, [lr], #4
 80093b6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80093ba:	d2de      	bcs.n	800937a <quorem+0x42>
 80093bc:	9b00      	ldr	r3, [sp, #0]
 80093be:	58eb      	ldr	r3, [r5, r3]
 80093c0:	b92b      	cbnz	r3, 80093ce <quorem+0x96>
 80093c2:	9b01      	ldr	r3, [sp, #4]
 80093c4:	3b04      	subs	r3, #4
 80093c6:	429d      	cmp	r5, r3
 80093c8:	461a      	mov	r2, r3
 80093ca:	d32f      	bcc.n	800942c <quorem+0xf4>
 80093cc:	613c      	str	r4, [r7, #16]
 80093ce:	4638      	mov	r0, r7
 80093d0:	f001 f9c2 	bl	800a758 <__mcmp>
 80093d4:	2800      	cmp	r0, #0
 80093d6:	db25      	blt.n	8009424 <quorem+0xec>
 80093d8:	4629      	mov	r1, r5
 80093da:	2000      	movs	r0, #0
 80093dc:	f858 2b04 	ldr.w	r2, [r8], #4
 80093e0:	f8d1 c000 	ldr.w	ip, [r1]
 80093e4:	fa1f fe82 	uxth.w	lr, r2
 80093e8:	fa1f f38c 	uxth.w	r3, ip
 80093ec:	eba3 030e 	sub.w	r3, r3, lr
 80093f0:	4403      	add	r3, r0
 80093f2:	0c12      	lsrs	r2, r2, #16
 80093f4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80093f8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80093fc:	b29b      	uxth	r3, r3
 80093fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009402:	45c1      	cmp	r9, r8
 8009404:	f841 3b04 	str.w	r3, [r1], #4
 8009408:	ea4f 4022 	mov.w	r0, r2, asr #16
 800940c:	d2e6      	bcs.n	80093dc <quorem+0xa4>
 800940e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009412:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009416:	b922      	cbnz	r2, 8009422 <quorem+0xea>
 8009418:	3b04      	subs	r3, #4
 800941a:	429d      	cmp	r5, r3
 800941c:	461a      	mov	r2, r3
 800941e:	d30b      	bcc.n	8009438 <quorem+0x100>
 8009420:	613c      	str	r4, [r7, #16]
 8009422:	3601      	adds	r6, #1
 8009424:	4630      	mov	r0, r6
 8009426:	b003      	add	sp, #12
 8009428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800942c:	6812      	ldr	r2, [r2, #0]
 800942e:	3b04      	subs	r3, #4
 8009430:	2a00      	cmp	r2, #0
 8009432:	d1cb      	bne.n	80093cc <quorem+0x94>
 8009434:	3c01      	subs	r4, #1
 8009436:	e7c6      	b.n	80093c6 <quorem+0x8e>
 8009438:	6812      	ldr	r2, [r2, #0]
 800943a:	3b04      	subs	r3, #4
 800943c:	2a00      	cmp	r2, #0
 800943e:	d1ef      	bne.n	8009420 <quorem+0xe8>
 8009440:	3c01      	subs	r4, #1
 8009442:	e7ea      	b.n	800941a <quorem+0xe2>
 8009444:	2000      	movs	r0, #0
 8009446:	e7ee      	b.n	8009426 <quorem+0xee>

08009448 <_dtoa_r>:
 8009448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800944c:	69c7      	ldr	r7, [r0, #28]
 800944e:	b099      	sub	sp, #100	@ 0x64
 8009450:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009454:	ec55 4b10 	vmov	r4, r5, d0
 8009458:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800945a:	9109      	str	r1, [sp, #36]	@ 0x24
 800945c:	4683      	mov	fp, r0
 800945e:	920e      	str	r2, [sp, #56]	@ 0x38
 8009460:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009462:	b97f      	cbnz	r7, 8009484 <_dtoa_r+0x3c>
 8009464:	2010      	movs	r0, #16
 8009466:	f000 fdfd 	bl	800a064 <malloc>
 800946a:	4602      	mov	r2, r0
 800946c:	f8cb 001c 	str.w	r0, [fp, #28]
 8009470:	b920      	cbnz	r0, 800947c <_dtoa_r+0x34>
 8009472:	4ba7      	ldr	r3, [pc, #668]	@ (8009710 <_dtoa_r+0x2c8>)
 8009474:	21ef      	movs	r1, #239	@ 0xef
 8009476:	48a7      	ldr	r0, [pc, #668]	@ (8009714 <_dtoa_r+0x2cc>)
 8009478:	f002 fdfe 	bl	800c078 <__assert_func>
 800947c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009480:	6007      	str	r7, [r0, #0]
 8009482:	60c7      	str	r7, [r0, #12]
 8009484:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009488:	6819      	ldr	r1, [r3, #0]
 800948a:	b159      	cbz	r1, 80094a4 <_dtoa_r+0x5c>
 800948c:	685a      	ldr	r2, [r3, #4]
 800948e:	604a      	str	r2, [r1, #4]
 8009490:	2301      	movs	r3, #1
 8009492:	4093      	lsls	r3, r2
 8009494:	608b      	str	r3, [r1, #8]
 8009496:	4658      	mov	r0, fp
 8009498:	f000 feda 	bl	800a250 <_Bfree>
 800949c:	f8db 301c 	ldr.w	r3, [fp, #28]
 80094a0:	2200      	movs	r2, #0
 80094a2:	601a      	str	r2, [r3, #0]
 80094a4:	1e2b      	subs	r3, r5, #0
 80094a6:	bfb9      	ittee	lt
 80094a8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80094ac:	9303      	strlt	r3, [sp, #12]
 80094ae:	2300      	movge	r3, #0
 80094b0:	6033      	strge	r3, [r6, #0]
 80094b2:	9f03      	ldr	r7, [sp, #12]
 80094b4:	4b98      	ldr	r3, [pc, #608]	@ (8009718 <_dtoa_r+0x2d0>)
 80094b6:	bfbc      	itt	lt
 80094b8:	2201      	movlt	r2, #1
 80094ba:	6032      	strlt	r2, [r6, #0]
 80094bc:	43bb      	bics	r3, r7
 80094be:	d112      	bne.n	80094e6 <_dtoa_r+0x9e>
 80094c0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80094c2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80094c6:	6013      	str	r3, [r2, #0]
 80094c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80094cc:	4323      	orrs	r3, r4
 80094ce:	f000 854d 	beq.w	8009f6c <_dtoa_r+0xb24>
 80094d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80094d4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800972c <_dtoa_r+0x2e4>
 80094d8:	2b00      	cmp	r3, #0
 80094da:	f000 854f 	beq.w	8009f7c <_dtoa_r+0xb34>
 80094de:	f10a 0303 	add.w	r3, sl, #3
 80094e2:	f000 bd49 	b.w	8009f78 <_dtoa_r+0xb30>
 80094e6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80094ea:	2200      	movs	r2, #0
 80094ec:	ec51 0b17 	vmov	r0, r1, d7
 80094f0:	2300      	movs	r3, #0
 80094f2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80094f6:	f7f7 fb0f 	bl	8000b18 <__aeabi_dcmpeq>
 80094fa:	4680      	mov	r8, r0
 80094fc:	b158      	cbz	r0, 8009516 <_dtoa_r+0xce>
 80094fe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009500:	2301      	movs	r3, #1
 8009502:	6013      	str	r3, [r2, #0]
 8009504:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009506:	b113      	cbz	r3, 800950e <_dtoa_r+0xc6>
 8009508:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800950a:	4b84      	ldr	r3, [pc, #528]	@ (800971c <_dtoa_r+0x2d4>)
 800950c:	6013      	str	r3, [r2, #0]
 800950e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009730 <_dtoa_r+0x2e8>
 8009512:	f000 bd33 	b.w	8009f7c <_dtoa_r+0xb34>
 8009516:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800951a:	aa16      	add	r2, sp, #88	@ 0x58
 800951c:	a917      	add	r1, sp, #92	@ 0x5c
 800951e:	4658      	mov	r0, fp
 8009520:	f001 fa3a 	bl	800a998 <__d2b>
 8009524:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009528:	4681      	mov	r9, r0
 800952a:	2e00      	cmp	r6, #0
 800952c:	d077      	beq.n	800961e <_dtoa_r+0x1d6>
 800952e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009530:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009534:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009538:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800953c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009540:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009544:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009548:	4619      	mov	r1, r3
 800954a:	2200      	movs	r2, #0
 800954c:	4b74      	ldr	r3, [pc, #464]	@ (8009720 <_dtoa_r+0x2d8>)
 800954e:	f7f6 fec3 	bl	80002d8 <__aeabi_dsub>
 8009552:	a369      	add	r3, pc, #420	@ (adr r3, 80096f8 <_dtoa_r+0x2b0>)
 8009554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009558:	f7f7 f876 	bl	8000648 <__aeabi_dmul>
 800955c:	a368      	add	r3, pc, #416	@ (adr r3, 8009700 <_dtoa_r+0x2b8>)
 800955e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009562:	f7f6 febb 	bl	80002dc <__adddf3>
 8009566:	4604      	mov	r4, r0
 8009568:	4630      	mov	r0, r6
 800956a:	460d      	mov	r5, r1
 800956c:	f7f7 f802 	bl	8000574 <__aeabi_i2d>
 8009570:	a365      	add	r3, pc, #404	@ (adr r3, 8009708 <_dtoa_r+0x2c0>)
 8009572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009576:	f7f7 f867 	bl	8000648 <__aeabi_dmul>
 800957a:	4602      	mov	r2, r0
 800957c:	460b      	mov	r3, r1
 800957e:	4620      	mov	r0, r4
 8009580:	4629      	mov	r1, r5
 8009582:	f7f6 feab 	bl	80002dc <__adddf3>
 8009586:	4604      	mov	r4, r0
 8009588:	460d      	mov	r5, r1
 800958a:	f7f7 fb0d 	bl	8000ba8 <__aeabi_d2iz>
 800958e:	2200      	movs	r2, #0
 8009590:	4607      	mov	r7, r0
 8009592:	2300      	movs	r3, #0
 8009594:	4620      	mov	r0, r4
 8009596:	4629      	mov	r1, r5
 8009598:	f7f7 fac8 	bl	8000b2c <__aeabi_dcmplt>
 800959c:	b140      	cbz	r0, 80095b0 <_dtoa_r+0x168>
 800959e:	4638      	mov	r0, r7
 80095a0:	f7f6 ffe8 	bl	8000574 <__aeabi_i2d>
 80095a4:	4622      	mov	r2, r4
 80095a6:	462b      	mov	r3, r5
 80095a8:	f7f7 fab6 	bl	8000b18 <__aeabi_dcmpeq>
 80095ac:	b900      	cbnz	r0, 80095b0 <_dtoa_r+0x168>
 80095ae:	3f01      	subs	r7, #1
 80095b0:	2f16      	cmp	r7, #22
 80095b2:	d851      	bhi.n	8009658 <_dtoa_r+0x210>
 80095b4:	4b5b      	ldr	r3, [pc, #364]	@ (8009724 <_dtoa_r+0x2dc>)
 80095b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80095ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80095c2:	f7f7 fab3 	bl	8000b2c <__aeabi_dcmplt>
 80095c6:	2800      	cmp	r0, #0
 80095c8:	d048      	beq.n	800965c <_dtoa_r+0x214>
 80095ca:	3f01      	subs	r7, #1
 80095cc:	2300      	movs	r3, #0
 80095ce:	9312      	str	r3, [sp, #72]	@ 0x48
 80095d0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80095d2:	1b9b      	subs	r3, r3, r6
 80095d4:	1e5a      	subs	r2, r3, #1
 80095d6:	bf44      	itt	mi
 80095d8:	f1c3 0801 	rsbmi	r8, r3, #1
 80095dc:	2300      	movmi	r3, #0
 80095de:	9208      	str	r2, [sp, #32]
 80095e0:	bf54      	ite	pl
 80095e2:	f04f 0800 	movpl.w	r8, #0
 80095e6:	9308      	strmi	r3, [sp, #32]
 80095e8:	2f00      	cmp	r7, #0
 80095ea:	db39      	blt.n	8009660 <_dtoa_r+0x218>
 80095ec:	9b08      	ldr	r3, [sp, #32]
 80095ee:	970f      	str	r7, [sp, #60]	@ 0x3c
 80095f0:	443b      	add	r3, r7
 80095f2:	9308      	str	r3, [sp, #32]
 80095f4:	2300      	movs	r3, #0
 80095f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80095f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095fa:	2b09      	cmp	r3, #9
 80095fc:	d864      	bhi.n	80096c8 <_dtoa_r+0x280>
 80095fe:	2b05      	cmp	r3, #5
 8009600:	bfc4      	itt	gt
 8009602:	3b04      	subgt	r3, #4
 8009604:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009606:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009608:	f1a3 0302 	sub.w	r3, r3, #2
 800960c:	bfcc      	ite	gt
 800960e:	2400      	movgt	r4, #0
 8009610:	2401      	movle	r4, #1
 8009612:	2b03      	cmp	r3, #3
 8009614:	d863      	bhi.n	80096de <_dtoa_r+0x296>
 8009616:	e8df f003 	tbb	[pc, r3]
 800961a:	372a      	.short	0x372a
 800961c:	5535      	.short	0x5535
 800961e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009622:	441e      	add	r6, r3
 8009624:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009628:	2b20      	cmp	r3, #32
 800962a:	bfc1      	itttt	gt
 800962c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009630:	409f      	lslgt	r7, r3
 8009632:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009636:	fa24 f303 	lsrgt.w	r3, r4, r3
 800963a:	bfd6      	itet	le
 800963c:	f1c3 0320 	rsble	r3, r3, #32
 8009640:	ea47 0003 	orrgt.w	r0, r7, r3
 8009644:	fa04 f003 	lslle.w	r0, r4, r3
 8009648:	f7f6 ff84 	bl	8000554 <__aeabi_ui2d>
 800964c:	2201      	movs	r2, #1
 800964e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009652:	3e01      	subs	r6, #1
 8009654:	9214      	str	r2, [sp, #80]	@ 0x50
 8009656:	e777      	b.n	8009548 <_dtoa_r+0x100>
 8009658:	2301      	movs	r3, #1
 800965a:	e7b8      	b.n	80095ce <_dtoa_r+0x186>
 800965c:	9012      	str	r0, [sp, #72]	@ 0x48
 800965e:	e7b7      	b.n	80095d0 <_dtoa_r+0x188>
 8009660:	427b      	negs	r3, r7
 8009662:	930a      	str	r3, [sp, #40]	@ 0x28
 8009664:	2300      	movs	r3, #0
 8009666:	eba8 0807 	sub.w	r8, r8, r7
 800966a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800966c:	e7c4      	b.n	80095f8 <_dtoa_r+0x1b0>
 800966e:	2300      	movs	r3, #0
 8009670:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009672:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009674:	2b00      	cmp	r3, #0
 8009676:	dc35      	bgt.n	80096e4 <_dtoa_r+0x29c>
 8009678:	2301      	movs	r3, #1
 800967a:	9300      	str	r3, [sp, #0]
 800967c:	9307      	str	r3, [sp, #28]
 800967e:	461a      	mov	r2, r3
 8009680:	920e      	str	r2, [sp, #56]	@ 0x38
 8009682:	e00b      	b.n	800969c <_dtoa_r+0x254>
 8009684:	2301      	movs	r3, #1
 8009686:	e7f3      	b.n	8009670 <_dtoa_r+0x228>
 8009688:	2300      	movs	r3, #0
 800968a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800968c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800968e:	18fb      	adds	r3, r7, r3
 8009690:	9300      	str	r3, [sp, #0]
 8009692:	3301      	adds	r3, #1
 8009694:	2b01      	cmp	r3, #1
 8009696:	9307      	str	r3, [sp, #28]
 8009698:	bfb8      	it	lt
 800969a:	2301      	movlt	r3, #1
 800969c:	f8db 001c 	ldr.w	r0, [fp, #28]
 80096a0:	2100      	movs	r1, #0
 80096a2:	2204      	movs	r2, #4
 80096a4:	f102 0514 	add.w	r5, r2, #20
 80096a8:	429d      	cmp	r5, r3
 80096aa:	d91f      	bls.n	80096ec <_dtoa_r+0x2a4>
 80096ac:	6041      	str	r1, [r0, #4]
 80096ae:	4658      	mov	r0, fp
 80096b0:	f000 fd8e 	bl	800a1d0 <_Balloc>
 80096b4:	4682      	mov	sl, r0
 80096b6:	2800      	cmp	r0, #0
 80096b8:	d13c      	bne.n	8009734 <_dtoa_r+0x2ec>
 80096ba:	4b1b      	ldr	r3, [pc, #108]	@ (8009728 <_dtoa_r+0x2e0>)
 80096bc:	4602      	mov	r2, r0
 80096be:	f240 11af 	movw	r1, #431	@ 0x1af
 80096c2:	e6d8      	b.n	8009476 <_dtoa_r+0x2e>
 80096c4:	2301      	movs	r3, #1
 80096c6:	e7e0      	b.n	800968a <_dtoa_r+0x242>
 80096c8:	2401      	movs	r4, #1
 80096ca:	2300      	movs	r3, #0
 80096cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80096ce:	940b      	str	r4, [sp, #44]	@ 0x2c
 80096d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80096d4:	9300      	str	r3, [sp, #0]
 80096d6:	9307      	str	r3, [sp, #28]
 80096d8:	2200      	movs	r2, #0
 80096da:	2312      	movs	r3, #18
 80096dc:	e7d0      	b.n	8009680 <_dtoa_r+0x238>
 80096de:	2301      	movs	r3, #1
 80096e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80096e2:	e7f5      	b.n	80096d0 <_dtoa_r+0x288>
 80096e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80096e6:	9300      	str	r3, [sp, #0]
 80096e8:	9307      	str	r3, [sp, #28]
 80096ea:	e7d7      	b.n	800969c <_dtoa_r+0x254>
 80096ec:	3101      	adds	r1, #1
 80096ee:	0052      	lsls	r2, r2, #1
 80096f0:	e7d8      	b.n	80096a4 <_dtoa_r+0x25c>
 80096f2:	bf00      	nop
 80096f4:	f3af 8000 	nop.w
 80096f8:	636f4361 	.word	0x636f4361
 80096fc:	3fd287a7 	.word	0x3fd287a7
 8009700:	8b60c8b3 	.word	0x8b60c8b3
 8009704:	3fc68a28 	.word	0x3fc68a28
 8009708:	509f79fb 	.word	0x509f79fb
 800970c:	3fd34413 	.word	0x3fd34413
 8009710:	0800ca2a 	.word	0x0800ca2a
 8009714:	0800ca41 	.word	0x0800ca41
 8009718:	7ff00000 	.word	0x7ff00000
 800971c:	0800c9f5 	.word	0x0800c9f5
 8009720:	3ff80000 	.word	0x3ff80000
 8009724:	0800cb38 	.word	0x0800cb38
 8009728:	0800ca99 	.word	0x0800ca99
 800972c:	0800ca26 	.word	0x0800ca26
 8009730:	0800c9f4 	.word	0x0800c9f4
 8009734:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009738:	6018      	str	r0, [r3, #0]
 800973a:	9b07      	ldr	r3, [sp, #28]
 800973c:	2b0e      	cmp	r3, #14
 800973e:	f200 80a4 	bhi.w	800988a <_dtoa_r+0x442>
 8009742:	2c00      	cmp	r4, #0
 8009744:	f000 80a1 	beq.w	800988a <_dtoa_r+0x442>
 8009748:	2f00      	cmp	r7, #0
 800974a:	dd33      	ble.n	80097b4 <_dtoa_r+0x36c>
 800974c:	4bad      	ldr	r3, [pc, #692]	@ (8009a04 <_dtoa_r+0x5bc>)
 800974e:	f007 020f 	and.w	r2, r7, #15
 8009752:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009756:	ed93 7b00 	vldr	d7, [r3]
 800975a:	05f8      	lsls	r0, r7, #23
 800975c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009760:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009764:	d516      	bpl.n	8009794 <_dtoa_r+0x34c>
 8009766:	4ba8      	ldr	r3, [pc, #672]	@ (8009a08 <_dtoa_r+0x5c0>)
 8009768:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800976c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009770:	f7f7 f894 	bl	800089c <__aeabi_ddiv>
 8009774:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009778:	f004 040f 	and.w	r4, r4, #15
 800977c:	2603      	movs	r6, #3
 800977e:	4da2      	ldr	r5, [pc, #648]	@ (8009a08 <_dtoa_r+0x5c0>)
 8009780:	b954      	cbnz	r4, 8009798 <_dtoa_r+0x350>
 8009782:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009786:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800978a:	f7f7 f887 	bl	800089c <__aeabi_ddiv>
 800978e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009792:	e028      	b.n	80097e6 <_dtoa_r+0x39e>
 8009794:	2602      	movs	r6, #2
 8009796:	e7f2      	b.n	800977e <_dtoa_r+0x336>
 8009798:	07e1      	lsls	r1, r4, #31
 800979a:	d508      	bpl.n	80097ae <_dtoa_r+0x366>
 800979c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80097a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80097a4:	f7f6 ff50 	bl	8000648 <__aeabi_dmul>
 80097a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80097ac:	3601      	adds	r6, #1
 80097ae:	1064      	asrs	r4, r4, #1
 80097b0:	3508      	adds	r5, #8
 80097b2:	e7e5      	b.n	8009780 <_dtoa_r+0x338>
 80097b4:	f000 80d2 	beq.w	800995c <_dtoa_r+0x514>
 80097b8:	427c      	negs	r4, r7
 80097ba:	4b92      	ldr	r3, [pc, #584]	@ (8009a04 <_dtoa_r+0x5bc>)
 80097bc:	4d92      	ldr	r5, [pc, #584]	@ (8009a08 <_dtoa_r+0x5c0>)
 80097be:	f004 020f 	and.w	r2, r4, #15
 80097c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80097ce:	f7f6 ff3b 	bl	8000648 <__aeabi_dmul>
 80097d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097d6:	1124      	asrs	r4, r4, #4
 80097d8:	2300      	movs	r3, #0
 80097da:	2602      	movs	r6, #2
 80097dc:	2c00      	cmp	r4, #0
 80097de:	f040 80b2 	bne.w	8009946 <_dtoa_r+0x4fe>
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d1d3      	bne.n	800978e <_dtoa_r+0x346>
 80097e6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80097e8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	f000 80b7 	beq.w	8009960 <_dtoa_r+0x518>
 80097f2:	4b86      	ldr	r3, [pc, #536]	@ (8009a0c <_dtoa_r+0x5c4>)
 80097f4:	2200      	movs	r2, #0
 80097f6:	4620      	mov	r0, r4
 80097f8:	4629      	mov	r1, r5
 80097fa:	f7f7 f997 	bl	8000b2c <__aeabi_dcmplt>
 80097fe:	2800      	cmp	r0, #0
 8009800:	f000 80ae 	beq.w	8009960 <_dtoa_r+0x518>
 8009804:	9b07      	ldr	r3, [sp, #28]
 8009806:	2b00      	cmp	r3, #0
 8009808:	f000 80aa 	beq.w	8009960 <_dtoa_r+0x518>
 800980c:	9b00      	ldr	r3, [sp, #0]
 800980e:	2b00      	cmp	r3, #0
 8009810:	dd37      	ble.n	8009882 <_dtoa_r+0x43a>
 8009812:	1e7b      	subs	r3, r7, #1
 8009814:	9304      	str	r3, [sp, #16]
 8009816:	4620      	mov	r0, r4
 8009818:	4b7d      	ldr	r3, [pc, #500]	@ (8009a10 <_dtoa_r+0x5c8>)
 800981a:	2200      	movs	r2, #0
 800981c:	4629      	mov	r1, r5
 800981e:	f7f6 ff13 	bl	8000648 <__aeabi_dmul>
 8009822:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009826:	9c00      	ldr	r4, [sp, #0]
 8009828:	3601      	adds	r6, #1
 800982a:	4630      	mov	r0, r6
 800982c:	f7f6 fea2 	bl	8000574 <__aeabi_i2d>
 8009830:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009834:	f7f6 ff08 	bl	8000648 <__aeabi_dmul>
 8009838:	4b76      	ldr	r3, [pc, #472]	@ (8009a14 <_dtoa_r+0x5cc>)
 800983a:	2200      	movs	r2, #0
 800983c:	f7f6 fd4e 	bl	80002dc <__adddf3>
 8009840:	4605      	mov	r5, r0
 8009842:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009846:	2c00      	cmp	r4, #0
 8009848:	f040 808d 	bne.w	8009966 <_dtoa_r+0x51e>
 800984c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009850:	4b71      	ldr	r3, [pc, #452]	@ (8009a18 <_dtoa_r+0x5d0>)
 8009852:	2200      	movs	r2, #0
 8009854:	f7f6 fd40 	bl	80002d8 <__aeabi_dsub>
 8009858:	4602      	mov	r2, r0
 800985a:	460b      	mov	r3, r1
 800985c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009860:	462a      	mov	r2, r5
 8009862:	4633      	mov	r3, r6
 8009864:	f7f7 f980 	bl	8000b68 <__aeabi_dcmpgt>
 8009868:	2800      	cmp	r0, #0
 800986a:	f040 828b 	bne.w	8009d84 <_dtoa_r+0x93c>
 800986e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009872:	462a      	mov	r2, r5
 8009874:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009878:	f7f7 f958 	bl	8000b2c <__aeabi_dcmplt>
 800987c:	2800      	cmp	r0, #0
 800987e:	f040 8128 	bne.w	8009ad2 <_dtoa_r+0x68a>
 8009882:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009886:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800988a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800988c:	2b00      	cmp	r3, #0
 800988e:	f2c0 815a 	blt.w	8009b46 <_dtoa_r+0x6fe>
 8009892:	2f0e      	cmp	r7, #14
 8009894:	f300 8157 	bgt.w	8009b46 <_dtoa_r+0x6fe>
 8009898:	4b5a      	ldr	r3, [pc, #360]	@ (8009a04 <_dtoa_r+0x5bc>)
 800989a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800989e:	ed93 7b00 	vldr	d7, [r3]
 80098a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	ed8d 7b00 	vstr	d7, [sp]
 80098aa:	da03      	bge.n	80098b4 <_dtoa_r+0x46c>
 80098ac:	9b07      	ldr	r3, [sp, #28]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	f340 8101 	ble.w	8009ab6 <_dtoa_r+0x66e>
 80098b4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80098b8:	4656      	mov	r6, sl
 80098ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80098be:	4620      	mov	r0, r4
 80098c0:	4629      	mov	r1, r5
 80098c2:	f7f6 ffeb 	bl	800089c <__aeabi_ddiv>
 80098c6:	f7f7 f96f 	bl	8000ba8 <__aeabi_d2iz>
 80098ca:	4680      	mov	r8, r0
 80098cc:	f7f6 fe52 	bl	8000574 <__aeabi_i2d>
 80098d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80098d4:	f7f6 feb8 	bl	8000648 <__aeabi_dmul>
 80098d8:	4602      	mov	r2, r0
 80098da:	460b      	mov	r3, r1
 80098dc:	4620      	mov	r0, r4
 80098de:	4629      	mov	r1, r5
 80098e0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80098e4:	f7f6 fcf8 	bl	80002d8 <__aeabi_dsub>
 80098e8:	f806 4b01 	strb.w	r4, [r6], #1
 80098ec:	9d07      	ldr	r5, [sp, #28]
 80098ee:	eba6 040a 	sub.w	r4, r6, sl
 80098f2:	42a5      	cmp	r5, r4
 80098f4:	4602      	mov	r2, r0
 80098f6:	460b      	mov	r3, r1
 80098f8:	f040 8117 	bne.w	8009b2a <_dtoa_r+0x6e2>
 80098fc:	f7f6 fcee 	bl	80002dc <__adddf3>
 8009900:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009904:	4604      	mov	r4, r0
 8009906:	460d      	mov	r5, r1
 8009908:	f7f7 f92e 	bl	8000b68 <__aeabi_dcmpgt>
 800990c:	2800      	cmp	r0, #0
 800990e:	f040 80f9 	bne.w	8009b04 <_dtoa_r+0x6bc>
 8009912:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009916:	4620      	mov	r0, r4
 8009918:	4629      	mov	r1, r5
 800991a:	f7f7 f8fd 	bl	8000b18 <__aeabi_dcmpeq>
 800991e:	b118      	cbz	r0, 8009928 <_dtoa_r+0x4e0>
 8009920:	f018 0f01 	tst.w	r8, #1
 8009924:	f040 80ee 	bne.w	8009b04 <_dtoa_r+0x6bc>
 8009928:	4649      	mov	r1, r9
 800992a:	4658      	mov	r0, fp
 800992c:	f000 fc90 	bl	800a250 <_Bfree>
 8009930:	2300      	movs	r3, #0
 8009932:	7033      	strb	r3, [r6, #0]
 8009934:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009936:	3701      	adds	r7, #1
 8009938:	601f      	str	r7, [r3, #0]
 800993a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800993c:	2b00      	cmp	r3, #0
 800993e:	f000 831d 	beq.w	8009f7c <_dtoa_r+0xb34>
 8009942:	601e      	str	r6, [r3, #0]
 8009944:	e31a      	b.n	8009f7c <_dtoa_r+0xb34>
 8009946:	07e2      	lsls	r2, r4, #31
 8009948:	d505      	bpl.n	8009956 <_dtoa_r+0x50e>
 800994a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800994e:	f7f6 fe7b 	bl	8000648 <__aeabi_dmul>
 8009952:	3601      	adds	r6, #1
 8009954:	2301      	movs	r3, #1
 8009956:	1064      	asrs	r4, r4, #1
 8009958:	3508      	adds	r5, #8
 800995a:	e73f      	b.n	80097dc <_dtoa_r+0x394>
 800995c:	2602      	movs	r6, #2
 800995e:	e742      	b.n	80097e6 <_dtoa_r+0x39e>
 8009960:	9c07      	ldr	r4, [sp, #28]
 8009962:	9704      	str	r7, [sp, #16]
 8009964:	e761      	b.n	800982a <_dtoa_r+0x3e2>
 8009966:	4b27      	ldr	r3, [pc, #156]	@ (8009a04 <_dtoa_r+0x5bc>)
 8009968:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800996a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800996e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009972:	4454      	add	r4, sl
 8009974:	2900      	cmp	r1, #0
 8009976:	d053      	beq.n	8009a20 <_dtoa_r+0x5d8>
 8009978:	4928      	ldr	r1, [pc, #160]	@ (8009a1c <_dtoa_r+0x5d4>)
 800997a:	2000      	movs	r0, #0
 800997c:	f7f6 ff8e 	bl	800089c <__aeabi_ddiv>
 8009980:	4633      	mov	r3, r6
 8009982:	462a      	mov	r2, r5
 8009984:	f7f6 fca8 	bl	80002d8 <__aeabi_dsub>
 8009988:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800998c:	4656      	mov	r6, sl
 800998e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009992:	f7f7 f909 	bl	8000ba8 <__aeabi_d2iz>
 8009996:	4605      	mov	r5, r0
 8009998:	f7f6 fdec 	bl	8000574 <__aeabi_i2d>
 800999c:	4602      	mov	r2, r0
 800999e:	460b      	mov	r3, r1
 80099a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099a4:	f7f6 fc98 	bl	80002d8 <__aeabi_dsub>
 80099a8:	3530      	adds	r5, #48	@ 0x30
 80099aa:	4602      	mov	r2, r0
 80099ac:	460b      	mov	r3, r1
 80099ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80099b2:	f806 5b01 	strb.w	r5, [r6], #1
 80099b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80099ba:	f7f7 f8b7 	bl	8000b2c <__aeabi_dcmplt>
 80099be:	2800      	cmp	r0, #0
 80099c0:	d171      	bne.n	8009aa6 <_dtoa_r+0x65e>
 80099c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80099c6:	4911      	ldr	r1, [pc, #68]	@ (8009a0c <_dtoa_r+0x5c4>)
 80099c8:	2000      	movs	r0, #0
 80099ca:	f7f6 fc85 	bl	80002d8 <__aeabi_dsub>
 80099ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80099d2:	f7f7 f8ab 	bl	8000b2c <__aeabi_dcmplt>
 80099d6:	2800      	cmp	r0, #0
 80099d8:	f040 8095 	bne.w	8009b06 <_dtoa_r+0x6be>
 80099dc:	42a6      	cmp	r6, r4
 80099de:	f43f af50 	beq.w	8009882 <_dtoa_r+0x43a>
 80099e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80099e6:	4b0a      	ldr	r3, [pc, #40]	@ (8009a10 <_dtoa_r+0x5c8>)
 80099e8:	2200      	movs	r2, #0
 80099ea:	f7f6 fe2d 	bl	8000648 <__aeabi_dmul>
 80099ee:	4b08      	ldr	r3, [pc, #32]	@ (8009a10 <_dtoa_r+0x5c8>)
 80099f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80099f4:	2200      	movs	r2, #0
 80099f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099fa:	f7f6 fe25 	bl	8000648 <__aeabi_dmul>
 80099fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a02:	e7c4      	b.n	800998e <_dtoa_r+0x546>
 8009a04:	0800cb38 	.word	0x0800cb38
 8009a08:	0800cb10 	.word	0x0800cb10
 8009a0c:	3ff00000 	.word	0x3ff00000
 8009a10:	40240000 	.word	0x40240000
 8009a14:	401c0000 	.word	0x401c0000
 8009a18:	40140000 	.word	0x40140000
 8009a1c:	3fe00000 	.word	0x3fe00000
 8009a20:	4631      	mov	r1, r6
 8009a22:	4628      	mov	r0, r5
 8009a24:	f7f6 fe10 	bl	8000648 <__aeabi_dmul>
 8009a28:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009a2c:	9415      	str	r4, [sp, #84]	@ 0x54
 8009a2e:	4656      	mov	r6, sl
 8009a30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a34:	f7f7 f8b8 	bl	8000ba8 <__aeabi_d2iz>
 8009a38:	4605      	mov	r5, r0
 8009a3a:	f7f6 fd9b 	bl	8000574 <__aeabi_i2d>
 8009a3e:	4602      	mov	r2, r0
 8009a40:	460b      	mov	r3, r1
 8009a42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a46:	f7f6 fc47 	bl	80002d8 <__aeabi_dsub>
 8009a4a:	3530      	adds	r5, #48	@ 0x30
 8009a4c:	f806 5b01 	strb.w	r5, [r6], #1
 8009a50:	4602      	mov	r2, r0
 8009a52:	460b      	mov	r3, r1
 8009a54:	42a6      	cmp	r6, r4
 8009a56:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009a5a:	f04f 0200 	mov.w	r2, #0
 8009a5e:	d124      	bne.n	8009aaa <_dtoa_r+0x662>
 8009a60:	4bac      	ldr	r3, [pc, #688]	@ (8009d14 <_dtoa_r+0x8cc>)
 8009a62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009a66:	f7f6 fc39 	bl	80002dc <__adddf3>
 8009a6a:	4602      	mov	r2, r0
 8009a6c:	460b      	mov	r3, r1
 8009a6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a72:	f7f7 f879 	bl	8000b68 <__aeabi_dcmpgt>
 8009a76:	2800      	cmp	r0, #0
 8009a78:	d145      	bne.n	8009b06 <_dtoa_r+0x6be>
 8009a7a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009a7e:	49a5      	ldr	r1, [pc, #660]	@ (8009d14 <_dtoa_r+0x8cc>)
 8009a80:	2000      	movs	r0, #0
 8009a82:	f7f6 fc29 	bl	80002d8 <__aeabi_dsub>
 8009a86:	4602      	mov	r2, r0
 8009a88:	460b      	mov	r3, r1
 8009a8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a8e:	f7f7 f84d 	bl	8000b2c <__aeabi_dcmplt>
 8009a92:	2800      	cmp	r0, #0
 8009a94:	f43f aef5 	beq.w	8009882 <_dtoa_r+0x43a>
 8009a98:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009a9a:	1e73      	subs	r3, r6, #1
 8009a9c:	9315      	str	r3, [sp, #84]	@ 0x54
 8009a9e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009aa2:	2b30      	cmp	r3, #48	@ 0x30
 8009aa4:	d0f8      	beq.n	8009a98 <_dtoa_r+0x650>
 8009aa6:	9f04      	ldr	r7, [sp, #16]
 8009aa8:	e73e      	b.n	8009928 <_dtoa_r+0x4e0>
 8009aaa:	4b9b      	ldr	r3, [pc, #620]	@ (8009d18 <_dtoa_r+0x8d0>)
 8009aac:	f7f6 fdcc 	bl	8000648 <__aeabi_dmul>
 8009ab0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ab4:	e7bc      	b.n	8009a30 <_dtoa_r+0x5e8>
 8009ab6:	d10c      	bne.n	8009ad2 <_dtoa_r+0x68a>
 8009ab8:	4b98      	ldr	r3, [pc, #608]	@ (8009d1c <_dtoa_r+0x8d4>)
 8009aba:	2200      	movs	r2, #0
 8009abc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009ac0:	f7f6 fdc2 	bl	8000648 <__aeabi_dmul>
 8009ac4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ac8:	f7f7 f844 	bl	8000b54 <__aeabi_dcmpge>
 8009acc:	2800      	cmp	r0, #0
 8009ace:	f000 8157 	beq.w	8009d80 <_dtoa_r+0x938>
 8009ad2:	2400      	movs	r4, #0
 8009ad4:	4625      	mov	r5, r4
 8009ad6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ad8:	43db      	mvns	r3, r3
 8009ada:	9304      	str	r3, [sp, #16]
 8009adc:	4656      	mov	r6, sl
 8009ade:	2700      	movs	r7, #0
 8009ae0:	4621      	mov	r1, r4
 8009ae2:	4658      	mov	r0, fp
 8009ae4:	f000 fbb4 	bl	800a250 <_Bfree>
 8009ae8:	2d00      	cmp	r5, #0
 8009aea:	d0dc      	beq.n	8009aa6 <_dtoa_r+0x65e>
 8009aec:	b12f      	cbz	r7, 8009afa <_dtoa_r+0x6b2>
 8009aee:	42af      	cmp	r7, r5
 8009af0:	d003      	beq.n	8009afa <_dtoa_r+0x6b2>
 8009af2:	4639      	mov	r1, r7
 8009af4:	4658      	mov	r0, fp
 8009af6:	f000 fbab 	bl	800a250 <_Bfree>
 8009afa:	4629      	mov	r1, r5
 8009afc:	4658      	mov	r0, fp
 8009afe:	f000 fba7 	bl	800a250 <_Bfree>
 8009b02:	e7d0      	b.n	8009aa6 <_dtoa_r+0x65e>
 8009b04:	9704      	str	r7, [sp, #16]
 8009b06:	4633      	mov	r3, r6
 8009b08:	461e      	mov	r6, r3
 8009b0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009b0e:	2a39      	cmp	r2, #57	@ 0x39
 8009b10:	d107      	bne.n	8009b22 <_dtoa_r+0x6da>
 8009b12:	459a      	cmp	sl, r3
 8009b14:	d1f8      	bne.n	8009b08 <_dtoa_r+0x6c0>
 8009b16:	9a04      	ldr	r2, [sp, #16]
 8009b18:	3201      	adds	r2, #1
 8009b1a:	9204      	str	r2, [sp, #16]
 8009b1c:	2230      	movs	r2, #48	@ 0x30
 8009b1e:	f88a 2000 	strb.w	r2, [sl]
 8009b22:	781a      	ldrb	r2, [r3, #0]
 8009b24:	3201      	adds	r2, #1
 8009b26:	701a      	strb	r2, [r3, #0]
 8009b28:	e7bd      	b.n	8009aa6 <_dtoa_r+0x65e>
 8009b2a:	4b7b      	ldr	r3, [pc, #492]	@ (8009d18 <_dtoa_r+0x8d0>)
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	f7f6 fd8b 	bl	8000648 <__aeabi_dmul>
 8009b32:	2200      	movs	r2, #0
 8009b34:	2300      	movs	r3, #0
 8009b36:	4604      	mov	r4, r0
 8009b38:	460d      	mov	r5, r1
 8009b3a:	f7f6 ffed 	bl	8000b18 <__aeabi_dcmpeq>
 8009b3e:	2800      	cmp	r0, #0
 8009b40:	f43f aebb 	beq.w	80098ba <_dtoa_r+0x472>
 8009b44:	e6f0      	b.n	8009928 <_dtoa_r+0x4e0>
 8009b46:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009b48:	2a00      	cmp	r2, #0
 8009b4a:	f000 80db 	beq.w	8009d04 <_dtoa_r+0x8bc>
 8009b4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b50:	2a01      	cmp	r2, #1
 8009b52:	f300 80bf 	bgt.w	8009cd4 <_dtoa_r+0x88c>
 8009b56:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009b58:	2a00      	cmp	r2, #0
 8009b5a:	f000 80b7 	beq.w	8009ccc <_dtoa_r+0x884>
 8009b5e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009b62:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009b64:	4646      	mov	r6, r8
 8009b66:	9a08      	ldr	r2, [sp, #32]
 8009b68:	2101      	movs	r1, #1
 8009b6a:	441a      	add	r2, r3
 8009b6c:	4658      	mov	r0, fp
 8009b6e:	4498      	add	r8, r3
 8009b70:	9208      	str	r2, [sp, #32]
 8009b72:	f000 fc6b 	bl	800a44c <__i2b>
 8009b76:	4605      	mov	r5, r0
 8009b78:	b15e      	cbz	r6, 8009b92 <_dtoa_r+0x74a>
 8009b7a:	9b08      	ldr	r3, [sp, #32]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	dd08      	ble.n	8009b92 <_dtoa_r+0x74a>
 8009b80:	42b3      	cmp	r3, r6
 8009b82:	9a08      	ldr	r2, [sp, #32]
 8009b84:	bfa8      	it	ge
 8009b86:	4633      	movge	r3, r6
 8009b88:	eba8 0803 	sub.w	r8, r8, r3
 8009b8c:	1af6      	subs	r6, r6, r3
 8009b8e:	1ad3      	subs	r3, r2, r3
 8009b90:	9308      	str	r3, [sp, #32]
 8009b92:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b94:	b1f3      	cbz	r3, 8009bd4 <_dtoa_r+0x78c>
 8009b96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	f000 80b7 	beq.w	8009d0c <_dtoa_r+0x8c4>
 8009b9e:	b18c      	cbz	r4, 8009bc4 <_dtoa_r+0x77c>
 8009ba0:	4629      	mov	r1, r5
 8009ba2:	4622      	mov	r2, r4
 8009ba4:	4658      	mov	r0, fp
 8009ba6:	f000 fd11 	bl	800a5cc <__pow5mult>
 8009baa:	464a      	mov	r2, r9
 8009bac:	4601      	mov	r1, r0
 8009bae:	4605      	mov	r5, r0
 8009bb0:	4658      	mov	r0, fp
 8009bb2:	f000 fc61 	bl	800a478 <__multiply>
 8009bb6:	4649      	mov	r1, r9
 8009bb8:	9004      	str	r0, [sp, #16]
 8009bba:	4658      	mov	r0, fp
 8009bbc:	f000 fb48 	bl	800a250 <_Bfree>
 8009bc0:	9b04      	ldr	r3, [sp, #16]
 8009bc2:	4699      	mov	r9, r3
 8009bc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009bc6:	1b1a      	subs	r2, r3, r4
 8009bc8:	d004      	beq.n	8009bd4 <_dtoa_r+0x78c>
 8009bca:	4649      	mov	r1, r9
 8009bcc:	4658      	mov	r0, fp
 8009bce:	f000 fcfd 	bl	800a5cc <__pow5mult>
 8009bd2:	4681      	mov	r9, r0
 8009bd4:	2101      	movs	r1, #1
 8009bd6:	4658      	mov	r0, fp
 8009bd8:	f000 fc38 	bl	800a44c <__i2b>
 8009bdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009bde:	4604      	mov	r4, r0
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	f000 81cf 	beq.w	8009f84 <_dtoa_r+0xb3c>
 8009be6:	461a      	mov	r2, r3
 8009be8:	4601      	mov	r1, r0
 8009bea:	4658      	mov	r0, fp
 8009bec:	f000 fcee 	bl	800a5cc <__pow5mult>
 8009bf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bf2:	2b01      	cmp	r3, #1
 8009bf4:	4604      	mov	r4, r0
 8009bf6:	f300 8095 	bgt.w	8009d24 <_dtoa_r+0x8dc>
 8009bfa:	9b02      	ldr	r3, [sp, #8]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	f040 8087 	bne.w	8009d10 <_dtoa_r+0x8c8>
 8009c02:	9b03      	ldr	r3, [sp, #12]
 8009c04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	f040 8089 	bne.w	8009d20 <_dtoa_r+0x8d8>
 8009c0e:	9b03      	ldr	r3, [sp, #12]
 8009c10:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009c14:	0d1b      	lsrs	r3, r3, #20
 8009c16:	051b      	lsls	r3, r3, #20
 8009c18:	b12b      	cbz	r3, 8009c26 <_dtoa_r+0x7de>
 8009c1a:	9b08      	ldr	r3, [sp, #32]
 8009c1c:	3301      	adds	r3, #1
 8009c1e:	9308      	str	r3, [sp, #32]
 8009c20:	f108 0801 	add.w	r8, r8, #1
 8009c24:	2301      	movs	r3, #1
 8009c26:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	f000 81b0 	beq.w	8009f90 <_dtoa_r+0xb48>
 8009c30:	6923      	ldr	r3, [r4, #16]
 8009c32:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009c36:	6918      	ldr	r0, [r3, #16]
 8009c38:	f000 fbbc 	bl	800a3b4 <__hi0bits>
 8009c3c:	f1c0 0020 	rsb	r0, r0, #32
 8009c40:	9b08      	ldr	r3, [sp, #32]
 8009c42:	4418      	add	r0, r3
 8009c44:	f010 001f 	ands.w	r0, r0, #31
 8009c48:	d077      	beq.n	8009d3a <_dtoa_r+0x8f2>
 8009c4a:	f1c0 0320 	rsb	r3, r0, #32
 8009c4e:	2b04      	cmp	r3, #4
 8009c50:	dd6b      	ble.n	8009d2a <_dtoa_r+0x8e2>
 8009c52:	9b08      	ldr	r3, [sp, #32]
 8009c54:	f1c0 001c 	rsb	r0, r0, #28
 8009c58:	4403      	add	r3, r0
 8009c5a:	4480      	add	r8, r0
 8009c5c:	4406      	add	r6, r0
 8009c5e:	9308      	str	r3, [sp, #32]
 8009c60:	f1b8 0f00 	cmp.w	r8, #0
 8009c64:	dd05      	ble.n	8009c72 <_dtoa_r+0x82a>
 8009c66:	4649      	mov	r1, r9
 8009c68:	4642      	mov	r2, r8
 8009c6a:	4658      	mov	r0, fp
 8009c6c:	f000 fd08 	bl	800a680 <__lshift>
 8009c70:	4681      	mov	r9, r0
 8009c72:	9b08      	ldr	r3, [sp, #32]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	dd05      	ble.n	8009c84 <_dtoa_r+0x83c>
 8009c78:	4621      	mov	r1, r4
 8009c7a:	461a      	mov	r2, r3
 8009c7c:	4658      	mov	r0, fp
 8009c7e:	f000 fcff 	bl	800a680 <__lshift>
 8009c82:	4604      	mov	r4, r0
 8009c84:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d059      	beq.n	8009d3e <_dtoa_r+0x8f6>
 8009c8a:	4621      	mov	r1, r4
 8009c8c:	4648      	mov	r0, r9
 8009c8e:	f000 fd63 	bl	800a758 <__mcmp>
 8009c92:	2800      	cmp	r0, #0
 8009c94:	da53      	bge.n	8009d3e <_dtoa_r+0x8f6>
 8009c96:	1e7b      	subs	r3, r7, #1
 8009c98:	9304      	str	r3, [sp, #16]
 8009c9a:	4649      	mov	r1, r9
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	220a      	movs	r2, #10
 8009ca0:	4658      	mov	r0, fp
 8009ca2:	f000 faf7 	bl	800a294 <__multadd>
 8009ca6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ca8:	4681      	mov	r9, r0
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	f000 8172 	beq.w	8009f94 <_dtoa_r+0xb4c>
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	4629      	mov	r1, r5
 8009cb4:	220a      	movs	r2, #10
 8009cb6:	4658      	mov	r0, fp
 8009cb8:	f000 faec 	bl	800a294 <__multadd>
 8009cbc:	9b00      	ldr	r3, [sp, #0]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	4605      	mov	r5, r0
 8009cc2:	dc67      	bgt.n	8009d94 <_dtoa_r+0x94c>
 8009cc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cc6:	2b02      	cmp	r3, #2
 8009cc8:	dc41      	bgt.n	8009d4e <_dtoa_r+0x906>
 8009cca:	e063      	b.n	8009d94 <_dtoa_r+0x94c>
 8009ccc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009cce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009cd2:	e746      	b.n	8009b62 <_dtoa_r+0x71a>
 8009cd4:	9b07      	ldr	r3, [sp, #28]
 8009cd6:	1e5c      	subs	r4, r3, #1
 8009cd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009cda:	42a3      	cmp	r3, r4
 8009cdc:	bfbf      	itttt	lt
 8009cde:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009ce0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009ce2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009ce4:	1ae3      	sublt	r3, r4, r3
 8009ce6:	bfb4      	ite	lt
 8009ce8:	18d2      	addlt	r2, r2, r3
 8009cea:	1b1c      	subge	r4, r3, r4
 8009cec:	9b07      	ldr	r3, [sp, #28]
 8009cee:	bfbc      	itt	lt
 8009cf0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009cf2:	2400      	movlt	r4, #0
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	bfb5      	itete	lt
 8009cf8:	eba8 0603 	sublt.w	r6, r8, r3
 8009cfc:	9b07      	ldrge	r3, [sp, #28]
 8009cfe:	2300      	movlt	r3, #0
 8009d00:	4646      	movge	r6, r8
 8009d02:	e730      	b.n	8009b66 <_dtoa_r+0x71e>
 8009d04:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009d06:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009d08:	4646      	mov	r6, r8
 8009d0a:	e735      	b.n	8009b78 <_dtoa_r+0x730>
 8009d0c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009d0e:	e75c      	b.n	8009bca <_dtoa_r+0x782>
 8009d10:	2300      	movs	r3, #0
 8009d12:	e788      	b.n	8009c26 <_dtoa_r+0x7de>
 8009d14:	3fe00000 	.word	0x3fe00000
 8009d18:	40240000 	.word	0x40240000
 8009d1c:	40140000 	.word	0x40140000
 8009d20:	9b02      	ldr	r3, [sp, #8]
 8009d22:	e780      	b.n	8009c26 <_dtoa_r+0x7de>
 8009d24:	2300      	movs	r3, #0
 8009d26:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d28:	e782      	b.n	8009c30 <_dtoa_r+0x7e8>
 8009d2a:	d099      	beq.n	8009c60 <_dtoa_r+0x818>
 8009d2c:	9a08      	ldr	r2, [sp, #32]
 8009d2e:	331c      	adds	r3, #28
 8009d30:	441a      	add	r2, r3
 8009d32:	4498      	add	r8, r3
 8009d34:	441e      	add	r6, r3
 8009d36:	9208      	str	r2, [sp, #32]
 8009d38:	e792      	b.n	8009c60 <_dtoa_r+0x818>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	e7f6      	b.n	8009d2c <_dtoa_r+0x8e4>
 8009d3e:	9b07      	ldr	r3, [sp, #28]
 8009d40:	9704      	str	r7, [sp, #16]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	dc20      	bgt.n	8009d88 <_dtoa_r+0x940>
 8009d46:	9300      	str	r3, [sp, #0]
 8009d48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d4a:	2b02      	cmp	r3, #2
 8009d4c:	dd1e      	ble.n	8009d8c <_dtoa_r+0x944>
 8009d4e:	9b00      	ldr	r3, [sp, #0]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	f47f aec0 	bne.w	8009ad6 <_dtoa_r+0x68e>
 8009d56:	4621      	mov	r1, r4
 8009d58:	2205      	movs	r2, #5
 8009d5a:	4658      	mov	r0, fp
 8009d5c:	f000 fa9a 	bl	800a294 <__multadd>
 8009d60:	4601      	mov	r1, r0
 8009d62:	4604      	mov	r4, r0
 8009d64:	4648      	mov	r0, r9
 8009d66:	f000 fcf7 	bl	800a758 <__mcmp>
 8009d6a:	2800      	cmp	r0, #0
 8009d6c:	f77f aeb3 	ble.w	8009ad6 <_dtoa_r+0x68e>
 8009d70:	4656      	mov	r6, sl
 8009d72:	2331      	movs	r3, #49	@ 0x31
 8009d74:	f806 3b01 	strb.w	r3, [r6], #1
 8009d78:	9b04      	ldr	r3, [sp, #16]
 8009d7a:	3301      	adds	r3, #1
 8009d7c:	9304      	str	r3, [sp, #16]
 8009d7e:	e6ae      	b.n	8009ade <_dtoa_r+0x696>
 8009d80:	9c07      	ldr	r4, [sp, #28]
 8009d82:	9704      	str	r7, [sp, #16]
 8009d84:	4625      	mov	r5, r4
 8009d86:	e7f3      	b.n	8009d70 <_dtoa_r+0x928>
 8009d88:	9b07      	ldr	r3, [sp, #28]
 8009d8a:	9300      	str	r3, [sp, #0]
 8009d8c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	f000 8104 	beq.w	8009f9c <_dtoa_r+0xb54>
 8009d94:	2e00      	cmp	r6, #0
 8009d96:	dd05      	ble.n	8009da4 <_dtoa_r+0x95c>
 8009d98:	4629      	mov	r1, r5
 8009d9a:	4632      	mov	r2, r6
 8009d9c:	4658      	mov	r0, fp
 8009d9e:	f000 fc6f 	bl	800a680 <__lshift>
 8009da2:	4605      	mov	r5, r0
 8009da4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d05a      	beq.n	8009e60 <_dtoa_r+0xa18>
 8009daa:	6869      	ldr	r1, [r5, #4]
 8009dac:	4658      	mov	r0, fp
 8009dae:	f000 fa0f 	bl	800a1d0 <_Balloc>
 8009db2:	4606      	mov	r6, r0
 8009db4:	b928      	cbnz	r0, 8009dc2 <_dtoa_r+0x97a>
 8009db6:	4b84      	ldr	r3, [pc, #528]	@ (8009fc8 <_dtoa_r+0xb80>)
 8009db8:	4602      	mov	r2, r0
 8009dba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009dbe:	f7ff bb5a 	b.w	8009476 <_dtoa_r+0x2e>
 8009dc2:	692a      	ldr	r2, [r5, #16]
 8009dc4:	3202      	adds	r2, #2
 8009dc6:	0092      	lsls	r2, r2, #2
 8009dc8:	f105 010c 	add.w	r1, r5, #12
 8009dcc:	300c      	adds	r0, #12
 8009dce:	f002 f93b 	bl	800c048 <memcpy>
 8009dd2:	2201      	movs	r2, #1
 8009dd4:	4631      	mov	r1, r6
 8009dd6:	4658      	mov	r0, fp
 8009dd8:	f000 fc52 	bl	800a680 <__lshift>
 8009ddc:	f10a 0301 	add.w	r3, sl, #1
 8009de0:	9307      	str	r3, [sp, #28]
 8009de2:	9b00      	ldr	r3, [sp, #0]
 8009de4:	4453      	add	r3, sl
 8009de6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009de8:	9b02      	ldr	r3, [sp, #8]
 8009dea:	f003 0301 	and.w	r3, r3, #1
 8009dee:	462f      	mov	r7, r5
 8009df0:	930a      	str	r3, [sp, #40]	@ 0x28
 8009df2:	4605      	mov	r5, r0
 8009df4:	9b07      	ldr	r3, [sp, #28]
 8009df6:	4621      	mov	r1, r4
 8009df8:	3b01      	subs	r3, #1
 8009dfa:	4648      	mov	r0, r9
 8009dfc:	9300      	str	r3, [sp, #0]
 8009dfe:	f7ff fa9b 	bl	8009338 <quorem>
 8009e02:	4639      	mov	r1, r7
 8009e04:	9002      	str	r0, [sp, #8]
 8009e06:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009e0a:	4648      	mov	r0, r9
 8009e0c:	f000 fca4 	bl	800a758 <__mcmp>
 8009e10:	462a      	mov	r2, r5
 8009e12:	9008      	str	r0, [sp, #32]
 8009e14:	4621      	mov	r1, r4
 8009e16:	4658      	mov	r0, fp
 8009e18:	f000 fcba 	bl	800a790 <__mdiff>
 8009e1c:	68c2      	ldr	r2, [r0, #12]
 8009e1e:	4606      	mov	r6, r0
 8009e20:	bb02      	cbnz	r2, 8009e64 <_dtoa_r+0xa1c>
 8009e22:	4601      	mov	r1, r0
 8009e24:	4648      	mov	r0, r9
 8009e26:	f000 fc97 	bl	800a758 <__mcmp>
 8009e2a:	4602      	mov	r2, r0
 8009e2c:	4631      	mov	r1, r6
 8009e2e:	4658      	mov	r0, fp
 8009e30:	920e      	str	r2, [sp, #56]	@ 0x38
 8009e32:	f000 fa0d 	bl	800a250 <_Bfree>
 8009e36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e38:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009e3a:	9e07      	ldr	r6, [sp, #28]
 8009e3c:	ea43 0102 	orr.w	r1, r3, r2
 8009e40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e42:	4319      	orrs	r1, r3
 8009e44:	d110      	bne.n	8009e68 <_dtoa_r+0xa20>
 8009e46:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009e4a:	d029      	beq.n	8009ea0 <_dtoa_r+0xa58>
 8009e4c:	9b08      	ldr	r3, [sp, #32]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	dd02      	ble.n	8009e58 <_dtoa_r+0xa10>
 8009e52:	9b02      	ldr	r3, [sp, #8]
 8009e54:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009e58:	9b00      	ldr	r3, [sp, #0]
 8009e5a:	f883 8000 	strb.w	r8, [r3]
 8009e5e:	e63f      	b.n	8009ae0 <_dtoa_r+0x698>
 8009e60:	4628      	mov	r0, r5
 8009e62:	e7bb      	b.n	8009ddc <_dtoa_r+0x994>
 8009e64:	2201      	movs	r2, #1
 8009e66:	e7e1      	b.n	8009e2c <_dtoa_r+0x9e4>
 8009e68:	9b08      	ldr	r3, [sp, #32]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	db04      	blt.n	8009e78 <_dtoa_r+0xa30>
 8009e6e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009e70:	430b      	orrs	r3, r1
 8009e72:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009e74:	430b      	orrs	r3, r1
 8009e76:	d120      	bne.n	8009eba <_dtoa_r+0xa72>
 8009e78:	2a00      	cmp	r2, #0
 8009e7a:	dded      	ble.n	8009e58 <_dtoa_r+0xa10>
 8009e7c:	4649      	mov	r1, r9
 8009e7e:	2201      	movs	r2, #1
 8009e80:	4658      	mov	r0, fp
 8009e82:	f000 fbfd 	bl	800a680 <__lshift>
 8009e86:	4621      	mov	r1, r4
 8009e88:	4681      	mov	r9, r0
 8009e8a:	f000 fc65 	bl	800a758 <__mcmp>
 8009e8e:	2800      	cmp	r0, #0
 8009e90:	dc03      	bgt.n	8009e9a <_dtoa_r+0xa52>
 8009e92:	d1e1      	bne.n	8009e58 <_dtoa_r+0xa10>
 8009e94:	f018 0f01 	tst.w	r8, #1
 8009e98:	d0de      	beq.n	8009e58 <_dtoa_r+0xa10>
 8009e9a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009e9e:	d1d8      	bne.n	8009e52 <_dtoa_r+0xa0a>
 8009ea0:	9a00      	ldr	r2, [sp, #0]
 8009ea2:	2339      	movs	r3, #57	@ 0x39
 8009ea4:	7013      	strb	r3, [r2, #0]
 8009ea6:	4633      	mov	r3, r6
 8009ea8:	461e      	mov	r6, r3
 8009eaa:	3b01      	subs	r3, #1
 8009eac:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009eb0:	2a39      	cmp	r2, #57	@ 0x39
 8009eb2:	d052      	beq.n	8009f5a <_dtoa_r+0xb12>
 8009eb4:	3201      	adds	r2, #1
 8009eb6:	701a      	strb	r2, [r3, #0]
 8009eb8:	e612      	b.n	8009ae0 <_dtoa_r+0x698>
 8009eba:	2a00      	cmp	r2, #0
 8009ebc:	dd07      	ble.n	8009ece <_dtoa_r+0xa86>
 8009ebe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009ec2:	d0ed      	beq.n	8009ea0 <_dtoa_r+0xa58>
 8009ec4:	9a00      	ldr	r2, [sp, #0]
 8009ec6:	f108 0301 	add.w	r3, r8, #1
 8009eca:	7013      	strb	r3, [r2, #0]
 8009ecc:	e608      	b.n	8009ae0 <_dtoa_r+0x698>
 8009ece:	9b07      	ldr	r3, [sp, #28]
 8009ed0:	9a07      	ldr	r2, [sp, #28]
 8009ed2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009ed6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ed8:	4293      	cmp	r3, r2
 8009eda:	d028      	beq.n	8009f2e <_dtoa_r+0xae6>
 8009edc:	4649      	mov	r1, r9
 8009ede:	2300      	movs	r3, #0
 8009ee0:	220a      	movs	r2, #10
 8009ee2:	4658      	mov	r0, fp
 8009ee4:	f000 f9d6 	bl	800a294 <__multadd>
 8009ee8:	42af      	cmp	r7, r5
 8009eea:	4681      	mov	r9, r0
 8009eec:	f04f 0300 	mov.w	r3, #0
 8009ef0:	f04f 020a 	mov.w	r2, #10
 8009ef4:	4639      	mov	r1, r7
 8009ef6:	4658      	mov	r0, fp
 8009ef8:	d107      	bne.n	8009f0a <_dtoa_r+0xac2>
 8009efa:	f000 f9cb 	bl	800a294 <__multadd>
 8009efe:	4607      	mov	r7, r0
 8009f00:	4605      	mov	r5, r0
 8009f02:	9b07      	ldr	r3, [sp, #28]
 8009f04:	3301      	adds	r3, #1
 8009f06:	9307      	str	r3, [sp, #28]
 8009f08:	e774      	b.n	8009df4 <_dtoa_r+0x9ac>
 8009f0a:	f000 f9c3 	bl	800a294 <__multadd>
 8009f0e:	4629      	mov	r1, r5
 8009f10:	4607      	mov	r7, r0
 8009f12:	2300      	movs	r3, #0
 8009f14:	220a      	movs	r2, #10
 8009f16:	4658      	mov	r0, fp
 8009f18:	f000 f9bc 	bl	800a294 <__multadd>
 8009f1c:	4605      	mov	r5, r0
 8009f1e:	e7f0      	b.n	8009f02 <_dtoa_r+0xaba>
 8009f20:	9b00      	ldr	r3, [sp, #0]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	bfcc      	ite	gt
 8009f26:	461e      	movgt	r6, r3
 8009f28:	2601      	movle	r6, #1
 8009f2a:	4456      	add	r6, sl
 8009f2c:	2700      	movs	r7, #0
 8009f2e:	4649      	mov	r1, r9
 8009f30:	2201      	movs	r2, #1
 8009f32:	4658      	mov	r0, fp
 8009f34:	f000 fba4 	bl	800a680 <__lshift>
 8009f38:	4621      	mov	r1, r4
 8009f3a:	4681      	mov	r9, r0
 8009f3c:	f000 fc0c 	bl	800a758 <__mcmp>
 8009f40:	2800      	cmp	r0, #0
 8009f42:	dcb0      	bgt.n	8009ea6 <_dtoa_r+0xa5e>
 8009f44:	d102      	bne.n	8009f4c <_dtoa_r+0xb04>
 8009f46:	f018 0f01 	tst.w	r8, #1
 8009f4a:	d1ac      	bne.n	8009ea6 <_dtoa_r+0xa5e>
 8009f4c:	4633      	mov	r3, r6
 8009f4e:	461e      	mov	r6, r3
 8009f50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f54:	2a30      	cmp	r2, #48	@ 0x30
 8009f56:	d0fa      	beq.n	8009f4e <_dtoa_r+0xb06>
 8009f58:	e5c2      	b.n	8009ae0 <_dtoa_r+0x698>
 8009f5a:	459a      	cmp	sl, r3
 8009f5c:	d1a4      	bne.n	8009ea8 <_dtoa_r+0xa60>
 8009f5e:	9b04      	ldr	r3, [sp, #16]
 8009f60:	3301      	adds	r3, #1
 8009f62:	9304      	str	r3, [sp, #16]
 8009f64:	2331      	movs	r3, #49	@ 0x31
 8009f66:	f88a 3000 	strb.w	r3, [sl]
 8009f6a:	e5b9      	b.n	8009ae0 <_dtoa_r+0x698>
 8009f6c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009f6e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009fcc <_dtoa_r+0xb84>
 8009f72:	b11b      	cbz	r3, 8009f7c <_dtoa_r+0xb34>
 8009f74:	f10a 0308 	add.w	r3, sl, #8
 8009f78:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009f7a:	6013      	str	r3, [r2, #0]
 8009f7c:	4650      	mov	r0, sl
 8009f7e:	b019      	add	sp, #100	@ 0x64
 8009f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f86:	2b01      	cmp	r3, #1
 8009f88:	f77f ae37 	ble.w	8009bfa <_dtoa_r+0x7b2>
 8009f8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f90:	2001      	movs	r0, #1
 8009f92:	e655      	b.n	8009c40 <_dtoa_r+0x7f8>
 8009f94:	9b00      	ldr	r3, [sp, #0]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	f77f aed6 	ble.w	8009d48 <_dtoa_r+0x900>
 8009f9c:	4656      	mov	r6, sl
 8009f9e:	4621      	mov	r1, r4
 8009fa0:	4648      	mov	r0, r9
 8009fa2:	f7ff f9c9 	bl	8009338 <quorem>
 8009fa6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009faa:	f806 8b01 	strb.w	r8, [r6], #1
 8009fae:	9b00      	ldr	r3, [sp, #0]
 8009fb0:	eba6 020a 	sub.w	r2, r6, sl
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	ddb3      	ble.n	8009f20 <_dtoa_r+0xad8>
 8009fb8:	4649      	mov	r1, r9
 8009fba:	2300      	movs	r3, #0
 8009fbc:	220a      	movs	r2, #10
 8009fbe:	4658      	mov	r0, fp
 8009fc0:	f000 f968 	bl	800a294 <__multadd>
 8009fc4:	4681      	mov	r9, r0
 8009fc6:	e7ea      	b.n	8009f9e <_dtoa_r+0xb56>
 8009fc8:	0800ca99 	.word	0x0800ca99
 8009fcc:	0800ca1d 	.word	0x0800ca1d

08009fd0 <_free_r>:
 8009fd0:	b538      	push	{r3, r4, r5, lr}
 8009fd2:	4605      	mov	r5, r0
 8009fd4:	2900      	cmp	r1, #0
 8009fd6:	d041      	beq.n	800a05c <_free_r+0x8c>
 8009fd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fdc:	1f0c      	subs	r4, r1, #4
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	bfb8      	it	lt
 8009fe2:	18e4      	addlt	r4, r4, r3
 8009fe4:	f000 f8e8 	bl	800a1b8 <__malloc_lock>
 8009fe8:	4a1d      	ldr	r2, [pc, #116]	@ (800a060 <_free_r+0x90>)
 8009fea:	6813      	ldr	r3, [r2, #0]
 8009fec:	b933      	cbnz	r3, 8009ffc <_free_r+0x2c>
 8009fee:	6063      	str	r3, [r4, #4]
 8009ff0:	6014      	str	r4, [r2, #0]
 8009ff2:	4628      	mov	r0, r5
 8009ff4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ff8:	f000 b8e4 	b.w	800a1c4 <__malloc_unlock>
 8009ffc:	42a3      	cmp	r3, r4
 8009ffe:	d908      	bls.n	800a012 <_free_r+0x42>
 800a000:	6820      	ldr	r0, [r4, #0]
 800a002:	1821      	adds	r1, r4, r0
 800a004:	428b      	cmp	r3, r1
 800a006:	bf01      	itttt	eq
 800a008:	6819      	ldreq	r1, [r3, #0]
 800a00a:	685b      	ldreq	r3, [r3, #4]
 800a00c:	1809      	addeq	r1, r1, r0
 800a00e:	6021      	streq	r1, [r4, #0]
 800a010:	e7ed      	b.n	8009fee <_free_r+0x1e>
 800a012:	461a      	mov	r2, r3
 800a014:	685b      	ldr	r3, [r3, #4]
 800a016:	b10b      	cbz	r3, 800a01c <_free_r+0x4c>
 800a018:	42a3      	cmp	r3, r4
 800a01a:	d9fa      	bls.n	800a012 <_free_r+0x42>
 800a01c:	6811      	ldr	r1, [r2, #0]
 800a01e:	1850      	adds	r0, r2, r1
 800a020:	42a0      	cmp	r0, r4
 800a022:	d10b      	bne.n	800a03c <_free_r+0x6c>
 800a024:	6820      	ldr	r0, [r4, #0]
 800a026:	4401      	add	r1, r0
 800a028:	1850      	adds	r0, r2, r1
 800a02a:	4283      	cmp	r3, r0
 800a02c:	6011      	str	r1, [r2, #0]
 800a02e:	d1e0      	bne.n	8009ff2 <_free_r+0x22>
 800a030:	6818      	ldr	r0, [r3, #0]
 800a032:	685b      	ldr	r3, [r3, #4]
 800a034:	6053      	str	r3, [r2, #4]
 800a036:	4408      	add	r0, r1
 800a038:	6010      	str	r0, [r2, #0]
 800a03a:	e7da      	b.n	8009ff2 <_free_r+0x22>
 800a03c:	d902      	bls.n	800a044 <_free_r+0x74>
 800a03e:	230c      	movs	r3, #12
 800a040:	602b      	str	r3, [r5, #0]
 800a042:	e7d6      	b.n	8009ff2 <_free_r+0x22>
 800a044:	6820      	ldr	r0, [r4, #0]
 800a046:	1821      	adds	r1, r4, r0
 800a048:	428b      	cmp	r3, r1
 800a04a:	bf04      	itt	eq
 800a04c:	6819      	ldreq	r1, [r3, #0]
 800a04e:	685b      	ldreq	r3, [r3, #4]
 800a050:	6063      	str	r3, [r4, #4]
 800a052:	bf04      	itt	eq
 800a054:	1809      	addeq	r1, r1, r0
 800a056:	6021      	streq	r1, [r4, #0]
 800a058:	6054      	str	r4, [r2, #4]
 800a05a:	e7ca      	b.n	8009ff2 <_free_r+0x22>
 800a05c:	bd38      	pop	{r3, r4, r5, pc}
 800a05e:	bf00      	nop
 800a060:	200021e0 	.word	0x200021e0

0800a064 <malloc>:
 800a064:	4b02      	ldr	r3, [pc, #8]	@ (800a070 <malloc+0xc>)
 800a066:	4601      	mov	r1, r0
 800a068:	6818      	ldr	r0, [r3, #0]
 800a06a:	f000 b825 	b.w	800a0b8 <_malloc_r>
 800a06e:	bf00      	nop
 800a070:	20000018 	.word	0x20000018

0800a074 <sbrk_aligned>:
 800a074:	b570      	push	{r4, r5, r6, lr}
 800a076:	4e0f      	ldr	r6, [pc, #60]	@ (800a0b4 <sbrk_aligned+0x40>)
 800a078:	460c      	mov	r4, r1
 800a07a:	6831      	ldr	r1, [r6, #0]
 800a07c:	4605      	mov	r5, r0
 800a07e:	b911      	cbnz	r1, 800a086 <sbrk_aligned+0x12>
 800a080:	f001 ffd2 	bl	800c028 <_sbrk_r>
 800a084:	6030      	str	r0, [r6, #0]
 800a086:	4621      	mov	r1, r4
 800a088:	4628      	mov	r0, r5
 800a08a:	f001 ffcd 	bl	800c028 <_sbrk_r>
 800a08e:	1c43      	adds	r3, r0, #1
 800a090:	d103      	bne.n	800a09a <sbrk_aligned+0x26>
 800a092:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a096:	4620      	mov	r0, r4
 800a098:	bd70      	pop	{r4, r5, r6, pc}
 800a09a:	1cc4      	adds	r4, r0, #3
 800a09c:	f024 0403 	bic.w	r4, r4, #3
 800a0a0:	42a0      	cmp	r0, r4
 800a0a2:	d0f8      	beq.n	800a096 <sbrk_aligned+0x22>
 800a0a4:	1a21      	subs	r1, r4, r0
 800a0a6:	4628      	mov	r0, r5
 800a0a8:	f001 ffbe 	bl	800c028 <_sbrk_r>
 800a0ac:	3001      	adds	r0, #1
 800a0ae:	d1f2      	bne.n	800a096 <sbrk_aligned+0x22>
 800a0b0:	e7ef      	b.n	800a092 <sbrk_aligned+0x1e>
 800a0b2:	bf00      	nop
 800a0b4:	200021dc 	.word	0x200021dc

0800a0b8 <_malloc_r>:
 800a0b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0bc:	1ccd      	adds	r5, r1, #3
 800a0be:	f025 0503 	bic.w	r5, r5, #3
 800a0c2:	3508      	adds	r5, #8
 800a0c4:	2d0c      	cmp	r5, #12
 800a0c6:	bf38      	it	cc
 800a0c8:	250c      	movcc	r5, #12
 800a0ca:	2d00      	cmp	r5, #0
 800a0cc:	4606      	mov	r6, r0
 800a0ce:	db01      	blt.n	800a0d4 <_malloc_r+0x1c>
 800a0d0:	42a9      	cmp	r1, r5
 800a0d2:	d904      	bls.n	800a0de <_malloc_r+0x26>
 800a0d4:	230c      	movs	r3, #12
 800a0d6:	6033      	str	r3, [r6, #0]
 800a0d8:	2000      	movs	r0, #0
 800a0da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a1b4 <_malloc_r+0xfc>
 800a0e2:	f000 f869 	bl	800a1b8 <__malloc_lock>
 800a0e6:	f8d8 3000 	ldr.w	r3, [r8]
 800a0ea:	461c      	mov	r4, r3
 800a0ec:	bb44      	cbnz	r4, 800a140 <_malloc_r+0x88>
 800a0ee:	4629      	mov	r1, r5
 800a0f0:	4630      	mov	r0, r6
 800a0f2:	f7ff ffbf 	bl	800a074 <sbrk_aligned>
 800a0f6:	1c43      	adds	r3, r0, #1
 800a0f8:	4604      	mov	r4, r0
 800a0fa:	d158      	bne.n	800a1ae <_malloc_r+0xf6>
 800a0fc:	f8d8 4000 	ldr.w	r4, [r8]
 800a100:	4627      	mov	r7, r4
 800a102:	2f00      	cmp	r7, #0
 800a104:	d143      	bne.n	800a18e <_malloc_r+0xd6>
 800a106:	2c00      	cmp	r4, #0
 800a108:	d04b      	beq.n	800a1a2 <_malloc_r+0xea>
 800a10a:	6823      	ldr	r3, [r4, #0]
 800a10c:	4639      	mov	r1, r7
 800a10e:	4630      	mov	r0, r6
 800a110:	eb04 0903 	add.w	r9, r4, r3
 800a114:	f001 ff88 	bl	800c028 <_sbrk_r>
 800a118:	4581      	cmp	r9, r0
 800a11a:	d142      	bne.n	800a1a2 <_malloc_r+0xea>
 800a11c:	6821      	ldr	r1, [r4, #0]
 800a11e:	1a6d      	subs	r5, r5, r1
 800a120:	4629      	mov	r1, r5
 800a122:	4630      	mov	r0, r6
 800a124:	f7ff ffa6 	bl	800a074 <sbrk_aligned>
 800a128:	3001      	adds	r0, #1
 800a12a:	d03a      	beq.n	800a1a2 <_malloc_r+0xea>
 800a12c:	6823      	ldr	r3, [r4, #0]
 800a12e:	442b      	add	r3, r5
 800a130:	6023      	str	r3, [r4, #0]
 800a132:	f8d8 3000 	ldr.w	r3, [r8]
 800a136:	685a      	ldr	r2, [r3, #4]
 800a138:	bb62      	cbnz	r2, 800a194 <_malloc_r+0xdc>
 800a13a:	f8c8 7000 	str.w	r7, [r8]
 800a13e:	e00f      	b.n	800a160 <_malloc_r+0xa8>
 800a140:	6822      	ldr	r2, [r4, #0]
 800a142:	1b52      	subs	r2, r2, r5
 800a144:	d420      	bmi.n	800a188 <_malloc_r+0xd0>
 800a146:	2a0b      	cmp	r2, #11
 800a148:	d917      	bls.n	800a17a <_malloc_r+0xc2>
 800a14a:	1961      	adds	r1, r4, r5
 800a14c:	42a3      	cmp	r3, r4
 800a14e:	6025      	str	r5, [r4, #0]
 800a150:	bf18      	it	ne
 800a152:	6059      	strne	r1, [r3, #4]
 800a154:	6863      	ldr	r3, [r4, #4]
 800a156:	bf08      	it	eq
 800a158:	f8c8 1000 	streq.w	r1, [r8]
 800a15c:	5162      	str	r2, [r4, r5]
 800a15e:	604b      	str	r3, [r1, #4]
 800a160:	4630      	mov	r0, r6
 800a162:	f000 f82f 	bl	800a1c4 <__malloc_unlock>
 800a166:	f104 000b 	add.w	r0, r4, #11
 800a16a:	1d23      	adds	r3, r4, #4
 800a16c:	f020 0007 	bic.w	r0, r0, #7
 800a170:	1ac2      	subs	r2, r0, r3
 800a172:	bf1c      	itt	ne
 800a174:	1a1b      	subne	r3, r3, r0
 800a176:	50a3      	strne	r3, [r4, r2]
 800a178:	e7af      	b.n	800a0da <_malloc_r+0x22>
 800a17a:	6862      	ldr	r2, [r4, #4]
 800a17c:	42a3      	cmp	r3, r4
 800a17e:	bf0c      	ite	eq
 800a180:	f8c8 2000 	streq.w	r2, [r8]
 800a184:	605a      	strne	r2, [r3, #4]
 800a186:	e7eb      	b.n	800a160 <_malloc_r+0xa8>
 800a188:	4623      	mov	r3, r4
 800a18a:	6864      	ldr	r4, [r4, #4]
 800a18c:	e7ae      	b.n	800a0ec <_malloc_r+0x34>
 800a18e:	463c      	mov	r4, r7
 800a190:	687f      	ldr	r7, [r7, #4]
 800a192:	e7b6      	b.n	800a102 <_malloc_r+0x4a>
 800a194:	461a      	mov	r2, r3
 800a196:	685b      	ldr	r3, [r3, #4]
 800a198:	42a3      	cmp	r3, r4
 800a19a:	d1fb      	bne.n	800a194 <_malloc_r+0xdc>
 800a19c:	2300      	movs	r3, #0
 800a19e:	6053      	str	r3, [r2, #4]
 800a1a0:	e7de      	b.n	800a160 <_malloc_r+0xa8>
 800a1a2:	230c      	movs	r3, #12
 800a1a4:	6033      	str	r3, [r6, #0]
 800a1a6:	4630      	mov	r0, r6
 800a1a8:	f000 f80c 	bl	800a1c4 <__malloc_unlock>
 800a1ac:	e794      	b.n	800a0d8 <_malloc_r+0x20>
 800a1ae:	6005      	str	r5, [r0, #0]
 800a1b0:	e7d6      	b.n	800a160 <_malloc_r+0xa8>
 800a1b2:	bf00      	nop
 800a1b4:	200021e0 	.word	0x200021e0

0800a1b8 <__malloc_lock>:
 800a1b8:	4801      	ldr	r0, [pc, #4]	@ (800a1c0 <__malloc_lock+0x8>)
 800a1ba:	f7ff b8b4 	b.w	8009326 <__retarget_lock_acquire_recursive>
 800a1be:	bf00      	nop
 800a1c0:	200021d8 	.word	0x200021d8

0800a1c4 <__malloc_unlock>:
 800a1c4:	4801      	ldr	r0, [pc, #4]	@ (800a1cc <__malloc_unlock+0x8>)
 800a1c6:	f7ff b8af 	b.w	8009328 <__retarget_lock_release_recursive>
 800a1ca:	bf00      	nop
 800a1cc:	200021d8 	.word	0x200021d8

0800a1d0 <_Balloc>:
 800a1d0:	b570      	push	{r4, r5, r6, lr}
 800a1d2:	69c6      	ldr	r6, [r0, #28]
 800a1d4:	4604      	mov	r4, r0
 800a1d6:	460d      	mov	r5, r1
 800a1d8:	b976      	cbnz	r6, 800a1f8 <_Balloc+0x28>
 800a1da:	2010      	movs	r0, #16
 800a1dc:	f7ff ff42 	bl	800a064 <malloc>
 800a1e0:	4602      	mov	r2, r0
 800a1e2:	61e0      	str	r0, [r4, #28]
 800a1e4:	b920      	cbnz	r0, 800a1f0 <_Balloc+0x20>
 800a1e6:	4b18      	ldr	r3, [pc, #96]	@ (800a248 <_Balloc+0x78>)
 800a1e8:	4818      	ldr	r0, [pc, #96]	@ (800a24c <_Balloc+0x7c>)
 800a1ea:	216b      	movs	r1, #107	@ 0x6b
 800a1ec:	f001 ff44 	bl	800c078 <__assert_func>
 800a1f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a1f4:	6006      	str	r6, [r0, #0]
 800a1f6:	60c6      	str	r6, [r0, #12]
 800a1f8:	69e6      	ldr	r6, [r4, #28]
 800a1fa:	68f3      	ldr	r3, [r6, #12]
 800a1fc:	b183      	cbz	r3, 800a220 <_Balloc+0x50>
 800a1fe:	69e3      	ldr	r3, [r4, #28]
 800a200:	68db      	ldr	r3, [r3, #12]
 800a202:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a206:	b9b8      	cbnz	r0, 800a238 <_Balloc+0x68>
 800a208:	2101      	movs	r1, #1
 800a20a:	fa01 f605 	lsl.w	r6, r1, r5
 800a20e:	1d72      	adds	r2, r6, #5
 800a210:	0092      	lsls	r2, r2, #2
 800a212:	4620      	mov	r0, r4
 800a214:	f001 ff4e 	bl	800c0b4 <_calloc_r>
 800a218:	b160      	cbz	r0, 800a234 <_Balloc+0x64>
 800a21a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a21e:	e00e      	b.n	800a23e <_Balloc+0x6e>
 800a220:	2221      	movs	r2, #33	@ 0x21
 800a222:	2104      	movs	r1, #4
 800a224:	4620      	mov	r0, r4
 800a226:	f001 ff45 	bl	800c0b4 <_calloc_r>
 800a22a:	69e3      	ldr	r3, [r4, #28]
 800a22c:	60f0      	str	r0, [r6, #12]
 800a22e:	68db      	ldr	r3, [r3, #12]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d1e4      	bne.n	800a1fe <_Balloc+0x2e>
 800a234:	2000      	movs	r0, #0
 800a236:	bd70      	pop	{r4, r5, r6, pc}
 800a238:	6802      	ldr	r2, [r0, #0]
 800a23a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a23e:	2300      	movs	r3, #0
 800a240:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a244:	e7f7      	b.n	800a236 <_Balloc+0x66>
 800a246:	bf00      	nop
 800a248:	0800ca2a 	.word	0x0800ca2a
 800a24c:	0800caaa 	.word	0x0800caaa

0800a250 <_Bfree>:
 800a250:	b570      	push	{r4, r5, r6, lr}
 800a252:	69c6      	ldr	r6, [r0, #28]
 800a254:	4605      	mov	r5, r0
 800a256:	460c      	mov	r4, r1
 800a258:	b976      	cbnz	r6, 800a278 <_Bfree+0x28>
 800a25a:	2010      	movs	r0, #16
 800a25c:	f7ff ff02 	bl	800a064 <malloc>
 800a260:	4602      	mov	r2, r0
 800a262:	61e8      	str	r0, [r5, #28]
 800a264:	b920      	cbnz	r0, 800a270 <_Bfree+0x20>
 800a266:	4b09      	ldr	r3, [pc, #36]	@ (800a28c <_Bfree+0x3c>)
 800a268:	4809      	ldr	r0, [pc, #36]	@ (800a290 <_Bfree+0x40>)
 800a26a:	218f      	movs	r1, #143	@ 0x8f
 800a26c:	f001 ff04 	bl	800c078 <__assert_func>
 800a270:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a274:	6006      	str	r6, [r0, #0]
 800a276:	60c6      	str	r6, [r0, #12]
 800a278:	b13c      	cbz	r4, 800a28a <_Bfree+0x3a>
 800a27a:	69eb      	ldr	r3, [r5, #28]
 800a27c:	6862      	ldr	r2, [r4, #4]
 800a27e:	68db      	ldr	r3, [r3, #12]
 800a280:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a284:	6021      	str	r1, [r4, #0]
 800a286:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a28a:	bd70      	pop	{r4, r5, r6, pc}
 800a28c:	0800ca2a 	.word	0x0800ca2a
 800a290:	0800caaa 	.word	0x0800caaa

0800a294 <__multadd>:
 800a294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a298:	690d      	ldr	r5, [r1, #16]
 800a29a:	4607      	mov	r7, r0
 800a29c:	460c      	mov	r4, r1
 800a29e:	461e      	mov	r6, r3
 800a2a0:	f101 0c14 	add.w	ip, r1, #20
 800a2a4:	2000      	movs	r0, #0
 800a2a6:	f8dc 3000 	ldr.w	r3, [ip]
 800a2aa:	b299      	uxth	r1, r3
 800a2ac:	fb02 6101 	mla	r1, r2, r1, r6
 800a2b0:	0c1e      	lsrs	r6, r3, #16
 800a2b2:	0c0b      	lsrs	r3, r1, #16
 800a2b4:	fb02 3306 	mla	r3, r2, r6, r3
 800a2b8:	b289      	uxth	r1, r1
 800a2ba:	3001      	adds	r0, #1
 800a2bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a2c0:	4285      	cmp	r5, r0
 800a2c2:	f84c 1b04 	str.w	r1, [ip], #4
 800a2c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a2ca:	dcec      	bgt.n	800a2a6 <__multadd+0x12>
 800a2cc:	b30e      	cbz	r6, 800a312 <__multadd+0x7e>
 800a2ce:	68a3      	ldr	r3, [r4, #8]
 800a2d0:	42ab      	cmp	r3, r5
 800a2d2:	dc19      	bgt.n	800a308 <__multadd+0x74>
 800a2d4:	6861      	ldr	r1, [r4, #4]
 800a2d6:	4638      	mov	r0, r7
 800a2d8:	3101      	adds	r1, #1
 800a2da:	f7ff ff79 	bl	800a1d0 <_Balloc>
 800a2de:	4680      	mov	r8, r0
 800a2e0:	b928      	cbnz	r0, 800a2ee <__multadd+0x5a>
 800a2e2:	4602      	mov	r2, r0
 800a2e4:	4b0c      	ldr	r3, [pc, #48]	@ (800a318 <__multadd+0x84>)
 800a2e6:	480d      	ldr	r0, [pc, #52]	@ (800a31c <__multadd+0x88>)
 800a2e8:	21ba      	movs	r1, #186	@ 0xba
 800a2ea:	f001 fec5 	bl	800c078 <__assert_func>
 800a2ee:	6922      	ldr	r2, [r4, #16]
 800a2f0:	3202      	adds	r2, #2
 800a2f2:	f104 010c 	add.w	r1, r4, #12
 800a2f6:	0092      	lsls	r2, r2, #2
 800a2f8:	300c      	adds	r0, #12
 800a2fa:	f001 fea5 	bl	800c048 <memcpy>
 800a2fe:	4621      	mov	r1, r4
 800a300:	4638      	mov	r0, r7
 800a302:	f7ff ffa5 	bl	800a250 <_Bfree>
 800a306:	4644      	mov	r4, r8
 800a308:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a30c:	3501      	adds	r5, #1
 800a30e:	615e      	str	r6, [r3, #20]
 800a310:	6125      	str	r5, [r4, #16]
 800a312:	4620      	mov	r0, r4
 800a314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a318:	0800ca99 	.word	0x0800ca99
 800a31c:	0800caaa 	.word	0x0800caaa

0800a320 <__s2b>:
 800a320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a324:	460c      	mov	r4, r1
 800a326:	4615      	mov	r5, r2
 800a328:	461f      	mov	r7, r3
 800a32a:	2209      	movs	r2, #9
 800a32c:	3308      	adds	r3, #8
 800a32e:	4606      	mov	r6, r0
 800a330:	fb93 f3f2 	sdiv	r3, r3, r2
 800a334:	2100      	movs	r1, #0
 800a336:	2201      	movs	r2, #1
 800a338:	429a      	cmp	r2, r3
 800a33a:	db09      	blt.n	800a350 <__s2b+0x30>
 800a33c:	4630      	mov	r0, r6
 800a33e:	f7ff ff47 	bl	800a1d0 <_Balloc>
 800a342:	b940      	cbnz	r0, 800a356 <__s2b+0x36>
 800a344:	4602      	mov	r2, r0
 800a346:	4b19      	ldr	r3, [pc, #100]	@ (800a3ac <__s2b+0x8c>)
 800a348:	4819      	ldr	r0, [pc, #100]	@ (800a3b0 <__s2b+0x90>)
 800a34a:	21d3      	movs	r1, #211	@ 0xd3
 800a34c:	f001 fe94 	bl	800c078 <__assert_func>
 800a350:	0052      	lsls	r2, r2, #1
 800a352:	3101      	adds	r1, #1
 800a354:	e7f0      	b.n	800a338 <__s2b+0x18>
 800a356:	9b08      	ldr	r3, [sp, #32]
 800a358:	6143      	str	r3, [r0, #20]
 800a35a:	2d09      	cmp	r5, #9
 800a35c:	f04f 0301 	mov.w	r3, #1
 800a360:	6103      	str	r3, [r0, #16]
 800a362:	dd16      	ble.n	800a392 <__s2b+0x72>
 800a364:	f104 0909 	add.w	r9, r4, #9
 800a368:	46c8      	mov	r8, r9
 800a36a:	442c      	add	r4, r5
 800a36c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a370:	4601      	mov	r1, r0
 800a372:	3b30      	subs	r3, #48	@ 0x30
 800a374:	220a      	movs	r2, #10
 800a376:	4630      	mov	r0, r6
 800a378:	f7ff ff8c 	bl	800a294 <__multadd>
 800a37c:	45a0      	cmp	r8, r4
 800a37e:	d1f5      	bne.n	800a36c <__s2b+0x4c>
 800a380:	f1a5 0408 	sub.w	r4, r5, #8
 800a384:	444c      	add	r4, r9
 800a386:	1b2d      	subs	r5, r5, r4
 800a388:	1963      	adds	r3, r4, r5
 800a38a:	42bb      	cmp	r3, r7
 800a38c:	db04      	blt.n	800a398 <__s2b+0x78>
 800a38e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a392:	340a      	adds	r4, #10
 800a394:	2509      	movs	r5, #9
 800a396:	e7f6      	b.n	800a386 <__s2b+0x66>
 800a398:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a39c:	4601      	mov	r1, r0
 800a39e:	3b30      	subs	r3, #48	@ 0x30
 800a3a0:	220a      	movs	r2, #10
 800a3a2:	4630      	mov	r0, r6
 800a3a4:	f7ff ff76 	bl	800a294 <__multadd>
 800a3a8:	e7ee      	b.n	800a388 <__s2b+0x68>
 800a3aa:	bf00      	nop
 800a3ac:	0800ca99 	.word	0x0800ca99
 800a3b0:	0800caaa 	.word	0x0800caaa

0800a3b4 <__hi0bits>:
 800a3b4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	bf36      	itet	cc
 800a3bc:	0403      	lslcc	r3, r0, #16
 800a3be:	2000      	movcs	r0, #0
 800a3c0:	2010      	movcc	r0, #16
 800a3c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a3c6:	bf3c      	itt	cc
 800a3c8:	021b      	lslcc	r3, r3, #8
 800a3ca:	3008      	addcc	r0, #8
 800a3cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a3d0:	bf3c      	itt	cc
 800a3d2:	011b      	lslcc	r3, r3, #4
 800a3d4:	3004      	addcc	r0, #4
 800a3d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3da:	bf3c      	itt	cc
 800a3dc:	009b      	lslcc	r3, r3, #2
 800a3de:	3002      	addcc	r0, #2
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	db05      	blt.n	800a3f0 <__hi0bits+0x3c>
 800a3e4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a3e8:	f100 0001 	add.w	r0, r0, #1
 800a3ec:	bf08      	it	eq
 800a3ee:	2020      	moveq	r0, #32
 800a3f0:	4770      	bx	lr

0800a3f2 <__lo0bits>:
 800a3f2:	6803      	ldr	r3, [r0, #0]
 800a3f4:	4602      	mov	r2, r0
 800a3f6:	f013 0007 	ands.w	r0, r3, #7
 800a3fa:	d00b      	beq.n	800a414 <__lo0bits+0x22>
 800a3fc:	07d9      	lsls	r1, r3, #31
 800a3fe:	d421      	bmi.n	800a444 <__lo0bits+0x52>
 800a400:	0798      	lsls	r0, r3, #30
 800a402:	bf49      	itett	mi
 800a404:	085b      	lsrmi	r3, r3, #1
 800a406:	089b      	lsrpl	r3, r3, #2
 800a408:	2001      	movmi	r0, #1
 800a40a:	6013      	strmi	r3, [r2, #0]
 800a40c:	bf5c      	itt	pl
 800a40e:	6013      	strpl	r3, [r2, #0]
 800a410:	2002      	movpl	r0, #2
 800a412:	4770      	bx	lr
 800a414:	b299      	uxth	r1, r3
 800a416:	b909      	cbnz	r1, 800a41c <__lo0bits+0x2a>
 800a418:	0c1b      	lsrs	r3, r3, #16
 800a41a:	2010      	movs	r0, #16
 800a41c:	b2d9      	uxtb	r1, r3
 800a41e:	b909      	cbnz	r1, 800a424 <__lo0bits+0x32>
 800a420:	3008      	adds	r0, #8
 800a422:	0a1b      	lsrs	r3, r3, #8
 800a424:	0719      	lsls	r1, r3, #28
 800a426:	bf04      	itt	eq
 800a428:	091b      	lsreq	r3, r3, #4
 800a42a:	3004      	addeq	r0, #4
 800a42c:	0799      	lsls	r1, r3, #30
 800a42e:	bf04      	itt	eq
 800a430:	089b      	lsreq	r3, r3, #2
 800a432:	3002      	addeq	r0, #2
 800a434:	07d9      	lsls	r1, r3, #31
 800a436:	d403      	bmi.n	800a440 <__lo0bits+0x4e>
 800a438:	085b      	lsrs	r3, r3, #1
 800a43a:	f100 0001 	add.w	r0, r0, #1
 800a43e:	d003      	beq.n	800a448 <__lo0bits+0x56>
 800a440:	6013      	str	r3, [r2, #0]
 800a442:	4770      	bx	lr
 800a444:	2000      	movs	r0, #0
 800a446:	4770      	bx	lr
 800a448:	2020      	movs	r0, #32
 800a44a:	4770      	bx	lr

0800a44c <__i2b>:
 800a44c:	b510      	push	{r4, lr}
 800a44e:	460c      	mov	r4, r1
 800a450:	2101      	movs	r1, #1
 800a452:	f7ff febd 	bl	800a1d0 <_Balloc>
 800a456:	4602      	mov	r2, r0
 800a458:	b928      	cbnz	r0, 800a466 <__i2b+0x1a>
 800a45a:	4b05      	ldr	r3, [pc, #20]	@ (800a470 <__i2b+0x24>)
 800a45c:	4805      	ldr	r0, [pc, #20]	@ (800a474 <__i2b+0x28>)
 800a45e:	f240 1145 	movw	r1, #325	@ 0x145
 800a462:	f001 fe09 	bl	800c078 <__assert_func>
 800a466:	2301      	movs	r3, #1
 800a468:	6144      	str	r4, [r0, #20]
 800a46a:	6103      	str	r3, [r0, #16]
 800a46c:	bd10      	pop	{r4, pc}
 800a46e:	bf00      	nop
 800a470:	0800ca99 	.word	0x0800ca99
 800a474:	0800caaa 	.word	0x0800caaa

0800a478 <__multiply>:
 800a478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a47c:	4614      	mov	r4, r2
 800a47e:	690a      	ldr	r2, [r1, #16]
 800a480:	6923      	ldr	r3, [r4, #16]
 800a482:	429a      	cmp	r2, r3
 800a484:	bfa8      	it	ge
 800a486:	4623      	movge	r3, r4
 800a488:	460f      	mov	r7, r1
 800a48a:	bfa4      	itt	ge
 800a48c:	460c      	movge	r4, r1
 800a48e:	461f      	movge	r7, r3
 800a490:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a494:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a498:	68a3      	ldr	r3, [r4, #8]
 800a49a:	6861      	ldr	r1, [r4, #4]
 800a49c:	eb0a 0609 	add.w	r6, sl, r9
 800a4a0:	42b3      	cmp	r3, r6
 800a4a2:	b085      	sub	sp, #20
 800a4a4:	bfb8      	it	lt
 800a4a6:	3101      	addlt	r1, #1
 800a4a8:	f7ff fe92 	bl	800a1d0 <_Balloc>
 800a4ac:	b930      	cbnz	r0, 800a4bc <__multiply+0x44>
 800a4ae:	4602      	mov	r2, r0
 800a4b0:	4b44      	ldr	r3, [pc, #272]	@ (800a5c4 <__multiply+0x14c>)
 800a4b2:	4845      	ldr	r0, [pc, #276]	@ (800a5c8 <__multiply+0x150>)
 800a4b4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a4b8:	f001 fdde 	bl	800c078 <__assert_func>
 800a4bc:	f100 0514 	add.w	r5, r0, #20
 800a4c0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a4c4:	462b      	mov	r3, r5
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	4543      	cmp	r3, r8
 800a4ca:	d321      	bcc.n	800a510 <__multiply+0x98>
 800a4cc:	f107 0114 	add.w	r1, r7, #20
 800a4d0:	f104 0214 	add.w	r2, r4, #20
 800a4d4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a4d8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a4dc:	9302      	str	r3, [sp, #8]
 800a4de:	1b13      	subs	r3, r2, r4
 800a4e0:	3b15      	subs	r3, #21
 800a4e2:	f023 0303 	bic.w	r3, r3, #3
 800a4e6:	3304      	adds	r3, #4
 800a4e8:	f104 0715 	add.w	r7, r4, #21
 800a4ec:	42ba      	cmp	r2, r7
 800a4ee:	bf38      	it	cc
 800a4f0:	2304      	movcc	r3, #4
 800a4f2:	9301      	str	r3, [sp, #4]
 800a4f4:	9b02      	ldr	r3, [sp, #8]
 800a4f6:	9103      	str	r1, [sp, #12]
 800a4f8:	428b      	cmp	r3, r1
 800a4fa:	d80c      	bhi.n	800a516 <__multiply+0x9e>
 800a4fc:	2e00      	cmp	r6, #0
 800a4fe:	dd03      	ble.n	800a508 <__multiply+0x90>
 800a500:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a504:	2b00      	cmp	r3, #0
 800a506:	d05b      	beq.n	800a5c0 <__multiply+0x148>
 800a508:	6106      	str	r6, [r0, #16]
 800a50a:	b005      	add	sp, #20
 800a50c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a510:	f843 2b04 	str.w	r2, [r3], #4
 800a514:	e7d8      	b.n	800a4c8 <__multiply+0x50>
 800a516:	f8b1 a000 	ldrh.w	sl, [r1]
 800a51a:	f1ba 0f00 	cmp.w	sl, #0
 800a51e:	d024      	beq.n	800a56a <__multiply+0xf2>
 800a520:	f104 0e14 	add.w	lr, r4, #20
 800a524:	46a9      	mov	r9, r5
 800a526:	f04f 0c00 	mov.w	ip, #0
 800a52a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a52e:	f8d9 3000 	ldr.w	r3, [r9]
 800a532:	fa1f fb87 	uxth.w	fp, r7
 800a536:	b29b      	uxth	r3, r3
 800a538:	fb0a 330b 	mla	r3, sl, fp, r3
 800a53c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a540:	f8d9 7000 	ldr.w	r7, [r9]
 800a544:	4463      	add	r3, ip
 800a546:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a54a:	fb0a c70b 	mla	r7, sl, fp, ip
 800a54e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a552:	b29b      	uxth	r3, r3
 800a554:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a558:	4572      	cmp	r2, lr
 800a55a:	f849 3b04 	str.w	r3, [r9], #4
 800a55e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a562:	d8e2      	bhi.n	800a52a <__multiply+0xb2>
 800a564:	9b01      	ldr	r3, [sp, #4]
 800a566:	f845 c003 	str.w	ip, [r5, r3]
 800a56a:	9b03      	ldr	r3, [sp, #12]
 800a56c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a570:	3104      	adds	r1, #4
 800a572:	f1b9 0f00 	cmp.w	r9, #0
 800a576:	d021      	beq.n	800a5bc <__multiply+0x144>
 800a578:	682b      	ldr	r3, [r5, #0]
 800a57a:	f104 0c14 	add.w	ip, r4, #20
 800a57e:	46ae      	mov	lr, r5
 800a580:	f04f 0a00 	mov.w	sl, #0
 800a584:	f8bc b000 	ldrh.w	fp, [ip]
 800a588:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a58c:	fb09 770b 	mla	r7, r9, fp, r7
 800a590:	4457      	add	r7, sl
 800a592:	b29b      	uxth	r3, r3
 800a594:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a598:	f84e 3b04 	str.w	r3, [lr], #4
 800a59c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a5a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a5a4:	f8be 3000 	ldrh.w	r3, [lr]
 800a5a8:	fb09 330a 	mla	r3, r9, sl, r3
 800a5ac:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a5b0:	4562      	cmp	r2, ip
 800a5b2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a5b6:	d8e5      	bhi.n	800a584 <__multiply+0x10c>
 800a5b8:	9f01      	ldr	r7, [sp, #4]
 800a5ba:	51eb      	str	r3, [r5, r7]
 800a5bc:	3504      	adds	r5, #4
 800a5be:	e799      	b.n	800a4f4 <__multiply+0x7c>
 800a5c0:	3e01      	subs	r6, #1
 800a5c2:	e79b      	b.n	800a4fc <__multiply+0x84>
 800a5c4:	0800ca99 	.word	0x0800ca99
 800a5c8:	0800caaa 	.word	0x0800caaa

0800a5cc <__pow5mult>:
 800a5cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5d0:	4615      	mov	r5, r2
 800a5d2:	f012 0203 	ands.w	r2, r2, #3
 800a5d6:	4607      	mov	r7, r0
 800a5d8:	460e      	mov	r6, r1
 800a5da:	d007      	beq.n	800a5ec <__pow5mult+0x20>
 800a5dc:	4c25      	ldr	r4, [pc, #148]	@ (800a674 <__pow5mult+0xa8>)
 800a5de:	3a01      	subs	r2, #1
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a5e6:	f7ff fe55 	bl	800a294 <__multadd>
 800a5ea:	4606      	mov	r6, r0
 800a5ec:	10ad      	asrs	r5, r5, #2
 800a5ee:	d03d      	beq.n	800a66c <__pow5mult+0xa0>
 800a5f0:	69fc      	ldr	r4, [r7, #28]
 800a5f2:	b97c      	cbnz	r4, 800a614 <__pow5mult+0x48>
 800a5f4:	2010      	movs	r0, #16
 800a5f6:	f7ff fd35 	bl	800a064 <malloc>
 800a5fa:	4602      	mov	r2, r0
 800a5fc:	61f8      	str	r0, [r7, #28]
 800a5fe:	b928      	cbnz	r0, 800a60c <__pow5mult+0x40>
 800a600:	4b1d      	ldr	r3, [pc, #116]	@ (800a678 <__pow5mult+0xac>)
 800a602:	481e      	ldr	r0, [pc, #120]	@ (800a67c <__pow5mult+0xb0>)
 800a604:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a608:	f001 fd36 	bl	800c078 <__assert_func>
 800a60c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a610:	6004      	str	r4, [r0, #0]
 800a612:	60c4      	str	r4, [r0, #12]
 800a614:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a618:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a61c:	b94c      	cbnz	r4, 800a632 <__pow5mult+0x66>
 800a61e:	f240 2171 	movw	r1, #625	@ 0x271
 800a622:	4638      	mov	r0, r7
 800a624:	f7ff ff12 	bl	800a44c <__i2b>
 800a628:	2300      	movs	r3, #0
 800a62a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a62e:	4604      	mov	r4, r0
 800a630:	6003      	str	r3, [r0, #0]
 800a632:	f04f 0900 	mov.w	r9, #0
 800a636:	07eb      	lsls	r3, r5, #31
 800a638:	d50a      	bpl.n	800a650 <__pow5mult+0x84>
 800a63a:	4631      	mov	r1, r6
 800a63c:	4622      	mov	r2, r4
 800a63e:	4638      	mov	r0, r7
 800a640:	f7ff ff1a 	bl	800a478 <__multiply>
 800a644:	4631      	mov	r1, r6
 800a646:	4680      	mov	r8, r0
 800a648:	4638      	mov	r0, r7
 800a64a:	f7ff fe01 	bl	800a250 <_Bfree>
 800a64e:	4646      	mov	r6, r8
 800a650:	106d      	asrs	r5, r5, #1
 800a652:	d00b      	beq.n	800a66c <__pow5mult+0xa0>
 800a654:	6820      	ldr	r0, [r4, #0]
 800a656:	b938      	cbnz	r0, 800a668 <__pow5mult+0x9c>
 800a658:	4622      	mov	r2, r4
 800a65a:	4621      	mov	r1, r4
 800a65c:	4638      	mov	r0, r7
 800a65e:	f7ff ff0b 	bl	800a478 <__multiply>
 800a662:	6020      	str	r0, [r4, #0]
 800a664:	f8c0 9000 	str.w	r9, [r0]
 800a668:	4604      	mov	r4, r0
 800a66a:	e7e4      	b.n	800a636 <__pow5mult+0x6a>
 800a66c:	4630      	mov	r0, r6
 800a66e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a672:	bf00      	nop
 800a674:	0800cb04 	.word	0x0800cb04
 800a678:	0800ca2a 	.word	0x0800ca2a
 800a67c:	0800caaa 	.word	0x0800caaa

0800a680 <__lshift>:
 800a680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a684:	460c      	mov	r4, r1
 800a686:	6849      	ldr	r1, [r1, #4]
 800a688:	6923      	ldr	r3, [r4, #16]
 800a68a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a68e:	68a3      	ldr	r3, [r4, #8]
 800a690:	4607      	mov	r7, r0
 800a692:	4691      	mov	r9, r2
 800a694:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a698:	f108 0601 	add.w	r6, r8, #1
 800a69c:	42b3      	cmp	r3, r6
 800a69e:	db0b      	blt.n	800a6b8 <__lshift+0x38>
 800a6a0:	4638      	mov	r0, r7
 800a6a2:	f7ff fd95 	bl	800a1d0 <_Balloc>
 800a6a6:	4605      	mov	r5, r0
 800a6a8:	b948      	cbnz	r0, 800a6be <__lshift+0x3e>
 800a6aa:	4602      	mov	r2, r0
 800a6ac:	4b28      	ldr	r3, [pc, #160]	@ (800a750 <__lshift+0xd0>)
 800a6ae:	4829      	ldr	r0, [pc, #164]	@ (800a754 <__lshift+0xd4>)
 800a6b0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a6b4:	f001 fce0 	bl	800c078 <__assert_func>
 800a6b8:	3101      	adds	r1, #1
 800a6ba:	005b      	lsls	r3, r3, #1
 800a6bc:	e7ee      	b.n	800a69c <__lshift+0x1c>
 800a6be:	2300      	movs	r3, #0
 800a6c0:	f100 0114 	add.w	r1, r0, #20
 800a6c4:	f100 0210 	add.w	r2, r0, #16
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	4553      	cmp	r3, sl
 800a6cc:	db33      	blt.n	800a736 <__lshift+0xb6>
 800a6ce:	6920      	ldr	r0, [r4, #16]
 800a6d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a6d4:	f104 0314 	add.w	r3, r4, #20
 800a6d8:	f019 091f 	ands.w	r9, r9, #31
 800a6dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a6e0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a6e4:	d02b      	beq.n	800a73e <__lshift+0xbe>
 800a6e6:	f1c9 0e20 	rsb	lr, r9, #32
 800a6ea:	468a      	mov	sl, r1
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	6818      	ldr	r0, [r3, #0]
 800a6f0:	fa00 f009 	lsl.w	r0, r0, r9
 800a6f4:	4310      	orrs	r0, r2
 800a6f6:	f84a 0b04 	str.w	r0, [sl], #4
 800a6fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6fe:	459c      	cmp	ip, r3
 800a700:	fa22 f20e 	lsr.w	r2, r2, lr
 800a704:	d8f3      	bhi.n	800a6ee <__lshift+0x6e>
 800a706:	ebac 0304 	sub.w	r3, ip, r4
 800a70a:	3b15      	subs	r3, #21
 800a70c:	f023 0303 	bic.w	r3, r3, #3
 800a710:	3304      	adds	r3, #4
 800a712:	f104 0015 	add.w	r0, r4, #21
 800a716:	4584      	cmp	ip, r0
 800a718:	bf38      	it	cc
 800a71a:	2304      	movcc	r3, #4
 800a71c:	50ca      	str	r2, [r1, r3]
 800a71e:	b10a      	cbz	r2, 800a724 <__lshift+0xa4>
 800a720:	f108 0602 	add.w	r6, r8, #2
 800a724:	3e01      	subs	r6, #1
 800a726:	4638      	mov	r0, r7
 800a728:	612e      	str	r6, [r5, #16]
 800a72a:	4621      	mov	r1, r4
 800a72c:	f7ff fd90 	bl	800a250 <_Bfree>
 800a730:	4628      	mov	r0, r5
 800a732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a736:	f842 0f04 	str.w	r0, [r2, #4]!
 800a73a:	3301      	adds	r3, #1
 800a73c:	e7c5      	b.n	800a6ca <__lshift+0x4a>
 800a73e:	3904      	subs	r1, #4
 800a740:	f853 2b04 	ldr.w	r2, [r3], #4
 800a744:	f841 2f04 	str.w	r2, [r1, #4]!
 800a748:	459c      	cmp	ip, r3
 800a74a:	d8f9      	bhi.n	800a740 <__lshift+0xc0>
 800a74c:	e7ea      	b.n	800a724 <__lshift+0xa4>
 800a74e:	bf00      	nop
 800a750:	0800ca99 	.word	0x0800ca99
 800a754:	0800caaa 	.word	0x0800caaa

0800a758 <__mcmp>:
 800a758:	690a      	ldr	r2, [r1, #16]
 800a75a:	4603      	mov	r3, r0
 800a75c:	6900      	ldr	r0, [r0, #16]
 800a75e:	1a80      	subs	r0, r0, r2
 800a760:	b530      	push	{r4, r5, lr}
 800a762:	d10e      	bne.n	800a782 <__mcmp+0x2a>
 800a764:	3314      	adds	r3, #20
 800a766:	3114      	adds	r1, #20
 800a768:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a76c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a770:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a774:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a778:	4295      	cmp	r5, r2
 800a77a:	d003      	beq.n	800a784 <__mcmp+0x2c>
 800a77c:	d205      	bcs.n	800a78a <__mcmp+0x32>
 800a77e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a782:	bd30      	pop	{r4, r5, pc}
 800a784:	42a3      	cmp	r3, r4
 800a786:	d3f3      	bcc.n	800a770 <__mcmp+0x18>
 800a788:	e7fb      	b.n	800a782 <__mcmp+0x2a>
 800a78a:	2001      	movs	r0, #1
 800a78c:	e7f9      	b.n	800a782 <__mcmp+0x2a>
	...

0800a790 <__mdiff>:
 800a790:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a794:	4689      	mov	r9, r1
 800a796:	4606      	mov	r6, r0
 800a798:	4611      	mov	r1, r2
 800a79a:	4648      	mov	r0, r9
 800a79c:	4614      	mov	r4, r2
 800a79e:	f7ff ffdb 	bl	800a758 <__mcmp>
 800a7a2:	1e05      	subs	r5, r0, #0
 800a7a4:	d112      	bne.n	800a7cc <__mdiff+0x3c>
 800a7a6:	4629      	mov	r1, r5
 800a7a8:	4630      	mov	r0, r6
 800a7aa:	f7ff fd11 	bl	800a1d0 <_Balloc>
 800a7ae:	4602      	mov	r2, r0
 800a7b0:	b928      	cbnz	r0, 800a7be <__mdiff+0x2e>
 800a7b2:	4b3f      	ldr	r3, [pc, #252]	@ (800a8b0 <__mdiff+0x120>)
 800a7b4:	f240 2137 	movw	r1, #567	@ 0x237
 800a7b8:	483e      	ldr	r0, [pc, #248]	@ (800a8b4 <__mdiff+0x124>)
 800a7ba:	f001 fc5d 	bl	800c078 <__assert_func>
 800a7be:	2301      	movs	r3, #1
 800a7c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a7c4:	4610      	mov	r0, r2
 800a7c6:	b003      	add	sp, #12
 800a7c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7cc:	bfbc      	itt	lt
 800a7ce:	464b      	movlt	r3, r9
 800a7d0:	46a1      	movlt	r9, r4
 800a7d2:	4630      	mov	r0, r6
 800a7d4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a7d8:	bfba      	itte	lt
 800a7da:	461c      	movlt	r4, r3
 800a7dc:	2501      	movlt	r5, #1
 800a7de:	2500      	movge	r5, #0
 800a7e0:	f7ff fcf6 	bl	800a1d0 <_Balloc>
 800a7e4:	4602      	mov	r2, r0
 800a7e6:	b918      	cbnz	r0, 800a7f0 <__mdiff+0x60>
 800a7e8:	4b31      	ldr	r3, [pc, #196]	@ (800a8b0 <__mdiff+0x120>)
 800a7ea:	f240 2145 	movw	r1, #581	@ 0x245
 800a7ee:	e7e3      	b.n	800a7b8 <__mdiff+0x28>
 800a7f0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a7f4:	6926      	ldr	r6, [r4, #16]
 800a7f6:	60c5      	str	r5, [r0, #12]
 800a7f8:	f109 0310 	add.w	r3, r9, #16
 800a7fc:	f109 0514 	add.w	r5, r9, #20
 800a800:	f104 0e14 	add.w	lr, r4, #20
 800a804:	f100 0b14 	add.w	fp, r0, #20
 800a808:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a80c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a810:	9301      	str	r3, [sp, #4]
 800a812:	46d9      	mov	r9, fp
 800a814:	f04f 0c00 	mov.w	ip, #0
 800a818:	9b01      	ldr	r3, [sp, #4]
 800a81a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a81e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a822:	9301      	str	r3, [sp, #4]
 800a824:	fa1f f38a 	uxth.w	r3, sl
 800a828:	4619      	mov	r1, r3
 800a82a:	b283      	uxth	r3, r0
 800a82c:	1acb      	subs	r3, r1, r3
 800a82e:	0c00      	lsrs	r0, r0, #16
 800a830:	4463      	add	r3, ip
 800a832:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a836:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a83a:	b29b      	uxth	r3, r3
 800a83c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a840:	4576      	cmp	r6, lr
 800a842:	f849 3b04 	str.w	r3, [r9], #4
 800a846:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a84a:	d8e5      	bhi.n	800a818 <__mdiff+0x88>
 800a84c:	1b33      	subs	r3, r6, r4
 800a84e:	3b15      	subs	r3, #21
 800a850:	f023 0303 	bic.w	r3, r3, #3
 800a854:	3415      	adds	r4, #21
 800a856:	3304      	adds	r3, #4
 800a858:	42a6      	cmp	r6, r4
 800a85a:	bf38      	it	cc
 800a85c:	2304      	movcc	r3, #4
 800a85e:	441d      	add	r5, r3
 800a860:	445b      	add	r3, fp
 800a862:	461e      	mov	r6, r3
 800a864:	462c      	mov	r4, r5
 800a866:	4544      	cmp	r4, r8
 800a868:	d30e      	bcc.n	800a888 <__mdiff+0xf8>
 800a86a:	f108 0103 	add.w	r1, r8, #3
 800a86e:	1b49      	subs	r1, r1, r5
 800a870:	f021 0103 	bic.w	r1, r1, #3
 800a874:	3d03      	subs	r5, #3
 800a876:	45a8      	cmp	r8, r5
 800a878:	bf38      	it	cc
 800a87a:	2100      	movcc	r1, #0
 800a87c:	440b      	add	r3, r1
 800a87e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a882:	b191      	cbz	r1, 800a8aa <__mdiff+0x11a>
 800a884:	6117      	str	r7, [r2, #16]
 800a886:	e79d      	b.n	800a7c4 <__mdiff+0x34>
 800a888:	f854 1b04 	ldr.w	r1, [r4], #4
 800a88c:	46e6      	mov	lr, ip
 800a88e:	0c08      	lsrs	r0, r1, #16
 800a890:	fa1c fc81 	uxtah	ip, ip, r1
 800a894:	4471      	add	r1, lr
 800a896:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a89a:	b289      	uxth	r1, r1
 800a89c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a8a0:	f846 1b04 	str.w	r1, [r6], #4
 800a8a4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a8a8:	e7dd      	b.n	800a866 <__mdiff+0xd6>
 800a8aa:	3f01      	subs	r7, #1
 800a8ac:	e7e7      	b.n	800a87e <__mdiff+0xee>
 800a8ae:	bf00      	nop
 800a8b0:	0800ca99 	.word	0x0800ca99
 800a8b4:	0800caaa 	.word	0x0800caaa

0800a8b8 <__ulp>:
 800a8b8:	b082      	sub	sp, #8
 800a8ba:	ed8d 0b00 	vstr	d0, [sp]
 800a8be:	9a01      	ldr	r2, [sp, #4]
 800a8c0:	4b0f      	ldr	r3, [pc, #60]	@ (800a900 <__ulp+0x48>)
 800a8c2:	4013      	ands	r3, r2
 800a8c4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	dc08      	bgt.n	800a8de <__ulp+0x26>
 800a8cc:	425b      	negs	r3, r3
 800a8ce:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a8d2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a8d6:	da04      	bge.n	800a8e2 <__ulp+0x2a>
 800a8d8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a8dc:	4113      	asrs	r3, r2
 800a8de:	2200      	movs	r2, #0
 800a8e0:	e008      	b.n	800a8f4 <__ulp+0x3c>
 800a8e2:	f1a2 0314 	sub.w	r3, r2, #20
 800a8e6:	2b1e      	cmp	r3, #30
 800a8e8:	bfda      	itte	le
 800a8ea:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a8ee:	40da      	lsrle	r2, r3
 800a8f0:	2201      	movgt	r2, #1
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	4619      	mov	r1, r3
 800a8f6:	4610      	mov	r0, r2
 800a8f8:	ec41 0b10 	vmov	d0, r0, r1
 800a8fc:	b002      	add	sp, #8
 800a8fe:	4770      	bx	lr
 800a900:	7ff00000 	.word	0x7ff00000

0800a904 <__b2d>:
 800a904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a908:	6906      	ldr	r6, [r0, #16]
 800a90a:	f100 0814 	add.w	r8, r0, #20
 800a90e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a912:	1f37      	subs	r7, r6, #4
 800a914:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a918:	4610      	mov	r0, r2
 800a91a:	f7ff fd4b 	bl	800a3b4 <__hi0bits>
 800a91e:	f1c0 0320 	rsb	r3, r0, #32
 800a922:	280a      	cmp	r0, #10
 800a924:	600b      	str	r3, [r1, #0]
 800a926:	491b      	ldr	r1, [pc, #108]	@ (800a994 <__b2d+0x90>)
 800a928:	dc15      	bgt.n	800a956 <__b2d+0x52>
 800a92a:	f1c0 0c0b 	rsb	ip, r0, #11
 800a92e:	fa22 f30c 	lsr.w	r3, r2, ip
 800a932:	45b8      	cmp	r8, r7
 800a934:	ea43 0501 	orr.w	r5, r3, r1
 800a938:	bf34      	ite	cc
 800a93a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a93e:	2300      	movcs	r3, #0
 800a940:	3015      	adds	r0, #21
 800a942:	fa02 f000 	lsl.w	r0, r2, r0
 800a946:	fa23 f30c 	lsr.w	r3, r3, ip
 800a94a:	4303      	orrs	r3, r0
 800a94c:	461c      	mov	r4, r3
 800a94e:	ec45 4b10 	vmov	d0, r4, r5
 800a952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a956:	45b8      	cmp	r8, r7
 800a958:	bf3a      	itte	cc
 800a95a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a95e:	f1a6 0708 	subcc.w	r7, r6, #8
 800a962:	2300      	movcs	r3, #0
 800a964:	380b      	subs	r0, #11
 800a966:	d012      	beq.n	800a98e <__b2d+0x8a>
 800a968:	f1c0 0120 	rsb	r1, r0, #32
 800a96c:	fa23 f401 	lsr.w	r4, r3, r1
 800a970:	4082      	lsls	r2, r0
 800a972:	4322      	orrs	r2, r4
 800a974:	4547      	cmp	r7, r8
 800a976:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a97a:	bf8c      	ite	hi
 800a97c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a980:	2200      	movls	r2, #0
 800a982:	4083      	lsls	r3, r0
 800a984:	40ca      	lsrs	r2, r1
 800a986:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a98a:	4313      	orrs	r3, r2
 800a98c:	e7de      	b.n	800a94c <__b2d+0x48>
 800a98e:	ea42 0501 	orr.w	r5, r2, r1
 800a992:	e7db      	b.n	800a94c <__b2d+0x48>
 800a994:	3ff00000 	.word	0x3ff00000

0800a998 <__d2b>:
 800a998:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a99c:	460f      	mov	r7, r1
 800a99e:	2101      	movs	r1, #1
 800a9a0:	ec59 8b10 	vmov	r8, r9, d0
 800a9a4:	4616      	mov	r6, r2
 800a9a6:	f7ff fc13 	bl	800a1d0 <_Balloc>
 800a9aa:	4604      	mov	r4, r0
 800a9ac:	b930      	cbnz	r0, 800a9bc <__d2b+0x24>
 800a9ae:	4602      	mov	r2, r0
 800a9b0:	4b23      	ldr	r3, [pc, #140]	@ (800aa40 <__d2b+0xa8>)
 800a9b2:	4824      	ldr	r0, [pc, #144]	@ (800aa44 <__d2b+0xac>)
 800a9b4:	f240 310f 	movw	r1, #783	@ 0x30f
 800a9b8:	f001 fb5e 	bl	800c078 <__assert_func>
 800a9bc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a9c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a9c4:	b10d      	cbz	r5, 800a9ca <__d2b+0x32>
 800a9c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a9ca:	9301      	str	r3, [sp, #4]
 800a9cc:	f1b8 0300 	subs.w	r3, r8, #0
 800a9d0:	d023      	beq.n	800aa1a <__d2b+0x82>
 800a9d2:	4668      	mov	r0, sp
 800a9d4:	9300      	str	r3, [sp, #0]
 800a9d6:	f7ff fd0c 	bl	800a3f2 <__lo0bits>
 800a9da:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a9de:	b1d0      	cbz	r0, 800aa16 <__d2b+0x7e>
 800a9e0:	f1c0 0320 	rsb	r3, r0, #32
 800a9e4:	fa02 f303 	lsl.w	r3, r2, r3
 800a9e8:	430b      	orrs	r3, r1
 800a9ea:	40c2      	lsrs	r2, r0
 800a9ec:	6163      	str	r3, [r4, #20]
 800a9ee:	9201      	str	r2, [sp, #4]
 800a9f0:	9b01      	ldr	r3, [sp, #4]
 800a9f2:	61a3      	str	r3, [r4, #24]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	bf0c      	ite	eq
 800a9f8:	2201      	moveq	r2, #1
 800a9fa:	2202      	movne	r2, #2
 800a9fc:	6122      	str	r2, [r4, #16]
 800a9fe:	b1a5      	cbz	r5, 800aa2a <__d2b+0x92>
 800aa00:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800aa04:	4405      	add	r5, r0
 800aa06:	603d      	str	r5, [r7, #0]
 800aa08:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800aa0c:	6030      	str	r0, [r6, #0]
 800aa0e:	4620      	mov	r0, r4
 800aa10:	b003      	add	sp, #12
 800aa12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa16:	6161      	str	r1, [r4, #20]
 800aa18:	e7ea      	b.n	800a9f0 <__d2b+0x58>
 800aa1a:	a801      	add	r0, sp, #4
 800aa1c:	f7ff fce9 	bl	800a3f2 <__lo0bits>
 800aa20:	9b01      	ldr	r3, [sp, #4]
 800aa22:	6163      	str	r3, [r4, #20]
 800aa24:	3020      	adds	r0, #32
 800aa26:	2201      	movs	r2, #1
 800aa28:	e7e8      	b.n	800a9fc <__d2b+0x64>
 800aa2a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aa2e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800aa32:	6038      	str	r0, [r7, #0]
 800aa34:	6918      	ldr	r0, [r3, #16]
 800aa36:	f7ff fcbd 	bl	800a3b4 <__hi0bits>
 800aa3a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aa3e:	e7e5      	b.n	800aa0c <__d2b+0x74>
 800aa40:	0800ca99 	.word	0x0800ca99
 800aa44:	0800caaa 	.word	0x0800caaa

0800aa48 <__ratio>:
 800aa48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa4c:	b085      	sub	sp, #20
 800aa4e:	e9cd 1000 	strd	r1, r0, [sp]
 800aa52:	a902      	add	r1, sp, #8
 800aa54:	f7ff ff56 	bl	800a904 <__b2d>
 800aa58:	9800      	ldr	r0, [sp, #0]
 800aa5a:	a903      	add	r1, sp, #12
 800aa5c:	ec55 4b10 	vmov	r4, r5, d0
 800aa60:	f7ff ff50 	bl	800a904 <__b2d>
 800aa64:	9b01      	ldr	r3, [sp, #4]
 800aa66:	6919      	ldr	r1, [r3, #16]
 800aa68:	9b00      	ldr	r3, [sp, #0]
 800aa6a:	691b      	ldr	r3, [r3, #16]
 800aa6c:	1ac9      	subs	r1, r1, r3
 800aa6e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800aa72:	1a9b      	subs	r3, r3, r2
 800aa74:	ec5b ab10 	vmov	sl, fp, d0
 800aa78:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	bfce      	itee	gt
 800aa80:	462a      	movgt	r2, r5
 800aa82:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800aa86:	465a      	movle	r2, fp
 800aa88:	462f      	mov	r7, r5
 800aa8a:	46d9      	mov	r9, fp
 800aa8c:	bfcc      	ite	gt
 800aa8e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800aa92:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800aa96:	464b      	mov	r3, r9
 800aa98:	4652      	mov	r2, sl
 800aa9a:	4620      	mov	r0, r4
 800aa9c:	4639      	mov	r1, r7
 800aa9e:	f7f5 fefd 	bl	800089c <__aeabi_ddiv>
 800aaa2:	ec41 0b10 	vmov	d0, r0, r1
 800aaa6:	b005      	add	sp, #20
 800aaa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aaac <__copybits>:
 800aaac:	3901      	subs	r1, #1
 800aaae:	b570      	push	{r4, r5, r6, lr}
 800aab0:	1149      	asrs	r1, r1, #5
 800aab2:	6914      	ldr	r4, [r2, #16]
 800aab4:	3101      	adds	r1, #1
 800aab6:	f102 0314 	add.w	r3, r2, #20
 800aaba:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800aabe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800aac2:	1f05      	subs	r5, r0, #4
 800aac4:	42a3      	cmp	r3, r4
 800aac6:	d30c      	bcc.n	800aae2 <__copybits+0x36>
 800aac8:	1aa3      	subs	r3, r4, r2
 800aaca:	3b11      	subs	r3, #17
 800aacc:	f023 0303 	bic.w	r3, r3, #3
 800aad0:	3211      	adds	r2, #17
 800aad2:	42a2      	cmp	r2, r4
 800aad4:	bf88      	it	hi
 800aad6:	2300      	movhi	r3, #0
 800aad8:	4418      	add	r0, r3
 800aada:	2300      	movs	r3, #0
 800aadc:	4288      	cmp	r0, r1
 800aade:	d305      	bcc.n	800aaec <__copybits+0x40>
 800aae0:	bd70      	pop	{r4, r5, r6, pc}
 800aae2:	f853 6b04 	ldr.w	r6, [r3], #4
 800aae6:	f845 6f04 	str.w	r6, [r5, #4]!
 800aaea:	e7eb      	b.n	800aac4 <__copybits+0x18>
 800aaec:	f840 3b04 	str.w	r3, [r0], #4
 800aaf0:	e7f4      	b.n	800aadc <__copybits+0x30>

0800aaf2 <__any_on>:
 800aaf2:	f100 0214 	add.w	r2, r0, #20
 800aaf6:	6900      	ldr	r0, [r0, #16]
 800aaf8:	114b      	asrs	r3, r1, #5
 800aafa:	4298      	cmp	r0, r3
 800aafc:	b510      	push	{r4, lr}
 800aafe:	db11      	blt.n	800ab24 <__any_on+0x32>
 800ab00:	dd0a      	ble.n	800ab18 <__any_on+0x26>
 800ab02:	f011 011f 	ands.w	r1, r1, #31
 800ab06:	d007      	beq.n	800ab18 <__any_on+0x26>
 800ab08:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ab0c:	fa24 f001 	lsr.w	r0, r4, r1
 800ab10:	fa00 f101 	lsl.w	r1, r0, r1
 800ab14:	428c      	cmp	r4, r1
 800ab16:	d10b      	bne.n	800ab30 <__any_on+0x3e>
 800ab18:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	d803      	bhi.n	800ab28 <__any_on+0x36>
 800ab20:	2000      	movs	r0, #0
 800ab22:	bd10      	pop	{r4, pc}
 800ab24:	4603      	mov	r3, r0
 800ab26:	e7f7      	b.n	800ab18 <__any_on+0x26>
 800ab28:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ab2c:	2900      	cmp	r1, #0
 800ab2e:	d0f5      	beq.n	800ab1c <__any_on+0x2a>
 800ab30:	2001      	movs	r0, #1
 800ab32:	e7f6      	b.n	800ab22 <__any_on+0x30>

0800ab34 <sulp>:
 800ab34:	b570      	push	{r4, r5, r6, lr}
 800ab36:	4604      	mov	r4, r0
 800ab38:	460d      	mov	r5, r1
 800ab3a:	ec45 4b10 	vmov	d0, r4, r5
 800ab3e:	4616      	mov	r6, r2
 800ab40:	f7ff feba 	bl	800a8b8 <__ulp>
 800ab44:	ec51 0b10 	vmov	r0, r1, d0
 800ab48:	b17e      	cbz	r6, 800ab6a <sulp+0x36>
 800ab4a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ab4e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	dd09      	ble.n	800ab6a <sulp+0x36>
 800ab56:	051b      	lsls	r3, r3, #20
 800ab58:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800ab5c:	2400      	movs	r4, #0
 800ab5e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800ab62:	4622      	mov	r2, r4
 800ab64:	462b      	mov	r3, r5
 800ab66:	f7f5 fd6f 	bl	8000648 <__aeabi_dmul>
 800ab6a:	ec41 0b10 	vmov	d0, r0, r1
 800ab6e:	bd70      	pop	{r4, r5, r6, pc}

0800ab70 <_strtod_l>:
 800ab70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab74:	b09f      	sub	sp, #124	@ 0x7c
 800ab76:	460c      	mov	r4, r1
 800ab78:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	921a      	str	r2, [sp, #104]	@ 0x68
 800ab7e:	9005      	str	r0, [sp, #20]
 800ab80:	f04f 0a00 	mov.w	sl, #0
 800ab84:	f04f 0b00 	mov.w	fp, #0
 800ab88:	460a      	mov	r2, r1
 800ab8a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ab8c:	7811      	ldrb	r1, [r2, #0]
 800ab8e:	292b      	cmp	r1, #43	@ 0x2b
 800ab90:	d04a      	beq.n	800ac28 <_strtod_l+0xb8>
 800ab92:	d838      	bhi.n	800ac06 <_strtod_l+0x96>
 800ab94:	290d      	cmp	r1, #13
 800ab96:	d832      	bhi.n	800abfe <_strtod_l+0x8e>
 800ab98:	2908      	cmp	r1, #8
 800ab9a:	d832      	bhi.n	800ac02 <_strtod_l+0x92>
 800ab9c:	2900      	cmp	r1, #0
 800ab9e:	d03b      	beq.n	800ac18 <_strtod_l+0xa8>
 800aba0:	2200      	movs	r2, #0
 800aba2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800aba4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800aba6:	782a      	ldrb	r2, [r5, #0]
 800aba8:	2a30      	cmp	r2, #48	@ 0x30
 800abaa:	f040 80b3 	bne.w	800ad14 <_strtod_l+0x1a4>
 800abae:	786a      	ldrb	r2, [r5, #1]
 800abb0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800abb4:	2a58      	cmp	r2, #88	@ 0x58
 800abb6:	d16e      	bne.n	800ac96 <_strtod_l+0x126>
 800abb8:	9302      	str	r3, [sp, #8]
 800abba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800abbc:	9301      	str	r3, [sp, #4]
 800abbe:	ab1a      	add	r3, sp, #104	@ 0x68
 800abc0:	9300      	str	r3, [sp, #0]
 800abc2:	4a8e      	ldr	r2, [pc, #568]	@ (800adfc <_strtod_l+0x28c>)
 800abc4:	9805      	ldr	r0, [sp, #20]
 800abc6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800abc8:	a919      	add	r1, sp, #100	@ 0x64
 800abca:	f001 faef 	bl	800c1ac <__gethex>
 800abce:	f010 060f 	ands.w	r6, r0, #15
 800abd2:	4604      	mov	r4, r0
 800abd4:	d005      	beq.n	800abe2 <_strtod_l+0x72>
 800abd6:	2e06      	cmp	r6, #6
 800abd8:	d128      	bne.n	800ac2c <_strtod_l+0xbc>
 800abda:	3501      	adds	r5, #1
 800abdc:	2300      	movs	r3, #0
 800abde:	9519      	str	r5, [sp, #100]	@ 0x64
 800abe0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800abe2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	f040 858e 	bne.w	800b706 <_strtod_l+0xb96>
 800abea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800abec:	b1cb      	cbz	r3, 800ac22 <_strtod_l+0xb2>
 800abee:	4652      	mov	r2, sl
 800abf0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800abf4:	ec43 2b10 	vmov	d0, r2, r3
 800abf8:	b01f      	add	sp, #124	@ 0x7c
 800abfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abfe:	2920      	cmp	r1, #32
 800ac00:	d1ce      	bne.n	800aba0 <_strtod_l+0x30>
 800ac02:	3201      	adds	r2, #1
 800ac04:	e7c1      	b.n	800ab8a <_strtod_l+0x1a>
 800ac06:	292d      	cmp	r1, #45	@ 0x2d
 800ac08:	d1ca      	bne.n	800aba0 <_strtod_l+0x30>
 800ac0a:	2101      	movs	r1, #1
 800ac0c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ac0e:	1c51      	adds	r1, r2, #1
 800ac10:	9119      	str	r1, [sp, #100]	@ 0x64
 800ac12:	7852      	ldrb	r2, [r2, #1]
 800ac14:	2a00      	cmp	r2, #0
 800ac16:	d1c5      	bne.n	800aba4 <_strtod_l+0x34>
 800ac18:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ac1a:	9419      	str	r4, [sp, #100]	@ 0x64
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	f040 8570 	bne.w	800b702 <_strtod_l+0xb92>
 800ac22:	4652      	mov	r2, sl
 800ac24:	465b      	mov	r3, fp
 800ac26:	e7e5      	b.n	800abf4 <_strtod_l+0x84>
 800ac28:	2100      	movs	r1, #0
 800ac2a:	e7ef      	b.n	800ac0c <_strtod_l+0x9c>
 800ac2c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ac2e:	b13a      	cbz	r2, 800ac40 <_strtod_l+0xd0>
 800ac30:	2135      	movs	r1, #53	@ 0x35
 800ac32:	a81c      	add	r0, sp, #112	@ 0x70
 800ac34:	f7ff ff3a 	bl	800aaac <__copybits>
 800ac38:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ac3a:	9805      	ldr	r0, [sp, #20]
 800ac3c:	f7ff fb08 	bl	800a250 <_Bfree>
 800ac40:	3e01      	subs	r6, #1
 800ac42:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ac44:	2e04      	cmp	r6, #4
 800ac46:	d806      	bhi.n	800ac56 <_strtod_l+0xe6>
 800ac48:	e8df f006 	tbb	[pc, r6]
 800ac4c:	201d0314 	.word	0x201d0314
 800ac50:	14          	.byte	0x14
 800ac51:	00          	.byte	0x00
 800ac52:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800ac56:	05e1      	lsls	r1, r4, #23
 800ac58:	bf48      	it	mi
 800ac5a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ac5e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ac62:	0d1b      	lsrs	r3, r3, #20
 800ac64:	051b      	lsls	r3, r3, #20
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d1bb      	bne.n	800abe2 <_strtod_l+0x72>
 800ac6a:	f7fe fb31 	bl	80092d0 <__errno>
 800ac6e:	2322      	movs	r3, #34	@ 0x22
 800ac70:	6003      	str	r3, [r0, #0]
 800ac72:	e7b6      	b.n	800abe2 <_strtod_l+0x72>
 800ac74:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ac78:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ac7c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ac80:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ac84:	e7e7      	b.n	800ac56 <_strtod_l+0xe6>
 800ac86:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800ae04 <_strtod_l+0x294>
 800ac8a:	e7e4      	b.n	800ac56 <_strtod_l+0xe6>
 800ac8c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ac90:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800ac94:	e7df      	b.n	800ac56 <_strtod_l+0xe6>
 800ac96:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac98:	1c5a      	adds	r2, r3, #1
 800ac9a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ac9c:	785b      	ldrb	r3, [r3, #1]
 800ac9e:	2b30      	cmp	r3, #48	@ 0x30
 800aca0:	d0f9      	beq.n	800ac96 <_strtod_l+0x126>
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d09d      	beq.n	800abe2 <_strtod_l+0x72>
 800aca6:	2301      	movs	r3, #1
 800aca8:	9309      	str	r3, [sp, #36]	@ 0x24
 800acaa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800acac:	930c      	str	r3, [sp, #48]	@ 0x30
 800acae:	2300      	movs	r3, #0
 800acb0:	9308      	str	r3, [sp, #32]
 800acb2:	930a      	str	r3, [sp, #40]	@ 0x28
 800acb4:	461f      	mov	r7, r3
 800acb6:	220a      	movs	r2, #10
 800acb8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800acba:	7805      	ldrb	r5, [r0, #0]
 800acbc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800acc0:	b2d9      	uxtb	r1, r3
 800acc2:	2909      	cmp	r1, #9
 800acc4:	d928      	bls.n	800ad18 <_strtod_l+0x1a8>
 800acc6:	494e      	ldr	r1, [pc, #312]	@ (800ae00 <_strtod_l+0x290>)
 800acc8:	2201      	movs	r2, #1
 800acca:	f001 f979 	bl	800bfc0 <strncmp>
 800acce:	2800      	cmp	r0, #0
 800acd0:	d032      	beq.n	800ad38 <_strtod_l+0x1c8>
 800acd2:	2000      	movs	r0, #0
 800acd4:	462a      	mov	r2, r5
 800acd6:	4681      	mov	r9, r0
 800acd8:	463d      	mov	r5, r7
 800acda:	4603      	mov	r3, r0
 800acdc:	2a65      	cmp	r2, #101	@ 0x65
 800acde:	d001      	beq.n	800ace4 <_strtod_l+0x174>
 800ace0:	2a45      	cmp	r2, #69	@ 0x45
 800ace2:	d114      	bne.n	800ad0e <_strtod_l+0x19e>
 800ace4:	b91d      	cbnz	r5, 800acee <_strtod_l+0x17e>
 800ace6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ace8:	4302      	orrs	r2, r0
 800acea:	d095      	beq.n	800ac18 <_strtod_l+0xa8>
 800acec:	2500      	movs	r5, #0
 800acee:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800acf0:	1c62      	adds	r2, r4, #1
 800acf2:	9219      	str	r2, [sp, #100]	@ 0x64
 800acf4:	7862      	ldrb	r2, [r4, #1]
 800acf6:	2a2b      	cmp	r2, #43	@ 0x2b
 800acf8:	d077      	beq.n	800adea <_strtod_l+0x27a>
 800acfa:	2a2d      	cmp	r2, #45	@ 0x2d
 800acfc:	d07b      	beq.n	800adf6 <_strtod_l+0x286>
 800acfe:	f04f 0c00 	mov.w	ip, #0
 800ad02:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ad06:	2909      	cmp	r1, #9
 800ad08:	f240 8082 	bls.w	800ae10 <_strtod_l+0x2a0>
 800ad0c:	9419      	str	r4, [sp, #100]	@ 0x64
 800ad0e:	f04f 0800 	mov.w	r8, #0
 800ad12:	e0a2      	b.n	800ae5a <_strtod_l+0x2ea>
 800ad14:	2300      	movs	r3, #0
 800ad16:	e7c7      	b.n	800aca8 <_strtod_l+0x138>
 800ad18:	2f08      	cmp	r7, #8
 800ad1a:	bfd5      	itete	le
 800ad1c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800ad1e:	9908      	ldrgt	r1, [sp, #32]
 800ad20:	fb02 3301 	mlale	r3, r2, r1, r3
 800ad24:	fb02 3301 	mlagt	r3, r2, r1, r3
 800ad28:	f100 0001 	add.w	r0, r0, #1
 800ad2c:	bfd4      	ite	le
 800ad2e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800ad30:	9308      	strgt	r3, [sp, #32]
 800ad32:	3701      	adds	r7, #1
 800ad34:	9019      	str	r0, [sp, #100]	@ 0x64
 800ad36:	e7bf      	b.n	800acb8 <_strtod_l+0x148>
 800ad38:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad3a:	1c5a      	adds	r2, r3, #1
 800ad3c:	9219      	str	r2, [sp, #100]	@ 0x64
 800ad3e:	785a      	ldrb	r2, [r3, #1]
 800ad40:	b37f      	cbz	r7, 800ada2 <_strtod_l+0x232>
 800ad42:	4681      	mov	r9, r0
 800ad44:	463d      	mov	r5, r7
 800ad46:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ad4a:	2b09      	cmp	r3, #9
 800ad4c:	d912      	bls.n	800ad74 <_strtod_l+0x204>
 800ad4e:	2301      	movs	r3, #1
 800ad50:	e7c4      	b.n	800acdc <_strtod_l+0x16c>
 800ad52:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad54:	1c5a      	adds	r2, r3, #1
 800ad56:	9219      	str	r2, [sp, #100]	@ 0x64
 800ad58:	785a      	ldrb	r2, [r3, #1]
 800ad5a:	3001      	adds	r0, #1
 800ad5c:	2a30      	cmp	r2, #48	@ 0x30
 800ad5e:	d0f8      	beq.n	800ad52 <_strtod_l+0x1e2>
 800ad60:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ad64:	2b08      	cmp	r3, #8
 800ad66:	f200 84d3 	bhi.w	800b710 <_strtod_l+0xba0>
 800ad6a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad6c:	930c      	str	r3, [sp, #48]	@ 0x30
 800ad6e:	4681      	mov	r9, r0
 800ad70:	2000      	movs	r0, #0
 800ad72:	4605      	mov	r5, r0
 800ad74:	3a30      	subs	r2, #48	@ 0x30
 800ad76:	f100 0301 	add.w	r3, r0, #1
 800ad7a:	d02a      	beq.n	800add2 <_strtod_l+0x262>
 800ad7c:	4499      	add	r9, r3
 800ad7e:	eb00 0c05 	add.w	ip, r0, r5
 800ad82:	462b      	mov	r3, r5
 800ad84:	210a      	movs	r1, #10
 800ad86:	4563      	cmp	r3, ip
 800ad88:	d10d      	bne.n	800ada6 <_strtod_l+0x236>
 800ad8a:	1c69      	adds	r1, r5, #1
 800ad8c:	4401      	add	r1, r0
 800ad8e:	4428      	add	r0, r5
 800ad90:	2808      	cmp	r0, #8
 800ad92:	dc16      	bgt.n	800adc2 <_strtod_l+0x252>
 800ad94:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ad96:	230a      	movs	r3, #10
 800ad98:	fb03 2300 	mla	r3, r3, r0, r2
 800ad9c:	930a      	str	r3, [sp, #40]	@ 0x28
 800ad9e:	2300      	movs	r3, #0
 800ada0:	e018      	b.n	800add4 <_strtod_l+0x264>
 800ada2:	4638      	mov	r0, r7
 800ada4:	e7da      	b.n	800ad5c <_strtod_l+0x1ec>
 800ada6:	2b08      	cmp	r3, #8
 800ada8:	f103 0301 	add.w	r3, r3, #1
 800adac:	dc03      	bgt.n	800adb6 <_strtod_l+0x246>
 800adae:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800adb0:	434e      	muls	r6, r1
 800adb2:	960a      	str	r6, [sp, #40]	@ 0x28
 800adb4:	e7e7      	b.n	800ad86 <_strtod_l+0x216>
 800adb6:	2b10      	cmp	r3, #16
 800adb8:	bfde      	ittt	le
 800adba:	9e08      	ldrle	r6, [sp, #32]
 800adbc:	434e      	mulle	r6, r1
 800adbe:	9608      	strle	r6, [sp, #32]
 800adc0:	e7e1      	b.n	800ad86 <_strtod_l+0x216>
 800adc2:	280f      	cmp	r0, #15
 800adc4:	dceb      	bgt.n	800ad9e <_strtod_l+0x22e>
 800adc6:	9808      	ldr	r0, [sp, #32]
 800adc8:	230a      	movs	r3, #10
 800adca:	fb03 2300 	mla	r3, r3, r0, r2
 800adce:	9308      	str	r3, [sp, #32]
 800add0:	e7e5      	b.n	800ad9e <_strtod_l+0x22e>
 800add2:	4629      	mov	r1, r5
 800add4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800add6:	1c50      	adds	r0, r2, #1
 800add8:	9019      	str	r0, [sp, #100]	@ 0x64
 800adda:	7852      	ldrb	r2, [r2, #1]
 800addc:	4618      	mov	r0, r3
 800adde:	460d      	mov	r5, r1
 800ade0:	e7b1      	b.n	800ad46 <_strtod_l+0x1d6>
 800ade2:	f04f 0900 	mov.w	r9, #0
 800ade6:	2301      	movs	r3, #1
 800ade8:	e77d      	b.n	800ace6 <_strtod_l+0x176>
 800adea:	f04f 0c00 	mov.w	ip, #0
 800adee:	1ca2      	adds	r2, r4, #2
 800adf0:	9219      	str	r2, [sp, #100]	@ 0x64
 800adf2:	78a2      	ldrb	r2, [r4, #2]
 800adf4:	e785      	b.n	800ad02 <_strtod_l+0x192>
 800adf6:	f04f 0c01 	mov.w	ip, #1
 800adfa:	e7f8      	b.n	800adee <_strtod_l+0x27e>
 800adfc:	0800cc18 	.word	0x0800cc18
 800ae00:	0800cc00 	.word	0x0800cc00
 800ae04:	7ff00000 	.word	0x7ff00000
 800ae08:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ae0a:	1c51      	adds	r1, r2, #1
 800ae0c:	9119      	str	r1, [sp, #100]	@ 0x64
 800ae0e:	7852      	ldrb	r2, [r2, #1]
 800ae10:	2a30      	cmp	r2, #48	@ 0x30
 800ae12:	d0f9      	beq.n	800ae08 <_strtod_l+0x298>
 800ae14:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ae18:	2908      	cmp	r1, #8
 800ae1a:	f63f af78 	bhi.w	800ad0e <_strtod_l+0x19e>
 800ae1e:	3a30      	subs	r2, #48	@ 0x30
 800ae20:	920e      	str	r2, [sp, #56]	@ 0x38
 800ae22:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ae24:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ae26:	f04f 080a 	mov.w	r8, #10
 800ae2a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ae2c:	1c56      	adds	r6, r2, #1
 800ae2e:	9619      	str	r6, [sp, #100]	@ 0x64
 800ae30:	7852      	ldrb	r2, [r2, #1]
 800ae32:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ae36:	f1be 0f09 	cmp.w	lr, #9
 800ae3a:	d939      	bls.n	800aeb0 <_strtod_l+0x340>
 800ae3c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ae3e:	1a76      	subs	r6, r6, r1
 800ae40:	2e08      	cmp	r6, #8
 800ae42:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ae46:	dc03      	bgt.n	800ae50 <_strtod_l+0x2e0>
 800ae48:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ae4a:	4588      	cmp	r8, r1
 800ae4c:	bfa8      	it	ge
 800ae4e:	4688      	movge	r8, r1
 800ae50:	f1bc 0f00 	cmp.w	ip, #0
 800ae54:	d001      	beq.n	800ae5a <_strtod_l+0x2ea>
 800ae56:	f1c8 0800 	rsb	r8, r8, #0
 800ae5a:	2d00      	cmp	r5, #0
 800ae5c:	d14e      	bne.n	800aefc <_strtod_l+0x38c>
 800ae5e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ae60:	4308      	orrs	r0, r1
 800ae62:	f47f aebe 	bne.w	800abe2 <_strtod_l+0x72>
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	f47f aed6 	bne.w	800ac18 <_strtod_l+0xa8>
 800ae6c:	2a69      	cmp	r2, #105	@ 0x69
 800ae6e:	d028      	beq.n	800aec2 <_strtod_l+0x352>
 800ae70:	dc25      	bgt.n	800aebe <_strtod_l+0x34e>
 800ae72:	2a49      	cmp	r2, #73	@ 0x49
 800ae74:	d025      	beq.n	800aec2 <_strtod_l+0x352>
 800ae76:	2a4e      	cmp	r2, #78	@ 0x4e
 800ae78:	f47f aece 	bne.w	800ac18 <_strtod_l+0xa8>
 800ae7c:	499b      	ldr	r1, [pc, #620]	@ (800b0ec <_strtod_l+0x57c>)
 800ae7e:	a819      	add	r0, sp, #100	@ 0x64
 800ae80:	f001 fbb6 	bl	800c5f0 <__match>
 800ae84:	2800      	cmp	r0, #0
 800ae86:	f43f aec7 	beq.w	800ac18 <_strtod_l+0xa8>
 800ae8a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ae8c:	781b      	ldrb	r3, [r3, #0]
 800ae8e:	2b28      	cmp	r3, #40	@ 0x28
 800ae90:	d12e      	bne.n	800aef0 <_strtod_l+0x380>
 800ae92:	4997      	ldr	r1, [pc, #604]	@ (800b0f0 <_strtod_l+0x580>)
 800ae94:	aa1c      	add	r2, sp, #112	@ 0x70
 800ae96:	a819      	add	r0, sp, #100	@ 0x64
 800ae98:	f001 fbbe 	bl	800c618 <__hexnan>
 800ae9c:	2805      	cmp	r0, #5
 800ae9e:	d127      	bne.n	800aef0 <_strtod_l+0x380>
 800aea0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800aea2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800aea6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800aeaa:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800aeae:	e698      	b.n	800abe2 <_strtod_l+0x72>
 800aeb0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800aeb2:	fb08 2101 	mla	r1, r8, r1, r2
 800aeb6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800aeba:	920e      	str	r2, [sp, #56]	@ 0x38
 800aebc:	e7b5      	b.n	800ae2a <_strtod_l+0x2ba>
 800aebe:	2a6e      	cmp	r2, #110	@ 0x6e
 800aec0:	e7da      	b.n	800ae78 <_strtod_l+0x308>
 800aec2:	498c      	ldr	r1, [pc, #560]	@ (800b0f4 <_strtod_l+0x584>)
 800aec4:	a819      	add	r0, sp, #100	@ 0x64
 800aec6:	f001 fb93 	bl	800c5f0 <__match>
 800aeca:	2800      	cmp	r0, #0
 800aecc:	f43f aea4 	beq.w	800ac18 <_strtod_l+0xa8>
 800aed0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aed2:	4989      	ldr	r1, [pc, #548]	@ (800b0f8 <_strtod_l+0x588>)
 800aed4:	3b01      	subs	r3, #1
 800aed6:	a819      	add	r0, sp, #100	@ 0x64
 800aed8:	9319      	str	r3, [sp, #100]	@ 0x64
 800aeda:	f001 fb89 	bl	800c5f0 <__match>
 800aede:	b910      	cbnz	r0, 800aee6 <_strtod_l+0x376>
 800aee0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aee2:	3301      	adds	r3, #1
 800aee4:	9319      	str	r3, [sp, #100]	@ 0x64
 800aee6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800b108 <_strtod_l+0x598>
 800aeea:	f04f 0a00 	mov.w	sl, #0
 800aeee:	e678      	b.n	800abe2 <_strtod_l+0x72>
 800aef0:	4882      	ldr	r0, [pc, #520]	@ (800b0fc <_strtod_l+0x58c>)
 800aef2:	f001 f8b9 	bl	800c068 <nan>
 800aef6:	ec5b ab10 	vmov	sl, fp, d0
 800aefa:	e672      	b.n	800abe2 <_strtod_l+0x72>
 800aefc:	eba8 0309 	sub.w	r3, r8, r9
 800af00:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800af02:	9309      	str	r3, [sp, #36]	@ 0x24
 800af04:	2f00      	cmp	r7, #0
 800af06:	bf08      	it	eq
 800af08:	462f      	moveq	r7, r5
 800af0a:	2d10      	cmp	r5, #16
 800af0c:	462c      	mov	r4, r5
 800af0e:	bfa8      	it	ge
 800af10:	2410      	movge	r4, #16
 800af12:	f7f5 fb1f 	bl	8000554 <__aeabi_ui2d>
 800af16:	2d09      	cmp	r5, #9
 800af18:	4682      	mov	sl, r0
 800af1a:	468b      	mov	fp, r1
 800af1c:	dc13      	bgt.n	800af46 <_strtod_l+0x3d6>
 800af1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af20:	2b00      	cmp	r3, #0
 800af22:	f43f ae5e 	beq.w	800abe2 <_strtod_l+0x72>
 800af26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af28:	dd78      	ble.n	800b01c <_strtod_l+0x4ac>
 800af2a:	2b16      	cmp	r3, #22
 800af2c:	dc5f      	bgt.n	800afee <_strtod_l+0x47e>
 800af2e:	4974      	ldr	r1, [pc, #464]	@ (800b100 <_strtod_l+0x590>)
 800af30:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800af34:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af38:	4652      	mov	r2, sl
 800af3a:	465b      	mov	r3, fp
 800af3c:	f7f5 fb84 	bl	8000648 <__aeabi_dmul>
 800af40:	4682      	mov	sl, r0
 800af42:	468b      	mov	fp, r1
 800af44:	e64d      	b.n	800abe2 <_strtod_l+0x72>
 800af46:	4b6e      	ldr	r3, [pc, #440]	@ (800b100 <_strtod_l+0x590>)
 800af48:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800af4c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800af50:	f7f5 fb7a 	bl	8000648 <__aeabi_dmul>
 800af54:	4682      	mov	sl, r0
 800af56:	9808      	ldr	r0, [sp, #32]
 800af58:	468b      	mov	fp, r1
 800af5a:	f7f5 fafb 	bl	8000554 <__aeabi_ui2d>
 800af5e:	4602      	mov	r2, r0
 800af60:	460b      	mov	r3, r1
 800af62:	4650      	mov	r0, sl
 800af64:	4659      	mov	r1, fp
 800af66:	f7f5 f9b9 	bl	80002dc <__adddf3>
 800af6a:	2d0f      	cmp	r5, #15
 800af6c:	4682      	mov	sl, r0
 800af6e:	468b      	mov	fp, r1
 800af70:	ddd5      	ble.n	800af1e <_strtod_l+0x3ae>
 800af72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af74:	1b2c      	subs	r4, r5, r4
 800af76:	441c      	add	r4, r3
 800af78:	2c00      	cmp	r4, #0
 800af7a:	f340 8096 	ble.w	800b0aa <_strtod_l+0x53a>
 800af7e:	f014 030f 	ands.w	r3, r4, #15
 800af82:	d00a      	beq.n	800af9a <_strtod_l+0x42a>
 800af84:	495e      	ldr	r1, [pc, #376]	@ (800b100 <_strtod_l+0x590>)
 800af86:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800af8a:	4652      	mov	r2, sl
 800af8c:	465b      	mov	r3, fp
 800af8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af92:	f7f5 fb59 	bl	8000648 <__aeabi_dmul>
 800af96:	4682      	mov	sl, r0
 800af98:	468b      	mov	fp, r1
 800af9a:	f034 040f 	bics.w	r4, r4, #15
 800af9e:	d073      	beq.n	800b088 <_strtod_l+0x518>
 800afa0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800afa4:	dd48      	ble.n	800b038 <_strtod_l+0x4c8>
 800afa6:	2400      	movs	r4, #0
 800afa8:	46a0      	mov	r8, r4
 800afaa:	940a      	str	r4, [sp, #40]	@ 0x28
 800afac:	46a1      	mov	r9, r4
 800afae:	9a05      	ldr	r2, [sp, #20]
 800afb0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800b108 <_strtod_l+0x598>
 800afb4:	2322      	movs	r3, #34	@ 0x22
 800afb6:	6013      	str	r3, [r2, #0]
 800afb8:	f04f 0a00 	mov.w	sl, #0
 800afbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	f43f ae0f 	beq.w	800abe2 <_strtod_l+0x72>
 800afc4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800afc6:	9805      	ldr	r0, [sp, #20]
 800afc8:	f7ff f942 	bl	800a250 <_Bfree>
 800afcc:	9805      	ldr	r0, [sp, #20]
 800afce:	4649      	mov	r1, r9
 800afd0:	f7ff f93e 	bl	800a250 <_Bfree>
 800afd4:	9805      	ldr	r0, [sp, #20]
 800afd6:	4641      	mov	r1, r8
 800afd8:	f7ff f93a 	bl	800a250 <_Bfree>
 800afdc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800afde:	9805      	ldr	r0, [sp, #20]
 800afe0:	f7ff f936 	bl	800a250 <_Bfree>
 800afe4:	9805      	ldr	r0, [sp, #20]
 800afe6:	4621      	mov	r1, r4
 800afe8:	f7ff f932 	bl	800a250 <_Bfree>
 800afec:	e5f9      	b.n	800abe2 <_strtod_l+0x72>
 800afee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aff0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800aff4:	4293      	cmp	r3, r2
 800aff6:	dbbc      	blt.n	800af72 <_strtod_l+0x402>
 800aff8:	4c41      	ldr	r4, [pc, #260]	@ (800b100 <_strtod_l+0x590>)
 800affa:	f1c5 050f 	rsb	r5, r5, #15
 800affe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b002:	4652      	mov	r2, sl
 800b004:	465b      	mov	r3, fp
 800b006:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b00a:	f7f5 fb1d 	bl	8000648 <__aeabi_dmul>
 800b00e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b010:	1b5d      	subs	r5, r3, r5
 800b012:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b016:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b01a:	e78f      	b.n	800af3c <_strtod_l+0x3cc>
 800b01c:	3316      	adds	r3, #22
 800b01e:	dba8      	blt.n	800af72 <_strtod_l+0x402>
 800b020:	4b37      	ldr	r3, [pc, #220]	@ (800b100 <_strtod_l+0x590>)
 800b022:	eba9 0808 	sub.w	r8, r9, r8
 800b026:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b02a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b02e:	4650      	mov	r0, sl
 800b030:	4659      	mov	r1, fp
 800b032:	f7f5 fc33 	bl	800089c <__aeabi_ddiv>
 800b036:	e783      	b.n	800af40 <_strtod_l+0x3d0>
 800b038:	4b32      	ldr	r3, [pc, #200]	@ (800b104 <_strtod_l+0x594>)
 800b03a:	9308      	str	r3, [sp, #32]
 800b03c:	2300      	movs	r3, #0
 800b03e:	1124      	asrs	r4, r4, #4
 800b040:	4650      	mov	r0, sl
 800b042:	4659      	mov	r1, fp
 800b044:	461e      	mov	r6, r3
 800b046:	2c01      	cmp	r4, #1
 800b048:	dc21      	bgt.n	800b08e <_strtod_l+0x51e>
 800b04a:	b10b      	cbz	r3, 800b050 <_strtod_l+0x4e0>
 800b04c:	4682      	mov	sl, r0
 800b04e:	468b      	mov	fp, r1
 800b050:	492c      	ldr	r1, [pc, #176]	@ (800b104 <_strtod_l+0x594>)
 800b052:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b056:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b05a:	4652      	mov	r2, sl
 800b05c:	465b      	mov	r3, fp
 800b05e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b062:	f7f5 faf1 	bl	8000648 <__aeabi_dmul>
 800b066:	4b28      	ldr	r3, [pc, #160]	@ (800b108 <_strtod_l+0x598>)
 800b068:	460a      	mov	r2, r1
 800b06a:	400b      	ands	r3, r1
 800b06c:	4927      	ldr	r1, [pc, #156]	@ (800b10c <_strtod_l+0x59c>)
 800b06e:	428b      	cmp	r3, r1
 800b070:	4682      	mov	sl, r0
 800b072:	d898      	bhi.n	800afa6 <_strtod_l+0x436>
 800b074:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b078:	428b      	cmp	r3, r1
 800b07a:	bf86      	itte	hi
 800b07c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800b110 <_strtod_l+0x5a0>
 800b080:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800b084:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b088:	2300      	movs	r3, #0
 800b08a:	9308      	str	r3, [sp, #32]
 800b08c:	e07a      	b.n	800b184 <_strtod_l+0x614>
 800b08e:	07e2      	lsls	r2, r4, #31
 800b090:	d505      	bpl.n	800b09e <_strtod_l+0x52e>
 800b092:	9b08      	ldr	r3, [sp, #32]
 800b094:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b098:	f7f5 fad6 	bl	8000648 <__aeabi_dmul>
 800b09c:	2301      	movs	r3, #1
 800b09e:	9a08      	ldr	r2, [sp, #32]
 800b0a0:	3208      	adds	r2, #8
 800b0a2:	3601      	adds	r6, #1
 800b0a4:	1064      	asrs	r4, r4, #1
 800b0a6:	9208      	str	r2, [sp, #32]
 800b0a8:	e7cd      	b.n	800b046 <_strtod_l+0x4d6>
 800b0aa:	d0ed      	beq.n	800b088 <_strtod_l+0x518>
 800b0ac:	4264      	negs	r4, r4
 800b0ae:	f014 020f 	ands.w	r2, r4, #15
 800b0b2:	d00a      	beq.n	800b0ca <_strtod_l+0x55a>
 800b0b4:	4b12      	ldr	r3, [pc, #72]	@ (800b100 <_strtod_l+0x590>)
 800b0b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b0ba:	4650      	mov	r0, sl
 800b0bc:	4659      	mov	r1, fp
 800b0be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0c2:	f7f5 fbeb 	bl	800089c <__aeabi_ddiv>
 800b0c6:	4682      	mov	sl, r0
 800b0c8:	468b      	mov	fp, r1
 800b0ca:	1124      	asrs	r4, r4, #4
 800b0cc:	d0dc      	beq.n	800b088 <_strtod_l+0x518>
 800b0ce:	2c1f      	cmp	r4, #31
 800b0d0:	dd20      	ble.n	800b114 <_strtod_l+0x5a4>
 800b0d2:	2400      	movs	r4, #0
 800b0d4:	46a0      	mov	r8, r4
 800b0d6:	940a      	str	r4, [sp, #40]	@ 0x28
 800b0d8:	46a1      	mov	r9, r4
 800b0da:	9a05      	ldr	r2, [sp, #20]
 800b0dc:	2322      	movs	r3, #34	@ 0x22
 800b0de:	f04f 0a00 	mov.w	sl, #0
 800b0e2:	f04f 0b00 	mov.w	fp, #0
 800b0e6:	6013      	str	r3, [r2, #0]
 800b0e8:	e768      	b.n	800afbc <_strtod_l+0x44c>
 800b0ea:	bf00      	nop
 800b0ec:	0800c9f1 	.word	0x0800c9f1
 800b0f0:	0800cc04 	.word	0x0800cc04
 800b0f4:	0800c9e9 	.word	0x0800c9e9
 800b0f8:	0800ca20 	.word	0x0800ca20
 800b0fc:	0800cdad 	.word	0x0800cdad
 800b100:	0800cb38 	.word	0x0800cb38
 800b104:	0800cb10 	.word	0x0800cb10
 800b108:	7ff00000 	.word	0x7ff00000
 800b10c:	7ca00000 	.word	0x7ca00000
 800b110:	7fefffff 	.word	0x7fefffff
 800b114:	f014 0310 	ands.w	r3, r4, #16
 800b118:	bf18      	it	ne
 800b11a:	236a      	movne	r3, #106	@ 0x6a
 800b11c:	4ea9      	ldr	r6, [pc, #676]	@ (800b3c4 <_strtod_l+0x854>)
 800b11e:	9308      	str	r3, [sp, #32]
 800b120:	4650      	mov	r0, sl
 800b122:	4659      	mov	r1, fp
 800b124:	2300      	movs	r3, #0
 800b126:	07e2      	lsls	r2, r4, #31
 800b128:	d504      	bpl.n	800b134 <_strtod_l+0x5c4>
 800b12a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b12e:	f7f5 fa8b 	bl	8000648 <__aeabi_dmul>
 800b132:	2301      	movs	r3, #1
 800b134:	1064      	asrs	r4, r4, #1
 800b136:	f106 0608 	add.w	r6, r6, #8
 800b13a:	d1f4      	bne.n	800b126 <_strtod_l+0x5b6>
 800b13c:	b10b      	cbz	r3, 800b142 <_strtod_l+0x5d2>
 800b13e:	4682      	mov	sl, r0
 800b140:	468b      	mov	fp, r1
 800b142:	9b08      	ldr	r3, [sp, #32]
 800b144:	b1b3      	cbz	r3, 800b174 <_strtod_l+0x604>
 800b146:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b14a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b14e:	2b00      	cmp	r3, #0
 800b150:	4659      	mov	r1, fp
 800b152:	dd0f      	ble.n	800b174 <_strtod_l+0x604>
 800b154:	2b1f      	cmp	r3, #31
 800b156:	dd55      	ble.n	800b204 <_strtod_l+0x694>
 800b158:	2b34      	cmp	r3, #52	@ 0x34
 800b15a:	bfde      	ittt	le
 800b15c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800b160:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b164:	4093      	lslle	r3, r2
 800b166:	f04f 0a00 	mov.w	sl, #0
 800b16a:	bfcc      	ite	gt
 800b16c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b170:	ea03 0b01 	andle.w	fp, r3, r1
 800b174:	2200      	movs	r2, #0
 800b176:	2300      	movs	r3, #0
 800b178:	4650      	mov	r0, sl
 800b17a:	4659      	mov	r1, fp
 800b17c:	f7f5 fccc 	bl	8000b18 <__aeabi_dcmpeq>
 800b180:	2800      	cmp	r0, #0
 800b182:	d1a6      	bne.n	800b0d2 <_strtod_l+0x562>
 800b184:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b186:	9300      	str	r3, [sp, #0]
 800b188:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b18a:	9805      	ldr	r0, [sp, #20]
 800b18c:	462b      	mov	r3, r5
 800b18e:	463a      	mov	r2, r7
 800b190:	f7ff f8c6 	bl	800a320 <__s2b>
 800b194:	900a      	str	r0, [sp, #40]	@ 0x28
 800b196:	2800      	cmp	r0, #0
 800b198:	f43f af05 	beq.w	800afa6 <_strtod_l+0x436>
 800b19c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b19e:	2a00      	cmp	r2, #0
 800b1a0:	eba9 0308 	sub.w	r3, r9, r8
 800b1a4:	bfa8      	it	ge
 800b1a6:	2300      	movge	r3, #0
 800b1a8:	9312      	str	r3, [sp, #72]	@ 0x48
 800b1aa:	2400      	movs	r4, #0
 800b1ac:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b1b0:	9316      	str	r3, [sp, #88]	@ 0x58
 800b1b2:	46a0      	mov	r8, r4
 800b1b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b1b6:	9805      	ldr	r0, [sp, #20]
 800b1b8:	6859      	ldr	r1, [r3, #4]
 800b1ba:	f7ff f809 	bl	800a1d0 <_Balloc>
 800b1be:	4681      	mov	r9, r0
 800b1c0:	2800      	cmp	r0, #0
 800b1c2:	f43f aef4 	beq.w	800afae <_strtod_l+0x43e>
 800b1c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b1c8:	691a      	ldr	r2, [r3, #16]
 800b1ca:	3202      	adds	r2, #2
 800b1cc:	f103 010c 	add.w	r1, r3, #12
 800b1d0:	0092      	lsls	r2, r2, #2
 800b1d2:	300c      	adds	r0, #12
 800b1d4:	f000 ff38 	bl	800c048 <memcpy>
 800b1d8:	ec4b ab10 	vmov	d0, sl, fp
 800b1dc:	9805      	ldr	r0, [sp, #20]
 800b1de:	aa1c      	add	r2, sp, #112	@ 0x70
 800b1e0:	a91b      	add	r1, sp, #108	@ 0x6c
 800b1e2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b1e6:	f7ff fbd7 	bl	800a998 <__d2b>
 800b1ea:	901a      	str	r0, [sp, #104]	@ 0x68
 800b1ec:	2800      	cmp	r0, #0
 800b1ee:	f43f aede 	beq.w	800afae <_strtod_l+0x43e>
 800b1f2:	9805      	ldr	r0, [sp, #20]
 800b1f4:	2101      	movs	r1, #1
 800b1f6:	f7ff f929 	bl	800a44c <__i2b>
 800b1fa:	4680      	mov	r8, r0
 800b1fc:	b948      	cbnz	r0, 800b212 <_strtod_l+0x6a2>
 800b1fe:	f04f 0800 	mov.w	r8, #0
 800b202:	e6d4      	b.n	800afae <_strtod_l+0x43e>
 800b204:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b208:	fa02 f303 	lsl.w	r3, r2, r3
 800b20c:	ea03 0a0a 	and.w	sl, r3, sl
 800b210:	e7b0      	b.n	800b174 <_strtod_l+0x604>
 800b212:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b214:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b216:	2d00      	cmp	r5, #0
 800b218:	bfab      	itete	ge
 800b21a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b21c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b21e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b220:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b222:	bfac      	ite	ge
 800b224:	18ef      	addge	r7, r5, r3
 800b226:	1b5e      	sublt	r6, r3, r5
 800b228:	9b08      	ldr	r3, [sp, #32]
 800b22a:	1aed      	subs	r5, r5, r3
 800b22c:	4415      	add	r5, r2
 800b22e:	4b66      	ldr	r3, [pc, #408]	@ (800b3c8 <_strtod_l+0x858>)
 800b230:	3d01      	subs	r5, #1
 800b232:	429d      	cmp	r5, r3
 800b234:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b238:	da50      	bge.n	800b2dc <_strtod_l+0x76c>
 800b23a:	1b5b      	subs	r3, r3, r5
 800b23c:	2b1f      	cmp	r3, #31
 800b23e:	eba2 0203 	sub.w	r2, r2, r3
 800b242:	f04f 0101 	mov.w	r1, #1
 800b246:	dc3d      	bgt.n	800b2c4 <_strtod_l+0x754>
 800b248:	fa01 f303 	lsl.w	r3, r1, r3
 800b24c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b24e:	2300      	movs	r3, #0
 800b250:	9310      	str	r3, [sp, #64]	@ 0x40
 800b252:	18bd      	adds	r5, r7, r2
 800b254:	9b08      	ldr	r3, [sp, #32]
 800b256:	42af      	cmp	r7, r5
 800b258:	4416      	add	r6, r2
 800b25a:	441e      	add	r6, r3
 800b25c:	463b      	mov	r3, r7
 800b25e:	bfa8      	it	ge
 800b260:	462b      	movge	r3, r5
 800b262:	42b3      	cmp	r3, r6
 800b264:	bfa8      	it	ge
 800b266:	4633      	movge	r3, r6
 800b268:	2b00      	cmp	r3, #0
 800b26a:	bfc2      	ittt	gt
 800b26c:	1aed      	subgt	r5, r5, r3
 800b26e:	1af6      	subgt	r6, r6, r3
 800b270:	1aff      	subgt	r7, r7, r3
 800b272:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b274:	2b00      	cmp	r3, #0
 800b276:	dd16      	ble.n	800b2a6 <_strtod_l+0x736>
 800b278:	4641      	mov	r1, r8
 800b27a:	9805      	ldr	r0, [sp, #20]
 800b27c:	461a      	mov	r2, r3
 800b27e:	f7ff f9a5 	bl	800a5cc <__pow5mult>
 800b282:	4680      	mov	r8, r0
 800b284:	2800      	cmp	r0, #0
 800b286:	d0ba      	beq.n	800b1fe <_strtod_l+0x68e>
 800b288:	4601      	mov	r1, r0
 800b28a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b28c:	9805      	ldr	r0, [sp, #20]
 800b28e:	f7ff f8f3 	bl	800a478 <__multiply>
 800b292:	900e      	str	r0, [sp, #56]	@ 0x38
 800b294:	2800      	cmp	r0, #0
 800b296:	f43f ae8a 	beq.w	800afae <_strtod_l+0x43e>
 800b29a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b29c:	9805      	ldr	r0, [sp, #20]
 800b29e:	f7fe ffd7 	bl	800a250 <_Bfree>
 800b2a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b2a4:	931a      	str	r3, [sp, #104]	@ 0x68
 800b2a6:	2d00      	cmp	r5, #0
 800b2a8:	dc1d      	bgt.n	800b2e6 <_strtod_l+0x776>
 800b2aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	dd23      	ble.n	800b2f8 <_strtod_l+0x788>
 800b2b0:	4649      	mov	r1, r9
 800b2b2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b2b4:	9805      	ldr	r0, [sp, #20]
 800b2b6:	f7ff f989 	bl	800a5cc <__pow5mult>
 800b2ba:	4681      	mov	r9, r0
 800b2bc:	b9e0      	cbnz	r0, 800b2f8 <_strtod_l+0x788>
 800b2be:	f04f 0900 	mov.w	r9, #0
 800b2c2:	e674      	b.n	800afae <_strtod_l+0x43e>
 800b2c4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b2c8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b2cc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b2d0:	35e2      	adds	r5, #226	@ 0xe2
 800b2d2:	fa01 f305 	lsl.w	r3, r1, r5
 800b2d6:	9310      	str	r3, [sp, #64]	@ 0x40
 800b2d8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b2da:	e7ba      	b.n	800b252 <_strtod_l+0x6e2>
 800b2dc:	2300      	movs	r3, #0
 800b2de:	9310      	str	r3, [sp, #64]	@ 0x40
 800b2e0:	2301      	movs	r3, #1
 800b2e2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b2e4:	e7b5      	b.n	800b252 <_strtod_l+0x6e2>
 800b2e6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b2e8:	9805      	ldr	r0, [sp, #20]
 800b2ea:	462a      	mov	r2, r5
 800b2ec:	f7ff f9c8 	bl	800a680 <__lshift>
 800b2f0:	901a      	str	r0, [sp, #104]	@ 0x68
 800b2f2:	2800      	cmp	r0, #0
 800b2f4:	d1d9      	bne.n	800b2aa <_strtod_l+0x73a>
 800b2f6:	e65a      	b.n	800afae <_strtod_l+0x43e>
 800b2f8:	2e00      	cmp	r6, #0
 800b2fa:	dd07      	ble.n	800b30c <_strtod_l+0x79c>
 800b2fc:	4649      	mov	r1, r9
 800b2fe:	9805      	ldr	r0, [sp, #20]
 800b300:	4632      	mov	r2, r6
 800b302:	f7ff f9bd 	bl	800a680 <__lshift>
 800b306:	4681      	mov	r9, r0
 800b308:	2800      	cmp	r0, #0
 800b30a:	d0d8      	beq.n	800b2be <_strtod_l+0x74e>
 800b30c:	2f00      	cmp	r7, #0
 800b30e:	dd08      	ble.n	800b322 <_strtod_l+0x7b2>
 800b310:	4641      	mov	r1, r8
 800b312:	9805      	ldr	r0, [sp, #20]
 800b314:	463a      	mov	r2, r7
 800b316:	f7ff f9b3 	bl	800a680 <__lshift>
 800b31a:	4680      	mov	r8, r0
 800b31c:	2800      	cmp	r0, #0
 800b31e:	f43f ae46 	beq.w	800afae <_strtod_l+0x43e>
 800b322:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b324:	9805      	ldr	r0, [sp, #20]
 800b326:	464a      	mov	r2, r9
 800b328:	f7ff fa32 	bl	800a790 <__mdiff>
 800b32c:	4604      	mov	r4, r0
 800b32e:	2800      	cmp	r0, #0
 800b330:	f43f ae3d 	beq.w	800afae <_strtod_l+0x43e>
 800b334:	68c3      	ldr	r3, [r0, #12]
 800b336:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b338:	2300      	movs	r3, #0
 800b33a:	60c3      	str	r3, [r0, #12]
 800b33c:	4641      	mov	r1, r8
 800b33e:	f7ff fa0b 	bl	800a758 <__mcmp>
 800b342:	2800      	cmp	r0, #0
 800b344:	da46      	bge.n	800b3d4 <_strtod_l+0x864>
 800b346:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b348:	ea53 030a 	orrs.w	r3, r3, sl
 800b34c:	d16c      	bne.n	800b428 <_strtod_l+0x8b8>
 800b34e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b352:	2b00      	cmp	r3, #0
 800b354:	d168      	bne.n	800b428 <_strtod_l+0x8b8>
 800b356:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b35a:	0d1b      	lsrs	r3, r3, #20
 800b35c:	051b      	lsls	r3, r3, #20
 800b35e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b362:	d961      	bls.n	800b428 <_strtod_l+0x8b8>
 800b364:	6963      	ldr	r3, [r4, #20]
 800b366:	b913      	cbnz	r3, 800b36e <_strtod_l+0x7fe>
 800b368:	6923      	ldr	r3, [r4, #16]
 800b36a:	2b01      	cmp	r3, #1
 800b36c:	dd5c      	ble.n	800b428 <_strtod_l+0x8b8>
 800b36e:	4621      	mov	r1, r4
 800b370:	2201      	movs	r2, #1
 800b372:	9805      	ldr	r0, [sp, #20]
 800b374:	f7ff f984 	bl	800a680 <__lshift>
 800b378:	4641      	mov	r1, r8
 800b37a:	4604      	mov	r4, r0
 800b37c:	f7ff f9ec 	bl	800a758 <__mcmp>
 800b380:	2800      	cmp	r0, #0
 800b382:	dd51      	ble.n	800b428 <_strtod_l+0x8b8>
 800b384:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b388:	9a08      	ldr	r2, [sp, #32]
 800b38a:	0d1b      	lsrs	r3, r3, #20
 800b38c:	051b      	lsls	r3, r3, #20
 800b38e:	2a00      	cmp	r2, #0
 800b390:	d06b      	beq.n	800b46a <_strtod_l+0x8fa>
 800b392:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b396:	d868      	bhi.n	800b46a <_strtod_l+0x8fa>
 800b398:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b39c:	f67f ae9d 	bls.w	800b0da <_strtod_l+0x56a>
 800b3a0:	4b0a      	ldr	r3, [pc, #40]	@ (800b3cc <_strtod_l+0x85c>)
 800b3a2:	4650      	mov	r0, sl
 800b3a4:	4659      	mov	r1, fp
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	f7f5 f94e 	bl	8000648 <__aeabi_dmul>
 800b3ac:	4b08      	ldr	r3, [pc, #32]	@ (800b3d0 <_strtod_l+0x860>)
 800b3ae:	400b      	ands	r3, r1
 800b3b0:	4682      	mov	sl, r0
 800b3b2:	468b      	mov	fp, r1
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	f47f ae05 	bne.w	800afc4 <_strtod_l+0x454>
 800b3ba:	9a05      	ldr	r2, [sp, #20]
 800b3bc:	2322      	movs	r3, #34	@ 0x22
 800b3be:	6013      	str	r3, [r2, #0]
 800b3c0:	e600      	b.n	800afc4 <_strtod_l+0x454>
 800b3c2:	bf00      	nop
 800b3c4:	0800cc30 	.word	0x0800cc30
 800b3c8:	fffffc02 	.word	0xfffffc02
 800b3cc:	39500000 	.word	0x39500000
 800b3d0:	7ff00000 	.word	0x7ff00000
 800b3d4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b3d8:	d165      	bne.n	800b4a6 <_strtod_l+0x936>
 800b3da:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b3dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b3e0:	b35a      	cbz	r2, 800b43a <_strtod_l+0x8ca>
 800b3e2:	4a9f      	ldr	r2, [pc, #636]	@ (800b660 <_strtod_l+0xaf0>)
 800b3e4:	4293      	cmp	r3, r2
 800b3e6:	d12b      	bne.n	800b440 <_strtod_l+0x8d0>
 800b3e8:	9b08      	ldr	r3, [sp, #32]
 800b3ea:	4651      	mov	r1, sl
 800b3ec:	b303      	cbz	r3, 800b430 <_strtod_l+0x8c0>
 800b3ee:	4b9d      	ldr	r3, [pc, #628]	@ (800b664 <_strtod_l+0xaf4>)
 800b3f0:	465a      	mov	r2, fp
 800b3f2:	4013      	ands	r3, r2
 800b3f4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b3f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b3fc:	d81b      	bhi.n	800b436 <_strtod_l+0x8c6>
 800b3fe:	0d1b      	lsrs	r3, r3, #20
 800b400:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b404:	fa02 f303 	lsl.w	r3, r2, r3
 800b408:	4299      	cmp	r1, r3
 800b40a:	d119      	bne.n	800b440 <_strtod_l+0x8d0>
 800b40c:	4b96      	ldr	r3, [pc, #600]	@ (800b668 <_strtod_l+0xaf8>)
 800b40e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b410:	429a      	cmp	r2, r3
 800b412:	d102      	bne.n	800b41a <_strtod_l+0x8aa>
 800b414:	3101      	adds	r1, #1
 800b416:	f43f adca 	beq.w	800afae <_strtod_l+0x43e>
 800b41a:	4b92      	ldr	r3, [pc, #584]	@ (800b664 <_strtod_l+0xaf4>)
 800b41c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b41e:	401a      	ands	r2, r3
 800b420:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b424:	f04f 0a00 	mov.w	sl, #0
 800b428:	9b08      	ldr	r3, [sp, #32]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d1b8      	bne.n	800b3a0 <_strtod_l+0x830>
 800b42e:	e5c9      	b.n	800afc4 <_strtod_l+0x454>
 800b430:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b434:	e7e8      	b.n	800b408 <_strtod_l+0x898>
 800b436:	4613      	mov	r3, r2
 800b438:	e7e6      	b.n	800b408 <_strtod_l+0x898>
 800b43a:	ea53 030a 	orrs.w	r3, r3, sl
 800b43e:	d0a1      	beq.n	800b384 <_strtod_l+0x814>
 800b440:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b442:	b1db      	cbz	r3, 800b47c <_strtod_l+0x90c>
 800b444:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b446:	4213      	tst	r3, r2
 800b448:	d0ee      	beq.n	800b428 <_strtod_l+0x8b8>
 800b44a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b44c:	9a08      	ldr	r2, [sp, #32]
 800b44e:	4650      	mov	r0, sl
 800b450:	4659      	mov	r1, fp
 800b452:	b1bb      	cbz	r3, 800b484 <_strtod_l+0x914>
 800b454:	f7ff fb6e 	bl	800ab34 <sulp>
 800b458:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b45c:	ec53 2b10 	vmov	r2, r3, d0
 800b460:	f7f4 ff3c 	bl	80002dc <__adddf3>
 800b464:	4682      	mov	sl, r0
 800b466:	468b      	mov	fp, r1
 800b468:	e7de      	b.n	800b428 <_strtod_l+0x8b8>
 800b46a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b46e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b472:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b476:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800b47a:	e7d5      	b.n	800b428 <_strtod_l+0x8b8>
 800b47c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b47e:	ea13 0f0a 	tst.w	r3, sl
 800b482:	e7e1      	b.n	800b448 <_strtod_l+0x8d8>
 800b484:	f7ff fb56 	bl	800ab34 <sulp>
 800b488:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b48c:	ec53 2b10 	vmov	r2, r3, d0
 800b490:	f7f4 ff22 	bl	80002d8 <__aeabi_dsub>
 800b494:	2200      	movs	r2, #0
 800b496:	2300      	movs	r3, #0
 800b498:	4682      	mov	sl, r0
 800b49a:	468b      	mov	fp, r1
 800b49c:	f7f5 fb3c 	bl	8000b18 <__aeabi_dcmpeq>
 800b4a0:	2800      	cmp	r0, #0
 800b4a2:	d0c1      	beq.n	800b428 <_strtod_l+0x8b8>
 800b4a4:	e619      	b.n	800b0da <_strtod_l+0x56a>
 800b4a6:	4641      	mov	r1, r8
 800b4a8:	4620      	mov	r0, r4
 800b4aa:	f7ff facd 	bl	800aa48 <__ratio>
 800b4ae:	ec57 6b10 	vmov	r6, r7, d0
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b4b8:	4630      	mov	r0, r6
 800b4ba:	4639      	mov	r1, r7
 800b4bc:	f7f5 fb40 	bl	8000b40 <__aeabi_dcmple>
 800b4c0:	2800      	cmp	r0, #0
 800b4c2:	d06f      	beq.n	800b5a4 <_strtod_l+0xa34>
 800b4c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d17a      	bne.n	800b5c0 <_strtod_l+0xa50>
 800b4ca:	f1ba 0f00 	cmp.w	sl, #0
 800b4ce:	d158      	bne.n	800b582 <_strtod_l+0xa12>
 800b4d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b4d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d15a      	bne.n	800b590 <_strtod_l+0xa20>
 800b4da:	4b64      	ldr	r3, [pc, #400]	@ (800b66c <_strtod_l+0xafc>)
 800b4dc:	2200      	movs	r2, #0
 800b4de:	4630      	mov	r0, r6
 800b4e0:	4639      	mov	r1, r7
 800b4e2:	f7f5 fb23 	bl	8000b2c <__aeabi_dcmplt>
 800b4e6:	2800      	cmp	r0, #0
 800b4e8:	d159      	bne.n	800b59e <_strtod_l+0xa2e>
 800b4ea:	4630      	mov	r0, r6
 800b4ec:	4639      	mov	r1, r7
 800b4ee:	4b60      	ldr	r3, [pc, #384]	@ (800b670 <_strtod_l+0xb00>)
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	f7f5 f8a9 	bl	8000648 <__aeabi_dmul>
 800b4f6:	4606      	mov	r6, r0
 800b4f8:	460f      	mov	r7, r1
 800b4fa:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b4fe:	9606      	str	r6, [sp, #24]
 800b500:	9307      	str	r3, [sp, #28]
 800b502:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b506:	4d57      	ldr	r5, [pc, #348]	@ (800b664 <_strtod_l+0xaf4>)
 800b508:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b50c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b50e:	401d      	ands	r5, r3
 800b510:	4b58      	ldr	r3, [pc, #352]	@ (800b674 <_strtod_l+0xb04>)
 800b512:	429d      	cmp	r5, r3
 800b514:	f040 80b2 	bne.w	800b67c <_strtod_l+0xb0c>
 800b518:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b51a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b51e:	ec4b ab10 	vmov	d0, sl, fp
 800b522:	f7ff f9c9 	bl	800a8b8 <__ulp>
 800b526:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b52a:	ec51 0b10 	vmov	r0, r1, d0
 800b52e:	f7f5 f88b 	bl	8000648 <__aeabi_dmul>
 800b532:	4652      	mov	r2, sl
 800b534:	465b      	mov	r3, fp
 800b536:	f7f4 fed1 	bl	80002dc <__adddf3>
 800b53a:	460b      	mov	r3, r1
 800b53c:	4949      	ldr	r1, [pc, #292]	@ (800b664 <_strtod_l+0xaf4>)
 800b53e:	4a4e      	ldr	r2, [pc, #312]	@ (800b678 <_strtod_l+0xb08>)
 800b540:	4019      	ands	r1, r3
 800b542:	4291      	cmp	r1, r2
 800b544:	4682      	mov	sl, r0
 800b546:	d942      	bls.n	800b5ce <_strtod_l+0xa5e>
 800b548:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b54a:	4b47      	ldr	r3, [pc, #284]	@ (800b668 <_strtod_l+0xaf8>)
 800b54c:	429a      	cmp	r2, r3
 800b54e:	d103      	bne.n	800b558 <_strtod_l+0x9e8>
 800b550:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b552:	3301      	adds	r3, #1
 800b554:	f43f ad2b 	beq.w	800afae <_strtod_l+0x43e>
 800b558:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b668 <_strtod_l+0xaf8>
 800b55c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800b560:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b562:	9805      	ldr	r0, [sp, #20]
 800b564:	f7fe fe74 	bl	800a250 <_Bfree>
 800b568:	9805      	ldr	r0, [sp, #20]
 800b56a:	4649      	mov	r1, r9
 800b56c:	f7fe fe70 	bl	800a250 <_Bfree>
 800b570:	9805      	ldr	r0, [sp, #20]
 800b572:	4641      	mov	r1, r8
 800b574:	f7fe fe6c 	bl	800a250 <_Bfree>
 800b578:	9805      	ldr	r0, [sp, #20]
 800b57a:	4621      	mov	r1, r4
 800b57c:	f7fe fe68 	bl	800a250 <_Bfree>
 800b580:	e618      	b.n	800b1b4 <_strtod_l+0x644>
 800b582:	f1ba 0f01 	cmp.w	sl, #1
 800b586:	d103      	bne.n	800b590 <_strtod_l+0xa20>
 800b588:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	f43f ada5 	beq.w	800b0da <_strtod_l+0x56a>
 800b590:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b640 <_strtod_l+0xad0>
 800b594:	4f35      	ldr	r7, [pc, #212]	@ (800b66c <_strtod_l+0xafc>)
 800b596:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b59a:	2600      	movs	r6, #0
 800b59c:	e7b1      	b.n	800b502 <_strtod_l+0x992>
 800b59e:	4f34      	ldr	r7, [pc, #208]	@ (800b670 <_strtod_l+0xb00>)
 800b5a0:	2600      	movs	r6, #0
 800b5a2:	e7aa      	b.n	800b4fa <_strtod_l+0x98a>
 800b5a4:	4b32      	ldr	r3, [pc, #200]	@ (800b670 <_strtod_l+0xb00>)
 800b5a6:	4630      	mov	r0, r6
 800b5a8:	4639      	mov	r1, r7
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	f7f5 f84c 	bl	8000648 <__aeabi_dmul>
 800b5b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b5b2:	4606      	mov	r6, r0
 800b5b4:	460f      	mov	r7, r1
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d09f      	beq.n	800b4fa <_strtod_l+0x98a>
 800b5ba:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b5be:	e7a0      	b.n	800b502 <_strtod_l+0x992>
 800b5c0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b648 <_strtod_l+0xad8>
 800b5c4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b5c8:	ec57 6b17 	vmov	r6, r7, d7
 800b5cc:	e799      	b.n	800b502 <_strtod_l+0x992>
 800b5ce:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b5d2:	9b08      	ldr	r3, [sp, #32]
 800b5d4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d1c1      	bne.n	800b560 <_strtod_l+0x9f0>
 800b5dc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b5e0:	0d1b      	lsrs	r3, r3, #20
 800b5e2:	051b      	lsls	r3, r3, #20
 800b5e4:	429d      	cmp	r5, r3
 800b5e6:	d1bb      	bne.n	800b560 <_strtod_l+0x9f0>
 800b5e8:	4630      	mov	r0, r6
 800b5ea:	4639      	mov	r1, r7
 800b5ec:	f7f5 fb8c 	bl	8000d08 <__aeabi_d2lz>
 800b5f0:	f7f4 fffc 	bl	80005ec <__aeabi_l2d>
 800b5f4:	4602      	mov	r2, r0
 800b5f6:	460b      	mov	r3, r1
 800b5f8:	4630      	mov	r0, r6
 800b5fa:	4639      	mov	r1, r7
 800b5fc:	f7f4 fe6c 	bl	80002d8 <__aeabi_dsub>
 800b600:	460b      	mov	r3, r1
 800b602:	4602      	mov	r2, r0
 800b604:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b608:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b60c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b60e:	ea46 060a 	orr.w	r6, r6, sl
 800b612:	431e      	orrs	r6, r3
 800b614:	d06f      	beq.n	800b6f6 <_strtod_l+0xb86>
 800b616:	a30e      	add	r3, pc, #56	@ (adr r3, 800b650 <_strtod_l+0xae0>)
 800b618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b61c:	f7f5 fa86 	bl	8000b2c <__aeabi_dcmplt>
 800b620:	2800      	cmp	r0, #0
 800b622:	f47f accf 	bne.w	800afc4 <_strtod_l+0x454>
 800b626:	a30c      	add	r3, pc, #48	@ (adr r3, 800b658 <_strtod_l+0xae8>)
 800b628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b62c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b630:	f7f5 fa9a 	bl	8000b68 <__aeabi_dcmpgt>
 800b634:	2800      	cmp	r0, #0
 800b636:	d093      	beq.n	800b560 <_strtod_l+0x9f0>
 800b638:	e4c4      	b.n	800afc4 <_strtod_l+0x454>
 800b63a:	bf00      	nop
 800b63c:	f3af 8000 	nop.w
 800b640:	00000000 	.word	0x00000000
 800b644:	bff00000 	.word	0xbff00000
 800b648:	00000000 	.word	0x00000000
 800b64c:	3ff00000 	.word	0x3ff00000
 800b650:	94a03595 	.word	0x94a03595
 800b654:	3fdfffff 	.word	0x3fdfffff
 800b658:	35afe535 	.word	0x35afe535
 800b65c:	3fe00000 	.word	0x3fe00000
 800b660:	000fffff 	.word	0x000fffff
 800b664:	7ff00000 	.word	0x7ff00000
 800b668:	7fefffff 	.word	0x7fefffff
 800b66c:	3ff00000 	.word	0x3ff00000
 800b670:	3fe00000 	.word	0x3fe00000
 800b674:	7fe00000 	.word	0x7fe00000
 800b678:	7c9fffff 	.word	0x7c9fffff
 800b67c:	9b08      	ldr	r3, [sp, #32]
 800b67e:	b323      	cbz	r3, 800b6ca <_strtod_l+0xb5a>
 800b680:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b684:	d821      	bhi.n	800b6ca <_strtod_l+0xb5a>
 800b686:	a328      	add	r3, pc, #160	@ (adr r3, 800b728 <_strtod_l+0xbb8>)
 800b688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b68c:	4630      	mov	r0, r6
 800b68e:	4639      	mov	r1, r7
 800b690:	f7f5 fa56 	bl	8000b40 <__aeabi_dcmple>
 800b694:	b1a0      	cbz	r0, 800b6c0 <_strtod_l+0xb50>
 800b696:	4639      	mov	r1, r7
 800b698:	4630      	mov	r0, r6
 800b69a:	f7f5 faad 	bl	8000bf8 <__aeabi_d2uiz>
 800b69e:	2801      	cmp	r0, #1
 800b6a0:	bf38      	it	cc
 800b6a2:	2001      	movcc	r0, #1
 800b6a4:	f7f4 ff56 	bl	8000554 <__aeabi_ui2d>
 800b6a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b6aa:	4606      	mov	r6, r0
 800b6ac:	460f      	mov	r7, r1
 800b6ae:	b9fb      	cbnz	r3, 800b6f0 <_strtod_l+0xb80>
 800b6b0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b6b4:	9014      	str	r0, [sp, #80]	@ 0x50
 800b6b6:	9315      	str	r3, [sp, #84]	@ 0x54
 800b6b8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b6bc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b6c0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b6c2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b6c6:	1b5b      	subs	r3, r3, r5
 800b6c8:	9311      	str	r3, [sp, #68]	@ 0x44
 800b6ca:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b6ce:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b6d2:	f7ff f8f1 	bl	800a8b8 <__ulp>
 800b6d6:	4650      	mov	r0, sl
 800b6d8:	ec53 2b10 	vmov	r2, r3, d0
 800b6dc:	4659      	mov	r1, fp
 800b6de:	f7f4 ffb3 	bl	8000648 <__aeabi_dmul>
 800b6e2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b6e6:	f7f4 fdf9 	bl	80002dc <__adddf3>
 800b6ea:	4682      	mov	sl, r0
 800b6ec:	468b      	mov	fp, r1
 800b6ee:	e770      	b.n	800b5d2 <_strtod_l+0xa62>
 800b6f0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b6f4:	e7e0      	b.n	800b6b8 <_strtod_l+0xb48>
 800b6f6:	a30e      	add	r3, pc, #56	@ (adr r3, 800b730 <_strtod_l+0xbc0>)
 800b6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6fc:	f7f5 fa16 	bl	8000b2c <__aeabi_dcmplt>
 800b700:	e798      	b.n	800b634 <_strtod_l+0xac4>
 800b702:	2300      	movs	r3, #0
 800b704:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b706:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b708:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b70a:	6013      	str	r3, [r2, #0]
 800b70c:	f7ff ba6d 	b.w	800abea <_strtod_l+0x7a>
 800b710:	2a65      	cmp	r2, #101	@ 0x65
 800b712:	f43f ab66 	beq.w	800ade2 <_strtod_l+0x272>
 800b716:	2a45      	cmp	r2, #69	@ 0x45
 800b718:	f43f ab63 	beq.w	800ade2 <_strtod_l+0x272>
 800b71c:	2301      	movs	r3, #1
 800b71e:	f7ff bb9e 	b.w	800ae5e <_strtod_l+0x2ee>
 800b722:	bf00      	nop
 800b724:	f3af 8000 	nop.w
 800b728:	ffc00000 	.word	0xffc00000
 800b72c:	41dfffff 	.word	0x41dfffff
 800b730:	94a03595 	.word	0x94a03595
 800b734:	3fcfffff 	.word	0x3fcfffff

0800b738 <_strtod_r>:
 800b738:	4b01      	ldr	r3, [pc, #4]	@ (800b740 <_strtod_r+0x8>)
 800b73a:	f7ff ba19 	b.w	800ab70 <_strtod_l>
 800b73e:	bf00      	nop
 800b740:	20000068 	.word	0x20000068

0800b744 <_strtol_l.constprop.0>:
 800b744:	2b24      	cmp	r3, #36	@ 0x24
 800b746:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b74a:	4686      	mov	lr, r0
 800b74c:	4690      	mov	r8, r2
 800b74e:	d801      	bhi.n	800b754 <_strtol_l.constprop.0+0x10>
 800b750:	2b01      	cmp	r3, #1
 800b752:	d106      	bne.n	800b762 <_strtol_l.constprop.0+0x1e>
 800b754:	f7fd fdbc 	bl	80092d0 <__errno>
 800b758:	2316      	movs	r3, #22
 800b75a:	6003      	str	r3, [r0, #0]
 800b75c:	2000      	movs	r0, #0
 800b75e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b762:	4834      	ldr	r0, [pc, #208]	@ (800b834 <_strtol_l.constprop.0+0xf0>)
 800b764:	460d      	mov	r5, r1
 800b766:	462a      	mov	r2, r5
 800b768:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b76c:	5d06      	ldrb	r6, [r0, r4]
 800b76e:	f016 0608 	ands.w	r6, r6, #8
 800b772:	d1f8      	bne.n	800b766 <_strtol_l.constprop.0+0x22>
 800b774:	2c2d      	cmp	r4, #45	@ 0x2d
 800b776:	d12d      	bne.n	800b7d4 <_strtol_l.constprop.0+0x90>
 800b778:	782c      	ldrb	r4, [r5, #0]
 800b77a:	2601      	movs	r6, #1
 800b77c:	1c95      	adds	r5, r2, #2
 800b77e:	f033 0210 	bics.w	r2, r3, #16
 800b782:	d109      	bne.n	800b798 <_strtol_l.constprop.0+0x54>
 800b784:	2c30      	cmp	r4, #48	@ 0x30
 800b786:	d12a      	bne.n	800b7de <_strtol_l.constprop.0+0x9a>
 800b788:	782a      	ldrb	r2, [r5, #0]
 800b78a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b78e:	2a58      	cmp	r2, #88	@ 0x58
 800b790:	d125      	bne.n	800b7de <_strtol_l.constprop.0+0x9a>
 800b792:	786c      	ldrb	r4, [r5, #1]
 800b794:	2310      	movs	r3, #16
 800b796:	3502      	adds	r5, #2
 800b798:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b79c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	fbbc f9f3 	udiv	r9, ip, r3
 800b7a6:	4610      	mov	r0, r2
 800b7a8:	fb03 ca19 	mls	sl, r3, r9, ip
 800b7ac:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b7b0:	2f09      	cmp	r7, #9
 800b7b2:	d81b      	bhi.n	800b7ec <_strtol_l.constprop.0+0xa8>
 800b7b4:	463c      	mov	r4, r7
 800b7b6:	42a3      	cmp	r3, r4
 800b7b8:	dd27      	ble.n	800b80a <_strtol_l.constprop.0+0xc6>
 800b7ba:	1c57      	adds	r7, r2, #1
 800b7bc:	d007      	beq.n	800b7ce <_strtol_l.constprop.0+0x8a>
 800b7be:	4581      	cmp	r9, r0
 800b7c0:	d320      	bcc.n	800b804 <_strtol_l.constprop.0+0xc0>
 800b7c2:	d101      	bne.n	800b7c8 <_strtol_l.constprop.0+0x84>
 800b7c4:	45a2      	cmp	sl, r4
 800b7c6:	db1d      	blt.n	800b804 <_strtol_l.constprop.0+0xc0>
 800b7c8:	fb00 4003 	mla	r0, r0, r3, r4
 800b7cc:	2201      	movs	r2, #1
 800b7ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b7d2:	e7eb      	b.n	800b7ac <_strtol_l.constprop.0+0x68>
 800b7d4:	2c2b      	cmp	r4, #43	@ 0x2b
 800b7d6:	bf04      	itt	eq
 800b7d8:	782c      	ldrbeq	r4, [r5, #0]
 800b7da:	1c95      	addeq	r5, r2, #2
 800b7dc:	e7cf      	b.n	800b77e <_strtol_l.constprop.0+0x3a>
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d1da      	bne.n	800b798 <_strtol_l.constprop.0+0x54>
 800b7e2:	2c30      	cmp	r4, #48	@ 0x30
 800b7e4:	bf0c      	ite	eq
 800b7e6:	2308      	moveq	r3, #8
 800b7e8:	230a      	movne	r3, #10
 800b7ea:	e7d5      	b.n	800b798 <_strtol_l.constprop.0+0x54>
 800b7ec:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b7f0:	2f19      	cmp	r7, #25
 800b7f2:	d801      	bhi.n	800b7f8 <_strtol_l.constprop.0+0xb4>
 800b7f4:	3c37      	subs	r4, #55	@ 0x37
 800b7f6:	e7de      	b.n	800b7b6 <_strtol_l.constprop.0+0x72>
 800b7f8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b7fc:	2f19      	cmp	r7, #25
 800b7fe:	d804      	bhi.n	800b80a <_strtol_l.constprop.0+0xc6>
 800b800:	3c57      	subs	r4, #87	@ 0x57
 800b802:	e7d8      	b.n	800b7b6 <_strtol_l.constprop.0+0x72>
 800b804:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b808:	e7e1      	b.n	800b7ce <_strtol_l.constprop.0+0x8a>
 800b80a:	1c53      	adds	r3, r2, #1
 800b80c:	d108      	bne.n	800b820 <_strtol_l.constprop.0+0xdc>
 800b80e:	2322      	movs	r3, #34	@ 0x22
 800b810:	f8ce 3000 	str.w	r3, [lr]
 800b814:	4660      	mov	r0, ip
 800b816:	f1b8 0f00 	cmp.w	r8, #0
 800b81a:	d0a0      	beq.n	800b75e <_strtol_l.constprop.0+0x1a>
 800b81c:	1e69      	subs	r1, r5, #1
 800b81e:	e006      	b.n	800b82e <_strtol_l.constprop.0+0xea>
 800b820:	b106      	cbz	r6, 800b824 <_strtol_l.constprop.0+0xe0>
 800b822:	4240      	negs	r0, r0
 800b824:	f1b8 0f00 	cmp.w	r8, #0
 800b828:	d099      	beq.n	800b75e <_strtol_l.constprop.0+0x1a>
 800b82a:	2a00      	cmp	r2, #0
 800b82c:	d1f6      	bne.n	800b81c <_strtol_l.constprop.0+0xd8>
 800b82e:	f8c8 1000 	str.w	r1, [r8]
 800b832:	e794      	b.n	800b75e <_strtol_l.constprop.0+0x1a>
 800b834:	0800cc59 	.word	0x0800cc59

0800b838 <_strtol_r>:
 800b838:	f7ff bf84 	b.w	800b744 <_strtol_l.constprop.0>

0800b83c <__ssputs_r>:
 800b83c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b840:	688e      	ldr	r6, [r1, #8]
 800b842:	461f      	mov	r7, r3
 800b844:	42be      	cmp	r6, r7
 800b846:	680b      	ldr	r3, [r1, #0]
 800b848:	4682      	mov	sl, r0
 800b84a:	460c      	mov	r4, r1
 800b84c:	4690      	mov	r8, r2
 800b84e:	d82d      	bhi.n	800b8ac <__ssputs_r+0x70>
 800b850:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b854:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b858:	d026      	beq.n	800b8a8 <__ssputs_r+0x6c>
 800b85a:	6965      	ldr	r5, [r4, #20]
 800b85c:	6909      	ldr	r1, [r1, #16]
 800b85e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b862:	eba3 0901 	sub.w	r9, r3, r1
 800b866:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b86a:	1c7b      	adds	r3, r7, #1
 800b86c:	444b      	add	r3, r9
 800b86e:	106d      	asrs	r5, r5, #1
 800b870:	429d      	cmp	r5, r3
 800b872:	bf38      	it	cc
 800b874:	461d      	movcc	r5, r3
 800b876:	0553      	lsls	r3, r2, #21
 800b878:	d527      	bpl.n	800b8ca <__ssputs_r+0x8e>
 800b87a:	4629      	mov	r1, r5
 800b87c:	f7fe fc1c 	bl	800a0b8 <_malloc_r>
 800b880:	4606      	mov	r6, r0
 800b882:	b360      	cbz	r0, 800b8de <__ssputs_r+0xa2>
 800b884:	6921      	ldr	r1, [r4, #16]
 800b886:	464a      	mov	r2, r9
 800b888:	f000 fbde 	bl	800c048 <memcpy>
 800b88c:	89a3      	ldrh	r3, [r4, #12]
 800b88e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b892:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b896:	81a3      	strh	r3, [r4, #12]
 800b898:	6126      	str	r6, [r4, #16]
 800b89a:	6165      	str	r5, [r4, #20]
 800b89c:	444e      	add	r6, r9
 800b89e:	eba5 0509 	sub.w	r5, r5, r9
 800b8a2:	6026      	str	r6, [r4, #0]
 800b8a4:	60a5      	str	r5, [r4, #8]
 800b8a6:	463e      	mov	r6, r7
 800b8a8:	42be      	cmp	r6, r7
 800b8aa:	d900      	bls.n	800b8ae <__ssputs_r+0x72>
 800b8ac:	463e      	mov	r6, r7
 800b8ae:	6820      	ldr	r0, [r4, #0]
 800b8b0:	4632      	mov	r2, r6
 800b8b2:	4641      	mov	r1, r8
 800b8b4:	f000 fb6a 	bl	800bf8c <memmove>
 800b8b8:	68a3      	ldr	r3, [r4, #8]
 800b8ba:	1b9b      	subs	r3, r3, r6
 800b8bc:	60a3      	str	r3, [r4, #8]
 800b8be:	6823      	ldr	r3, [r4, #0]
 800b8c0:	4433      	add	r3, r6
 800b8c2:	6023      	str	r3, [r4, #0]
 800b8c4:	2000      	movs	r0, #0
 800b8c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8ca:	462a      	mov	r2, r5
 800b8cc:	f000 ff51 	bl	800c772 <_realloc_r>
 800b8d0:	4606      	mov	r6, r0
 800b8d2:	2800      	cmp	r0, #0
 800b8d4:	d1e0      	bne.n	800b898 <__ssputs_r+0x5c>
 800b8d6:	6921      	ldr	r1, [r4, #16]
 800b8d8:	4650      	mov	r0, sl
 800b8da:	f7fe fb79 	bl	8009fd0 <_free_r>
 800b8de:	230c      	movs	r3, #12
 800b8e0:	f8ca 3000 	str.w	r3, [sl]
 800b8e4:	89a3      	ldrh	r3, [r4, #12]
 800b8e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b8ea:	81a3      	strh	r3, [r4, #12]
 800b8ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b8f0:	e7e9      	b.n	800b8c6 <__ssputs_r+0x8a>
	...

0800b8f4 <_svfiprintf_r>:
 800b8f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8f8:	4698      	mov	r8, r3
 800b8fa:	898b      	ldrh	r3, [r1, #12]
 800b8fc:	061b      	lsls	r3, r3, #24
 800b8fe:	b09d      	sub	sp, #116	@ 0x74
 800b900:	4607      	mov	r7, r0
 800b902:	460d      	mov	r5, r1
 800b904:	4614      	mov	r4, r2
 800b906:	d510      	bpl.n	800b92a <_svfiprintf_r+0x36>
 800b908:	690b      	ldr	r3, [r1, #16]
 800b90a:	b973      	cbnz	r3, 800b92a <_svfiprintf_r+0x36>
 800b90c:	2140      	movs	r1, #64	@ 0x40
 800b90e:	f7fe fbd3 	bl	800a0b8 <_malloc_r>
 800b912:	6028      	str	r0, [r5, #0]
 800b914:	6128      	str	r0, [r5, #16]
 800b916:	b930      	cbnz	r0, 800b926 <_svfiprintf_r+0x32>
 800b918:	230c      	movs	r3, #12
 800b91a:	603b      	str	r3, [r7, #0]
 800b91c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b920:	b01d      	add	sp, #116	@ 0x74
 800b922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b926:	2340      	movs	r3, #64	@ 0x40
 800b928:	616b      	str	r3, [r5, #20]
 800b92a:	2300      	movs	r3, #0
 800b92c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b92e:	2320      	movs	r3, #32
 800b930:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b934:	f8cd 800c 	str.w	r8, [sp, #12]
 800b938:	2330      	movs	r3, #48	@ 0x30
 800b93a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bad8 <_svfiprintf_r+0x1e4>
 800b93e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b942:	f04f 0901 	mov.w	r9, #1
 800b946:	4623      	mov	r3, r4
 800b948:	469a      	mov	sl, r3
 800b94a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b94e:	b10a      	cbz	r2, 800b954 <_svfiprintf_r+0x60>
 800b950:	2a25      	cmp	r2, #37	@ 0x25
 800b952:	d1f9      	bne.n	800b948 <_svfiprintf_r+0x54>
 800b954:	ebba 0b04 	subs.w	fp, sl, r4
 800b958:	d00b      	beq.n	800b972 <_svfiprintf_r+0x7e>
 800b95a:	465b      	mov	r3, fp
 800b95c:	4622      	mov	r2, r4
 800b95e:	4629      	mov	r1, r5
 800b960:	4638      	mov	r0, r7
 800b962:	f7ff ff6b 	bl	800b83c <__ssputs_r>
 800b966:	3001      	adds	r0, #1
 800b968:	f000 80a7 	beq.w	800baba <_svfiprintf_r+0x1c6>
 800b96c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b96e:	445a      	add	r2, fp
 800b970:	9209      	str	r2, [sp, #36]	@ 0x24
 800b972:	f89a 3000 	ldrb.w	r3, [sl]
 800b976:	2b00      	cmp	r3, #0
 800b978:	f000 809f 	beq.w	800baba <_svfiprintf_r+0x1c6>
 800b97c:	2300      	movs	r3, #0
 800b97e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b982:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b986:	f10a 0a01 	add.w	sl, sl, #1
 800b98a:	9304      	str	r3, [sp, #16]
 800b98c:	9307      	str	r3, [sp, #28]
 800b98e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b992:	931a      	str	r3, [sp, #104]	@ 0x68
 800b994:	4654      	mov	r4, sl
 800b996:	2205      	movs	r2, #5
 800b998:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b99c:	484e      	ldr	r0, [pc, #312]	@ (800bad8 <_svfiprintf_r+0x1e4>)
 800b99e:	f7f4 fc3f 	bl	8000220 <memchr>
 800b9a2:	9a04      	ldr	r2, [sp, #16]
 800b9a4:	b9d8      	cbnz	r0, 800b9de <_svfiprintf_r+0xea>
 800b9a6:	06d0      	lsls	r0, r2, #27
 800b9a8:	bf44      	itt	mi
 800b9aa:	2320      	movmi	r3, #32
 800b9ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b9b0:	0711      	lsls	r1, r2, #28
 800b9b2:	bf44      	itt	mi
 800b9b4:	232b      	movmi	r3, #43	@ 0x2b
 800b9b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b9ba:	f89a 3000 	ldrb.w	r3, [sl]
 800b9be:	2b2a      	cmp	r3, #42	@ 0x2a
 800b9c0:	d015      	beq.n	800b9ee <_svfiprintf_r+0xfa>
 800b9c2:	9a07      	ldr	r2, [sp, #28]
 800b9c4:	4654      	mov	r4, sl
 800b9c6:	2000      	movs	r0, #0
 800b9c8:	f04f 0c0a 	mov.w	ip, #10
 800b9cc:	4621      	mov	r1, r4
 800b9ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b9d2:	3b30      	subs	r3, #48	@ 0x30
 800b9d4:	2b09      	cmp	r3, #9
 800b9d6:	d94b      	bls.n	800ba70 <_svfiprintf_r+0x17c>
 800b9d8:	b1b0      	cbz	r0, 800ba08 <_svfiprintf_r+0x114>
 800b9da:	9207      	str	r2, [sp, #28]
 800b9dc:	e014      	b.n	800ba08 <_svfiprintf_r+0x114>
 800b9de:	eba0 0308 	sub.w	r3, r0, r8
 800b9e2:	fa09 f303 	lsl.w	r3, r9, r3
 800b9e6:	4313      	orrs	r3, r2
 800b9e8:	9304      	str	r3, [sp, #16]
 800b9ea:	46a2      	mov	sl, r4
 800b9ec:	e7d2      	b.n	800b994 <_svfiprintf_r+0xa0>
 800b9ee:	9b03      	ldr	r3, [sp, #12]
 800b9f0:	1d19      	adds	r1, r3, #4
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	9103      	str	r1, [sp, #12]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	bfbb      	ittet	lt
 800b9fa:	425b      	neglt	r3, r3
 800b9fc:	f042 0202 	orrlt.w	r2, r2, #2
 800ba00:	9307      	strge	r3, [sp, #28]
 800ba02:	9307      	strlt	r3, [sp, #28]
 800ba04:	bfb8      	it	lt
 800ba06:	9204      	strlt	r2, [sp, #16]
 800ba08:	7823      	ldrb	r3, [r4, #0]
 800ba0a:	2b2e      	cmp	r3, #46	@ 0x2e
 800ba0c:	d10a      	bne.n	800ba24 <_svfiprintf_r+0x130>
 800ba0e:	7863      	ldrb	r3, [r4, #1]
 800ba10:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba12:	d132      	bne.n	800ba7a <_svfiprintf_r+0x186>
 800ba14:	9b03      	ldr	r3, [sp, #12]
 800ba16:	1d1a      	adds	r2, r3, #4
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	9203      	str	r2, [sp, #12]
 800ba1c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ba20:	3402      	adds	r4, #2
 800ba22:	9305      	str	r3, [sp, #20]
 800ba24:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bae8 <_svfiprintf_r+0x1f4>
 800ba28:	7821      	ldrb	r1, [r4, #0]
 800ba2a:	2203      	movs	r2, #3
 800ba2c:	4650      	mov	r0, sl
 800ba2e:	f7f4 fbf7 	bl	8000220 <memchr>
 800ba32:	b138      	cbz	r0, 800ba44 <_svfiprintf_r+0x150>
 800ba34:	9b04      	ldr	r3, [sp, #16]
 800ba36:	eba0 000a 	sub.w	r0, r0, sl
 800ba3a:	2240      	movs	r2, #64	@ 0x40
 800ba3c:	4082      	lsls	r2, r0
 800ba3e:	4313      	orrs	r3, r2
 800ba40:	3401      	adds	r4, #1
 800ba42:	9304      	str	r3, [sp, #16]
 800ba44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba48:	4824      	ldr	r0, [pc, #144]	@ (800badc <_svfiprintf_r+0x1e8>)
 800ba4a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ba4e:	2206      	movs	r2, #6
 800ba50:	f7f4 fbe6 	bl	8000220 <memchr>
 800ba54:	2800      	cmp	r0, #0
 800ba56:	d036      	beq.n	800bac6 <_svfiprintf_r+0x1d2>
 800ba58:	4b21      	ldr	r3, [pc, #132]	@ (800bae0 <_svfiprintf_r+0x1ec>)
 800ba5a:	bb1b      	cbnz	r3, 800baa4 <_svfiprintf_r+0x1b0>
 800ba5c:	9b03      	ldr	r3, [sp, #12]
 800ba5e:	3307      	adds	r3, #7
 800ba60:	f023 0307 	bic.w	r3, r3, #7
 800ba64:	3308      	adds	r3, #8
 800ba66:	9303      	str	r3, [sp, #12]
 800ba68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba6a:	4433      	add	r3, r6
 800ba6c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba6e:	e76a      	b.n	800b946 <_svfiprintf_r+0x52>
 800ba70:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba74:	460c      	mov	r4, r1
 800ba76:	2001      	movs	r0, #1
 800ba78:	e7a8      	b.n	800b9cc <_svfiprintf_r+0xd8>
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	3401      	adds	r4, #1
 800ba7e:	9305      	str	r3, [sp, #20]
 800ba80:	4619      	mov	r1, r3
 800ba82:	f04f 0c0a 	mov.w	ip, #10
 800ba86:	4620      	mov	r0, r4
 800ba88:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba8c:	3a30      	subs	r2, #48	@ 0x30
 800ba8e:	2a09      	cmp	r2, #9
 800ba90:	d903      	bls.n	800ba9a <_svfiprintf_r+0x1a6>
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d0c6      	beq.n	800ba24 <_svfiprintf_r+0x130>
 800ba96:	9105      	str	r1, [sp, #20]
 800ba98:	e7c4      	b.n	800ba24 <_svfiprintf_r+0x130>
 800ba9a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba9e:	4604      	mov	r4, r0
 800baa0:	2301      	movs	r3, #1
 800baa2:	e7f0      	b.n	800ba86 <_svfiprintf_r+0x192>
 800baa4:	ab03      	add	r3, sp, #12
 800baa6:	9300      	str	r3, [sp, #0]
 800baa8:	462a      	mov	r2, r5
 800baaa:	4b0e      	ldr	r3, [pc, #56]	@ (800bae4 <_svfiprintf_r+0x1f0>)
 800baac:	a904      	add	r1, sp, #16
 800baae:	4638      	mov	r0, r7
 800bab0:	f7fc fbc6 	bl	8008240 <_printf_float>
 800bab4:	1c42      	adds	r2, r0, #1
 800bab6:	4606      	mov	r6, r0
 800bab8:	d1d6      	bne.n	800ba68 <_svfiprintf_r+0x174>
 800baba:	89ab      	ldrh	r3, [r5, #12]
 800babc:	065b      	lsls	r3, r3, #25
 800babe:	f53f af2d 	bmi.w	800b91c <_svfiprintf_r+0x28>
 800bac2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bac4:	e72c      	b.n	800b920 <_svfiprintf_r+0x2c>
 800bac6:	ab03      	add	r3, sp, #12
 800bac8:	9300      	str	r3, [sp, #0]
 800baca:	462a      	mov	r2, r5
 800bacc:	4b05      	ldr	r3, [pc, #20]	@ (800bae4 <_svfiprintf_r+0x1f0>)
 800bace:	a904      	add	r1, sp, #16
 800bad0:	4638      	mov	r0, r7
 800bad2:	f7fc fe4d 	bl	8008770 <_printf_i>
 800bad6:	e7ed      	b.n	800bab4 <_svfiprintf_r+0x1c0>
 800bad8:	0800cd59 	.word	0x0800cd59
 800badc:	0800cd63 	.word	0x0800cd63
 800bae0:	08008241 	.word	0x08008241
 800bae4:	0800b83d 	.word	0x0800b83d
 800bae8:	0800cd5f 	.word	0x0800cd5f

0800baec <__sfputc_r>:
 800baec:	6893      	ldr	r3, [r2, #8]
 800baee:	3b01      	subs	r3, #1
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	b410      	push	{r4}
 800baf4:	6093      	str	r3, [r2, #8]
 800baf6:	da08      	bge.n	800bb0a <__sfputc_r+0x1e>
 800baf8:	6994      	ldr	r4, [r2, #24]
 800bafa:	42a3      	cmp	r3, r4
 800bafc:	db01      	blt.n	800bb02 <__sfputc_r+0x16>
 800bafe:	290a      	cmp	r1, #10
 800bb00:	d103      	bne.n	800bb0a <__sfputc_r+0x1e>
 800bb02:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb06:	f7fd bafc 	b.w	8009102 <__swbuf_r>
 800bb0a:	6813      	ldr	r3, [r2, #0]
 800bb0c:	1c58      	adds	r0, r3, #1
 800bb0e:	6010      	str	r0, [r2, #0]
 800bb10:	7019      	strb	r1, [r3, #0]
 800bb12:	4608      	mov	r0, r1
 800bb14:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb18:	4770      	bx	lr

0800bb1a <__sfputs_r>:
 800bb1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb1c:	4606      	mov	r6, r0
 800bb1e:	460f      	mov	r7, r1
 800bb20:	4614      	mov	r4, r2
 800bb22:	18d5      	adds	r5, r2, r3
 800bb24:	42ac      	cmp	r4, r5
 800bb26:	d101      	bne.n	800bb2c <__sfputs_r+0x12>
 800bb28:	2000      	movs	r0, #0
 800bb2a:	e007      	b.n	800bb3c <__sfputs_r+0x22>
 800bb2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb30:	463a      	mov	r2, r7
 800bb32:	4630      	mov	r0, r6
 800bb34:	f7ff ffda 	bl	800baec <__sfputc_r>
 800bb38:	1c43      	adds	r3, r0, #1
 800bb3a:	d1f3      	bne.n	800bb24 <__sfputs_r+0xa>
 800bb3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bb40 <_vfiprintf_r>:
 800bb40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb44:	460d      	mov	r5, r1
 800bb46:	b09d      	sub	sp, #116	@ 0x74
 800bb48:	4614      	mov	r4, r2
 800bb4a:	4698      	mov	r8, r3
 800bb4c:	4606      	mov	r6, r0
 800bb4e:	b118      	cbz	r0, 800bb58 <_vfiprintf_r+0x18>
 800bb50:	6a03      	ldr	r3, [r0, #32]
 800bb52:	b90b      	cbnz	r3, 800bb58 <_vfiprintf_r+0x18>
 800bb54:	f7fd f9cc 	bl	8008ef0 <__sinit>
 800bb58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bb5a:	07d9      	lsls	r1, r3, #31
 800bb5c:	d405      	bmi.n	800bb6a <_vfiprintf_r+0x2a>
 800bb5e:	89ab      	ldrh	r3, [r5, #12]
 800bb60:	059a      	lsls	r2, r3, #22
 800bb62:	d402      	bmi.n	800bb6a <_vfiprintf_r+0x2a>
 800bb64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb66:	f7fd fbde 	bl	8009326 <__retarget_lock_acquire_recursive>
 800bb6a:	89ab      	ldrh	r3, [r5, #12]
 800bb6c:	071b      	lsls	r3, r3, #28
 800bb6e:	d501      	bpl.n	800bb74 <_vfiprintf_r+0x34>
 800bb70:	692b      	ldr	r3, [r5, #16]
 800bb72:	b99b      	cbnz	r3, 800bb9c <_vfiprintf_r+0x5c>
 800bb74:	4629      	mov	r1, r5
 800bb76:	4630      	mov	r0, r6
 800bb78:	f7fd fb02 	bl	8009180 <__swsetup_r>
 800bb7c:	b170      	cbz	r0, 800bb9c <_vfiprintf_r+0x5c>
 800bb7e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bb80:	07dc      	lsls	r4, r3, #31
 800bb82:	d504      	bpl.n	800bb8e <_vfiprintf_r+0x4e>
 800bb84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bb88:	b01d      	add	sp, #116	@ 0x74
 800bb8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb8e:	89ab      	ldrh	r3, [r5, #12]
 800bb90:	0598      	lsls	r0, r3, #22
 800bb92:	d4f7      	bmi.n	800bb84 <_vfiprintf_r+0x44>
 800bb94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb96:	f7fd fbc7 	bl	8009328 <__retarget_lock_release_recursive>
 800bb9a:	e7f3      	b.n	800bb84 <_vfiprintf_r+0x44>
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	9309      	str	r3, [sp, #36]	@ 0x24
 800bba0:	2320      	movs	r3, #32
 800bba2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bba6:	f8cd 800c 	str.w	r8, [sp, #12]
 800bbaa:	2330      	movs	r3, #48	@ 0x30
 800bbac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bd5c <_vfiprintf_r+0x21c>
 800bbb0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bbb4:	f04f 0901 	mov.w	r9, #1
 800bbb8:	4623      	mov	r3, r4
 800bbba:	469a      	mov	sl, r3
 800bbbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bbc0:	b10a      	cbz	r2, 800bbc6 <_vfiprintf_r+0x86>
 800bbc2:	2a25      	cmp	r2, #37	@ 0x25
 800bbc4:	d1f9      	bne.n	800bbba <_vfiprintf_r+0x7a>
 800bbc6:	ebba 0b04 	subs.w	fp, sl, r4
 800bbca:	d00b      	beq.n	800bbe4 <_vfiprintf_r+0xa4>
 800bbcc:	465b      	mov	r3, fp
 800bbce:	4622      	mov	r2, r4
 800bbd0:	4629      	mov	r1, r5
 800bbd2:	4630      	mov	r0, r6
 800bbd4:	f7ff ffa1 	bl	800bb1a <__sfputs_r>
 800bbd8:	3001      	adds	r0, #1
 800bbda:	f000 80a7 	beq.w	800bd2c <_vfiprintf_r+0x1ec>
 800bbde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bbe0:	445a      	add	r2, fp
 800bbe2:	9209      	str	r2, [sp, #36]	@ 0x24
 800bbe4:	f89a 3000 	ldrb.w	r3, [sl]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	f000 809f 	beq.w	800bd2c <_vfiprintf_r+0x1ec>
 800bbee:	2300      	movs	r3, #0
 800bbf0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bbf4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bbf8:	f10a 0a01 	add.w	sl, sl, #1
 800bbfc:	9304      	str	r3, [sp, #16]
 800bbfe:	9307      	str	r3, [sp, #28]
 800bc00:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bc04:	931a      	str	r3, [sp, #104]	@ 0x68
 800bc06:	4654      	mov	r4, sl
 800bc08:	2205      	movs	r2, #5
 800bc0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc0e:	4853      	ldr	r0, [pc, #332]	@ (800bd5c <_vfiprintf_r+0x21c>)
 800bc10:	f7f4 fb06 	bl	8000220 <memchr>
 800bc14:	9a04      	ldr	r2, [sp, #16]
 800bc16:	b9d8      	cbnz	r0, 800bc50 <_vfiprintf_r+0x110>
 800bc18:	06d1      	lsls	r1, r2, #27
 800bc1a:	bf44      	itt	mi
 800bc1c:	2320      	movmi	r3, #32
 800bc1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc22:	0713      	lsls	r3, r2, #28
 800bc24:	bf44      	itt	mi
 800bc26:	232b      	movmi	r3, #43	@ 0x2b
 800bc28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc2c:	f89a 3000 	ldrb.w	r3, [sl]
 800bc30:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc32:	d015      	beq.n	800bc60 <_vfiprintf_r+0x120>
 800bc34:	9a07      	ldr	r2, [sp, #28]
 800bc36:	4654      	mov	r4, sl
 800bc38:	2000      	movs	r0, #0
 800bc3a:	f04f 0c0a 	mov.w	ip, #10
 800bc3e:	4621      	mov	r1, r4
 800bc40:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc44:	3b30      	subs	r3, #48	@ 0x30
 800bc46:	2b09      	cmp	r3, #9
 800bc48:	d94b      	bls.n	800bce2 <_vfiprintf_r+0x1a2>
 800bc4a:	b1b0      	cbz	r0, 800bc7a <_vfiprintf_r+0x13a>
 800bc4c:	9207      	str	r2, [sp, #28]
 800bc4e:	e014      	b.n	800bc7a <_vfiprintf_r+0x13a>
 800bc50:	eba0 0308 	sub.w	r3, r0, r8
 800bc54:	fa09 f303 	lsl.w	r3, r9, r3
 800bc58:	4313      	orrs	r3, r2
 800bc5a:	9304      	str	r3, [sp, #16]
 800bc5c:	46a2      	mov	sl, r4
 800bc5e:	e7d2      	b.n	800bc06 <_vfiprintf_r+0xc6>
 800bc60:	9b03      	ldr	r3, [sp, #12]
 800bc62:	1d19      	adds	r1, r3, #4
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	9103      	str	r1, [sp, #12]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	bfbb      	ittet	lt
 800bc6c:	425b      	neglt	r3, r3
 800bc6e:	f042 0202 	orrlt.w	r2, r2, #2
 800bc72:	9307      	strge	r3, [sp, #28]
 800bc74:	9307      	strlt	r3, [sp, #28]
 800bc76:	bfb8      	it	lt
 800bc78:	9204      	strlt	r2, [sp, #16]
 800bc7a:	7823      	ldrb	r3, [r4, #0]
 800bc7c:	2b2e      	cmp	r3, #46	@ 0x2e
 800bc7e:	d10a      	bne.n	800bc96 <_vfiprintf_r+0x156>
 800bc80:	7863      	ldrb	r3, [r4, #1]
 800bc82:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc84:	d132      	bne.n	800bcec <_vfiprintf_r+0x1ac>
 800bc86:	9b03      	ldr	r3, [sp, #12]
 800bc88:	1d1a      	adds	r2, r3, #4
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	9203      	str	r2, [sp, #12]
 800bc8e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bc92:	3402      	adds	r4, #2
 800bc94:	9305      	str	r3, [sp, #20]
 800bc96:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bd6c <_vfiprintf_r+0x22c>
 800bc9a:	7821      	ldrb	r1, [r4, #0]
 800bc9c:	2203      	movs	r2, #3
 800bc9e:	4650      	mov	r0, sl
 800bca0:	f7f4 fabe 	bl	8000220 <memchr>
 800bca4:	b138      	cbz	r0, 800bcb6 <_vfiprintf_r+0x176>
 800bca6:	9b04      	ldr	r3, [sp, #16]
 800bca8:	eba0 000a 	sub.w	r0, r0, sl
 800bcac:	2240      	movs	r2, #64	@ 0x40
 800bcae:	4082      	lsls	r2, r0
 800bcb0:	4313      	orrs	r3, r2
 800bcb2:	3401      	adds	r4, #1
 800bcb4:	9304      	str	r3, [sp, #16]
 800bcb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcba:	4829      	ldr	r0, [pc, #164]	@ (800bd60 <_vfiprintf_r+0x220>)
 800bcbc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bcc0:	2206      	movs	r2, #6
 800bcc2:	f7f4 faad 	bl	8000220 <memchr>
 800bcc6:	2800      	cmp	r0, #0
 800bcc8:	d03f      	beq.n	800bd4a <_vfiprintf_r+0x20a>
 800bcca:	4b26      	ldr	r3, [pc, #152]	@ (800bd64 <_vfiprintf_r+0x224>)
 800bccc:	bb1b      	cbnz	r3, 800bd16 <_vfiprintf_r+0x1d6>
 800bcce:	9b03      	ldr	r3, [sp, #12]
 800bcd0:	3307      	adds	r3, #7
 800bcd2:	f023 0307 	bic.w	r3, r3, #7
 800bcd6:	3308      	adds	r3, #8
 800bcd8:	9303      	str	r3, [sp, #12]
 800bcda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcdc:	443b      	add	r3, r7
 800bcde:	9309      	str	r3, [sp, #36]	@ 0x24
 800bce0:	e76a      	b.n	800bbb8 <_vfiprintf_r+0x78>
 800bce2:	fb0c 3202 	mla	r2, ip, r2, r3
 800bce6:	460c      	mov	r4, r1
 800bce8:	2001      	movs	r0, #1
 800bcea:	e7a8      	b.n	800bc3e <_vfiprintf_r+0xfe>
 800bcec:	2300      	movs	r3, #0
 800bcee:	3401      	adds	r4, #1
 800bcf0:	9305      	str	r3, [sp, #20]
 800bcf2:	4619      	mov	r1, r3
 800bcf4:	f04f 0c0a 	mov.w	ip, #10
 800bcf8:	4620      	mov	r0, r4
 800bcfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bcfe:	3a30      	subs	r2, #48	@ 0x30
 800bd00:	2a09      	cmp	r2, #9
 800bd02:	d903      	bls.n	800bd0c <_vfiprintf_r+0x1cc>
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d0c6      	beq.n	800bc96 <_vfiprintf_r+0x156>
 800bd08:	9105      	str	r1, [sp, #20]
 800bd0a:	e7c4      	b.n	800bc96 <_vfiprintf_r+0x156>
 800bd0c:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd10:	4604      	mov	r4, r0
 800bd12:	2301      	movs	r3, #1
 800bd14:	e7f0      	b.n	800bcf8 <_vfiprintf_r+0x1b8>
 800bd16:	ab03      	add	r3, sp, #12
 800bd18:	9300      	str	r3, [sp, #0]
 800bd1a:	462a      	mov	r2, r5
 800bd1c:	4b12      	ldr	r3, [pc, #72]	@ (800bd68 <_vfiprintf_r+0x228>)
 800bd1e:	a904      	add	r1, sp, #16
 800bd20:	4630      	mov	r0, r6
 800bd22:	f7fc fa8d 	bl	8008240 <_printf_float>
 800bd26:	4607      	mov	r7, r0
 800bd28:	1c78      	adds	r0, r7, #1
 800bd2a:	d1d6      	bne.n	800bcda <_vfiprintf_r+0x19a>
 800bd2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd2e:	07d9      	lsls	r1, r3, #31
 800bd30:	d405      	bmi.n	800bd3e <_vfiprintf_r+0x1fe>
 800bd32:	89ab      	ldrh	r3, [r5, #12]
 800bd34:	059a      	lsls	r2, r3, #22
 800bd36:	d402      	bmi.n	800bd3e <_vfiprintf_r+0x1fe>
 800bd38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bd3a:	f7fd faf5 	bl	8009328 <__retarget_lock_release_recursive>
 800bd3e:	89ab      	ldrh	r3, [r5, #12]
 800bd40:	065b      	lsls	r3, r3, #25
 800bd42:	f53f af1f 	bmi.w	800bb84 <_vfiprintf_r+0x44>
 800bd46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bd48:	e71e      	b.n	800bb88 <_vfiprintf_r+0x48>
 800bd4a:	ab03      	add	r3, sp, #12
 800bd4c:	9300      	str	r3, [sp, #0]
 800bd4e:	462a      	mov	r2, r5
 800bd50:	4b05      	ldr	r3, [pc, #20]	@ (800bd68 <_vfiprintf_r+0x228>)
 800bd52:	a904      	add	r1, sp, #16
 800bd54:	4630      	mov	r0, r6
 800bd56:	f7fc fd0b 	bl	8008770 <_printf_i>
 800bd5a:	e7e4      	b.n	800bd26 <_vfiprintf_r+0x1e6>
 800bd5c:	0800cd59 	.word	0x0800cd59
 800bd60:	0800cd63 	.word	0x0800cd63
 800bd64:	08008241 	.word	0x08008241
 800bd68:	0800bb1b 	.word	0x0800bb1b
 800bd6c:	0800cd5f 	.word	0x0800cd5f

0800bd70 <__sflush_r>:
 800bd70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bd74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd78:	0716      	lsls	r6, r2, #28
 800bd7a:	4605      	mov	r5, r0
 800bd7c:	460c      	mov	r4, r1
 800bd7e:	d454      	bmi.n	800be2a <__sflush_r+0xba>
 800bd80:	684b      	ldr	r3, [r1, #4]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	dc02      	bgt.n	800bd8c <__sflush_r+0x1c>
 800bd86:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	dd48      	ble.n	800be1e <__sflush_r+0xae>
 800bd8c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bd8e:	2e00      	cmp	r6, #0
 800bd90:	d045      	beq.n	800be1e <__sflush_r+0xae>
 800bd92:	2300      	movs	r3, #0
 800bd94:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bd98:	682f      	ldr	r7, [r5, #0]
 800bd9a:	6a21      	ldr	r1, [r4, #32]
 800bd9c:	602b      	str	r3, [r5, #0]
 800bd9e:	d030      	beq.n	800be02 <__sflush_r+0x92>
 800bda0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bda2:	89a3      	ldrh	r3, [r4, #12]
 800bda4:	0759      	lsls	r1, r3, #29
 800bda6:	d505      	bpl.n	800bdb4 <__sflush_r+0x44>
 800bda8:	6863      	ldr	r3, [r4, #4]
 800bdaa:	1ad2      	subs	r2, r2, r3
 800bdac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bdae:	b10b      	cbz	r3, 800bdb4 <__sflush_r+0x44>
 800bdb0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bdb2:	1ad2      	subs	r2, r2, r3
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bdb8:	6a21      	ldr	r1, [r4, #32]
 800bdba:	4628      	mov	r0, r5
 800bdbc:	47b0      	blx	r6
 800bdbe:	1c43      	adds	r3, r0, #1
 800bdc0:	89a3      	ldrh	r3, [r4, #12]
 800bdc2:	d106      	bne.n	800bdd2 <__sflush_r+0x62>
 800bdc4:	6829      	ldr	r1, [r5, #0]
 800bdc6:	291d      	cmp	r1, #29
 800bdc8:	d82b      	bhi.n	800be22 <__sflush_r+0xb2>
 800bdca:	4a2a      	ldr	r2, [pc, #168]	@ (800be74 <__sflush_r+0x104>)
 800bdcc:	410a      	asrs	r2, r1
 800bdce:	07d6      	lsls	r6, r2, #31
 800bdd0:	d427      	bmi.n	800be22 <__sflush_r+0xb2>
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	6062      	str	r2, [r4, #4]
 800bdd6:	04d9      	lsls	r1, r3, #19
 800bdd8:	6922      	ldr	r2, [r4, #16]
 800bdda:	6022      	str	r2, [r4, #0]
 800bddc:	d504      	bpl.n	800bde8 <__sflush_r+0x78>
 800bdde:	1c42      	adds	r2, r0, #1
 800bde0:	d101      	bne.n	800bde6 <__sflush_r+0x76>
 800bde2:	682b      	ldr	r3, [r5, #0]
 800bde4:	b903      	cbnz	r3, 800bde8 <__sflush_r+0x78>
 800bde6:	6560      	str	r0, [r4, #84]	@ 0x54
 800bde8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bdea:	602f      	str	r7, [r5, #0]
 800bdec:	b1b9      	cbz	r1, 800be1e <__sflush_r+0xae>
 800bdee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bdf2:	4299      	cmp	r1, r3
 800bdf4:	d002      	beq.n	800bdfc <__sflush_r+0x8c>
 800bdf6:	4628      	mov	r0, r5
 800bdf8:	f7fe f8ea 	bl	8009fd0 <_free_r>
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	6363      	str	r3, [r4, #52]	@ 0x34
 800be00:	e00d      	b.n	800be1e <__sflush_r+0xae>
 800be02:	2301      	movs	r3, #1
 800be04:	4628      	mov	r0, r5
 800be06:	47b0      	blx	r6
 800be08:	4602      	mov	r2, r0
 800be0a:	1c50      	adds	r0, r2, #1
 800be0c:	d1c9      	bne.n	800bda2 <__sflush_r+0x32>
 800be0e:	682b      	ldr	r3, [r5, #0]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d0c6      	beq.n	800bda2 <__sflush_r+0x32>
 800be14:	2b1d      	cmp	r3, #29
 800be16:	d001      	beq.n	800be1c <__sflush_r+0xac>
 800be18:	2b16      	cmp	r3, #22
 800be1a:	d11e      	bne.n	800be5a <__sflush_r+0xea>
 800be1c:	602f      	str	r7, [r5, #0]
 800be1e:	2000      	movs	r0, #0
 800be20:	e022      	b.n	800be68 <__sflush_r+0xf8>
 800be22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be26:	b21b      	sxth	r3, r3
 800be28:	e01b      	b.n	800be62 <__sflush_r+0xf2>
 800be2a:	690f      	ldr	r7, [r1, #16]
 800be2c:	2f00      	cmp	r7, #0
 800be2e:	d0f6      	beq.n	800be1e <__sflush_r+0xae>
 800be30:	0793      	lsls	r3, r2, #30
 800be32:	680e      	ldr	r6, [r1, #0]
 800be34:	bf08      	it	eq
 800be36:	694b      	ldreq	r3, [r1, #20]
 800be38:	600f      	str	r7, [r1, #0]
 800be3a:	bf18      	it	ne
 800be3c:	2300      	movne	r3, #0
 800be3e:	eba6 0807 	sub.w	r8, r6, r7
 800be42:	608b      	str	r3, [r1, #8]
 800be44:	f1b8 0f00 	cmp.w	r8, #0
 800be48:	dde9      	ble.n	800be1e <__sflush_r+0xae>
 800be4a:	6a21      	ldr	r1, [r4, #32]
 800be4c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800be4e:	4643      	mov	r3, r8
 800be50:	463a      	mov	r2, r7
 800be52:	4628      	mov	r0, r5
 800be54:	47b0      	blx	r6
 800be56:	2800      	cmp	r0, #0
 800be58:	dc08      	bgt.n	800be6c <__sflush_r+0xfc>
 800be5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be62:	81a3      	strh	r3, [r4, #12]
 800be64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800be68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be6c:	4407      	add	r7, r0
 800be6e:	eba8 0800 	sub.w	r8, r8, r0
 800be72:	e7e7      	b.n	800be44 <__sflush_r+0xd4>
 800be74:	dfbffffe 	.word	0xdfbffffe

0800be78 <_fflush_r>:
 800be78:	b538      	push	{r3, r4, r5, lr}
 800be7a:	690b      	ldr	r3, [r1, #16]
 800be7c:	4605      	mov	r5, r0
 800be7e:	460c      	mov	r4, r1
 800be80:	b913      	cbnz	r3, 800be88 <_fflush_r+0x10>
 800be82:	2500      	movs	r5, #0
 800be84:	4628      	mov	r0, r5
 800be86:	bd38      	pop	{r3, r4, r5, pc}
 800be88:	b118      	cbz	r0, 800be92 <_fflush_r+0x1a>
 800be8a:	6a03      	ldr	r3, [r0, #32]
 800be8c:	b90b      	cbnz	r3, 800be92 <_fflush_r+0x1a>
 800be8e:	f7fd f82f 	bl	8008ef0 <__sinit>
 800be92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d0f3      	beq.n	800be82 <_fflush_r+0xa>
 800be9a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800be9c:	07d0      	lsls	r0, r2, #31
 800be9e:	d404      	bmi.n	800beaa <_fflush_r+0x32>
 800bea0:	0599      	lsls	r1, r3, #22
 800bea2:	d402      	bmi.n	800beaa <_fflush_r+0x32>
 800bea4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bea6:	f7fd fa3e 	bl	8009326 <__retarget_lock_acquire_recursive>
 800beaa:	4628      	mov	r0, r5
 800beac:	4621      	mov	r1, r4
 800beae:	f7ff ff5f 	bl	800bd70 <__sflush_r>
 800beb2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800beb4:	07da      	lsls	r2, r3, #31
 800beb6:	4605      	mov	r5, r0
 800beb8:	d4e4      	bmi.n	800be84 <_fflush_r+0xc>
 800beba:	89a3      	ldrh	r3, [r4, #12]
 800bebc:	059b      	lsls	r3, r3, #22
 800bebe:	d4e1      	bmi.n	800be84 <_fflush_r+0xc>
 800bec0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bec2:	f7fd fa31 	bl	8009328 <__retarget_lock_release_recursive>
 800bec6:	e7dd      	b.n	800be84 <_fflush_r+0xc>

0800bec8 <__swhatbuf_r>:
 800bec8:	b570      	push	{r4, r5, r6, lr}
 800beca:	460c      	mov	r4, r1
 800becc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bed0:	2900      	cmp	r1, #0
 800bed2:	b096      	sub	sp, #88	@ 0x58
 800bed4:	4615      	mov	r5, r2
 800bed6:	461e      	mov	r6, r3
 800bed8:	da0d      	bge.n	800bef6 <__swhatbuf_r+0x2e>
 800beda:	89a3      	ldrh	r3, [r4, #12]
 800bedc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bee0:	f04f 0100 	mov.w	r1, #0
 800bee4:	bf14      	ite	ne
 800bee6:	2340      	movne	r3, #64	@ 0x40
 800bee8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800beec:	2000      	movs	r0, #0
 800beee:	6031      	str	r1, [r6, #0]
 800bef0:	602b      	str	r3, [r5, #0]
 800bef2:	b016      	add	sp, #88	@ 0x58
 800bef4:	bd70      	pop	{r4, r5, r6, pc}
 800bef6:	466a      	mov	r2, sp
 800bef8:	f000 f874 	bl	800bfe4 <_fstat_r>
 800befc:	2800      	cmp	r0, #0
 800befe:	dbec      	blt.n	800beda <__swhatbuf_r+0x12>
 800bf00:	9901      	ldr	r1, [sp, #4]
 800bf02:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bf06:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bf0a:	4259      	negs	r1, r3
 800bf0c:	4159      	adcs	r1, r3
 800bf0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bf12:	e7eb      	b.n	800beec <__swhatbuf_r+0x24>

0800bf14 <__smakebuf_r>:
 800bf14:	898b      	ldrh	r3, [r1, #12]
 800bf16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf18:	079d      	lsls	r5, r3, #30
 800bf1a:	4606      	mov	r6, r0
 800bf1c:	460c      	mov	r4, r1
 800bf1e:	d507      	bpl.n	800bf30 <__smakebuf_r+0x1c>
 800bf20:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bf24:	6023      	str	r3, [r4, #0]
 800bf26:	6123      	str	r3, [r4, #16]
 800bf28:	2301      	movs	r3, #1
 800bf2a:	6163      	str	r3, [r4, #20]
 800bf2c:	b003      	add	sp, #12
 800bf2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf30:	ab01      	add	r3, sp, #4
 800bf32:	466a      	mov	r2, sp
 800bf34:	f7ff ffc8 	bl	800bec8 <__swhatbuf_r>
 800bf38:	9f00      	ldr	r7, [sp, #0]
 800bf3a:	4605      	mov	r5, r0
 800bf3c:	4639      	mov	r1, r7
 800bf3e:	4630      	mov	r0, r6
 800bf40:	f7fe f8ba 	bl	800a0b8 <_malloc_r>
 800bf44:	b948      	cbnz	r0, 800bf5a <__smakebuf_r+0x46>
 800bf46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf4a:	059a      	lsls	r2, r3, #22
 800bf4c:	d4ee      	bmi.n	800bf2c <__smakebuf_r+0x18>
 800bf4e:	f023 0303 	bic.w	r3, r3, #3
 800bf52:	f043 0302 	orr.w	r3, r3, #2
 800bf56:	81a3      	strh	r3, [r4, #12]
 800bf58:	e7e2      	b.n	800bf20 <__smakebuf_r+0xc>
 800bf5a:	89a3      	ldrh	r3, [r4, #12]
 800bf5c:	6020      	str	r0, [r4, #0]
 800bf5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf62:	81a3      	strh	r3, [r4, #12]
 800bf64:	9b01      	ldr	r3, [sp, #4]
 800bf66:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bf6a:	b15b      	cbz	r3, 800bf84 <__smakebuf_r+0x70>
 800bf6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf70:	4630      	mov	r0, r6
 800bf72:	f000 f849 	bl	800c008 <_isatty_r>
 800bf76:	b128      	cbz	r0, 800bf84 <__smakebuf_r+0x70>
 800bf78:	89a3      	ldrh	r3, [r4, #12]
 800bf7a:	f023 0303 	bic.w	r3, r3, #3
 800bf7e:	f043 0301 	orr.w	r3, r3, #1
 800bf82:	81a3      	strh	r3, [r4, #12]
 800bf84:	89a3      	ldrh	r3, [r4, #12]
 800bf86:	431d      	orrs	r5, r3
 800bf88:	81a5      	strh	r5, [r4, #12]
 800bf8a:	e7cf      	b.n	800bf2c <__smakebuf_r+0x18>

0800bf8c <memmove>:
 800bf8c:	4288      	cmp	r0, r1
 800bf8e:	b510      	push	{r4, lr}
 800bf90:	eb01 0402 	add.w	r4, r1, r2
 800bf94:	d902      	bls.n	800bf9c <memmove+0x10>
 800bf96:	4284      	cmp	r4, r0
 800bf98:	4623      	mov	r3, r4
 800bf9a:	d807      	bhi.n	800bfac <memmove+0x20>
 800bf9c:	1e43      	subs	r3, r0, #1
 800bf9e:	42a1      	cmp	r1, r4
 800bfa0:	d008      	beq.n	800bfb4 <memmove+0x28>
 800bfa2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bfa6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bfaa:	e7f8      	b.n	800bf9e <memmove+0x12>
 800bfac:	4402      	add	r2, r0
 800bfae:	4601      	mov	r1, r0
 800bfb0:	428a      	cmp	r2, r1
 800bfb2:	d100      	bne.n	800bfb6 <memmove+0x2a>
 800bfb4:	bd10      	pop	{r4, pc}
 800bfb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bfba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bfbe:	e7f7      	b.n	800bfb0 <memmove+0x24>

0800bfc0 <strncmp>:
 800bfc0:	b510      	push	{r4, lr}
 800bfc2:	b16a      	cbz	r2, 800bfe0 <strncmp+0x20>
 800bfc4:	3901      	subs	r1, #1
 800bfc6:	1884      	adds	r4, r0, r2
 800bfc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bfcc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bfd0:	429a      	cmp	r2, r3
 800bfd2:	d103      	bne.n	800bfdc <strncmp+0x1c>
 800bfd4:	42a0      	cmp	r0, r4
 800bfd6:	d001      	beq.n	800bfdc <strncmp+0x1c>
 800bfd8:	2a00      	cmp	r2, #0
 800bfda:	d1f5      	bne.n	800bfc8 <strncmp+0x8>
 800bfdc:	1ad0      	subs	r0, r2, r3
 800bfde:	bd10      	pop	{r4, pc}
 800bfe0:	4610      	mov	r0, r2
 800bfe2:	e7fc      	b.n	800bfde <strncmp+0x1e>

0800bfe4 <_fstat_r>:
 800bfe4:	b538      	push	{r3, r4, r5, lr}
 800bfe6:	4d07      	ldr	r5, [pc, #28]	@ (800c004 <_fstat_r+0x20>)
 800bfe8:	2300      	movs	r3, #0
 800bfea:	4604      	mov	r4, r0
 800bfec:	4608      	mov	r0, r1
 800bfee:	4611      	mov	r1, r2
 800bff0:	602b      	str	r3, [r5, #0]
 800bff2:	f7f5 fbfb 	bl	80017ec <_fstat>
 800bff6:	1c43      	adds	r3, r0, #1
 800bff8:	d102      	bne.n	800c000 <_fstat_r+0x1c>
 800bffa:	682b      	ldr	r3, [r5, #0]
 800bffc:	b103      	cbz	r3, 800c000 <_fstat_r+0x1c>
 800bffe:	6023      	str	r3, [r4, #0]
 800c000:	bd38      	pop	{r3, r4, r5, pc}
 800c002:	bf00      	nop
 800c004:	200021d4 	.word	0x200021d4

0800c008 <_isatty_r>:
 800c008:	b538      	push	{r3, r4, r5, lr}
 800c00a:	4d06      	ldr	r5, [pc, #24]	@ (800c024 <_isatty_r+0x1c>)
 800c00c:	2300      	movs	r3, #0
 800c00e:	4604      	mov	r4, r0
 800c010:	4608      	mov	r0, r1
 800c012:	602b      	str	r3, [r5, #0]
 800c014:	f7f5 fbfa 	bl	800180c <_isatty>
 800c018:	1c43      	adds	r3, r0, #1
 800c01a:	d102      	bne.n	800c022 <_isatty_r+0x1a>
 800c01c:	682b      	ldr	r3, [r5, #0]
 800c01e:	b103      	cbz	r3, 800c022 <_isatty_r+0x1a>
 800c020:	6023      	str	r3, [r4, #0]
 800c022:	bd38      	pop	{r3, r4, r5, pc}
 800c024:	200021d4 	.word	0x200021d4

0800c028 <_sbrk_r>:
 800c028:	b538      	push	{r3, r4, r5, lr}
 800c02a:	4d06      	ldr	r5, [pc, #24]	@ (800c044 <_sbrk_r+0x1c>)
 800c02c:	2300      	movs	r3, #0
 800c02e:	4604      	mov	r4, r0
 800c030:	4608      	mov	r0, r1
 800c032:	602b      	str	r3, [r5, #0]
 800c034:	f7f5 fc02 	bl	800183c <_sbrk>
 800c038:	1c43      	adds	r3, r0, #1
 800c03a:	d102      	bne.n	800c042 <_sbrk_r+0x1a>
 800c03c:	682b      	ldr	r3, [r5, #0]
 800c03e:	b103      	cbz	r3, 800c042 <_sbrk_r+0x1a>
 800c040:	6023      	str	r3, [r4, #0]
 800c042:	bd38      	pop	{r3, r4, r5, pc}
 800c044:	200021d4 	.word	0x200021d4

0800c048 <memcpy>:
 800c048:	440a      	add	r2, r1
 800c04a:	4291      	cmp	r1, r2
 800c04c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800c050:	d100      	bne.n	800c054 <memcpy+0xc>
 800c052:	4770      	bx	lr
 800c054:	b510      	push	{r4, lr}
 800c056:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c05a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c05e:	4291      	cmp	r1, r2
 800c060:	d1f9      	bne.n	800c056 <memcpy+0xe>
 800c062:	bd10      	pop	{r4, pc}
 800c064:	0000      	movs	r0, r0
	...

0800c068 <nan>:
 800c068:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c070 <nan+0x8>
 800c06c:	4770      	bx	lr
 800c06e:	bf00      	nop
 800c070:	00000000 	.word	0x00000000
 800c074:	7ff80000 	.word	0x7ff80000

0800c078 <__assert_func>:
 800c078:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c07a:	4614      	mov	r4, r2
 800c07c:	461a      	mov	r2, r3
 800c07e:	4b09      	ldr	r3, [pc, #36]	@ (800c0a4 <__assert_func+0x2c>)
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	4605      	mov	r5, r0
 800c084:	68d8      	ldr	r0, [r3, #12]
 800c086:	b954      	cbnz	r4, 800c09e <__assert_func+0x26>
 800c088:	4b07      	ldr	r3, [pc, #28]	@ (800c0a8 <__assert_func+0x30>)
 800c08a:	461c      	mov	r4, r3
 800c08c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c090:	9100      	str	r1, [sp, #0]
 800c092:	462b      	mov	r3, r5
 800c094:	4905      	ldr	r1, [pc, #20]	@ (800c0ac <__assert_func+0x34>)
 800c096:	f000 fba7 	bl	800c7e8 <fiprintf>
 800c09a:	f000 fbb7 	bl	800c80c <abort>
 800c09e:	4b04      	ldr	r3, [pc, #16]	@ (800c0b0 <__assert_func+0x38>)
 800c0a0:	e7f4      	b.n	800c08c <__assert_func+0x14>
 800c0a2:	bf00      	nop
 800c0a4:	20000018 	.word	0x20000018
 800c0a8:	0800cdad 	.word	0x0800cdad
 800c0ac:	0800cd7f 	.word	0x0800cd7f
 800c0b0:	0800cd72 	.word	0x0800cd72

0800c0b4 <_calloc_r>:
 800c0b4:	b570      	push	{r4, r5, r6, lr}
 800c0b6:	fba1 5402 	umull	r5, r4, r1, r2
 800c0ba:	b93c      	cbnz	r4, 800c0cc <_calloc_r+0x18>
 800c0bc:	4629      	mov	r1, r5
 800c0be:	f7fd fffb 	bl	800a0b8 <_malloc_r>
 800c0c2:	4606      	mov	r6, r0
 800c0c4:	b928      	cbnz	r0, 800c0d2 <_calloc_r+0x1e>
 800c0c6:	2600      	movs	r6, #0
 800c0c8:	4630      	mov	r0, r6
 800c0ca:	bd70      	pop	{r4, r5, r6, pc}
 800c0cc:	220c      	movs	r2, #12
 800c0ce:	6002      	str	r2, [r0, #0]
 800c0d0:	e7f9      	b.n	800c0c6 <_calloc_r+0x12>
 800c0d2:	462a      	mov	r2, r5
 800c0d4:	4621      	mov	r1, r4
 800c0d6:	f7fd f8a9 	bl	800922c <memset>
 800c0da:	e7f5      	b.n	800c0c8 <_calloc_r+0x14>

0800c0dc <rshift>:
 800c0dc:	6903      	ldr	r3, [r0, #16]
 800c0de:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c0e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c0e6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c0ea:	f100 0414 	add.w	r4, r0, #20
 800c0ee:	dd45      	ble.n	800c17c <rshift+0xa0>
 800c0f0:	f011 011f 	ands.w	r1, r1, #31
 800c0f4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c0f8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c0fc:	d10c      	bne.n	800c118 <rshift+0x3c>
 800c0fe:	f100 0710 	add.w	r7, r0, #16
 800c102:	4629      	mov	r1, r5
 800c104:	42b1      	cmp	r1, r6
 800c106:	d334      	bcc.n	800c172 <rshift+0x96>
 800c108:	1a9b      	subs	r3, r3, r2
 800c10a:	009b      	lsls	r3, r3, #2
 800c10c:	1eea      	subs	r2, r5, #3
 800c10e:	4296      	cmp	r6, r2
 800c110:	bf38      	it	cc
 800c112:	2300      	movcc	r3, #0
 800c114:	4423      	add	r3, r4
 800c116:	e015      	b.n	800c144 <rshift+0x68>
 800c118:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c11c:	f1c1 0820 	rsb	r8, r1, #32
 800c120:	40cf      	lsrs	r7, r1
 800c122:	f105 0e04 	add.w	lr, r5, #4
 800c126:	46a1      	mov	r9, r4
 800c128:	4576      	cmp	r6, lr
 800c12a:	46f4      	mov	ip, lr
 800c12c:	d815      	bhi.n	800c15a <rshift+0x7e>
 800c12e:	1a9a      	subs	r2, r3, r2
 800c130:	0092      	lsls	r2, r2, #2
 800c132:	3a04      	subs	r2, #4
 800c134:	3501      	adds	r5, #1
 800c136:	42ae      	cmp	r6, r5
 800c138:	bf38      	it	cc
 800c13a:	2200      	movcc	r2, #0
 800c13c:	18a3      	adds	r3, r4, r2
 800c13e:	50a7      	str	r7, [r4, r2]
 800c140:	b107      	cbz	r7, 800c144 <rshift+0x68>
 800c142:	3304      	adds	r3, #4
 800c144:	1b1a      	subs	r2, r3, r4
 800c146:	42a3      	cmp	r3, r4
 800c148:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c14c:	bf08      	it	eq
 800c14e:	2300      	moveq	r3, #0
 800c150:	6102      	str	r2, [r0, #16]
 800c152:	bf08      	it	eq
 800c154:	6143      	streq	r3, [r0, #20]
 800c156:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c15a:	f8dc c000 	ldr.w	ip, [ip]
 800c15e:	fa0c fc08 	lsl.w	ip, ip, r8
 800c162:	ea4c 0707 	orr.w	r7, ip, r7
 800c166:	f849 7b04 	str.w	r7, [r9], #4
 800c16a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c16e:	40cf      	lsrs	r7, r1
 800c170:	e7da      	b.n	800c128 <rshift+0x4c>
 800c172:	f851 cb04 	ldr.w	ip, [r1], #4
 800c176:	f847 cf04 	str.w	ip, [r7, #4]!
 800c17a:	e7c3      	b.n	800c104 <rshift+0x28>
 800c17c:	4623      	mov	r3, r4
 800c17e:	e7e1      	b.n	800c144 <rshift+0x68>

0800c180 <__hexdig_fun>:
 800c180:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c184:	2b09      	cmp	r3, #9
 800c186:	d802      	bhi.n	800c18e <__hexdig_fun+0xe>
 800c188:	3820      	subs	r0, #32
 800c18a:	b2c0      	uxtb	r0, r0
 800c18c:	4770      	bx	lr
 800c18e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c192:	2b05      	cmp	r3, #5
 800c194:	d801      	bhi.n	800c19a <__hexdig_fun+0x1a>
 800c196:	3847      	subs	r0, #71	@ 0x47
 800c198:	e7f7      	b.n	800c18a <__hexdig_fun+0xa>
 800c19a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c19e:	2b05      	cmp	r3, #5
 800c1a0:	d801      	bhi.n	800c1a6 <__hexdig_fun+0x26>
 800c1a2:	3827      	subs	r0, #39	@ 0x27
 800c1a4:	e7f1      	b.n	800c18a <__hexdig_fun+0xa>
 800c1a6:	2000      	movs	r0, #0
 800c1a8:	4770      	bx	lr
	...

0800c1ac <__gethex>:
 800c1ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1b0:	b085      	sub	sp, #20
 800c1b2:	468a      	mov	sl, r1
 800c1b4:	9302      	str	r3, [sp, #8]
 800c1b6:	680b      	ldr	r3, [r1, #0]
 800c1b8:	9001      	str	r0, [sp, #4]
 800c1ba:	4690      	mov	r8, r2
 800c1bc:	1c9c      	adds	r4, r3, #2
 800c1be:	46a1      	mov	r9, r4
 800c1c0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c1c4:	2830      	cmp	r0, #48	@ 0x30
 800c1c6:	d0fa      	beq.n	800c1be <__gethex+0x12>
 800c1c8:	eba9 0303 	sub.w	r3, r9, r3
 800c1cc:	f1a3 0b02 	sub.w	fp, r3, #2
 800c1d0:	f7ff ffd6 	bl	800c180 <__hexdig_fun>
 800c1d4:	4605      	mov	r5, r0
 800c1d6:	2800      	cmp	r0, #0
 800c1d8:	d168      	bne.n	800c2ac <__gethex+0x100>
 800c1da:	49a0      	ldr	r1, [pc, #640]	@ (800c45c <__gethex+0x2b0>)
 800c1dc:	2201      	movs	r2, #1
 800c1de:	4648      	mov	r0, r9
 800c1e0:	f7ff feee 	bl	800bfc0 <strncmp>
 800c1e4:	4607      	mov	r7, r0
 800c1e6:	2800      	cmp	r0, #0
 800c1e8:	d167      	bne.n	800c2ba <__gethex+0x10e>
 800c1ea:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c1ee:	4626      	mov	r6, r4
 800c1f0:	f7ff ffc6 	bl	800c180 <__hexdig_fun>
 800c1f4:	2800      	cmp	r0, #0
 800c1f6:	d062      	beq.n	800c2be <__gethex+0x112>
 800c1f8:	4623      	mov	r3, r4
 800c1fa:	7818      	ldrb	r0, [r3, #0]
 800c1fc:	2830      	cmp	r0, #48	@ 0x30
 800c1fe:	4699      	mov	r9, r3
 800c200:	f103 0301 	add.w	r3, r3, #1
 800c204:	d0f9      	beq.n	800c1fa <__gethex+0x4e>
 800c206:	f7ff ffbb 	bl	800c180 <__hexdig_fun>
 800c20a:	fab0 f580 	clz	r5, r0
 800c20e:	096d      	lsrs	r5, r5, #5
 800c210:	f04f 0b01 	mov.w	fp, #1
 800c214:	464a      	mov	r2, r9
 800c216:	4616      	mov	r6, r2
 800c218:	3201      	adds	r2, #1
 800c21a:	7830      	ldrb	r0, [r6, #0]
 800c21c:	f7ff ffb0 	bl	800c180 <__hexdig_fun>
 800c220:	2800      	cmp	r0, #0
 800c222:	d1f8      	bne.n	800c216 <__gethex+0x6a>
 800c224:	498d      	ldr	r1, [pc, #564]	@ (800c45c <__gethex+0x2b0>)
 800c226:	2201      	movs	r2, #1
 800c228:	4630      	mov	r0, r6
 800c22a:	f7ff fec9 	bl	800bfc0 <strncmp>
 800c22e:	2800      	cmp	r0, #0
 800c230:	d13f      	bne.n	800c2b2 <__gethex+0x106>
 800c232:	b944      	cbnz	r4, 800c246 <__gethex+0x9a>
 800c234:	1c74      	adds	r4, r6, #1
 800c236:	4622      	mov	r2, r4
 800c238:	4616      	mov	r6, r2
 800c23a:	3201      	adds	r2, #1
 800c23c:	7830      	ldrb	r0, [r6, #0]
 800c23e:	f7ff ff9f 	bl	800c180 <__hexdig_fun>
 800c242:	2800      	cmp	r0, #0
 800c244:	d1f8      	bne.n	800c238 <__gethex+0x8c>
 800c246:	1ba4      	subs	r4, r4, r6
 800c248:	00a7      	lsls	r7, r4, #2
 800c24a:	7833      	ldrb	r3, [r6, #0]
 800c24c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c250:	2b50      	cmp	r3, #80	@ 0x50
 800c252:	d13e      	bne.n	800c2d2 <__gethex+0x126>
 800c254:	7873      	ldrb	r3, [r6, #1]
 800c256:	2b2b      	cmp	r3, #43	@ 0x2b
 800c258:	d033      	beq.n	800c2c2 <__gethex+0x116>
 800c25a:	2b2d      	cmp	r3, #45	@ 0x2d
 800c25c:	d034      	beq.n	800c2c8 <__gethex+0x11c>
 800c25e:	1c71      	adds	r1, r6, #1
 800c260:	2400      	movs	r4, #0
 800c262:	7808      	ldrb	r0, [r1, #0]
 800c264:	f7ff ff8c 	bl	800c180 <__hexdig_fun>
 800c268:	1e43      	subs	r3, r0, #1
 800c26a:	b2db      	uxtb	r3, r3
 800c26c:	2b18      	cmp	r3, #24
 800c26e:	d830      	bhi.n	800c2d2 <__gethex+0x126>
 800c270:	f1a0 0210 	sub.w	r2, r0, #16
 800c274:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c278:	f7ff ff82 	bl	800c180 <__hexdig_fun>
 800c27c:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800c280:	fa5f fc8c 	uxtb.w	ip, ip
 800c284:	f1bc 0f18 	cmp.w	ip, #24
 800c288:	f04f 030a 	mov.w	r3, #10
 800c28c:	d91e      	bls.n	800c2cc <__gethex+0x120>
 800c28e:	b104      	cbz	r4, 800c292 <__gethex+0xe6>
 800c290:	4252      	negs	r2, r2
 800c292:	4417      	add	r7, r2
 800c294:	f8ca 1000 	str.w	r1, [sl]
 800c298:	b1ed      	cbz	r5, 800c2d6 <__gethex+0x12a>
 800c29a:	f1bb 0f00 	cmp.w	fp, #0
 800c29e:	bf0c      	ite	eq
 800c2a0:	2506      	moveq	r5, #6
 800c2a2:	2500      	movne	r5, #0
 800c2a4:	4628      	mov	r0, r5
 800c2a6:	b005      	add	sp, #20
 800c2a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2ac:	2500      	movs	r5, #0
 800c2ae:	462c      	mov	r4, r5
 800c2b0:	e7b0      	b.n	800c214 <__gethex+0x68>
 800c2b2:	2c00      	cmp	r4, #0
 800c2b4:	d1c7      	bne.n	800c246 <__gethex+0x9a>
 800c2b6:	4627      	mov	r7, r4
 800c2b8:	e7c7      	b.n	800c24a <__gethex+0x9e>
 800c2ba:	464e      	mov	r6, r9
 800c2bc:	462f      	mov	r7, r5
 800c2be:	2501      	movs	r5, #1
 800c2c0:	e7c3      	b.n	800c24a <__gethex+0x9e>
 800c2c2:	2400      	movs	r4, #0
 800c2c4:	1cb1      	adds	r1, r6, #2
 800c2c6:	e7cc      	b.n	800c262 <__gethex+0xb6>
 800c2c8:	2401      	movs	r4, #1
 800c2ca:	e7fb      	b.n	800c2c4 <__gethex+0x118>
 800c2cc:	fb03 0002 	mla	r0, r3, r2, r0
 800c2d0:	e7ce      	b.n	800c270 <__gethex+0xc4>
 800c2d2:	4631      	mov	r1, r6
 800c2d4:	e7de      	b.n	800c294 <__gethex+0xe8>
 800c2d6:	eba6 0309 	sub.w	r3, r6, r9
 800c2da:	3b01      	subs	r3, #1
 800c2dc:	4629      	mov	r1, r5
 800c2de:	2b07      	cmp	r3, #7
 800c2e0:	dc0a      	bgt.n	800c2f8 <__gethex+0x14c>
 800c2e2:	9801      	ldr	r0, [sp, #4]
 800c2e4:	f7fd ff74 	bl	800a1d0 <_Balloc>
 800c2e8:	4604      	mov	r4, r0
 800c2ea:	b940      	cbnz	r0, 800c2fe <__gethex+0x152>
 800c2ec:	4b5c      	ldr	r3, [pc, #368]	@ (800c460 <__gethex+0x2b4>)
 800c2ee:	4602      	mov	r2, r0
 800c2f0:	21e4      	movs	r1, #228	@ 0xe4
 800c2f2:	485c      	ldr	r0, [pc, #368]	@ (800c464 <__gethex+0x2b8>)
 800c2f4:	f7ff fec0 	bl	800c078 <__assert_func>
 800c2f8:	3101      	adds	r1, #1
 800c2fa:	105b      	asrs	r3, r3, #1
 800c2fc:	e7ef      	b.n	800c2de <__gethex+0x132>
 800c2fe:	f100 0a14 	add.w	sl, r0, #20
 800c302:	2300      	movs	r3, #0
 800c304:	4655      	mov	r5, sl
 800c306:	469b      	mov	fp, r3
 800c308:	45b1      	cmp	r9, r6
 800c30a:	d337      	bcc.n	800c37c <__gethex+0x1d0>
 800c30c:	f845 bb04 	str.w	fp, [r5], #4
 800c310:	eba5 050a 	sub.w	r5, r5, sl
 800c314:	10ad      	asrs	r5, r5, #2
 800c316:	6125      	str	r5, [r4, #16]
 800c318:	4658      	mov	r0, fp
 800c31a:	f7fe f84b 	bl	800a3b4 <__hi0bits>
 800c31e:	016d      	lsls	r5, r5, #5
 800c320:	f8d8 6000 	ldr.w	r6, [r8]
 800c324:	1a2d      	subs	r5, r5, r0
 800c326:	42b5      	cmp	r5, r6
 800c328:	dd54      	ble.n	800c3d4 <__gethex+0x228>
 800c32a:	1bad      	subs	r5, r5, r6
 800c32c:	4629      	mov	r1, r5
 800c32e:	4620      	mov	r0, r4
 800c330:	f7fe fbdf 	bl	800aaf2 <__any_on>
 800c334:	4681      	mov	r9, r0
 800c336:	b178      	cbz	r0, 800c358 <__gethex+0x1ac>
 800c338:	1e6b      	subs	r3, r5, #1
 800c33a:	1159      	asrs	r1, r3, #5
 800c33c:	f003 021f 	and.w	r2, r3, #31
 800c340:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c344:	f04f 0901 	mov.w	r9, #1
 800c348:	fa09 f202 	lsl.w	r2, r9, r2
 800c34c:	420a      	tst	r2, r1
 800c34e:	d003      	beq.n	800c358 <__gethex+0x1ac>
 800c350:	454b      	cmp	r3, r9
 800c352:	dc36      	bgt.n	800c3c2 <__gethex+0x216>
 800c354:	f04f 0902 	mov.w	r9, #2
 800c358:	4629      	mov	r1, r5
 800c35a:	4620      	mov	r0, r4
 800c35c:	f7ff febe 	bl	800c0dc <rshift>
 800c360:	442f      	add	r7, r5
 800c362:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c366:	42bb      	cmp	r3, r7
 800c368:	da42      	bge.n	800c3f0 <__gethex+0x244>
 800c36a:	9801      	ldr	r0, [sp, #4]
 800c36c:	4621      	mov	r1, r4
 800c36e:	f7fd ff6f 	bl	800a250 <_Bfree>
 800c372:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c374:	2300      	movs	r3, #0
 800c376:	6013      	str	r3, [r2, #0]
 800c378:	25a3      	movs	r5, #163	@ 0xa3
 800c37a:	e793      	b.n	800c2a4 <__gethex+0xf8>
 800c37c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c380:	2a2e      	cmp	r2, #46	@ 0x2e
 800c382:	d012      	beq.n	800c3aa <__gethex+0x1fe>
 800c384:	2b20      	cmp	r3, #32
 800c386:	d104      	bne.n	800c392 <__gethex+0x1e6>
 800c388:	f845 bb04 	str.w	fp, [r5], #4
 800c38c:	f04f 0b00 	mov.w	fp, #0
 800c390:	465b      	mov	r3, fp
 800c392:	7830      	ldrb	r0, [r6, #0]
 800c394:	9303      	str	r3, [sp, #12]
 800c396:	f7ff fef3 	bl	800c180 <__hexdig_fun>
 800c39a:	9b03      	ldr	r3, [sp, #12]
 800c39c:	f000 000f 	and.w	r0, r0, #15
 800c3a0:	4098      	lsls	r0, r3
 800c3a2:	ea4b 0b00 	orr.w	fp, fp, r0
 800c3a6:	3304      	adds	r3, #4
 800c3a8:	e7ae      	b.n	800c308 <__gethex+0x15c>
 800c3aa:	45b1      	cmp	r9, r6
 800c3ac:	d8ea      	bhi.n	800c384 <__gethex+0x1d8>
 800c3ae:	492b      	ldr	r1, [pc, #172]	@ (800c45c <__gethex+0x2b0>)
 800c3b0:	9303      	str	r3, [sp, #12]
 800c3b2:	2201      	movs	r2, #1
 800c3b4:	4630      	mov	r0, r6
 800c3b6:	f7ff fe03 	bl	800bfc0 <strncmp>
 800c3ba:	9b03      	ldr	r3, [sp, #12]
 800c3bc:	2800      	cmp	r0, #0
 800c3be:	d1e1      	bne.n	800c384 <__gethex+0x1d8>
 800c3c0:	e7a2      	b.n	800c308 <__gethex+0x15c>
 800c3c2:	1ea9      	subs	r1, r5, #2
 800c3c4:	4620      	mov	r0, r4
 800c3c6:	f7fe fb94 	bl	800aaf2 <__any_on>
 800c3ca:	2800      	cmp	r0, #0
 800c3cc:	d0c2      	beq.n	800c354 <__gethex+0x1a8>
 800c3ce:	f04f 0903 	mov.w	r9, #3
 800c3d2:	e7c1      	b.n	800c358 <__gethex+0x1ac>
 800c3d4:	da09      	bge.n	800c3ea <__gethex+0x23e>
 800c3d6:	1b75      	subs	r5, r6, r5
 800c3d8:	4621      	mov	r1, r4
 800c3da:	9801      	ldr	r0, [sp, #4]
 800c3dc:	462a      	mov	r2, r5
 800c3de:	f7fe f94f 	bl	800a680 <__lshift>
 800c3e2:	1b7f      	subs	r7, r7, r5
 800c3e4:	4604      	mov	r4, r0
 800c3e6:	f100 0a14 	add.w	sl, r0, #20
 800c3ea:	f04f 0900 	mov.w	r9, #0
 800c3ee:	e7b8      	b.n	800c362 <__gethex+0x1b6>
 800c3f0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c3f4:	42bd      	cmp	r5, r7
 800c3f6:	dd6f      	ble.n	800c4d8 <__gethex+0x32c>
 800c3f8:	1bed      	subs	r5, r5, r7
 800c3fa:	42ae      	cmp	r6, r5
 800c3fc:	dc34      	bgt.n	800c468 <__gethex+0x2bc>
 800c3fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c402:	2b02      	cmp	r3, #2
 800c404:	d022      	beq.n	800c44c <__gethex+0x2a0>
 800c406:	2b03      	cmp	r3, #3
 800c408:	d024      	beq.n	800c454 <__gethex+0x2a8>
 800c40a:	2b01      	cmp	r3, #1
 800c40c:	d115      	bne.n	800c43a <__gethex+0x28e>
 800c40e:	42ae      	cmp	r6, r5
 800c410:	d113      	bne.n	800c43a <__gethex+0x28e>
 800c412:	2e01      	cmp	r6, #1
 800c414:	d10b      	bne.n	800c42e <__gethex+0x282>
 800c416:	9a02      	ldr	r2, [sp, #8]
 800c418:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c41c:	6013      	str	r3, [r2, #0]
 800c41e:	2301      	movs	r3, #1
 800c420:	6123      	str	r3, [r4, #16]
 800c422:	f8ca 3000 	str.w	r3, [sl]
 800c426:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c428:	2562      	movs	r5, #98	@ 0x62
 800c42a:	601c      	str	r4, [r3, #0]
 800c42c:	e73a      	b.n	800c2a4 <__gethex+0xf8>
 800c42e:	1e71      	subs	r1, r6, #1
 800c430:	4620      	mov	r0, r4
 800c432:	f7fe fb5e 	bl	800aaf2 <__any_on>
 800c436:	2800      	cmp	r0, #0
 800c438:	d1ed      	bne.n	800c416 <__gethex+0x26a>
 800c43a:	9801      	ldr	r0, [sp, #4]
 800c43c:	4621      	mov	r1, r4
 800c43e:	f7fd ff07 	bl	800a250 <_Bfree>
 800c442:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c444:	2300      	movs	r3, #0
 800c446:	6013      	str	r3, [r2, #0]
 800c448:	2550      	movs	r5, #80	@ 0x50
 800c44a:	e72b      	b.n	800c2a4 <__gethex+0xf8>
 800c44c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d1f3      	bne.n	800c43a <__gethex+0x28e>
 800c452:	e7e0      	b.n	800c416 <__gethex+0x26a>
 800c454:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c456:	2b00      	cmp	r3, #0
 800c458:	d1dd      	bne.n	800c416 <__gethex+0x26a>
 800c45a:	e7ee      	b.n	800c43a <__gethex+0x28e>
 800c45c:	0800cc00 	.word	0x0800cc00
 800c460:	0800ca99 	.word	0x0800ca99
 800c464:	0800cdae 	.word	0x0800cdae
 800c468:	1e6f      	subs	r7, r5, #1
 800c46a:	f1b9 0f00 	cmp.w	r9, #0
 800c46e:	d130      	bne.n	800c4d2 <__gethex+0x326>
 800c470:	b127      	cbz	r7, 800c47c <__gethex+0x2d0>
 800c472:	4639      	mov	r1, r7
 800c474:	4620      	mov	r0, r4
 800c476:	f7fe fb3c 	bl	800aaf2 <__any_on>
 800c47a:	4681      	mov	r9, r0
 800c47c:	117a      	asrs	r2, r7, #5
 800c47e:	2301      	movs	r3, #1
 800c480:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c484:	f007 071f 	and.w	r7, r7, #31
 800c488:	40bb      	lsls	r3, r7
 800c48a:	4213      	tst	r3, r2
 800c48c:	4629      	mov	r1, r5
 800c48e:	4620      	mov	r0, r4
 800c490:	bf18      	it	ne
 800c492:	f049 0902 	orrne.w	r9, r9, #2
 800c496:	f7ff fe21 	bl	800c0dc <rshift>
 800c49a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c49e:	1b76      	subs	r6, r6, r5
 800c4a0:	2502      	movs	r5, #2
 800c4a2:	f1b9 0f00 	cmp.w	r9, #0
 800c4a6:	d047      	beq.n	800c538 <__gethex+0x38c>
 800c4a8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c4ac:	2b02      	cmp	r3, #2
 800c4ae:	d015      	beq.n	800c4dc <__gethex+0x330>
 800c4b0:	2b03      	cmp	r3, #3
 800c4b2:	d017      	beq.n	800c4e4 <__gethex+0x338>
 800c4b4:	2b01      	cmp	r3, #1
 800c4b6:	d109      	bne.n	800c4cc <__gethex+0x320>
 800c4b8:	f019 0f02 	tst.w	r9, #2
 800c4bc:	d006      	beq.n	800c4cc <__gethex+0x320>
 800c4be:	f8da 3000 	ldr.w	r3, [sl]
 800c4c2:	ea49 0903 	orr.w	r9, r9, r3
 800c4c6:	f019 0f01 	tst.w	r9, #1
 800c4ca:	d10e      	bne.n	800c4ea <__gethex+0x33e>
 800c4cc:	f045 0510 	orr.w	r5, r5, #16
 800c4d0:	e032      	b.n	800c538 <__gethex+0x38c>
 800c4d2:	f04f 0901 	mov.w	r9, #1
 800c4d6:	e7d1      	b.n	800c47c <__gethex+0x2d0>
 800c4d8:	2501      	movs	r5, #1
 800c4da:	e7e2      	b.n	800c4a2 <__gethex+0x2f6>
 800c4dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c4de:	f1c3 0301 	rsb	r3, r3, #1
 800c4e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c4e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d0f0      	beq.n	800c4cc <__gethex+0x320>
 800c4ea:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c4ee:	f104 0314 	add.w	r3, r4, #20
 800c4f2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c4f6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c4fa:	f04f 0c00 	mov.w	ip, #0
 800c4fe:	4618      	mov	r0, r3
 800c500:	f853 2b04 	ldr.w	r2, [r3], #4
 800c504:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800c508:	d01b      	beq.n	800c542 <__gethex+0x396>
 800c50a:	3201      	adds	r2, #1
 800c50c:	6002      	str	r2, [r0, #0]
 800c50e:	2d02      	cmp	r5, #2
 800c510:	f104 0314 	add.w	r3, r4, #20
 800c514:	d13c      	bne.n	800c590 <__gethex+0x3e4>
 800c516:	f8d8 2000 	ldr.w	r2, [r8]
 800c51a:	3a01      	subs	r2, #1
 800c51c:	42b2      	cmp	r2, r6
 800c51e:	d109      	bne.n	800c534 <__gethex+0x388>
 800c520:	1171      	asrs	r1, r6, #5
 800c522:	2201      	movs	r2, #1
 800c524:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c528:	f006 061f 	and.w	r6, r6, #31
 800c52c:	fa02 f606 	lsl.w	r6, r2, r6
 800c530:	421e      	tst	r6, r3
 800c532:	d13a      	bne.n	800c5aa <__gethex+0x3fe>
 800c534:	f045 0520 	orr.w	r5, r5, #32
 800c538:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c53a:	601c      	str	r4, [r3, #0]
 800c53c:	9b02      	ldr	r3, [sp, #8]
 800c53e:	601f      	str	r7, [r3, #0]
 800c540:	e6b0      	b.n	800c2a4 <__gethex+0xf8>
 800c542:	4299      	cmp	r1, r3
 800c544:	f843 cc04 	str.w	ip, [r3, #-4]
 800c548:	d8d9      	bhi.n	800c4fe <__gethex+0x352>
 800c54a:	68a3      	ldr	r3, [r4, #8]
 800c54c:	459b      	cmp	fp, r3
 800c54e:	db17      	blt.n	800c580 <__gethex+0x3d4>
 800c550:	6861      	ldr	r1, [r4, #4]
 800c552:	9801      	ldr	r0, [sp, #4]
 800c554:	3101      	adds	r1, #1
 800c556:	f7fd fe3b 	bl	800a1d0 <_Balloc>
 800c55a:	4681      	mov	r9, r0
 800c55c:	b918      	cbnz	r0, 800c566 <__gethex+0x3ba>
 800c55e:	4b1a      	ldr	r3, [pc, #104]	@ (800c5c8 <__gethex+0x41c>)
 800c560:	4602      	mov	r2, r0
 800c562:	2184      	movs	r1, #132	@ 0x84
 800c564:	e6c5      	b.n	800c2f2 <__gethex+0x146>
 800c566:	6922      	ldr	r2, [r4, #16]
 800c568:	3202      	adds	r2, #2
 800c56a:	f104 010c 	add.w	r1, r4, #12
 800c56e:	0092      	lsls	r2, r2, #2
 800c570:	300c      	adds	r0, #12
 800c572:	f7ff fd69 	bl	800c048 <memcpy>
 800c576:	4621      	mov	r1, r4
 800c578:	9801      	ldr	r0, [sp, #4]
 800c57a:	f7fd fe69 	bl	800a250 <_Bfree>
 800c57e:	464c      	mov	r4, r9
 800c580:	6923      	ldr	r3, [r4, #16]
 800c582:	1c5a      	adds	r2, r3, #1
 800c584:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c588:	6122      	str	r2, [r4, #16]
 800c58a:	2201      	movs	r2, #1
 800c58c:	615a      	str	r2, [r3, #20]
 800c58e:	e7be      	b.n	800c50e <__gethex+0x362>
 800c590:	6922      	ldr	r2, [r4, #16]
 800c592:	455a      	cmp	r2, fp
 800c594:	dd0b      	ble.n	800c5ae <__gethex+0x402>
 800c596:	2101      	movs	r1, #1
 800c598:	4620      	mov	r0, r4
 800c59a:	f7ff fd9f 	bl	800c0dc <rshift>
 800c59e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c5a2:	3701      	adds	r7, #1
 800c5a4:	42bb      	cmp	r3, r7
 800c5a6:	f6ff aee0 	blt.w	800c36a <__gethex+0x1be>
 800c5aa:	2501      	movs	r5, #1
 800c5ac:	e7c2      	b.n	800c534 <__gethex+0x388>
 800c5ae:	f016 061f 	ands.w	r6, r6, #31
 800c5b2:	d0fa      	beq.n	800c5aa <__gethex+0x3fe>
 800c5b4:	4453      	add	r3, sl
 800c5b6:	f1c6 0620 	rsb	r6, r6, #32
 800c5ba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c5be:	f7fd fef9 	bl	800a3b4 <__hi0bits>
 800c5c2:	42b0      	cmp	r0, r6
 800c5c4:	dbe7      	blt.n	800c596 <__gethex+0x3ea>
 800c5c6:	e7f0      	b.n	800c5aa <__gethex+0x3fe>
 800c5c8:	0800ca99 	.word	0x0800ca99

0800c5cc <L_shift>:
 800c5cc:	f1c2 0208 	rsb	r2, r2, #8
 800c5d0:	0092      	lsls	r2, r2, #2
 800c5d2:	b570      	push	{r4, r5, r6, lr}
 800c5d4:	f1c2 0620 	rsb	r6, r2, #32
 800c5d8:	6843      	ldr	r3, [r0, #4]
 800c5da:	6804      	ldr	r4, [r0, #0]
 800c5dc:	fa03 f506 	lsl.w	r5, r3, r6
 800c5e0:	432c      	orrs	r4, r5
 800c5e2:	40d3      	lsrs	r3, r2
 800c5e4:	6004      	str	r4, [r0, #0]
 800c5e6:	f840 3f04 	str.w	r3, [r0, #4]!
 800c5ea:	4288      	cmp	r0, r1
 800c5ec:	d3f4      	bcc.n	800c5d8 <L_shift+0xc>
 800c5ee:	bd70      	pop	{r4, r5, r6, pc}

0800c5f0 <__match>:
 800c5f0:	b530      	push	{r4, r5, lr}
 800c5f2:	6803      	ldr	r3, [r0, #0]
 800c5f4:	3301      	adds	r3, #1
 800c5f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c5fa:	b914      	cbnz	r4, 800c602 <__match+0x12>
 800c5fc:	6003      	str	r3, [r0, #0]
 800c5fe:	2001      	movs	r0, #1
 800c600:	bd30      	pop	{r4, r5, pc}
 800c602:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c606:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c60a:	2d19      	cmp	r5, #25
 800c60c:	bf98      	it	ls
 800c60e:	3220      	addls	r2, #32
 800c610:	42a2      	cmp	r2, r4
 800c612:	d0f0      	beq.n	800c5f6 <__match+0x6>
 800c614:	2000      	movs	r0, #0
 800c616:	e7f3      	b.n	800c600 <__match+0x10>

0800c618 <__hexnan>:
 800c618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c61c:	680b      	ldr	r3, [r1, #0]
 800c61e:	6801      	ldr	r1, [r0, #0]
 800c620:	115e      	asrs	r6, r3, #5
 800c622:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c626:	f013 031f 	ands.w	r3, r3, #31
 800c62a:	b087      	sub	sp, #28
 800c62c:	bf18      	it	ne
 800c62e:	3604      	addne	r6, #4
 800c630:	2500      	movs	r5, #0
 800c632:	1f37      	subs	r7, r6, #4
 800c634:	4682      	mov	sl, r0
 800c636:	4690      	mov	r8, r2
 800c638:	9301      	str	r3, [sp, #4]
 800c63a:	f846 5c04 	str.w	r5, [r6, #-4]
 800c63e:	46b9      	mov	r9, r7
 800c640:	463c      	mov	r4, r7
 800c642:	9502      	str	r5, [sp, #8]
 800c644:	46ab      	mov	fp, r5
 800c646:	784a      	ldrb	r2, [r1, #1]
 800c648:	1c4b      	adds	r3, r1, #1
 800c64a:	9303      	str	r3, [sp, #12]
 800c64c:	b342      	cbz	r2, 800c6a0 <__hexnan+0x88>
 800c64e:	4610      	mov	r0, r2
 800c650:	9105      	str	r1, [sp, #20]
 800c652:	9204      	str	r2, [sp, #16]
 800c654:	f7ff fd94 	bl	800c180 <__hexdig_fun>
 800c658:	2800      	cmp	r0, #0
 800c65a:	d151      	bne.n	800c700 <__hexnan+0xe8>
 800c65c:	9a04      	ldr	r2, [sp, #16]
 800c65e:	9905      	ldr	r1, [sp, #20]
 800c660:	2a20      	cmp	r2, #32
 800c662:	d818      	bhi.n	800c696 <__hexnan+0x7e>
 800c664:	9b02      	ldr	r3, [sp, #8]
 800c666:	459b      	cmp	fp, r3
 800c668:	dd13      	ble.n	800c692 <__hexnan+0x7a>
 800c66a:	454c      	cmp	r4, r9
 800c66c:	d206      	bcs.n	800c67c <__hexnan+0x64>
 800c66e:	2d07      	cmp	r5, #7
 800c670:	dc04      	bgt.n	800c67c <__hexnan+0x64>
 800c672:	462a      	mov	r2, r5
 800c674:	4649      	mov	r1, r9
 800c676:	4620      	mov	r0, r4
 800c678:	f7ff ffa8 	bl	800c5cc <L_shift>
 800c67c:	4544      	cmp	r4, r8
 800c67e:	d952      	bls.n	800c726 <__hexnan+0x10e>
 800c680:	2300      	movs	r3, #0
 800c682:	f1a4 0904 	sub.w	r9, r4, #4
 800c686:	f844 3c04 	str.w	r3, [r4, #-4]
 800c68a:	f8cd b008 	str.w	fp, [sp, #8]
 800c68e:	464c      	mov	r4, r9
 800c690:	461d      	mov	r5, r3
 800c692:	9903      	ldr	r1, [sp, #12]
 800c694:	e7d7      	b.n	800c646 <__hexnan+0x2e>
 800c696:	2a29      	cmp	r2, #41	@ 0x29
 800c698:	d157      	bne.n	800c74a <__hexnan+0x132>
 800c69a:	3102      	adds	r1, #2
 800c69c:	f8ca 1000 	str.w	r1, [sl]
 800c6a0:	f1bb 0f00 	cmp.w	fp, #0
 800c6a4:	d051      	beq.n	800c74a <__hexnan+0x132>
 800c6a6:	454c      	cmp	r4, r9
 800c6a8:	d206      	bcs.n	800c6b8 <__hexnan+0xa0>
 800c6aa:	2d07      	cmp	r5, #7
 800c6ac:	dc04      	bgt.n	800c6b8 <__hexnan+0xa0>
 800c6ae:	462a      	mov	r2, r5
 800c6b0:	4649      	mov	r1, r9
 800c6b2:	4620      	mov	r0, r4
 800c6b4:	f7ff ff8a 	bl	800c5cc <L_shift>
 800c6b8:	4544      	cmp	r4, r8
 800c6ba:	d936      	bls.n	800c72a <__hexnan+0x112>
 800c6bc:	f1a8 0204 	sub.w	r2, r8, #4
 800c6c0:	4623      	mov	r3, r4
 800c6c2:	f853 1b04 	ldr.w	r1, [r3], #4
 800c6c6:	f842 1f04 	str.w	r1, [r2, #4]!
 800c6ca:	429f      	cmp	r7, r3
 800c6cc:	d2f9      	bcs.n	800c6c2 <__hexnan+0xaa>
 800c6ce:	1b3b      	subs	r3, r7, r4
 800c6d0:	f023 0303 	bic.w	r3, r3, #3
 800c6d4:	3304      	adds	r3, #4
 800c6d6:	3401      	adds	r4, #1
 800c6d8:	3e03      	subs	r6, #3
 800c6da:	42b4      	cmp	r4, r6
 800c6dc:	bf88      	it	hi
 800c6de:	2304      	movhi	r3, #4
 800c6e0:	4443      	add	r3, r8
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	f843 2b04 	str.w	r2, [r3], #4
 800c6e8:	429f      	cmp	r7, r3
 800c6ea:	d2fb      	bcs.n	800c6e4 <__hexnan+0xcc>
 800c6ec:	683b      	ldr	r3, [r7, #0]
 800c6ee:	b91b      	cbnz	r3, 800c6f8 <__hexnan+0xe0>
 800c6f0:	4547      	cmp	r7, r8
 800c6f2:	d128      	bne.n	800c746 <__hexnan+0x12e>
 800c6f4:	2301      	movs	r3, #1
 800c6f6:	603b      	str	r3, [r7, #0]
 800c6f8:	2005      	movs	r0, #5
 800c6fa:	b007      	add	sp, #28
 800c6fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c700:	3501      	adds	r5, #1
 800c702:	2d08      	cmp	r5, #8
 800c704:	f10b 0b01 	add.w	fp, fp, #1
 800c708:	dd06      	ble.n	800c718 <__hexnan+0x100>
 800c70a:	4544      	cmp	r4, r8
 800c70c:	d9c1      	bls.n	800c692 <__hexnan+0x7a>
 800c70e:	2300      	movs	r3, #0
 800c710:	f844 3c04 	str.w	r3, [r4, #-4]
 800c714:	2501      	movs	r5, #1
 800c716:	3c04      	subs	r4, #4
 800c718:	6822      	ldr	r2, [r4, #0]
 800c71a:	f000 000f 	and.w	r0, r0, #15
 800c71e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c722:	6020      	str	r0, [r4, #0]
 800c724:	e7b5      	b.n	800c692 <__hexnan+0x7a>
 800c726:	2508      	movs	r5, #8
 800c728:	e7b3      	b.n	800c692 <__hexnan+0x7a>
 800c72a:	9b01      	ldr	r3, [sp, #4]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d0dd      	beq.n	800c6ec <__hexnan+0xd4>
 800c730:	f1c3 0320 	rsb	r3, r3, #32
 800c734:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c738:	40da      	lsrs	r2, r3
 800c73a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c73e:	4013      	ands	r3, r2
 800c740:	f846 3c04 	str.w	r3, [r6, #-4]
 800c744:	e7d2      	b.n	800c6ec <__hexnan+0xd4>
 800c746:	3f04      	subs	r7, #4
 800c748:	e7d0      	b.n	800c6ec <__hexnan+0xd4>
 800c74a:	2004      	movs	r0, #4
 800c74c:	e7d5      	b.n	800c6fa <__hexnan+0xe2>

0800c74e <__ascii_mbtowc>:
 800c74e:	b082      	sub	sp, #8
 800c750:	b901      	cbnz	r1, 800c754 <__ascii_mbtowc+0x6>
 800c752:	a901      	add	r1, sp, #4
 800c754:	b142      	cbz	r2, 800c768 <__ascii_mbtowc+0x1a>
 800c756:	b14b      	cbz	r3, 800c76c <__ascii_mbtowc+0x1e>
 800c758:	7813      	ldrb	r3, [r2, #0]
 800c75a:	600b      	str	r3, [r1, #0]
 800c75c:	7812      	ldrb	r2, [r2, #0]
 800c75e:	1e10      	subs	r0, r2, #0
 800c760:	bf18      	it	ne
 800c762:	2001      	movne	r0, #1
 800c764:	b002      	add	sp, #8
 800c766:	4770      	bx	lr
 800c768:	4610      	mov	r0, r2
 800c76a:	e7fb      	b.n	800c764 <__ascii_mbtowc+0x16>
 800c76c:	f06f 0001 	mvn.w	r0, #1
 800c770:	e7f8      	b.n	800c764 <__ascii_mbtowc+0x16>

0800c772 <_realloc_r>:
 800c772:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c776:	4680      	mov	r8, r0
 800c778:	4615      	mov	r5, r2
 800c77a:	460c      	mov	r4, r1
 800c77c:	b921      	cbnz	r1, 800c788 <_realloc_r+0x16>
 800c77e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c782:	4611      	mov	r1, r2
 800c784:	f7fd bc98 	b.w	800a0b8 <_malloc_r>
 800c788:	b92a      	cbnz	r2, 800c796 <_realloc_r+0x24>
 800c78a:	f7fd fc21 	bl	8009fd0 <_free_r>
 800c78e:	2400      	movs	r4, #0
 800c790:	4620      	mov	r0, r4
 800c792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c796:	f000 f840 	bl	800c81a <_malloc_usable_size_r>
 800c79a:	4285      	cmp	r5, r0
 800c79c:	4606      	mov	r6, r0
 800c79e:	d802      	bhi.n	800c7a6 <_realloc_r+0x34>
 800c7a0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c7a4:	d8f4      	bhi.n	800c790 <_realloc_r+0x1e>
 800c7a6:	4629      	mov	r1, r5
 800c7a8:	4640      	mov	r0, r8
 800c7aa:	f7fd fc85 	bl	800a0b8 <_malloc_r>
 800c7ae:	4607      	mov	r7, r0
 800c7b0:	2800      	cmp	r0, #0
 800c7b2:	d0ec      	beq.n	800c78e <_realloc_r+0x1c>
 800c7b4:	42b5      	cmp	r5, r6
 800c7b6:	462a      	mov	r2, r5
 800c7b8:	4621      	mov	r1, r4
 800c7ba:	bf28      	it	cs
 800c7bc:	4632      	movcs	r2, r6
 800c7be:	f7ff fc43 	bl	800c048 <memcpy>
 800c7c2:	4621      	mov	r1, r4
 800c7c4:	4640      	mov	r0, r8
 800c7c6:	f7fd fc03 	bl	8009fd0 <_free_r>
 800c7ca:	463c      	mov	r4, r7
 800c7cc:	e7e0      	b.n	800c790 <_realloc_r+0x1e>

0800c7ce <__ascii_wctomb>:
 800c7ce:	4603      	mov	r3, r0
 800c7d0:	4608      	mov	r0, r1
 800c7d2:	b141      	cbz	r1, 800c7e6 <__ascii_wctomb+0x18>
 800c7d4:	2aff      	cmp	r2, #255	@ 0xff
 800c7d6:	d904      	bls.n	800c7e2 <__ascii_wctomb+0x14>
 800c7d8:	228a      	movs	r2, #138	@ 0x8a
 800c7da:	601a      	str	r2, [r3, #0]
 800c7dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c7e0:	4770      	bx	lr
 800c7e2:	700a      	strb	r2, [r1, #0]
 800c7e4:	2001      	movs	r0, #1
 800c7e6:	4770      	bx	lr

0800c7e8 <fiprintf>:
 800c7e8:	b40e      	push	{r1, r2, r3}
 800c7ea:	b503      	push	{r0, r1, lr}
 800c7ec:	4601      	mov	r1, r0
 800c7ee:	ab03      	add	r3, sp, #12
 800c7f0:	4805      	ldr	r0, [pc, #20]	@ (800c808 <fiprintf+0x20>)
 800c7f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7f6:	6800      	ldr	r0, [r0, #0]
 800c7f8:	9301      	str	r3, [sp, #4]
 800c7fa:	f7ff f9a1 	bl	800bb40 <_vfiprintf_r>
 800c7fe:	b002      	add	sp, #8
 800c800:	f85d eb04 	ldr.w	lr, [sp], #4
 800c804:	b003      	add	sp, #12
 800c806:	4770      	bx	lr
 800c808:	20000018 	.word	0x20000018

0800c80c <abort>:
 800c80c:	b508      	push	{r3, lr}
 800c80e:	2006      	movs	r0, #6
 800c810:	f000 f834 	bl	800c87c <raise>
 800c814:	2001      	movs	r0, #1
 800c816:	f7f4 ff99 	bl	800174c <_exit>

0800c81a <_malloc_usable_size_r>:
 800c81a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c81e:	1f18      	subs	r0, r3, #4
 800c820:	2b00      	cmp	r3, #0
 800c822:	bfbc      	itt	lt
 800c824:	580b      	ldrlt	r3, [r1, r0]
 800c826:	18c0      	addlt	r0, r0, r3
 800c828:	4770      	bx	lr

0800c82a <_raise_r>:
 800c82a:	291f      	cmp	r1, #31
 800c82c:	b538      	push	{r3, r4, r5, lr}
 800c82e:	4605      	mov	r5, r0
 800c830:	460c      	mov	r4, r1
 800c832:	d904      	bls.n	800c83e <_raise_r+0x14>
 800c834:	2316      	movs	r3, #22
 800c836:	6003      	str	r3, [r0, #0]
 800c838:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c83c:	bd38      	pop	{r3, r4, r5, pc}
 800c83e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c840:	b112      	cbz	r2, 800c848 <_raise_r+0x1e>
 800c842:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c846:	b94b      	cbnz	r3, 800c85c <_raise_r+0x32>
 800c848:	4628      	mov	r0, r5
 800c84a:	f000 f831 	bl	800c8b0 <_getpid_r>
 800c84e:	4622      	mov	r2, r4
 800c850:	4601      	mov	r1, r0
 800c852:	4628      	mov	r0, r5
 800c854:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c858:	f000 b818 	b.w	800c88c <_kill_r>
 800c85c:	2b01      	cmp	r3, #1
 800c85e:	d00a      	beq.n	800c876 <_raise_r+0x4c>
 800c860:	1c59      	adds	r1, r3, #1
 800c862:	d103      	bne.n	800c86c <_raise_r+0x42>
 800c864:	2316      	movs	r3, #22
 800c866:	6003      	str	r3, [r0, #0]
 800c868:	2001      	movs	r0, #1
 800c86a:	e7e7      	b.n	800c83c <_raise_r+0x12>
 800c86c:	2100      	movs	r1, #0
 800c86e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c872:	4620      	mov	r0, r4
 800c874:	4798      	blx	r3
 800c876:	2000      	movs	r0, #0
 800c878:	e7e0      	b.n	800c83c <_raise_r+0x12>
	...

0800c87c <raise>:
 800c87c:	4b02      	ldr	r3, [pc, #8]	@ (800c888 <raise+0xc>)
 800c87e:	4601      	mov	r1, r0
 800c880:	6818      	ldr	r0, [r3, #0]
 800c882:	f7ff bfd2 	b.w	800c82a <_raise_r>
 800c886:	bf00      	nop
 800c888:	20000018 	.word	0x20000018

0800c88c <_kill_r>:
 800c88c:	b538      	push	{r3, r4, r5, lr}
 800c88e:	4d07      	ldr	r5, [pc, #28]	@ (800c8ac <_kill_r+0x20>)
 800c890:	2300      	movs	r3, #0
 800c892:	4604      	mov	r4, r0
 800c894:	4608      	mov	r0, r1
 800c896:	4611      	mov	r1, r2
 800c898:	602b      	str	r3, [r5, #0]
 800c89a:	f7f4 ff47 	bl	800172c <_kill>
 800c89e:	1c43      	adds	r3, r0, #1
 800c8a0:	d102      	bne.n	800c8a8 <_kill_r+0x1c>
 800c8a2:	682b      	ldr	r3, [r5, #0]
 800c8a4:	b103      	cbz	r3, 800c8a8 <_kill_r+0x1c>
 800c8a6:	6023      	str	r3, [r4, #0]
 800c8a8:	bd38      	pop	{r3, r4, r5, pc}
 800c8aa:	bf00      	nop
 800c8ac:	200021d4 	.word	0x200021d4

0800c8b0 <_getpid_r>:
 800c8b0:	f7f4 bf34 	b.w	800171c <_getpid>

0800c8b4 <_init>:
 800c8b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8b6:	bf00      	nop
 800c8b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8ba:	bc08      	pop	{r3}
 800c8bc:	469e      	mov	lr, r3
 800c8be:	4770      	bx	lr

0800c8c0 <_fini>:
 800c8c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8c2:	bf00      	nop
 800c8c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8c6:	bc08      	pop	{r3}
 800c8c8:	469e      	mov	lr, r3
 800c8ca:	4770      	bx	lr
