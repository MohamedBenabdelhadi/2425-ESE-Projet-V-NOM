
Projet_V-NOM_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c98c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000548  0800cb70  0800cb70  0000db70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d0b8  0800d0b8  00010118  2**0
                  CONTENTS
  4 .ARM          00000008  0800d0b8  0800d0b8  0000e0b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d0c0  0800d0c0  00010118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d0c0  0800d0c0  0000e0c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d0c4  0800d0c4  0000e0c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00001118  20000000  0800d0c8  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000205c  20001118  0800e1e0  00010118  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003174  0800e1e0  00010174  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010118  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d286  00000000  00000000  00010148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cb4  00000000  00000000  0002d3ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001880  00000000  00000000  00031088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012f0  00000000  00000000  00032908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002322b  00000000  00000000  00033bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d456  00000000  00000000  00056e23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0e18  00000000  00000000  00074279  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00155091  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007d68  00000000  00000000  001550d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  0015ce3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20001118 	.word	0x20001118
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800cb54 	.word	0x0800cb54

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000111c 	.word	0x2000111c
 800021c:	0800cb54 	.word	0x0800cb54

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08c      	sub	sp, #48	@ 0x30
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800103a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	2220      	movs	r2, #32
 800104a:	2100      	movs	r1, #0
 800104c:	4618      	mov	r0, r3
 800104e:	f008 fa3d 	bl	80094cc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001052:	4b32      	ldr	r3, [pc, #200]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001054:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001058:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800105a:	4b30      	ldr	r3, [pc, #192]	@ (800111c <MX_ADC1_Init+0xe8>)
 800105c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001060:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001062:	4b2e      	ldr	r3, [pc, #184]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001068:	4b2c      	ldr	r3, [pc, #176]	@ (800111c <MX_ADC1_Init+0xe8>)
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800106e:	4b2b      	ldr	r3, [pc, #172]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001070:	2200      	movs	r2, #0
 8001072:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001074:	4b29      	ldr	r3, [pc, #164]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001076:	2200      	movs	r2, #0
 8001078:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800107a:	4b28      	ldr	r3, [pc, #160]	@ (800111c <MX_ADC1_Init+0xe8>)
 800107c:	2204      	movs	r2, #4
 800107e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001080:	4b26      	ldr	r3, [pc, #152]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001082:	2200      	movs	r2, #0
 8001084:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001086:	4b25      	ldr	r3, [pc, #148]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001088:	2200      	movs	r2, #0
 800108a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800108c:	4b23      	ldr	r3, [pc, #140]	@ (800111c <MX_ADC1_Init+0xe8>)
 800108e:	2201      	movs	r2, #1
 8001090:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001092:	4b22      	ldr	r3, [pc, #136]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001094:	2200      	movs	r2, #0
 8001096:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800109a:	4b20      	ldr	r3, [pc, #128]	@ (800111c <MX_ADC1_Init+0xe8>)
 800109c:	2200      	movs	r2, #0
 800109e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010a0:	4b1e      	ldr	r3, [pc, #120]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010a6:	4b1d      	ldr	r3, [pc, #116]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010ae:	4b1b      	ldr	r3, [pc, #108]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010b4:	4b19      	ldr	r3, [pc, #100]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010bc:	4817      	ldr	r0, [pc, #92]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010be:	f001 fcab 	bl	8002a18 <HAL_ADC_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80010c8:	f000 fa62 	bl	8001590 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010cc:	2300      	movs	r3, #0
 80010ce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010d4:	4619      	mov	r1, r3
 80010d6:	4811      	ldr	r0, [pc, #68]	@ (800111c <MX_ADC1_Init+0xe8>)
 80010d8:	f002 fa38 	bl	800354c <HAL_ADCEx_MultiModeConfigChannel>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80010e2:	f000 fa55 	bl	8001590 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80010e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001120 <MX_ADC1_Init+0xec>)
 80010e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010ea:	2306      	movs	r3, #6
 80010ec:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010f2:	237f      	movs	r3, #127	@ 0x7f
 80010f4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010f6:	2304      	movs	r3, #4
 80010f8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010fe:	1d3b      	adds	r3, r7, #4
 8001100:	4619      	mov	r1, r3
 8001102:	4806      	ldr	r0, [pc, #24]	@ (800111c <MX_ADC1_Init+0xe8>)
 8001104:	f001 fe0c 	bl	8002d20 <HAL_ADC_ConfigChannel>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800110e:	f000 fa3f 	bl	8001590 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001112:	bf00      	nop
 8001114:	3730      	adds	r7, #48	@ 0x30
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20001134 	.word	0x20001134
 8001120:	0c900008 	.word	0x0c900008

08001124 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b09a      	sub	sp, #104	@ 0x68
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800113c:	f107 0310 	add.w	r3, r7, #16
 8001140:	2244      	movs	r2, #68	@ 0x44
 8001142:	2100      	movs	r1, #0
 8001144:	4618      	mov	r0, r3
 8001146:	f008 f9c1 	bl	80094cc <memset>
  if(adcHandle->Instance==ADC1)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001152:	d134      	bne.n	80011be <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001154:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001158:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800115a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800115e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001160:	f107 0310 	add.w	r3, r7, #16
 8001164:	4618      	mov	r0, r3
 8001166:	f003 fe61 	bl	8004e2c <HAL_RCCEx_PeriphCLKConfig>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001170:	f000 fa0e 	bl	8001590 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001174:	4b14      	ldr	r3, [pc, #80]	@ (80011c8 <HAL_ADC_MspInit+0xa4>)
 8001176:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001178:	4a13      	ldr	r2, [pc, #76]	@ (80011c8 <HAL_ADC_MspInit+0xa4>)
 800117a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800117e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001180:	4b11      	ldr	r3, [pc, #68]	@ (80011c8 <HAL_ADC_MspInit+0xa4>)
 8001182:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001184:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118c:	4b0e      	ldr	r3, [pc, #56]	@ (80011c8 <HAL_ADC_MspInit+0xa4>)
 800118e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001190:	4a0d      	ldr	r2, [pc, #52]	@ (80011c8 <HAL_ADC_MspInit+0xa4>)
 8001192:	f043 0301 	orr.w	r3, r3, #1
 8001196:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001198:	4b0b      	ldr	r3, [pc, #44]	@ (80011c8 <HAL_ADC_MspInit+0xa4>)
 800119a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800119c:	f003 0301 	and.w	r3, r3, #1
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ToF2_Pin|ToF1_Pin;
 80011a4:	2305      	movs	r3, #5
 80011a6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011a8:	2303      	movs	r3, #3
 80011aa:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011b4:	4619      	mov	r1, r3
 80011b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011ba:	f002 fe89 	bl	8003ed0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011be:	bf00      	nop
 80011c0:	3768      	adds	r7, #104	@ 0x68
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40021000 	.word	0x40021000

080011cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80011d2:	4b12      	ldr	r3, [pc, #72]	@ (800121c <MX_DMA_Init+0x50>)
 80011d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011d6:	4a11      	ldr	r2, [pc, #68]	@ (800121c <MX_DMA_Init+0x50>)
 80011d8:	f043 0304 	orr.w	r3, r3, #4
 80011dc:	6493      	str	r3, [r2, #72]	@ 0x48
 80011de:	4b0f      	ldr	r3, [pc, #60]	@ (800121c <MX_DMA_Init+0x50>)
 80011e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011e2:	f003 0304 	and.w	r3, r3, #4
 80011e6:	607b      	str	r3, [r7, #4]
 80011e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011ea:	4b0c      	ldr	r3, [pc, #48]	@ (800121c <MX_DMA_Init+0x50>)
 80011ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011ee:	4a0b      	ldr	r2, [pc, #44]	@ (800121c <MX_DMA_Init+0x50>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	6493      	str	r3, [r2, #72]	@ 0x48
 80011f6:	4b09      	ldr	r3, [pc, #36]	@ (800121c <MX_DMA_Init+0x50>)
 80011f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	603b      	str	r3, [r7, #0]
 8001200:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001202:	2200      	movs	r2, #0
 8001204:	2100      	movs	r1, #0
 8001206:	200b      	movs	r0, #11
 8001208:	f002 fafc 	bl	8003804 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800120c:	200b      	movs	r0, #11
 800120e:	f002 fb13 	bl	8003838 <HAL_NVIC_EnableIRQ>

}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40021000 	.word	0x40021000

08001220 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08a      	sub	sp, #40	@ 0x28
 8001224:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001226:	f107 0314 	add.w	r3, r7, #20
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]
 8001230:	609a      	str	r2, [r3, #8]
 8001232:	60da      	str	r2, [r3, #12]
 8001234:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001236:	4b42      	ldr	r3, [pc, #264]	@ (8001340 <MX_GPIO_Init+0x120>)
 8001238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800123a:	4a41      	ldr	r2, [pc, #260]	@ (8001340 <MX_GPIO_Init+0x120>)
 800123c:	f043 0304 	orr.w	r3, r3, #4
 8001240:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001242:	4b3f      	ldr	r3, [pc, #252]	@ (8001340 <MX_GPIO_Init+0x120>)
 8001244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001246:	f003 0304 	and.w	r3, r3, #4
 800124a:	613b      	str	r3, [r7, #16]
 800124c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800124e:	4b3c      	ldr	r3, [pc, #240]	@ (8001340 <MX_GPIO_Init+0x120>)
 8001250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001252:	4a3b      	ldr	r2, [pc, #236]	@ (8001340 <MX_GPIO_Init+0x120>)
 8001254:	f043 0320 	orr.w	r3, r3, #32
 8001258:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800125a:	4b39      	ldr	r3, [pc, #228]	@ (8001340 <MX_GPIO_Init+0x120>)
 800125c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800125e:	f003 0320 	and.w	r3, r3, #32
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001266:	4b36      	ldr	r3, [pc, #216]	@ (8001340 <MX_GPIO_Init+0x120>)
 8001268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800126a:	4a35      	ldr	r2, [pc, #212]	@ (8001340 <MX_GPIO_Init+0x120>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001272:	4b33      	ldr	r3, [pc, #204]	@ (8001340 <MX_GPIO_Init+0x120>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	60bb      	str	r3, [r7, #8]
 800127c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800127e:	4b30      	ldr	r3, [pc, #192]	@ (8001340 <MX_GPIO_Init+0x120>)
 8001280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001282:	4a2f      	ldr	r2, [pc, #188]	@ (8001340 <MX_GPIO_Init+0x120>)
 8001284:	f043 0302 	orr.w	r3, r3, #2
 8001288:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800128a:	4b2d      	ldr	r3, [pc, #180]	@ (8001340 <MX_GPIO_Init+0x120>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	607b      	str	r3, [r7, #4]
 8001294:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI1_CSN_Pin|EN_LIDAR_Pin|EN_MOT_Pin, GPIO_PIN_RESET);
 8001296:	2200      	movs	r2, #0
 8001298:	f44f 6141 	mov.w	r1, #3088	@ 0xc10
 800129c:	4829      	ldr	r0, [pc, #164]	@ (8001344 <MX_GPIO_Init+0x124>)
 800129e:	f002 ff99 	bl	80041d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 80012a2:	2200      	movs	r2, #0
 80012a4:	2103      	movs	r1, #3
 80012a6:	4828      	ldr	r0, [pc, #160]	@ (8001348 <MX_GPIO_Init+0x128>)
 80012a8:	f002 ff94 	bl	80041d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_START_Pin;
 80012ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b2:	2300      	movs	r3, #0
 80012b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_START_GPIO_Port, &GPIO_InitStruct);
 80012ba:	f107 0314 	add.w	r3, r7, #20
 80012be:	4619      	mov	r1, r3
 80012c0:	4820      	ldr	r0, [pc, #128]	@ (8001344 <MX_GPIO_Init+0x124>)
 80012c2:	f002 fe05 	bl	8003ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = AG_INT1_Pin|AG_INT2_Pin;
 80012c6:	2318      	movs	r3, #24
 80012c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012ca:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80012ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d4:	f107 0314 	add.w	r3, r7, #20
 80012d8:	4619      	mov	r1, r3
 80012da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012de:	f002 fdf7 	bl	8003ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SPI1_CSN_Pin|EN_LIDAR_Pin|EN_MOT_Pin;
 80012e2:	f44f 6341 	mov.w	r3, #3088	@ 0xc10
 80012e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e8:	2301      	movs	r3, #1
 80012ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f0:	2300      	movs	r3, #0
 80012f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	4619      	mov	r1, r3
 80012fa:	4812      	ldr	r0, [pc, #72]	@ (8001344 <MX_GPIO_Init+0x124>)
 80012fc:	f002 fde8 	bl	8003ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin;
 8001300:	2303      	movs	r3, #3
 8001302:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001304:	2301      	movs	r3, #1
 8001306:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130c:	2300      	movs	r3, #0
 800130e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	4619      	mov	r1, r3
 8001316:	480c      	ldr	r0, [pc, #48]	@ (8001348 <MX_GPIO_Init+0x128>)
 8001318:	f002 fdda 	bl	8003ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_MODE_Pin;
 800131c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001320:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001322:	2300      	movs	r3, #0
 8001324:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_MODE_GPIO_Port, &GPIO_InitStruct);
 800132a:	f107 0314 	add.w	r3, r7, #20
 800132e:	4619      	mov	r1, r3
 8001330:	4805      	ldr	r0, [pc, #20]	@ (8001348 <MX_GPIO_Init+0x128>)
 8001332:	f002 fdcd 	bl	8003ed0 <HAL_GPIO_Init>

}
 8001336:	bf00      	nop
 8001338:	3728      	adds	r7, #40	@ 0x28
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40021000 	.word	0x40021000
 8001344:	48000800 	.word	0x48000800
 8001348:	48000400 	.word	0x48000400

0800134c <__io_putchar>:
 * @brief Transmit a character over UART.
 * @param ch: Character to transmit.
 * @retval int: The transmitted character.
 */
int __io_putchar(int ch)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001354:	1d39      	adds	r1, r7, #4
 8001356:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800135a:	2201      	movs	r2, #1
 800135c:	4803      	ldr	r0, [pc, #12]	@ (800136c <__io_putchar+0x20>)
 800135e:	f005 fb1f 	bl	80069a0 <HAL_UART_Transmit>

	return ch;
 8001362:	687b      	ldr	r3, [r7, #4]
}
 8001364:	4618      	mov	r0, r3
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20002e9c 	.word	0x20002e9c

08001370 <HAL_UART_RxHalfCpltCallback>:
/**
 * @brief UART receive half complete callback.
 * @param huart: Pointer to the UART handle
 * @retval None
 */
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart) {
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a04      	ldr	r2, [pc, #16]	@ (8001390 <HAL_UART_RxHalfCpltCallback+0x20>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d102      	bne.n	8001388 <HAL_UART_RxHalfCpltCallback+0x18>
		YLIDARX2_ProcessDMAHalfComplete(&hlidar);
 8001382:	4804      	ldr	r0, [pc, #16]	@ (8001394 <HAL_UART_RxHalfCpltCallback+0x24>)
 8001384:	f000 ff8e 	bl	80022a4 <YLIDARX2_ProcessDMAHalfComplete>
	}
}
 8001388:	bf00      	nop
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40004400 	.word	0x40004400
 8001394:	200011a0 	.word	0x200011a0

08001398 <HAL_UART_RxCpltCallback>:
/**
 * @brief UART receive complete callback.
 * @param huart: Pointer to the UART handle
 * @retval None
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a04      	ldr	r2, [pc, #16]	@ (80013b8 <HAL_UART_RxCpltCallback+0x20>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d102      	bne.n	80013b0 <HAL_UART_RxCpltCallback+0x18>
		YLIDARX2_ProcessDMAComplete(&hlidar);
 80013aa:	4804      	ldr	r0, [pc, #16]	@ (80013bc <HAL_UART_RxCpltCallback+0x24>)
 80013ac:	f000 ff88 	bl	80022c0 <YLIDARX2_ProcessDMAComplete>
	}
}
 80013b0:	bf00      	nop
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40004400 	.word	0x40004400
 80013bc:	200011a0 	.word	0x200011a0

080013c0 <HAL_UART_ErrorCallback>:
 * @brief UART error callback.
 * @param huart: Pointer to the UART handle
 * @retval None
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a24      	ldr	r2, [pc, #144]	@ (8001460 <HAL_UART_ErrorCallback+0xa0>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d142      	bne.n	8001458 <HAL_UART_ErrorCallback+0x98>
	{
		if (HAL_UART_GetError(huart) & HAL_UART_ERROR_PE)
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f005 ffac 	bl	8007330 <HAL_UART_GetError>
 80013d8:	4603      	mov	r3, r0
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d002      	beq.n	80013e8 <HAL_UART_ErrorCallback+0x28>
			DEBUG_PRINT("Parity Error!\r\n");
 80013e2:	4820      	ldr	r0, [pc, #128]	@ (8001464 <HAL_UART_ErrorCallback+0xa4>)
 80013e4:	f007 ff72 	bl	80092cc <puts>
		if (HAL_UART_GetError(huart) & HAL_UART_ERROR_NE)
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f005 ffa1 	bl	8007330 <HAL_UART_GetError>
 80013ee:	4603      	mov	r3, r0
 80013f0:	f003 0302 	and.w	r3, r3, #2
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d002      	beq.n	80013fe <HAL_UART_ErrorCallback+0x3e>
			DEBUG_PRINT("Noise Error!\r\n");
 80013f8:	481b      	ldr	r0, [pc, #108]	@ (8001468 <HAL_UART_ErrorCallback+0xa8>)
 80013fa:	f007 ff67 	bl	80092cc <puts>
		if (HAL_UART_GetError(huart) & HAL_UART_ERROR_FE)
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f005 ff96 	bl	8007330 <HAL_UART_GetError>
 8001404:	4603      	mov	r3, r0
 8001406:	f003 0304 	and.w	r3, r3, #4
 800140a:	2b00      	cmp	r3, #0
 800140c:	d002      	beq.n	8001414 <HAL_UART_ErrorCallback+0x54>
			DEBUG_PRINT("Framing Error!\r\n");
 800140e:	4817      	ldr	r0, [pc, #92]	@ (800146c <HAL_UART_ErrorCallback+0xac>)
 8001410:	f007 ff5c 	bl	80092cc <puts>
		if (HAL_UART_GetError(huart) & HAL_UART_ERROR_ORE)
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f005 ff8b 	bl	8007330 <HAL_UART_GetError>
 800141a:	4603      	mov	r3, r0
 800141c:	f003 0308 	and.w	r3, r3, #8
 8001420:	2b00      	cmp	r3, #0
 8001422:	d002      	beq.n	800142a <HAL_UART_ErrorCallback+0x6a>
			DEBUG_PRINT("Overrun Error!\r\n");
 8001424:	4812      	ldr	r0, [pc, #72]	@ (8001470 <HAL_UART_ErrorCallback+0xb0>)
 8001426:	f007 ff51 	bl	80092cc <puts>

		HAL_UART_DMAStop(&huart2);                          // STOP Uart
 800142a:	4812      	ldr	r0, [pc, #72]	@ (8001474 <HAL_UART_ErrorCallback+0xb4>)
 800142c:	f005 fb92 	bl	8006b54 <HAL_UART_DMAStop>
		MX_USART2_UART_Init();                              // INIT Uart
 8001430:	f000 fd96 	bl	8001f60 <MX_USART2_UART_Init>
		__HAL_UART_CLEAR_IDLEFLAG(&huart2);                 // Clear Idle IT-Flag
 8001434:	4b0f      	ldr	r3, [pc, #60]	@ (8001474 <HAL_UART_ErrorCallback+0xb4>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2210      	movs	r2, #16
 800143a:	621a      	str	r2, [r3, #32]
		__HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);        // Enable Idle Interrupt
 800143c:	4b0d      	ldr	r3, [pc, #52]	@ (8001474 <HAL_UART_ErrorCallback+0xb4>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	4b0c      	ldr	r3, [pc, #48]	@ (8001474 <HAL_UART_ErrorCallback+0xb4>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f042 0210 	orr.w	r2, r2, #16
 800144a:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart2, hlidar.dmaBuffer, YLIDARX2_DMA_BUFFER_SIZE);
 800144c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001450:	4909      	ldr	r1, [pc, #36]	@ (8001478 <HAL_UART_ErrorCallback+0xb8>)
 8001452:	4808      	ldr	r0, [pc, #32]	@ (8001474 <HAL_UART_ErrorCallback+0xb4>)
 8001454:	f005 fb32 	bl	8006abc <HAL_UART_Receive_DMA>
	}
}
 8001458:	bf00      	nop
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40004400 	.word	0x40004400
 8001464:	0800cb70 	.word	0x0800cb70
 8001468:	0800cb80 	.word	0x0800cb80
 800146c:	0800cb90 	.word	0x0800cb90
 8001470:	0800cba0 	.word	0x0800cba0
 8001474:	20002f30 	.word	0x20002f30
 8001478:	200011a4 	.word	0x200011a4

0800147c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001480:	f001 f8be 	bl	8002600 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001484:	f000 f82a 	bl	80014dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001488:	f7ff feca 	bl	8001220 <MX_GPIO_Init>
  MX_DMA_Init();
 800148c:	f7ff fe9e 	bl	80011cc <MX_DMA_Init>
  MX_SPI1_Init();
 8001490:	f000 f884 	bl	800159c <MX_SPI1_Init>
  MX_TIM1_Init();
 8001494:	f000 fab8 	bl	8001a08 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001498:	f000 fb7e 	bl	8001b98 <MX_TIM3_Init>
  MX_TIM4_Init();
 800149c:	f000 fbd2 	bl	8001c44 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80014a0:	f000 fd5e 	bl	8001f60 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80014a4:	f000 fd10 	bl	8001ec8 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80014a8:	f7ff fdc4 	bl	8001034 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	printf("\r\n*** Waking up V-NOM ***\r\n");
 80014ac:	4806      	ldr	r0, [pc, #24]	@ (80014c8 <main+0x4c>)
 80014ae:	f007 ff0d 	bl	80092cc <puts>
	printf("%s", jumbo_logo_msg);
 80014b2:	4906      	ldr	r1, [pc, #24]	@ (80014cc <main+0x50>)
 80014b4:	4806      	ldr	r0, [pc, #24]	@ (80014d0 <main+0x54>)
 80014b6:	f007 fea1 	bl	80091fc <iprintf>
	/* Motors test & initialization *
	test_Motors();
	 */

	/* YLIDAR X2 Initialization with DMA */
	YLIDARX2_InitDMA(&hlidar, &huart2);
 80014ba:	4906      	ldr	r1, [pc, #24]	@ (80014d4 <main+0x58>)
 80014bc:	4806      	ldr	r0, [pc, #24]	@ (80014d8 <main+0x5c>)
 80014be:	f000 fec5 	bl	800224c <YLIDARX2_InitDMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80014c2:	bf00      	nop
 80014c4:	e7fd      	b.n	80014c2 <main+0x46>
 80014c6:	bf00      	nop
 80014c8:	0800cbb0 	.word	0x0800cbb0
 80014cc:	20000000 	.word	0x20000000
 80014d0:	0800cbcc 	.word	0x0800cbcc
 80014d4:	20002f30 	.word	0x20002f30
 80014d8:	200011a0 	.word	0x200011a0

080014dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b094      	sub	sp, #80	@ 0x50
 80014e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014e2:	f107 0318 	add.w	r3, r7, #24
 80014e6:	2238      	movs	r2, #56	@ 0x38
 80014e8:	2100      	movs	r1, #0
 80014ea:	4618      	mov	r0, r3
 80014ec:	f007 ffee 	bl	80094cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014f0:	1d3b      	adds	r3, r7, #4
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	609a      	str	r2, [r3, #8]
 80014fa:	60da      	str	r2, [r3, #12]
 80014fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80014fe:	2000      	movs	r0, #0
 8001500:	f002 fe80 	bl	8004204 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001504:	2302      	movs	r3, #2
 8001506:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001508:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800150c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800150e:	2340      	movs	r3, #64	@ 0x40
 8001510:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001512:	2302      	movs	r3, #2
 8001514:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001516:	2302      	movs	r3, #2
 8001518:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800151a:	2304      	movs	r3, #4
 800151c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800151e:	2355      	movs	r3, #85	@ 0x55
 8001520:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001522:	2302      	movs	r3, #2
 8001524:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001526:	2302      	movs	r3, #2
 8001528:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800152a:	2302      	movs	r3, #2
 800152c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800152e:	f107 0318 	add.w	r3, r7, #24
 8001532:	4618      	mov	r0, r3
 8001534:	f002 ff1a 	bl	800436c <HAL_RCC_OscConfig>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800153e:	f000 f827 	bl	8001590 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001542:	230f      	movs	r3, #15
 8001544:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001546:	2303      	movs	r3, #3
 8001548:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800154e:	2300      	movs	r3, #0
 8001550:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001556:	1d3b      	adds	r3, r7, #4
 8001558:	2104      	movs	r1, #4
 800155a:	4618      	mov	r0, r3
 800155c:	f003 fa18 	bl	8004990 <HAL_RCC_ClockConfig>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001566:	f000 f813 	bl	8001590 <Error_Handler>
  }
}
 800156a:	bf00      	nop
 800156c:	3750      	adds	r7, #80	@ 0x50
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b082      	sub	sp, #8
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001582:	d101      	bne.n	8001588 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001584:	f001 f854 	bl	8002630 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001588:	bf00      	nop
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001594:	b672      	cpsid	i
}
 8001596:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001598:	bf00      	nop
 800159a:	e7fd      	b.n	8001598 <Error_Handler+0x8>

0800159c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80015a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001610 <MX_SPI1_Init+0x74>)
 80015a2:	4a1c      	ldr	r2, [pc, #112]	@ (8001614 <MX_SPI1_Init+0x78>)
 80015a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001610 <MX_SPI1_Init+0x74>)
 80015a8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80015ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015ae:	4b18      	ldr	r3, [pc, #96]	@ (8001610 <MX_SPI1_Init+0x74>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015b4:	4b16      	ldr	r3, [pc, #88]	@ (8001610 <MX_SPI1_Init+0x74>)
 80015b6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80015ba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015bc:	4b14      	ldr	r3, [pc, #80]	@ (8001610 <MX_SPI1_Init+0x74>)
 80015be:	2200      	movs	r2, #0
 80015c0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015c2:	4b13      	ldr	r3, [pc, #76]	@ (8001610 <MX_SPI1_Init+0x74>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015c8:	4b11      	ldr	r3, [pc, #68]	@ (8001610 <MX_SPI1_Init+0x74>)
 80015ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015ce:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80015d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001610 <MX_SPI1_Init+0x74>)
 80015d2:	2228      	movs	r2, #40	@ 0x28
 80015d4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001610 <MX_SPI1_Init+0x74>)
 80015d8:	2200      	movs	r2, #0
 80015da:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001610 <MX_SPI1_Init+0x74>)
 80015de:	2200      	movs	r2, #0
 80015e0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001610 <MX_SPI1_Init+0x74>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80015e8:	4b09      	ldr	r3, [pc, #36]	@ (8001610 <MX_SPI1_Init+0x74>)
 80015ea:	2207      	movs	r2, #7
 80015ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015ee:	4b08      	ldr	r3, [pc, #32]	@ (8001610 <MX_SPI1_Init+0x74>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015f4:	4b06      	ldr	r3, [pc, #24]	@ (8001610 <MX_SPI1_Init+0x74>)
 80015f6:	2208      	movs	r2, #8
 80015f8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015fa:	4805      	ldr	r0, [pc, #20]	@ (8001610 <MX_SPI1_Init+0x74>)
 80015fc:	f003 fe06 	bl	800520c <HAL_SPI_Init>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001606:	f7ff ffc3 	bl	8001590 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	20002d04 	.word	0x20002d04
 8001614:	40013000 	.word	0x40013000

08001618 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b08a      	sub	sp, #40	@ 0x28
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001620:	f107 0314 	add.w	r3, r7, #20
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a17      	ldr	r2, [pc, #92]	@ (8001694 <HAL_SPI_MspInit+0x7c>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d128      	bne.n	800168c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800163a:	4b17      	ldr	r3, [pc, #92]	@ (8001698 <HAL_SPI_MspInit+0x80>)
 800163c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800163e:	4a16      	ldr	r2, [pc, #88]	@ (8001698 <HAL_SPI_MspInit+0x80>)
 8001640:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001644:	6613      	str	r3, [r2, #96]	@ 0x60
 8001646:	4b14      	ldr	r3, [pc, #80]	@ (8001698 <HAL_SPI_MspInit+0x80>)
 8001648:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800164a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800164e:	613b      	str	r3, [r7, #16]
 8001650:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001652:	4b11      	ldr	r3, [pc, #68]	@ (8001698 <HAL_SPI_MspInit+0x80>)
 8001654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001656:	4a10      	ldr	r2, [pc, #64]	@ (8001698 <HAL_SPI_MspInit+0x80>)
 8001658:	f043 0301 	orr.w	r3, r3, #1
 800165c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800165e:	4b0e      	ldr	r3, [pc, #56]	@ (8001698 <HAL_SPI_MspInit+0x80>)
 8001660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800166a:	23e0      	movs	r3, #224	@ 0xe0
 800166c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166e:	2302      	movs	r3, #2
 8001670:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001676:	2300      	movs	r3, #0
 8001678:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800167a:	2305      	movs	r3, #5
 800167c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167e:	f107 0314 	add.w	r3, r7, #20
 8001682:	4619      	mov	r1, r3
 8001684:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001688:	f002 fc22 	bl	8003ed0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800168c:	bf00      	nop
 800168e:	3728      	adds	r7, #40	@ 0x28
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40013000 	.word	0x40013000
 8001698:	40021000 	.word	0x40021000

0800169c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016a2:	4b0f      	ldr	r3, [pc, #60]	@ (80016e0 <HAL_MspInit+0x44>)
 80016a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016a6:	4a0e      	ldr	r2, [pc, #56]	@ (80016e0 <HAL_MspInit+0x44>)
 80016a8:	f043 0301 	orr.w	r3, r3, #1
 80016ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80016ae:	4b0c      	ldr	r3, [pc, #48]	@ (80016e0 <HAL_MspInit+0x44>)
 80016b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	607b      	str	r3, [r7, #4]
 80016b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ba:	4b09      	ldr	r3, [pc, #36]	@ (80016e0 <HAL_MspInit+0x44>)
 80016bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016be:	4a08      	ldr	r2, [pc, #32]	@ (80016e0 <HAL_MspInit+0x44>)
 80016c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80016c6:	4b06      	ldr	r3, [pc, #24]	@ (80016e0 <HAL_MspInit+0x44>)
 80016c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ce:	603b      	str	r3, [r7, #0]
 80016d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80016d2:	f002 fe3b 	bl	800434c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40021000 	.word	0x40021000

080016e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b08c      	sub	sp, #48	@ 0x30
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80016ec:	2300      	movs	r3, #0
 80016ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 80016f0:	2300      	movs	r3, #0
 80016f2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80016f4:	4b2d      	ldr	r3, [pc, #180]	@ (80017ac <HAL_InitTick+0xc8>)
 80016f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016f8:	4a2c      	ldr	r2, [pc, #176]	@ (80017ac <HAL_InitTick+0xc8>)
 80016fa:	f043 0301 	orr.w	r3, r3, #1
 80016fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8001700:	4b2a      	ldr	r3, [pc, #168]	@ (80017ac <HAL_InitTick+0xc8>)
 8001702:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001704:	f003 0301 	and.w	r3, r3, #1
 8001708:	60bb      	str	r3, [r7, #8]
 800170a:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800170c:	f107 020c 	add.w	r2, r7, #12
 8001710:	f107 0310 	add.w	r3, r7, #16
 8001714:	4611      	mov	r1, r2
 8001716:	4618      	mov	r0, r3
 8001718:	f003 fb10 	bl	8004d3c <HAL_RCC_GetClockConfig>
  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800171c:	f003 fae2 	bl	8004ce4 <HAL_RCC_GetPCLK1Freq>
 8001720:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001724:	4a22      	ldr	r2, [pc, #136]	@ (80017b0 <HAL_InitTick+0xcc>)
 8001726:	fba2 2303 	umull	r2, r3, r2, r3
 800172a:	0c9b      	lsrs	r3, r3, #18
 800172c:	3b01      	subs	r3, #1
 800172e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001730:	4b20      	ldr	r3, [pc, #128]	@ (80017b4 <HAL_InitTick+0xd0>)
 8001732:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001736:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001738:	4b1e      	ldr	r3, [pc, #120]	@ (80017b4 <HAL_InitTick+0xd0>)
 800173a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800173e:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001740:	4a1c      	ldr	r2, [pc, #112]	@ (80017b4 <HAL_InitTick+0xd0>)
 8001742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001744:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001746:	4b1b      	ldr	r3, [pc, #108]	@ (80017b4 <HAL_InitTick+0xd0>)
 8001748:	2200      	movs	r2, #0
 800174a:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800174c:	4b19      	ldr	r3, [pc, #100]	@ (80017b4 <HAL_InitTick+0xd0>)
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim2);
 8001752:	4818      	ldr	r0, [pc, #96]	@ (80017b4 <HAL_InitTick+0xd0>)
 8001754:	f003 fe05 	bl	8005362 <HAL_TIM_Base_Init>
 8001758:	4603      	mov	r3, r0
 800175a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800175e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001762:	2b00      	cmp	r3, #0
 8001764:	d11b      	bne.n	800179e <HAL_InitTick+0xba>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001766:	4813      	ldr	r0, [pc, #76]	@ (80017b4 <HAL_InitTick+0xd0>)
 8001768:	f003 fe52 	bl	8005410 <HAL_TIM_Base_Start_IT>
 800176c:	4603      	mov	r3, r0
 800176e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001772:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001776:	2b00      	cmp	r3, #0
 8001778:	d111      	bne.n	800179e <HAL_InitTick+0xba>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800177a:	201c      	movs	r0, #28
 800177c:	f002 f85c 	bl	8003838 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2b0f      	cmp	r3, #15
 8001784:	d808      	bhi.n	8001798 <HAL_InitTick+0xb4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001786:	2200      	movs	r2, #0
 8001788:	6879      	ldr	r1, [r7, #4]
 800178a:	201c      	movs	r0, #28
 800178c:	f002 f83a 	bl	8003804 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001790:	4a09      	ldr	r2, [pc, #36]	@ (80017b8 <HAL_InitTick+0xd4>)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6013      	str	r3, [r2, #0]
 8001796:	e002      	b.n	800179e <HAL_InitTick+0xba>
      }
      else
      {
        status = HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800179e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3730      	adds	r7, #48	@ 0x30
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40021000 	.word	0x40021000
 80017b0:	431bde83 	.word	0x431bde83
 80017b4:	20002d68 	.word	0x20002d68
 80017b8:	20000f48 	.word	0x20000f48

080017bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017c0:	bf00      	nop
 80017c2:	e7fd      	b.n	80017c0 <NMI_Handler+0x4>

080017c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017c8:	bf00      	nop
 80017ca:	e7fd      	b.n	80017c8 <HardFault_Handler+0x4>

080017cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017d0:	bf00      	nop
 80017d2:	e7fd      	b.n	80017d0 <MemManage_Handler+0x4>

080017d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017d8:	bf00      	nop
 80017da:	e7fd      	b.n	80017d8 <BusFault_Handler+0x4>

080017dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017e0:	bf00      	nop
 80017e2:	e7fd      	b.n	80017e0 <UsageFault_Handler+0x4>

080017e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017e8:	bf00      	nop
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017f2:	b480      	push	{r7}
 80017f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001804:	bf00      	nop
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800180e:	b480      	push	{r7}
 8001810:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001820:	4802      	ldr	r0, [pc, #8]	@ (800182c <DMA1_Channel1_IRQHandler+0x10>)
 8001822:	f002 f9fa 	bl	8003c1a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	20002fc4 	.word	0x20002fc4

08001830 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001834:	4802      	ldr	r0, [pc, #8]	@ (8001840 <TIM2_IRQHandler+0x10>)
 8001836:	f003 ff5c 	bl	80056f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	20002d68 	.word	0x20002d68

08001844 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001848:	4802      	ldr	r0, [pc, #8]	@ (8001854 <USART2_IRQHandler+0x10>)
 800184a:	f005 fa19 	bl	8006c80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	20002f30 	.word	0x20002f30

08001858 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  return 1;
 800185c:	2301      	movs	r3, #1
}
 800185e:	4618      	mov	r0, r3
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <_kill>:

int _kill(int pid, int sig)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001872:	f007 fe7d 	bl	8009570 <__errno>
 8001876:	4603      	mov	r3, r0
 8001878:	2216      	movs	r2, #22
 800187a:	601a      	str	r2, [r3, #0]
  return -1;
 800187c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001880:	4618      	mov	r0, r3
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <_exit>:

void _exit (int status)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001890:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f7ff ffe7 	bl	8001868 <_kill>
  while (1) {}    /* Make sure we hang here */
 800189a:	bf00      	nop
 800189c:	e7fd      	b.n	800189a <_exit+0x12>

0800189e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b086      	sub	sp, #24
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	60f8      	str	r0, [r7, #12]
 80018a6:	60b9      	str	r1, [r7, #8]
 80018a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018aa:	2300      	movs	r3, #0
 80018ac:	617b      	str	r3, [r7, #20]
 80018ae:	e00a      	b.n	80018c6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018b0:	f3af 8000 	nop.w
 80018b4:	4601      	mov	r1, r0
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	1c5a      	adds	r2, r3, #1
 80018ba:	60ba      	str	r2, [r7, #8]
 80018bc:	b2ca      	uxtb	r2, r1
 80018be:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	3301      	adds	r3, #1
 80018c4:	617b      	str	r3, [r7, #20]
 80018c6:	697a      	ldr	r2, [r7, #20]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	dbf0      	blt.n	80018b0 <_read+0x12>
  }

  return len;
 80018ce:	687b      	ldr	r3, [r7, #4]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3718      	adds	r7, #24
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e4:	2300      	movs	r3, #0
 80018e6:	617b      	str	r3, [r7, #20]
 80018e8:	e009      	b.n	80018fe <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	1c5a      	adds	r2, r3, #1
 80018ee:	60ba      	str	r2, [r7, #8]
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff fd2a 	bl	800134c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	3301      	adds	r3, #1
 80018fc:	617b      	str	r3, [r7, #20]
 80018fe:	697a      	ldr	r2, [r7, #20]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	429a      	cmp	r2, r3
 8001904:	dbf1      	blt.n	80018ea <_write+0x12>
  }
  return len;
 8001906:	687b      	ldr	r3, [r7, #4]
}
 8001908:	4618      	mov	r0, r3
 800190a:	3718      	adds	r7, #24
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <_close>:

int _close(int file)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001918:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800191c:	4618      	mov	r0, r3
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001938:	605a      	str	r2, [r3, #4]
  return 0;
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <_isatty>:

int _isatty(int file)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001950:	2301      	movs	r3, #1
}
 8001952:	4618      	mov	r0, r3
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800195e:	b480      	push	{r7}
 8001960:	b085      	sub	sp, #20
 8001962:	af00      	add	r7, sp, #0
 8001964:	60f8      	str	r0, [r7, #12]
 8001966:	60b9      	str	r1, [r7, #8]
 8001968:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800196a:	2300      	movs	r3, #0
}
 800196c:	4618      	mov	r0, r3
 800196e:	3714      	adds	r7, #20
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001980:	4a14      	ldr	r2, [pc, #80]	@ (80019d4 <_sbrk+0x5c>)
 8001982:	4b15      	ldr	r3, [pc, #84]	@ (80019d8 <_sbrk+0x60>)
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800198c:	4b13      	ldr	r3, [pc, #76]	@ (80019dc <_sbrk+0x64>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d102      	bne.n	800199a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001994:	4b11      	ldr	r3, [pc, #68]	@ (80019dc <_sbrk+0x64>)
 8001996:	4a12      	ldr	r2, [pc, #72]	@ (80019e0 <_sbrk+0x68>)
 8001998:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800199a:	4b10      	ldr	r3, [pc, #64]	@ (80019dc <_sbrk+0x64>)
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4413      	add	r3, r2
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d207      	bcs.n	80019b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019a8:	f007 fde2 	bl	8009570 <__errno>
 80019ac:	4603      	mov	r3, r0
 80019ae:	220c      	movs	r2, #12
 80019b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019b6:	e009      	b.n	80019cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019b8:	4b08      	ldr	r3, [pc, #32]	@ (80019dc <_sbrk+0x64>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019be:	4b07      	ldr	r3, [pc, #28]	@ (80019dc <_sbrk+0x64>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4413      	add	r3, r2
 80019c6:	4a05      	ldr	r2, [pc, #20]	@ (80019dc <_sbrk+0x64>)
 80019c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019ca:	68fb      	ldr	r3, [r7, #12]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3718      	adds	r7, #24
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20008000 	.word	0x20008000
 80019d8:	00000400 	.word	0x00000400
 80019dc:	20002db4 	.word	0x20002db4
 80019e0:	20003178 	.word	0x20003178

080019e4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80019e8:	4b06      	ldr	r3, [pc, #24]	@ (8001a04 <SystemInit+0x20>)
 80019ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019ee:	4a05      	ldr	r2, [pc, #20]	@ (8001a04 <SystemInit+0x20>)
 80019f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b09c      	sub	sp, #112	@ 0x70
 8001a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a0e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	605a      	str	r2, [r3, #4]
 8001a18:	609a      	str	r2, [r3, #8]
 8001a1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a1c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a28:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	60da      	str	r2, [r3, #12]
 8001a36:	611a      	str	r2, [r3, #16]
 8001a38:	615a      	str	r2, [r3, #20]
 8001a3a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a3c:	1d3b      	adds	r3, r7, #4
 8001a3e:	2234      	movs	r2, #52	@ 0x34
 8001a40:	2100      	movs	r1, #0
 8001a42:	4618      	mov	r0, r3
 8001a44:	f007 fd42 	bl	80094cc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a48:	4b51      	ldr	r3, [pc, #324]	@ (8001b90 <MX_TIM1_Init+0x188>)
 8001a4a:	4a52      	ldr	r2, [pc, #328]	@ (8001b94 <MX_TIM1_Init+0x18c>)
 8001a4c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a4e:	4b50      	ldr	r3, [pc, #320]	@ (8001b90 <MX_TIM1_Init+0x188>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a54:	4b4e      	ldr	r3, [pc, #312]	@ (8001b90 <MX_TIM1_Init+0x188>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001a5a:	4b4d      	ldr	r3, [pc, #308]	@ (8001b90 <MX_TIM1_Init+0x188>)
 8001a5c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a60:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a62:	4b4b      	ldr	r3, [pc, #300]	@ (8001b90 <MX_TIM1_Init+0x188>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a68:	4b49      	ldr	r3, [pc, #292]	@ (8001b90 <MX_TIM1_Init+0x188>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a6e:	4b48      	ldr	r3, [pc, #288]	@ (8001b90 <MX_TIM1_Init+0x188>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a74:	4846      	ldr	r0, [pc, #280]	@ (8001b90 <MX_TIM1_Init+0x188>)
 8001a76:	f003 fc74 	bl	8005362 <HAL_TIM_Base_Init>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001a80:	f7ff fd86 	bl	8001590 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a88:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a8a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001a8e:	4619      	mov	r1, r3
 8001a90:	483f      	ldr	r0, [pc, #252]	@ (8001b90 <MX_TIM1_Init+0x188>)
 8001a92:	f004 f891 	bl	8005bb8 <HAL_TIM_ConfigClockSource>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001a9c:	f7ff fd78 	bl	8001590 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001aa0:	483b      	ldr	r0, [pc, #236]	@ (8001b90 <MX_TIM1_Init+0x188>)
 8001aa2:	f003 fd1f 	bl	80054e4 <HAL_TIM_PWM_Init>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001aac:	f7ff fd70 	bl	8001590 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001abc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4833      	ldr	r0, [pc, #204]	@ (8001b90 <MX_TIM1_Init+0x188>)
 8001ac4:	f004 fdc8 	bl	8006658 <HAL_TIMEx_MasterConfigSynchronization>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001ace:	f7ff fd5f 	bl	8001590 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ad2:	2360      	movs	r3, #96	@ 0x60
 8001ad4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ada:	2300      	movs	r3, #0
 8001adc:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001aea:	2300      	movs	r3, #0
 8001aec:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001aee:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001af2:	2200      	movs	r2, #0
 8001af4:	4619      	mov	r1, r3
 8001af6:	4826      	ldr	r0, [pc, #152]	@ (8001b90 <MX_TIM1_Init+0x188>)
 8001af8:	f003 ff4a 	bl	8005990 <HAL_TIM_PWM_ConfigChannel>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001b02:	f7ff fd45 	bl	8001590 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b06:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001b0a:	2204      	movs	r2, #4
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4820      	ldr	r0, [pc, #128]	@ (8001b90 <MX_TIM1_Init+0x188>)
 8001b10:	f003 ff3e 	bl	8005990 <HAL_TIM_PWM_ConfigChannel>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001b1a:	f7ff fd39 	bl	8001590 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b1e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001b22:	2208      	movs	r2, #8
 8001b24:	4619      	mov	r1, r3
 8001b26:	481a      	ldr	r0, [pc, #104]	@ (8001b90 <MX_TIM1_Init+0x188>)
 8001b28:	f003 ff32 	bl	8005990 <HAL_TIM_PWM_ConfigChannel>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8001b32:	f7ff fd2d 	bl	8001590 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b36:	2300      	movs	r3, #0
 8001b38:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b42:	2300      	movs	r3, #0
 8001b44:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b46:	2300      	movs	r3, #0
 8001b48:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b4a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b4e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001b50:	2300      	movs	r3, #0
 8001b52:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001b54:	2300      	movs	r3, #0
 8001b56:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001b5c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b60:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001b62:	2300      	movs	r3, #0
 8001b64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001b66:	2300      	movs	r3, #0
 8001b68:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b6e:	1d3b      	adds	r3, r7, #4
 8001b70:	4619      	mov	r1, r3
 8001b72:	4807      	ldr	r0, [pc, #28]	@ (8001b90 <MX_TIM1_Init+0x188>)
 8001b74:	f004 fdf2 	bl	800675c <HAL_TIMEx_ConfigBreakDeadTime>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8001b7e:	f7ff fd07 	bl	8001590 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001b82:	4803      	ldr	r0, [pc, #12]	@ (8001b90 <MX_TIM1_Init+0x188>)
 8001b84:	f000 f94a 	bl	8001e1c <HAL_TIM_MspPostInit>

}
 8001b88:	bf00      	nop
 8001b8a:	3770      	adds	r7, #112	@ 0x70
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	20002db8 	.word	0x20002db8
 8001b94:	40012c00 	.word	0x40012c00

08001b98 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b08c      	sub	sp, #48	@ 0x30
 8001b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b9e:	f107 030c 	add.w	r3, r7, #12
 8001ba2:	2224      	movs	r2, #36	@ 0x24
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f007 fc90 	bl	80094cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bac:	463b      	mov	r3, r7
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	605a      	str	r2, [r3, #4]
 8001bb4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bb6:	4b21      	ldr	r3, [pc, #132]	@ (8001c3c <MX_TIM3_Init+0xa4>)
 8001bb8:	4a21      	ldr	r2, [pc, #132]	@ (8001c40 <MX_TIM3_Init+0xa8>)
 8001bba:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001bbc:	4b1f      	ldr	r3, [pc, #124]	@ (8001c3c <MX_TIM3_Init+0xa4>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bc2:	4b1e      	ldr	r3, [pc, #120]	@ (8001c3c <MX_TIM3_Init+0xa4>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001bc8:	4b1c      	ldr	r3, [pc, #112]	@ (8001c3c <MX_TIM3_Init+0xa4>)
 8001bca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bd0:	4b1a      	ldr	r3, [pc, #104]	@ (8001c3c <MX_TIM3_Init+0xa4>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bd6:	4b19      	ldr	r3, [pc, #100]	@ (8001c3c <MX_TIM3_Init+0xa4>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001be0:	2300      	movs	r3, #0
 8001be2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001be4:	2301      	movs	r3, #1
 8001be6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001be8:	2300      	movs	r3, #0
 8001bea:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001bec:	2300      	movs	r3, #0
 8001bee:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001c00:	f107 030c 	add.w	r3, r7, #12
 8001c04:	4619      	mov	r1, r3
 8001c06:	480d      	ldr	r0, [pc, #52]	@ (8001c3c <MX_TIM3_Init+0xa4>)
 8001c08:	f003 fccd 	bl	80055a6 <HAL_TIM_Encoder_Init>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001c12:	f7ff fcbd 	bl	8001590 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c16:	2300      	movs	r3, #0
 8001c18:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c1e:	463b      	mov	r3, r7
 8001c20:	4619      	mov	r1, r3
 8001c22:	4806      	ldr	r0, [pc, #24]	@ (8001c3c <MX_TIM3_Init+0xa4>)
 8001c24:	f004 fd18 	bl	8006658 <HAL_TIMEx_MasterConfigSynchronization>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001c2e:	f7ff fcaf 	bl	8001590 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c32:	bf00      	nop
 8001c34:	3730      	adds	r7, #48	@ 0x30
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	20002e04 	.word	0x20002e04
 8001c40:	40000400 	.word	0x40000400

08001c44 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b08c      	sub	sp, #48	@ 0x30
 8001c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c4a:	f107 030c 	add.w	r3, r7, #12
 8001c4e:	2224      	movs	r2, #36	@ 0x24
 8001c50:	2100      	movs	r1, #0
 8001c52:	4618      	mov	r0, r3
 8001c54:	f007 fc3a 	bl	80094cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c58:	463b      	mov	r3, r7
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	605a      	str	r2, [r3, #4]
 8001c60:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c62:	4b21      	ldr	r3, [pc, #132]	@ (8001ce8 <MX_TIM4_Init+0xa4>)
 8001c64:	4a21      	ldr	r2, [pc, #132]	@ (8001cec <MX_TIM4_Init+0xa8>)
 8001c66:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001c68:	4b1f      	ldr	r3, [pc, #124]	@ (8001ce8 <MX_TIM4_Init+0xa4>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c6e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ce8 <MX_TIM4_Init+0xa4>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001c74:	4b1c      	ldr	r3, [pc, #112]	@ (8001ce8 <MX_TIM4_Init+0xa4>)
 8001c76:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c7a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c7c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ce8 <MX_TIM4_Init+0xa4>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c82:	4b19      	ldr	r3, [pc, #100]	@ (8001ce8 <MX_TIM4_Init+0xa4>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c90:	2301      	movs	r3, #1
 8001c92:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c94:	2300      	movs	r3, #0
 8001c96:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001cac:	f107 030c 	add.w	r3, r7, #12
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	480d      	ldr	r0, [pc, #52]	@ (8001ce8 <MX_TIM4_Init+0xa4>)
 8001cb4:	f003 fc77 	bl	80055a6 <HAL_TIM_Encoder_Init>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001cbe:	f7ff fc67 	bl	8001590 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001cca:	463b      	mov	r3, r7
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4806      	ldr	r0, [pc, #24]	@ (8001ce8 <MX_TIM4_Init+0xa4>)
 8001cd0:	f004 fcc2 	bl	8006658 <HAL_TIMEx_MasterConfigSynchronization>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001cda:	f7ff fc59 	bl	8001590 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001cde:	bf00      	nop
 8001ce0:	3730      	adds	r7, #48	@ 0x30
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20002e50 	.word	0x20002e50
 8001cec:	40000800 	.word	0x40000800

08001cf0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a0a      	ldr	r2, [pc, #40]	@ (8001d28 <HAL_TIM_Base_MspInit+0x38>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d10b      	bne.n	8001d1a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d02:	4b0a      	ldr	r3, [pc, #40]	@ (8001d2c <HAL_TIM_Base_MspInit+0x3c>)
 8001d04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d06:	4a09      	ldr	r2, [pc, #36]	@ (8001d2c <HAL_TIM_Base_MspInit+0x3c>)
 8001d08:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001d0c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d0e:	4b07      	ldr	r3, [pc, #28]	@ (8001d2c <HAL_TIM_Base_MspInit+0x3c>)
 8001d10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d12:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001d1a:	bf00      	nop
 8001d1c:	3714      	adds	r7, #20
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	40012c00 	.word	0x40012c00
 8001d2c:	40021000 	.word	0x40021000

08001d30 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08c      	sub	sp, #48	@ 0x30
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d38:	f107 031c 	add.w	r3, r7, #28
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	60da      	str	r2, [r3, #12]
 8001d46:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a2f      	ldr	r2, [pc, #188]	@ (8001e0c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d128      	bne.n	8001da4 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d52:	4b2f      	ldr	r3, [pc, #188]	@ (8001e10 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d56:	4a2e      	ldr	r2, [pc, #184]	@ (8001e10 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001d58:	f043 0302 	orr.w	r3, r3, #2
 8001d5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d5e:	4b2c      	ldr	r3, [pc, #176]	@ (8001e10 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001d60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	61bb      	str	r3, [r7, #24]
 8001d68:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d6a:	4b29      	ldr	r3, [pc, #164]	@ (8001e10 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001d6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d6e:	4a28      	ldr	r2, [pc, #160]	@ (8001e10 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001d70:	f043 0302 	orr.w	r3, r3, #2
 8001d74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d76:	4b26      	ldr	r3, [pc, #152]	@ (8001e10 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001d78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	617b      	str	r3, [r7, #20]
 8001d80:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001d82:	2330      	movs	r3, #48	@ 0x30
 8001d84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d86:	2302      	movs	r3, #2
 8001d88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d92:	2302      	movs	r3, #2
 8001d94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d96:	f107 031c 	add.w	r3, r7, #28
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	481d      	ldr	r0, [pc, #116]	@ (8001e14 <HAL_TIM_Encoder_MspInit+0xe4>)
 8001d9e:	f002 f897 	bl	8003ed0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001da2:	e02e      	b.n	8001e02 <HAL_TIM_Encoder_MspInit+0xd2>
  else if(tim_encoderHandle->Instance==TIM4)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a1b      	ldr	r2, [pc, #108]	@ (8001e18 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d129      	bne.n	8001e02 <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001dae:	4b18      	ldr	r3, [pc, #96]	@ (8001e10 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001db2:	4a17      	ldr	r2, [pc, #92]	@ (8001e10 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001db4:	f043 0304 	orr.w	r3, r3, #4
 8001db8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dba:	4b15      	ldr	r3, [pc, #84]	@ (8001e10 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dbe:	f003 0304 	and.w	r3, r3, #4
 8001dc2:	613b      	str	r3, [r7, #16]
 8001dc4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc6:	4b12      	ldr	r3, [pc, #72]	@ (8001e10 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001dc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dca:	4a11      	ldr	r2, [pc, #68]	@ (8001e10 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001dcc:	f043 0301 	orr.w	r3, r3, #1
 8001dd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dd2:	4b0f      	ldr	r3, [pc, #60]	@ (8001e10 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001dd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001dde:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001de2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de4:	2302      	movs	r3, #2
 8001de6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de8:	2300      	movs	r3, #0
 8001dea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dec:	2300      	movs	r3, #0
 8001dee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001df0:	230a      	movs	r3, #10
 8001df2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df4:	f107 031c 	add.w	r3, r7, #28
 8001df8:	4619      	mov	r1, r3
 8001dfa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dfe:	f002 f867 	bl	8003ed0 <HAL_GPIO_Init>
}
 8001e02:	bf00      	nop
 8001e04:	3730      	adds	r7, #48	@ 0x30
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40000400 	.word	0x40000400
 8001e10:	40021000 	.word	0x40021000
 8001e14:	48000400 	.word	0x48000400
 8001e18:	40000800 	.word	0x40000800

08001e1c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b08a      	sub	sp, #40	@ 0x28
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e24:	f107 0314 	add.w	r3, r7, #20
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	605a      	str	r2, [r3, #4]
 8001e2e:	609a      	str	r2, [r3, #8]
 8001e30:	60da      	str	r2, [r3, #12]
 8001e32:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a20      	ldr	r2, [pc, #128]	@ (8001ebc <HAL_TIM_MspPostInit+0xa0>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d13a      	bne.n	8001eb4 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e3e:	4b20      	ldr	r3, [pc, #128]	@ (8001ec0 <HAL_TIM_MspPostInit+0xa4>)
 8001e40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e42:	4a1f      	ldr	r2, [pc, #124]	@ (8001ec0 <HAL_TIM_MspPostInit+0xa4>)
 8001e44:	f043 0302 	orr.w	r3, r3, #2
 8001e48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e4a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ec0 <HAL_TIM_MspPostInit+0xa4>)
 8001e4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	613b      	str	r3, [r7, #16]
 8001e54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e56:	4b1a      	ldr	r3, [pc, #104]	@ (8001ec0 <HAL_TIM_MspPostInit+0xa4>)
 8001e58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e5a:	4a19      	ldr	r2, [pc, #100]	@ (8001ec0 <HAL_TIM_MspPostInit+0xa4>)
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e62:	4b17      	ldr	r3, [pc, #92]	@ (8001ec0 <HAL_TIM_MspPostInit+0xa4>)
 8001e64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
    PB14     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001e6e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001e72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e74:	2302      	movs	r3, #2
 8001e76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001e80:	2306      	movs	r3, #6
 8001e82:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e84:	f107 0314 	add.w	r3, r7, #20
 8001e88:	4619      	mov	r1, r3
 8001e8a:	480e      	ldr	r0, [pc, #56]	@ (8001ec4 <HAL_TIM_MspPostInit+0xa8>)
 8001e8c:	f002 f820 	bl	8003ed0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001e90:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001e94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e96:	2302      	movs	r3, #2
 8001e98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001ea2:	2306      	movs	r3, #6
 8001ea4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea6:	f107 0314 	add.w	r3, r7, #20
 8001eaa:	4619      	mov	r1, r3
 8001eac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001eb0:	f002 f80e 	bl	8003ed0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001eb4:	bf00      	nop
 8001eb6:	3728      	adds	r7, #40	@ 0x28
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40012c00 	.word	0x40012c00
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	48000400 	.word	0x48000400

08001ec8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ecc:	4b22      	ldr	r3, [pc, #136]	@ (8001f58 <MX_USART1_UART_Init+0x90>)
 8001ece:	4a23      	ldr	r2, [pc, #140]	@ (8001f5c <MX_USART1_UART_Init+0x94>)
 8001ed0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ed2:	4b21      	ldr	r3, [pc, #132]	@ (8001f58 <MX_USART1_UART_Init+0x90>)
 8001ed4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ed8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001eda:	4b1f      	ldr	r3, [pc, #124]	@ (8001f58 <MX_USART1_UART_Init+0x90>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ee0:	4b1d      	ldr	r3, [pc, #116]	@ (8001f58 <MX_USART1_UART_Init+0x90>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ee6:	4b1c      	ldr	r3, [pc, #112]	@ (8001f58 <MX_USART1_UART_Init+0x90>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001eec:	4b1a      	ldr	r3, [pc, #104]	@ (8001f58 <MX_USART1_UART_Init+0x90>)
 8001eee:	220c      	movs	r2, #12
 8001ef0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ef2:	4b19      	ldr	r3, [pc, #100]	@ (8001f58 <MX_USART1_UART_Init+0x90>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ef8:	4b17      	ldr	r3, [pc, #92]	@ (8001f58 <MX_USART1_UART_Init+0x90>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001efe:	4b16      	ldr	r3, [pc, #88]	@ (8001f58 <MX_USART1_UART_Init+0x90>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f04:	4b14      	ldr	r3, [pc, #80]	@ (8001f58 <MX_USART1_UART_Init+0x90>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f0a:	4b13      	ldr	r3, [pc, #76]	@ (8001f58 <MX_USART1_UART_Init+0x90>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f10:	4811      	ldr	r0, [pc, #68]	@ (8001f58 <MX_USART1_UART_Init+0x90>)
 8001f12:	f004 fcf5 	bl	8006900 <HAL_UART_Init>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001f1c:	f7ff fb38 	bl	8001590 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f20:	2100      	movs	r1, #0
 8001f22:	480d      	ldr	r0, [pc, #52]	@ (8001f58 <MX_USART1_UART_Init+0x90>)
 8001f24:	f006 f972 	bl	800820c <HAL_UARTEx_SetTxFifoThreshold>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001f2e:	f7ff fb2f 	bl	8001590 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f32:	2100      	movs	r1, #0
 8001f34:	4808      	ldr	r0, [pc, #32]	@ (8001f58 <MX_USART1_UART_Init+0x90>)
 8001f36:	f006 f9a7 	bl	8008288 <HAL_UARTEx_SetRxFifoThreshold>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001f40:	f7ff fb26 	bl	8001590 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001f44:	4804      	ldr	r0, [pc, #16]	@ (8001f58 <MX_USART1_UART_Init+0x90>)
 8001f46:	f006 f928 	bl	800819a <HAL_UARTEx_DisableFifoMode>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001f50:	f7ff fb1e 	bl	8001590 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f54:	bf00      	nop
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	20002e9c 	.word	0x20002e9c
 8001f5c:	40013800 	.word	0x40013800

08001f60 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f64:	4b22      	ldr	r3, [pc, #136]	@ (8001ff0 <MX_USART2_UART_Init+0x90>)
 8001f66:	4a23      	ldr	r2, [pc, #140]	@ (8001ff4 <MX_USART2_UART_Init+0x94>)
 8001f68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f6a:	4b21      	ldr	r3, [pc, #132]	@ (8001ff0 <MX_USART2_UART_Init+0x90>)
 8001f6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f72:	4b1f      	ldr	r3, [pc, #124]	@ (8001ff0 <MX_USART2_UART_Init+0x90>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f78:	4b1d      	ldr	r3, [pc, #116]	@ (8001ff0 <MX_USART2_UART_Init+0x90>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f7e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ff0 <MX_USART2_UART_Init+0x90>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 8001f84:	4b1a      	ldr	r3, [pc, #104]	@ (8001ff0 <MX_USART2_UART_Init+0x90>)
 8001f86:	2204      	movs	r2, #4
 8001f88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f8a:	4b19      	ldr	r3, [pc, #100]	@ (8001ff0 <MX_USART2_UART_Init+0x90>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f90:	4b17      	ldr	r3, [pc, #92]	@ (8001ff0 <MX_USART2_UART_Init+0x90>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f96:	4b16      	ldr	r3, [pc, #88]	@ (8001ff0 <MX_USART2_UART_Init+0x90>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f9c:	4b14      	ldr	r3, [pc, #80]	@ (8001ff0 <MX_USART2_UART_Init+0x90>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fa2:	4b13      	ldr	r3, [pc, #76]	@ (8001ff0 <MX_USART2_UART_Init+0x90>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fa8:	4811      	ldr	r0, [pc, #68]	@ (8001ff0 <MX_USART2_UART_Init+0x90>)
 8001faa:	f004 fca9 	bl	8006900 <HAL_UART_Init>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001fb4:	f7ff faec 	bl	8001590 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fb8:	2100      	movs	r1, #0
 8001fba:	480d      	ldr	r0, [pc, #52]	@ (8001ff0 <MX_USART2_UART_Init+0x90>)
 8001fbc:	f006 f926 	bl	800820c <HAL_UARTEx_SetTxFifoThreshold>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001fc6:	f7ff fae3 	bl	8001590 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fca:	2100      	movs	r1, #0
 8001fcc:	4808      	ldr	r0, [pc, #32]	@ (8001ff0 <MX_USART2_UART_Init+0x90>)
 8001fce:	f006 f95b 	bl	8008288 <HAL_UARTEx_SetRxFifoThreshold>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001fd8:	f7ff fada 	bl	8001590 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001fdc:	4804      	ldr	r0, [pc, #16]	@ (8001ff0 <MX_USART2_UART_Init+0x90>)
 8001fde:	f006 f8dc 	bl	800819a <HAL_UARTEx_DisableFifoMode>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001fe8:	f7ff fad2 	bl	8001590 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001fec:	bf00      	nop
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	20002f30 	.word	0x20002f30
 8001ff4:	40004400 	.word	0x40004400

08001ff8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b09e      	sub	sp, #120	@ 0x78
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002000:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	605a      	str	r2, [r3, #4]
 800200a:	609a      	str	r2, [r3, #8]
 800200c:	60da      	str	r2, [r3, #12]
 800200e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002010:	f107 0320 	add.w	r3, r7, #32
 8002014:	2244      	movs	r2, #68	@ 0x44
 8002016:	2100      	movs	r1, #0
 8002018:	4618      	mov	r0, r3
 800201a:	f007 fa57 	bl	80094cc <memset>
  if(uartHandle->Instance==USART1)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a65      	ldr	r2, [pc, #404]	@ (80021b8 <HAL_UART_MspInit+0x1c0>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d136      	bne.n	8002096 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002028:	2301      	movs	r3, #1
 800202a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800202c:	2300      	movs	r3, #0
 800202e:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002030:	f107 0320 	add.w	r3, r7, #32
 8002034:	4618      	mov	r0, r3
 8002036:	f002 fef9 	bl	8004e2c <HAL_RCCEx_PeriphCLKConfig>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002040:	f7ff faa6 	bl	8001590 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002044:	4b5d      	ldr	r3, [pc, #372]	@ (80021bc <HAL_UART_MspInit+0x1c4>)
 8002046:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002048:	4a5c      	ldr	r2, [pc, #368]	@ (80021bc <HAL_UART_MspInit+0x1c4>)
 800204a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800204e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002050:	4b5a      	ldr	r3, [pc, #360]	@ (80021bc <HAL_UART_MspInit+0x1c4>)
 8002052:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002054:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002058:	61fb      	str	r3, [r7, #28]
 800205a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800205c:	4b57      	ldr	r3, [pc, #348]	@ (80021bc <HAL_UART_MspInit+0x1c4>)
 800205e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002060:	4a56      	ldr	r2, [pc, #344]	@ (80021bc <HAL_UART_MspInit+0x1c4>)
 8002062:	f043 0302 	orr.w	r3, r3, #2
 8002066:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002068:	4b54      	ldr	r3, [pc, #336]	@ (80021bc <HAL_UART_MspInit+0x1c4>)
 800206a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	61bb      	str	r3, [r7, #24]
 8002072:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8002074:	23c0      	movs	r3, #192	@ 0xc0
 8002076:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002078:	2302      	movs	r3, #2
 800207a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207c:	2300      	movs	r3, #0
 800207e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002080:	2300      	movs	r3, #0
 8002082:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002084:	2307      	movs	r3, #7
 8002086:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002088:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800208c:	4619      	mov	r1, r3
 800208e:	484c      	ldr	r0, [pc, #304]	@ (80021c0 <HAL_UART_MspInit+0x1c8>)
 8002090:	f001 ff1e 	bl	8003ed0 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002094:	e08b      	b.n	80021ae <HAL_UART_MspInit+0x1b6>
  else if(uartHandle->Instance==USART2)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a4a      	ldr	r2, [pc, #296]	@ (80021c4 <HAL_UART_MspInit+0x1cc>)
 800209c:	4293      	cmp	r3, r2
 800209e:	f040 8086 	bne.w	80021ae <HAL_UART_MspInit+0x1b6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80020a2:	2302      	movs	r3, #2
 80020a4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80020a6:	2300      	movs	r3, #0
 80020a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020aa:	f107 0320 	add.w	r3, r7, #32
 80020ae:	4618      	mov	r0, r3
 80020b0:	f002 febc 	bl	8004e2c <HAL_RCCEx_PeriphCLKConfig>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <HAL_UART_MspInit+0xc6>
      Error_Handler();
 80020ba:	f7ff fa69 	bl	8001590 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80020be:	4b3f      	ldr	r3, [pc, #252]	@ (80021bc <HAL_UART_MspInit+0x1c4>)
 80020c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020c2:	4a3e      	ldr	r2, [pc, #248]	@ (80021bc <HAL_UART_MspInit+0x1c4>)
 80020c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80020ca:	4b3c      	ldr	r3, [pc, #240]	@ (80021bc <HAL_UART_MspInit+0x1c4>)
 80020cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020d2:	617b      	str	r3, [r7, #20]
 80020d4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020d6:	4b39      	ldr	r3, [pc, #228]	@ (80021bc <HAL_UART_MspInit+0x1c4>)
 80020d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020da:	4a38      	ldr	r2, [pc, #224]	@ (80021bc <HAL_UART_MspInit+0x1c4>)
 80020dc:	f043 0301 	orr.w	r3, r3, #1
 80020e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020e2:	4b36      	ldr	r3, [pc, #216]	@ (80021bc <HAL_UART_MspInit+0x1c4>)
 80020e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	613b      	str	r3, [r7, #16]
 80020ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ee:	4b33      	ldr	r3, [pc, #204]	@ (80021bc <HAL_UART_MspInit+0x1c4>)
 80020f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020f2:	4a32      	ldr	r2, [pc, #200]	@ (80021bc <HAL_UART_MspInit+0x1c4>)
 80020f4:	f043 0302 	orr.w	r3, r3, #2
 80020f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020fa:	4b30      	ldr	r3, [pc, #192]	@ (80021bc <HAL_UART_MspInit+0x1c4>)
 80020fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LIDAR_RX_Pin;
 8002106:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800210a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210c:	2302      	movs	r3, #2
 800210e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002110:	2300      	movs	r3, #0
 8002112:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002114:	2300      	movs	r3, #0
 8002116:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002118:	2307      	movs	r3, #7
 800211a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(LIDAR_RX_GPIO_Port, &GPIO_InitStruct);
 800211c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002120:	4619      	mov	r1, r3
 8002122:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002126:	f001 fed3 	bl	8003ed0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LIDAR_TX_Pin;
 800212a:	2308      	movs	r3, #8
 800212c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212e:	2302      	movs	r3, #2
 8002130:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002132:	2300      	movs	r3, #0
 8002134:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002136:	2300      	movs	r3, #0
 8002138:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800213a:	2307      	movs	r3, #7
 800213c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(LIDAR_TX_GPIO_Port, &GPIO_InitStruct);
 800213e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002142:	4619      	mov	r1, r3
 8002144:	481e      	ldr	r0, [pc, #120]	@ (80021c0 <HAL_UART_MspInit+0x1c8>)
 8002146:	f001 fec3 	bl	8003ed0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel1;
 800214a:	4b1f      	ldr	r3, [pc, #124]	@ (80021c8 <HAL_UART_MspInit+0x1d0>)
 800214c:	4a1f      	ldr	r2, [pc, #124]	@ (80021cc <HAL_UART_MspInit+0x1d4>)
 800214e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8002150:	4b1d      	ldr	r3, [pc, #116]	@ (80021c8 <HAL_UART_MspInit+0x1d0>)
 8002152:	221a      	movs	r2, #26
 8002154:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002156:	4b1c      	ldr	r3, [pc, #112]	@ (80021c8 <HAL_UART_MspInit+0x1d0>)
 8002158:	2200      	movs	r2, #0
 800215a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800215c:	4b1a      	ldr	r3, [pc, #104]	@ (80021c8 <HAL_UART_MspInit+0x1d0>)
 800215e:	2200      	movs	r2, #0
 8002160:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002162:	4b19      	ldr	r3, [pc, #100]	@ (80021c8 <HAL_UART_MspInit+0x1d0>)
 8002164:	2280      	movs	r2, #128	@ 0x80
 8002166:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002168:	4b17      	ldr	r3, [pc, #92]	@ (80021c8 <HAL_UART_MspInit+0x1d0>)
 800216a:	2200      	movs	r2, #0
 800216c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800216e:	4b16      	ldr	r3, [pc, #88]	@ (80021c8 <HAL_UART_MspInit+0x1d0>)
 8002170:	2200      	movs	r2, #0
 8002172:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002174:	4b14      	ldr	r3, [pc, #80]	@ (80021c8 <HAL_UART_MspInit+0x1d0>)
 8002176:	2220      	movs	r2, #32
 8002178:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800217a:	4b13      	ldr	r3, [pc, #76]	@ (80021c8 <HAL_UART_MspInit+0x1d0>)
 800217c:	2200      	movs	r2, #0
 800217e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002180:	4811      	ldr	r0, [pc, #68]	@ (80021c8 <HAL_UART_MspInit+0x1d0>)
 8002182:	f001 fb67 	bl	8003854 <HAL_DMA_Init>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <HAL_UART_MspInit+0x198>
      Error_Handler();
 800218c:	f7ff fa00 	bl	8001590 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a0d      	ldr	r2, [pc, #52]	@ (80021c8 <HAL_UART_MspInit+0x1d0>)
 8002194:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002198:	4a0b      	ldr	r2, [pc, #44]	@ (80021c8 <HAL_UART_MspInit+0x1d0>)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800219e:	2200      	movs	r2, #0
 80021a0:	2100      	movs	r1, #0
 80021a2:	2026      	movs	r0, #38	@ 0x26
 80021a4:	f001 fb2e 	bl	8003804 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80021a8:	2026      	movs	r0, #38	@ 0x26
 80021aa:	f001 fb45 	bl	8003838 <HAL_NVIC_EnableIRQ>
}
 80021ae:	bf00      	nop
 80021b0:	3778      	adds	r7, #120	@ 0x78
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40013800 	.word	0x40013800
 80021bc:	40021000 	.word	0x40021000
 80021c0:	48000400 	.word	0x48000400
 80021c4:	40004400 	.word	0x40004400
 80021c8:	20002fc4 	.word	0x20002fc4
 80021cc:	40020008 	.word	0x40020008

080021d0 <Reset_Handler>:
 80021d0:	480d      	ldr	r0, [pc, #52]	@ (8002208 <LoopForever+0x2>)
 80021d2:	4685      	mov	sp, r0
 80021d4:	f7ff fc06 	bl	80019e4 <SystemInit>
 80021d8:	480c      	ldr	r0, [pc, #48]	@ (800220c <LoopForever+0x6>)
 80021da:	490d      	ldr	r1, [pc, #52]	@ (8002210 <LoopForever+0xa>)
 80021dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002214 <LoopForever+0xe>)
 80021de:	2300      	movs	r3, #0
 80021e0:	e002      	b.n	80021e8 <LoopCopyDataInit>

080021e2 <CopyDataInit>:
 80021e2:	58d4      	ldr	r4, [r2, r3]
 80021e4:	50c4      	str	r4, [r0, r3]
 80021e6:	3304      	adds	r3, #4

080021e8 <LoopCopyDataInit>:
 80021e8:	18c4      	adds	r4, r0, r3
 80021ea:	428c      	cmp	r4, r1
 80021ec:	d3f9      	bcc.n	80021e2 <CopyDataInit>
 80021ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002218 <LoopForever+0x12>)
 80021f0:	4c0a      	ldr	r4, [pc, #40]	@ (800221c <LoopForever+0x16>)
 80021f2:	2300      	movs	r3, #0
 80021f4:	e001      	b.n	80021fa <LoopFillZerobss>

080021f6 <FillZerobss>:
 80021f6:	6013      	str	r3, [r2, #0]
 80021f8:	3204      	adds	r2, #4

080021fa <LoopFillZerobss>:
 80021fa:	42a2      	cmp	r2, r4
 80021fc:	d3fb      	bcc.n	80021f6 <FillZerobss>
 80021fe:	f007 f9bd 	bl	800957c <__libc_init_array>
 8002202:	f7ff f93b 	bl	800147c <main>

08002206 <LoopForever>:
 8002206:	e7fe      	b.n	8002206 <LoopForever>
 8002208:	20008000 	.word	0x20008000
 800220c:	20000000 	.word	0x20000000
 8002210:	20001118 	.word	0x20001118
 8002214:	0800d0c8 	.word	0x0800d0c8
 8002218:	20001118 	.word	0x20001118
 800221c:	20003174 	.word	0x20003174

08002220 <ADC1_2_IRQHandler>:
 8002220:	e7fe      	b.n	8002220 <ADC1_2_IRQHandler>

08002222 <extract_uint16>:
 * @brief Extract a 16-bit unsigned integer from the byte stream.
 *
 * @param data Pointer to the byte stream.
 * @return Extracted 16-bit unsigned integer.
 */
static uint16_t extract_uint16(const uint8_t *data) {
 8002222:	b480      	push	{r7}
 8002224:	b083      	sub	sp, #12
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
    return (data[1] << 8) | data[0];
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	3301      	adds	r3, #1
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	021b      	lsls	r3, r3, #8
 8002232:	b21a      	sxth	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	b21b      	sxth	r3, r3
 800223a:	4313      	orrs	r3, r2
 800223c:	b21b      	sxth	r3, r3
 800223e:	b29b      	uxth	r3, r3
}
 8002240:	4618      	mov	r0, r3
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <YLIDARX2_InitDMA>:

void YLIDARX2_InitDMA(h_YLIDARX2_t *lidar, UART_HandleTypeDef *huart) {
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
    lidar->uart = huart;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	601a      	str	r2, [r3, #0]
    lidar->currentIndex = 0;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f8a3 23ec 	strh.w	r2, [r3, #1004]	@ 0x3ec
    lidar->pointIndex = 0;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800226a:	2200      	movs	r2, #0
 800226c:	f8a3 2b60 	strh.w	r2, [r3, #2912]	@ 0xb60
    memset(lidar->dmaBuffer, 0, sizeof(lidar->dmaBuffer));
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	3304      	adds	r3, #4
 8002274:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002278:	2100      	movs	r1, #0
 800227a:	4618      	mov	r0, r3
 800227c:	f007 f926 	bl	80094cc <memset>

    HAL_UART_Receive_DMA(lidar->uart, lidar->dmaBuffer, YLIDARX2_DMA_BUFFER_SIZE);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6818      	ldr	r0, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	3304      	adds	r3, #4
 8002288:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800228c:	4619      	mov	r1, r3
 800228e:	f004 fc15 	bl	8006abc <HAL_UART_Receive_DMA>

    DEBUG_PRINT("YLIDARX2 DMA Initialized\r\n");
 8002292:	4803      	ldr	r0, [pc, #12]	@ (80022a0 <YLIDARX2_InitDMA+0x54>)
 8002294:	f007 f81a 	bl	80092cc <puts>
}
 8002298:	bf00      	nop
 800229a:	3708      	adds	r7, #8
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	0800cbd0 	.word	0x0800cbd0

080022a4 <YLIDARX2_ProcessDMAHalfComplete>:

void YLIDARX2_ProcessDMAHalfComplete(h_YLIDARX2_t *lidar) {
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
    YLIDARX2_ProcessBuffer(lidar, 0, YLIDARX2_DMA_BUFFER_SIZE / 2);
 80022ac:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80022b0:	2100      	movs	r1, #0
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 f814 	bl	80022e0 <YLIDARX2_ProcessBuffer>
}
 80022b8:	bf00      	nop
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <YLIDARX2_ProcessDMAComplete>:

void YLIDARX2_ProcessDMAComplete(h_YLIDARX2_t *lidar) {
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
    YLIDARX2_ProcessBuffer(lidar, YLIDARX2_DMA_BUFFER_SIZE / 2, YLIDARX2_DMA_BUFFER_SIZE);
 80022c8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80022cc:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f000 f805 	bl	80022e0 <YLIDARX2_ProcessBuffer>
}
 80022d6:	bf00      	nop
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
	...

080022e0 <YLIDARX2_ProcessBuffer>:

void YLIDARX2_ProcessBuffer(h_YLIDARX2_t *lidar, uint16_t start, uint16_t end) {
 80022e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022e4:	b090      	sub	sp, #64	@ 0x40
 80022e6:	af04      	add	r7, sp, #16
 80022e8:	6078      	str	r0, [r7, #4]
 80022ea:	460b      	mov	r3, r1
 80022ec:	807b      	strh	r3, [r7, #2]
 80022ee:	4613      	mov	r3, r2
 80022f0:	803b      	strh	r3, [r7, #0]
    for (uint16_t i = start; i < end - FRAME_LENGTH_MIN; ) {
 80022f2:	887b      	ldrh	r3, [r7, #2]
 80022f4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80022f6:	e16e      	b.n	80025d6 <YLIDARX2_ProcessBuffer+0x2f6>
        uint16_t header = extract_uint16(&lidar->dmaBuffer[i]);
 80022f8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	4413      	add	r3, r2
 80022fe:	3304      	adds	r3, #4
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff ff8e 	bl	8002222 <extract_uint16>
 8002306:	4603      	mov	r3, r0
 8002308:	84fb      	strh	r3, [r7, #38]	@ 0x26

        if (header == PACKET_HEADER) {
 800230a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800230c:	f245 52aa 	movw	r2, #21930	@ 0x55aa
 8002310:	4293      	cmp	r3, r2
 8002312:	f040 815d 	bne.w	80025d0 <YLIDARX2_ProcessBuffer+0x2f0>
            uint8_t ct = lidar->dmaBuffer[i + 2];
 8002316:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002318:	3302      	adds	r3, #2
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	4413      	add	r3, r2
 800231e:	791b      	ldrb	r3, [r3, #4]
 8002320:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            uint8_t lsn = lidar->dmaBuffer[i + 3];
 8002324:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002326:	3303      	adds	r3, #3
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	4413      	add	r3, r2
 800232c:	791b      	ldrb	r3, [r3, #4]
 800232e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            uint16_t fsa = extract_uint16(&lidar->dmaBuffer[i + 4]);
 8002332:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002334:	3304      	adds	r3, #4
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	4413      	add	r3, r2
 800233a:	3304      	adds	r3, #4
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff ff70 	bl	8002222 <extract_uint16>
 8002342:	4603      	mov	r3, r0
 8002344:	847b      	strh	r3, [r7, #34]	@ 0x22
            uint16_t lsa = extract_uint16(&lidar->dmaBuffer[i + 6]);
 8002346:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002348:	3306      	adds	r3, #6
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	4413      	add	r3, r2
 800234e:	3304      	adds	r3, #4
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff ff66 	bl	8002222 <extract_uint16>
 8002356:	4603      	mov	r3, r0
 8002358:	843b      	strh	r3, [r7, #32]
            uint16_t checksum = extract_uint16(&lidar->dmaBuffer[i + 8 + (lsn * 2)]);
 800235a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800235c:	f103 0208 	add.w	r2, r3, #8
 8002360:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	4413      	add	r3, r2
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	4413      	add	r3, r2
 800236c:	3304      	adds	r3, #4
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff ff57 	bl	8002222 <extract_uint16>
 8002374:	4603      	mov	r3, r0
 8002376:	83fb      	strh	r3, [r7, #30]

            uint16_t calculatedChecksum = 0;
 8002378:	2300      	movs	r3, #0
 800237a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
            for (uint16_t j = i; j < i + 8 + (lsn * 2); j++) {
 800237c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800237e:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8002380:	e00a      	b.n	8002398 <YLIDARX2_ProcessBuffer+0xb8>
                calculatedChecksum ^= lidar->dmaBuffer[j];
 8002382:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	4413      	add	r3, r2
 8002388:	791b      	ldrb	r3, [r3, #4]
 800238a:	461a      	mov	r2, r3
 800238c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800238e:	4053      	eors	r3, r2
 8002390:	85bb      	strh	r3, [r7, #44]	@ 0x2c
            for (uint16_t j = i; j < i + 8 + (lsn * 2); j++) {
 8002392:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002394:	3301      	adds	r3, #1
 8002396:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8002398:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800239a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800239c:	f103 0108 	add.w	r1, r3, #8
 80023a0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	440b      	add	r3, r1
 80023a8:	429a      	cmp	r2, r3
 80023aa:	dbea      	blt.n	8002382 <YLIDARX2_ProcessBuffer+0xa2>
            }

            if (calculatedChecksum == checksum) {
 80023ac:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80023ae:	8bfb      	ldrh	r3, [r7, #30]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	f040 8104 	bne.w	80025be <YLIDARX2_ProcessBuffer+0x2de>
                float startAngle = (fsa >> 1) / 64.0f;
 80023b6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80023b8:	085b      	lsrs	r3, r3, #1
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	ee07 3a90 	vmov	s15, r3
 80023c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023c4:	eddf 6a8a 	vldr	s13, [pc, #552]	@ 80025f0 <YLIDARX2_ProcessBuffer+0x310>
 80023c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023cc:	edc7 7a06 	vstr	s15, [r7, #24]
                float endAngle = (lsa >> 1) / 64.0f;
 80023d0:	8c3b      	ldrh	r3, [r7, #32]
 80023d2:	085b      	lsrs	r3, r3, #1
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	ee07 3a90 	vmov	s15, r3
 80023da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023de:	eddf 6a84 	vldr	s13, [pc, #528]	@ 80025f0 <YLIDARX2_ProcessBuffer+0x310>
 80023e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023e6:	edc7 7a05 	vstr	s15, [r7, #20]
                float angleIncrement = (endAngle - startAngle) / (lsn - 1);
 80023ea:	ed97 7a05 	vldr	s14, [r7, #20]
 80023ee:	edd7 7a06 	vldr	s15, [r7, #24]
 80023f2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80023f6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80023fa:	3b01      	subs	r3, #1
 80023fc:	ee07 3a90 	vmov	s15, r3
 8002400:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002404:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002408:	edc7 7a04 	vstr	s15, [r7, #16]

                for (uint8_t j = 0; j < lsn; j++) {
 800240c:	2300      	movs	r3, #0
 800240e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 8002412:	e0c3      	b.n	800259c <YLIDARX2_ProcessBuffer+0x2bc>
                    if (lidar->pointIndex >= YLIDARX2_MAX_POINTS) {
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800241a:	f8b3 3b60 	ldrh.w	r3, [r3, #2912]	@ 0xb60
 800241e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002422:	d305      	bcc.n	8002430 <YLIDARX2_ProcessBuffer+0x150>
                        lidar->pointIndex = 0;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800242a:	2200      	movs	r2, #0
 800242c:	f8a3 2b60 	strh.w	r2, [r3, #2912]	@ 0xb60
                    }

                    uint16_t distance = extract_uint16(&lidar->dmaBuffer[i + 8 + (j * 2)]);
 8002430:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002432:	f103 0208 	add.w	r2, r3, #8
 8002436:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	4413      	add	r3, r2
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	4413      	add	r3, r2
 8002442:	3304      	adds	r3, #4
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff feec 	bl	8002222 <extract_uint16>
 800244a:	4603      	mov	r3, r0
 800244c:	81fb      	strh	r3, [r7, #14]
                    float angle = startAngle + (j * angleIncrement) - 180;
 800244e:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8002452:	ee07 3a90 	vmov	s15, r3
 8002456:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800245a:	edd7 7a04 	vldr	s15, [r7, #16]
 800245e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002462:	edd7 7a06 	vldr	s15, [r7, #24]
 8002466:	ee77 7a27 	vadd.f32	s15, s14, s15
 800246a:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 80025f4 <YLIDARX2_ProcessBuffer+0x314>
 800246e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002472:	edc7 7a02 	vstr	s15, [r7, #8]
                    lidar->points[lidar->pointIndex].angle = angle;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800247c:	f8b3 3b60 	ldrh.w	r3, [r3, #2912]	@ 0xb60
 8002480:	4619      	mov	r1, r3
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	460b      	mov	r3, r1
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	440b      	add	r3, r1
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	4413      	add	r3, r2
 800248e:	f503 737c 	add.w	r3, r3, #1008	@ 0x3f0
 8002492:	68ba      	ldr	r2, [r7, #8]
 8002494:	601a      	str	r2, [r3, #0]
                    lidar->points[lidar->pointIndex].distance = distance / 4.0f;
 8002496:	89fb      	ldrh	r3, [r7, #14]
 8002498:	ee07 3a90 	vmov	s15, r3
 800249c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024a6:	f8b3 3b60 	ldrh.w	r3, [r3, #2912]	@ 0xb60
 80024aa:	4619      	mov	r1, r3
 80024ac:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80024b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	460b      	mov	r3, r1
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	440b      	add	r3, r1
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	4413      	add	r3, r2
 80024c0:	f503 737d 	add.w	r3, r3, #1012	@ 0x3f4
 80024c4:	edc3 7a00 	vstr	s15, [r3]
                    lidar->points[lidar->pointIndex].intensity = (distance & 0x01) ? 1 : 0;
 80024c8:	89fb      	ldrh	r3, [r7, #14]
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80024d2:	f8b2 2b60 	ldrh.w	r2, [r2, #2912]	@ 0xb60
 80024d6:	4611      	mov	r1, r2
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	b2d8      	uxtb	r0, r3
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	460b      	mov	r3, r1
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	440b      	add	r3, r1
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	4413      	add	r3, r2
 80024ea:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 80024ee:	4602      	mov	r2, r0
 80024f0:	701a      	strb	r2, [r3, #0]

                    DEBUG_PRINT("Point %d: Angle %.2f°, Distance %.2f mm, Intensity %u\r\n",
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024f8:	f8b3 3b60 	ldrh.w	r3, [r3, #2912]	@ 0xb60
 80024fc:	4698      	mov	r8, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002504:	f8b3 3b60 	ldrh.w	r3, [r3, #2912]	@ 0xb60
 8002508:	4619      	mov	r1, r3
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	460b      	mov	r3, r1
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	440b      	add	r3, r1
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	4413      	add	r3, r2
 8002516:	f503 737c 	add.w	r3, r3, #1008	@ 0x3f0
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4618      	mov	r0, r3
 800251e:	f7fe f83b 	bl	8000598 <__aeabi_f2d>
 8002522:	4604      	mov	r4, r0
 8002524:	460d      	mov	r5, r1
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800252c:	f8b3 3b60 	ldrh.w	r3, [r3, #2912]	@ 0xb60
 8002530:	4619      	mov	r1, r3
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	460b      	mov	r3, r1
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	440b      	add	r3, r1
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	4413      	add	r3, r2
 800253e:	f503 737d 	add.w	r3, r3, #1012	@ 0x3f4
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4618      	mov	r0, r3
 8002546:	f7fe f827 	bl	8000598 <__aeabi_f2d>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002550:	f8b3 3b60 	ldrh.w	r3, [r3, #2912]	@ 0xb60
 8002554:	461e      	mov	r6, r3
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	4633      	mov	r3, r6
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	4433      	add	r3, r6
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	4413      	add	r3, r2
 8002562:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	9302      	str	r3, [sp, #8]
 800256a:	e9cd 0100 	strd	r0, r1, [sp]
 800256e:	4622      	mov	r2, r4
 8002570:	462b      	mov	r3, r5
 8002572:	4641      	mov	r1, r8
 8002574:	4820      	ldr	r0, [pc, #128]	@ (80025f8 <YLIDARX2_ProcessBuffer+0x318>)
 8002576:	f006 fe41 	bl	80091fc <iprintf>
                                lidar->pointIndex,
                                lidar->points[lidar->pointIndex].angle,
                                lidar->points[lidar->pointIndex].distance,
                                lidar->points[lidar->pointIndex].intensity);

                    lidar->pointIndex++;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002580:	f8b3 3b60 	ldrh.w	r3, [r3, #2912]	@ 0xb60
 8002584:	3301      	adds	r3, #1
 8002586:	b29a      	uxth	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800258e:	f8a3 2b60 	strh.w	r2, [r3, #2912]	@ 0xb60
                for (uint8_t j = 0; j < lsn; j++) {
 8002592:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8002596:	3301      	adds	r3, #1
 8002598:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 800259c:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 80025a0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80025a4:	429a      	cmp	r2, r3
 80025a6:	f4ff af35 	bcc.w	8002414 <YLIDARX2_ProcessBuffer+0x134>
                }

                i += 10 + (lsn * 2); // Move to next packet
 80025aa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80025ae:	3305      	adds	r3, #5
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80025b8:	4413      	add	r3, r2
 80025ba:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80025bc:	e00b      	b.n	80025d6 <YLIDARX2_ProcessBuffer+0x2f6>
            } else {
                DEBUG_PRINT("Checksum failed at index %d\r\n", i);
 80025be:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80025c0:	4619      	mov	r1, r3
 80025c2:	480e      	ldr	r0, [pc, #56]	@ (80025fc <YLIDARX2_ProcessBuffer+0x31c>)
 80025c4:	f006 fe1a 	bl	80091fc <iprintf>
                i++;
 80025c8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80025ca:	3301      	adds	r3, #1
 80025cc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80025ce:	e002      	b.n	80025d6 <YLIDARX2_ProcessBuffer+0x2f6>
            }
        } else {
            i++;
 80025d0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80025d2:	3301      	adds	r3, #1
 80025d4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    for (uint16_t i = start; i < end - FRAME_LENGTH_MIN; ) {
 80025d6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80025d8:	883b      	ldrh	r3, [r7, #0]
 80025da:	3b07      	subs	r3, #7
 80025dc:	429a      	cmp	r2, r3
 80025de:	f6ff ae8b 	blt.w	80022f8 <YLIDARX2_ProcessBuffer+0x18>
        }
    }
}
 80025e2:	bf00      	nop
 80025e4:	bf00      	nop
 80025e6:	3730      	adds	r7, #48	@ 0x30
 80025e8:	46bd      	mov	sp, r7
 80025ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80025ee:	bf00      	nop
 80025f0:	42800000 	.word	0x42800000
 80025f4:	43340000 	.word	0x43340000
 80025f8:	0800cbec 	.word	0x0800cbec
 80025fc:	0800cc28 	.word	0x0800cc28

08002600 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002606:	2300      	movs	r3, #0
 8002608:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800260a:	2003      	movs	r0, #3
 800260c:	f001 f8ef 	bl	80037ee <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002610:	200f      	movs	r0, #15
 8002612:	f7ff f867 	bl	80016e4 <HAL_InitTick>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d002      	beq.n	8002622 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	71fb      	strb	r3, [r7, #7]
 8002620:	e001      	b.n	8002626 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002622:	f7ff f83b 	bl	800169c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002626:	79fb      	ldrb	r3, [r7, #7]

}
 8002628:	4618      	mov	r0, r3
 800262a:	3708      	adds	r7, #8
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002634:	4b05      	ldr	r3, [pc, #20]	@ (800264c <HAL_IncTick+0x1c>)
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	4b05      	ldr	r3, [pc, #20]	@ (8002650 <HAL_IncTick+0x20>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4413      	add	r3, r2
 800263e:	4a03      	ldr	r2, [pc, #12]	@ (800264c <HAL_IncTick+0x1c>)
 8002640:	6013      	str	r3, [r2, #0]
}
 8002642:	bf00      	nop
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	20003024 	.word	0x20003024
 8002650:	20000f4c 	.word	0x20000f4c

08002654 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  return uwTick;
 8002658:	4b03      	ldr	r3, [pc, #12]	@ (8002668 <HAL_GetTick+0x14>)
 800265a:	681b      	ldr	r3, [r3, #0]
}
 800265c:	4618      	mov	r0, r3
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	20003024 	.word	0x20003024

0800266c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	431a      	orrs	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	609a      	str	r2, [r3, #8]
}
 8002686:	bf00      	nop
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr

08002692 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002692:	b480      	push	{r7}
 8002694:	b083      	sub	sp, #12
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
 800269a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	431a      	orrs	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	609a      	str	r2, [r3, #8]
}
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b087      	sub	sp, #28
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
 80026e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	3360      	adds	r3, #96	@ 0x60
 80026e6:	461a      	mov	r2, r3
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	4413      	add	r3, r2
 80026ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	4b08      	ldr	r3, [pc, #32]	@ (8002718 <LL_ADC_SetOffset+0x44>)
 80026f6:	4013      	ands	r3, r2
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	430a      	orrs	r2, r1
 8002702:	4313      	orrs	r3, r2
 8002704:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800270c:	bf00      	nop
 800270e:	371c      	adds	r7, #28
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr
 8002718:	03fff000 	.word	0x03fff000

0800271c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	3360      	adds	r3, #96	@ 0x60
 800272a:	461a      	mov	r2, r3
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	4413      	add	r3, r2
 8002732:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800273c:	4618      	mov	r0, r3
 800273e:	3714      	adds	r7, #20
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002748:	b480      	push	{r7}
 800274a:	b087      	sub	sp, #28
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	3360      	adds	r3, #96	@ 0x60
 8002758:	461a      	mov	r2, r3
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	4413      	add	r3, r2
 8002760:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	431a      	orrs	r2, r3
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002772:	bf00      	nop
 8002774:	371c      	adds	r7, #28
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr

0800277e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800277e:	b480      	push	{r7}
 8002780:	b087      	sub	sp, #28
 8002782:	af00      	add	r7, sp, #0
 8002784:	60f8      	str	r0, [r7, #12]
 8002786:	60b9      	str	r1, [r7, #8]
 8002788:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	3360      	adds	r3, #96	@ 0x60
 800278e:	461a      	mov	r2, r3
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	4413      	add	r3, r2
 8002796:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	431a      	orrs	r2, r3
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80027a8:	bf00      	nop
 80027aa:	371c      	adds	r7, #28
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b087      	sub	sp, #28
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	3360      	adds	r3, #96	@ 0x60
 80027c4:	461a      	mov	r2, r3
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	4413      	add	r3, r2
 80027cc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	431a      	orrs	r2, r3
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80027de:	bf00      	nop
 80027e0:	371c      	adds	r7, #28
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr

080027ea <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80027ea:	b480      	push	{r7}
 80027ec:	b083      	sub	sp, #12
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
 80027f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	695b      	ldr	r3, [r3, #20]
 80027f8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	431a      	orrs	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	615a      	str	r2, [r3, #20]
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002810:	b480      	push	{r7}
 8002812:	b087      	sub	sp, #28
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	3330      	adds	r3, #48	@ 0x30
 8002820:	461a      	mov	r2, r3
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	0a1b      	lsrs	r3, r3, #8
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	f003 030c 	and.w	r3, r3, #12
 800282c:	4413      	add	r3, r2
 800282e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	f003 031f 	and.w	r3, r3, #31
 800283a:	211f      	movs	r1, #31
 800283c:	fa01 f303 	lsl.w	r3, r1, r3
 8002840:	43db      	mvns	r3, r3
 8002842:	401a      	ands	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	0e9b      	lsrs	r3, r3, #26
 8002848:	f003 011f 	and.w	r1, r3, #31
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	f003 031f 	and.w	r3, r3, #31
 8002852:	fa01 f303 	lsl.w	r3, r1, r3
 8002856:	431a      	orrs	r2, r3
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800285c:	bf00      	nop
 800285e:	371c      	adds	r7, #28
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002868:	b480      	push	{r7}
 800286a:	b087      	sub	sp, #28
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	3314      	adds	r3, #20
 8002878:	461a      	mov	r2, r3
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	0e5b      	lsrs	r3, r3, #25
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	f003 0304 	and.w	r3, r3, #4
 8002884:	4413      	add	r3, r2
 8002886:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	0d1b      	lsrs	r3, r3, #20
 8002890:	f003 031f 	and.w	r3, r3, #31
 8002894:	2107      	movs	r1, #7
 8002896:	fa01 f303 	lsl.w	r3, r1, r3
 800289a:	43db      	mvns	r3, r3
 800289c:	401a      	ands	r2, r3
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	0d1b      	lsrs	r3, r3, #20
 80028a2:	f003 031f 	and.w	r3, r3, #31
 80028a6:	6879      	ldr	r1, [r7, #4]
 80028a8:	fa01 f303 	lsl.w	r3, r1, r3
 80028ac:	431a      	orrs	r2, r3
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80028b2:	bf00      	nop
 80028b4:	371c      	adds	r7, #28
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
	...

080028c0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028d8:	43db      	mvns	r3, r3
 80028da:	401a      	ands	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f003 0318 	and.w	r3, r3, #24
 80028e2:	4908      	ldr	r1, [pc, #32]	@ (8002904 <LL_ADC_SetChannelSingleDiff+0x44>)
 80028e4:	40d9      	lsrs	r1, r3
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	400b      	ands	r3, r1
 80028ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ee:	431a      	orrs	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80028f6:	bf00      	nop
 80028f8:	3714      	adds	r7, #20
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	0007ffff 	.word	0x0007ffff

08002908 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002918:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	6093      	str	r3, [r2, #8]
}
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800293c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002940:	d101      	bne.n	8002946 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002942:	2301      	movs	r3, #1
 8002944:	e000      	b.n	8002948 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002964:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002968:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800298c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002990:	d101      	bne.n	8002996 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002992:	2301      	movs	r3, #1
 8002994:	e000      	b.n	8002998 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d101      	bne.n	80029bc <LL_ADC_IsEnabled+0x18>
 80029b8:	2301      	movs	r3, #1
 80029ba:	e000      	b.n	80029be <LL_ADC_IsEnabled+0x1a>
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr

080029ca <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b083      	sub	sp, #12
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f003 0304 	and.w	r3, r3, #4
 80029da:	2b04      	cmp	r3, #4
 80029dc:	d101      	bne.n	80029e2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80029de:	2301      	movs	r3, #1
 80029e0:	e000      	b.n	80029e4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f003 0308 	and.w	r3, r3, #8
 8002a00:	2b08      	cmp	r3, #8
 8002a02:	d101      	bne.n	8002a08 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002a04:	2301      	movs	r3, #1
 8002a06:	e000      	b.n	8002a0a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
	...

08002a18 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a18:	b590      	push	{r4, r7, lr}
 8002a1a:	b089      	sub	sp, #36	@ 0x24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a20:	2300      	movs	r3, #0
 8002a22:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002a24:	2300      	movs	r3, #0
 8002a26:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e167      	b.n	8002d02 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d109      	bne.n	8002a54 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f7fe fb6f 	bl	8001124 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7ff ff67 	bl	800292c <LL_ADC_IsDeepPowerDownEnabled>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d004      	beq.n	8002a6e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7ff ff4d 	bl	8002908 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff ff82 	bl	800297c <LL_ADC_IsInternalRegulatorEnabled>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d115      	bne.n	8002aaa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7ff ff66 	bl	8002954 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a88:	4ba0      	ldr	r3, [pc, #640]	@ (8002d0c <HAL_ADC_Init+0x2f4>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	099b      	lsrs	r3, r3, #6
 8002a8e:	4aa0      	ldr	r2, [pc, #640]	@ (8002d10 <HAL_ADC_Init+0x2f8>)
 8002a90:	fba2 2303 	umull	r2, r3, r2, r3
 8002a94:	099b      	lsrs	r3, r3, #6
 8002a96:	3301      	adds	r3, #1
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002a9c:	e002      	b.n	8002aa4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1f9      	bne.n	8002a9e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7ff ff64 	bl	800297c <LL_ADC_IsInternalRegulatorEnabled>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10d      	bne.n	8002ad6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002abe:	f043 0210 	orr.w	r2, r3, #16
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002aca:	f043 0201 	orr.w	r2, r3, #1
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7ff ff75 	bl	80029ca <LL_ADC_REG_IsConversionOngoing>
 8002ae0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ae6:	f003 0310 	and.w	r3, r3, #16
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f040 8100 	bne.w	8002cf0 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f040 80fc 	bne.w	8002cf0 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002afc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002b00:	f043 0202 	orr.w	r2, r3, #2
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7ff ff49 	bl	80029a4 <LL_ADC_IsEnabled>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d111      	bne.n	8002b3c <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b18:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002b1c:	f7ff ff42 	bl	80029a4 <LL_ADC_IsEnabled>
 8002b20:	4604      	mov	r4, r0
 8002b22:	487c      	ldr	r0, [pc, #496]	@ (8002d14 <HAL_ADC_Init+0x2fc>)
 8002b24:	f7ff ff3e 	bl	80029a4 <LL_ADC_IsEnabled>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	4323      	orrs	r3, r4
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d105      	bne.n	8002b3c <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	4619      	mov	r1, r3
 8002b36:	4878      	ldr	r0, [pc, #480]	@ (8002d18 <HAL_ADC_Init+0x300>)
 8002b38:	f7ff fd98 	bl	800266c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	7f5b      	ldrb	r3, [r3, #29]
 8002b40:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b46:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002b4c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002b52:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002b5a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d106      	bne.n	8002b78 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	045b      	lsls	r3, r3, #17
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d009      	beq.n	8002b94 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b84:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68da      	ldr	r2, [r3, #12]
 8002b9a:	4b60      	ldr	r3, [pc, #384]	@ (8002d1c <HAL_ADC_Init+0x304>)
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	6812      	ldr	r2, [r2, #0]
 8002ba2:	69b9      	ldr	r1, [r7, #24]
 8002ba4:	430b      	orrs	r3, r1
 8002ba6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff ff14 	bl	80029f0 <LL_ADC_INJ_IsConversionOngoing>
 8002bc8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d16d      	bne.n	8002cac <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d16a      	bne.n	8002cac <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002bda:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002be2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002be4:	4313      	orrs	r3, r2
 8002be6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002bf2:	f023 0302 	bic.w	r3, r3, #2
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	6812      	ldr	r2, [r2, #0]
 8002bfa:	69b9      	ldr	r1, [r7, #24]
 8002bfc:	430b      	orrs	r3, r1
 8002bfe:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d017      	beq.n	8002c38 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	691a      	ldr	r2, [r3, #16]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002c16:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002c20:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002c24:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	6911      	ldr	r1, [r2, #16]
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	6812      	ldr	r2, [r2, #0]
 8002c30:	430b      	orrs	r3, r1
 8002c32:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002c36:	e013      	b.n	8002c60 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	691a      	ldr	r2, [r3, #16]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002c46:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	6812      	ldr	r2, [r2, #0]
 8002c54:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002c58:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c5c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d118      	bne.n	8002c9c <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002c74:	f023 0304 	bic.w	r3, r3, #4
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002c80:	4311      	orrs	r1, r2
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002c86:	4311      	orrs	r1, r2
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f042 0201 	orr.w	r2, r2, #1
 8002c98:	611a      	str	r2, [r3, #16]
 8002c9a:	e007      	b.n	8002cac <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	691a      	ldr	r2, [r3, #16]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f022 0201 	bic.w	r2, r2, #1
 8002caa:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	695b      	ldr	r3, [r3, #20]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d10c      	bne.n	8002cce <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cba:	f023 010f 	bic.w	r1, r3, #15
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	1e5a      	subs	r2, r3, #1
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ccc:	e007      	b.n	8002cde <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f022 020f 	bic.w	r2, r2, #15
 8002cdc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ce2:	f023 0303 	bic.w	r3, r3, #3
 8002ce6:	f043 0201 	orr.w	r2, r3, #1
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002cee:	e007      	b.n	8002d00 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cf4:	f043 0210 	orr.w	r2, r3, #16
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d00:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3724      	adds	r7, #36	@ 0x24
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd90      	pop	{r4, r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	20000f44 	.word	0x20000f44
 8002d10:	053e2d63 	.word	0x053e2d63
 8002d14:	50000100 	.word	0x50000100
 8002d18:	50000300 	.word	0x50000300
 8002d1c:	fff04007 	.word	0xfff04007

08002d20 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b0b6      	sub	sp, #216	@ 0xd8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002d30:	2300      	movs	r3, #0
 8002d32:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d101      	bne.n	8002d42 <HAL_ADC_ConfigChannel+0x22>
 8002d3e:	2302      	movs	r3, #2
 8002d40:	e3c8      	b.n	80034d4 <HAL_ADC_ConfigChannel+0x7b4>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7ff fe3b 	bl	80029ca <LL_ADC_REG_IsConversionOngoing>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f040 83ad 	bne.w	80034b6 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6818      	ldr	r0, [r3, #0]
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	6859      	ldr	r1, [r3, #4]
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	461a      	mov	r2, r3
 8002d6a:	f7ff fd51 	bl	8002810 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7ff fe29 	bl	80029ca <LL_ADC_REG_IsConversionOngoing>
 8002d78:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7ff fe35 	bl	80029f0 <LL_ADC_INJ_IsConversionOngoing>
 8002d86:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d8a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f040 81d9 	bne.w	8003146 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	f040 81d4 	bne.w	8003146 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002da6:	d10f      	bne.n	8002dc8 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6818      	ldr	r0, [r3, #0]
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2200      	movs	r2, #0
 8002db2:	4619      	mov	r1, r3
 8002db4:	f7ff fd58 	bl	8002868 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7ff fd12 	bl	80027ea <LL_ADC_SetSamplingTimeCommonConfig>
 8002dc6:	e00e      	b.n	8002de6 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6818      	ldr	r0, [r3, #0]
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	6819      	ldr	r1, [r3, #0]
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	f7ff fd47 	bl	8002868 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2100      	movs	r1, #0
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7ff fd02 	bl	80027ea <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	695a      	ldr	r2, [r3, #20]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	08db      	lsrs	r3, r3, #3
 8002df2:	f003 0303 	and.w	r3, r3, #3
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	2b04      	cmp	r3, #4
 8002e06:	d022      	beq.n	8002e4e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6818      	ldr	r0, [r3, #0]
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	6919      	ldr	r1, [r3, #16]
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002e18:	f7ff fc5c 	bl	80026d4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6818      	ldr	r0, [r3, #0]
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	6919      	ldr	r1, [r3, #16]
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	461a      	mov	r2, r3
 8002e2a:	f7ff fca8 	bl	800277e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6818      	ldr	r0, [r3, #0]
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d102      	bne.n	8002e44 <HAL_ADC_ConfigChannel+0x124>
 8002e3e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e42:	e000      	b.n	8002e46 <HAL_ADC_ConfigChannel+0x126>
 8002e44:	2300      	movs	r3, #0
 8002e46:	461a      	mov	r2, r3
 8002e48:	f7ff fcb4 	bl	80027b4 <LL_ADC_SetOffsetSaturation>
 8002e4c:	e17b      	b.n	8003146 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2100      	movs	r1, #0
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7ff fc61 	bl	800271c <LL_ADC_GetOffsetChannel>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d10a      	bne.n	8002e7a <HAL_ADC_ConfigChannel+0x15a>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2100      	movs	r1, #0
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7ff fc56 	bl	800271c <LL_ADC_GetOffsetChannel>
 8002e70:	4603      	mov	r3, r0
 8002e72:	0e9b      	lsrs	r3, r3, #26
 8002e74:	f003 021f 	and.w	r2, r3, #31
 8002e78:	e01e      	b.n	8002eb8 <HAL_ADC_ConfigChannel+0x198>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2100      	movs	r1, #0
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7ff fc4b 	bl	800271c <LL_ADC_GetOffsetChannel>
 8002e86:	4603      	mov	r3, r0
 8002e88:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002e90:	fa93 f3a3 	rbit	r3, r3
 8002e94:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e98:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002e9c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002ea0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d101      	bne.n	8002eac <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002ea8:	2320      	movs	r3, #32
 8002eaa:	e004      	b.n	8002eb6 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002eac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002eb0:	fab3 f383 	clz	r3, r3
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d105      	bne.n	8002ed0 <HAL_ADC_ConfigChannel+0x1b0>
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	0e9b      	lsrs	r3, r3, #26
 8002eca:	f003 031f 	and.w	r3, r3, #31
 8002ece:	e018      	b.n	8002f02 <HAL_ADC_ConfigChannel+0x1e2>
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002edc:	fa93 f3a3 	rbit	r3, r3
 8002ee0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002ee4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ee8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002eec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d101      	bne.n	8002ef8 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002ef4:	2320      	movs	r3, #32
 8002ef6:	e004      	b.n	8002f02 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002ef8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002efc:	fab3 f383 	clz	r3, r3
 8002f00:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d106      	bne.n	8002f14 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	2100      	movs	r1, #0
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7ff fc1a 	bl	8002748 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2101      	movs	r1, #1
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7ff fbfe 	bl	800271c <LL_ADC_GetOffsetChannel>
 8002f20:	4603      	mov	r3, r0
 8002f22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10a      	bne.n	8002f40 <HAL_ADC_ConfigChannel+0x220>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2101      	movs	r1, #1
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7ff fbf3 	bl	800271c <LL_ADC_GetOffsetChannel>
 8002f36:	4603      	mov	r3, r0
 8002f38:	0e9b      	lsrs	r3, r3, #26
 8002f3a:	f003 021f 	and.w	r2, r3, #31
 8002f3e:	e01e      	b.n	8002f7e <HAL_ADC_ConfigChannel+0x25e>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2101      	movs	r1, #1
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7ff fbe8 	bl	800271c <LL_ADC_GetOffsetChannel>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002f56:	fa93 f3a3 	rbit	r3, r3
 8002f5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002f5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002f62:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002f66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002f6e:	2320      	movs	r3, #32
 8002f70:	e004      	b.n	8002f7c <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002f72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002f76:	fab3 f383 	clz	r3, r3
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d105      	bne.n	8002f96 <HAL_ADC_ConfigChannel+0x276>
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	0e9b      	lsrs	r3, r3, #26
 8002f90:	f003 031f 	and.w	r3, r3, #31
 8002f94:	e018      	b.n	8002fc8 <HAL_ADC_ConfigChannel+0x2a8>
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002fa2:	fa93 f3a3 	rbit	r3, r3
 8002fa6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002faa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002fae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002fb2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002fba:	2320      	movs	r3, #32
 8002fbc:	e004      	b.n	8002fc8 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002fbe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002fc2:	fab3 f383 	clz	r3, r3
 8002fc6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d106      	bne.n	8002fda <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	2101      	movs	r1, #1
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7ff fbb7 	bl	8002748 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2102      	movs	r1, #2
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7ff fb9b 	bl	800271c <LL_ADC_GetOffsetChannel>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d10a      	bne.n	8003006 <HAL_ADC_ConfigChannel+0x2e6>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2102      	movs	r1, #2
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7ff fb90 	bl	800271c <LL_ADC_GetOffsetChannel>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	0e9b      	lsrs	r3, r3, #26
 8003000:	f003 021f 	and.w	r2, r3, #31
 8003004:	e01e      	b.n	8003044 <HAL_ADC_ConfigChannel+0x324>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2102      	movs	r1, #2
 800300c:	4618      	mov	r0, r3
 800300e:	f7ff fb85 	bl	800271c <LL_ADC_GetOffsetChannel>
 8003012:	4603      	mov	r3, r0
 8003014:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003018:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800301c:	fa93 f3a3 	rbit	r3, r3
 8003020:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003024:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003028:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800302c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003030:	2b00      	cmp	r3, #0
 8003032:	d101      	bne.n	8003038 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8003034:	2320      	movs	r3, #32
 8003036:	e004      	b.n	8003042 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8003038:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800303c:	fab3 f383 	clz	r3, r3
 8003040:	b2db      	uxtb	r3, r3
 8003042:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800304c:	2b00      	cmp	r3, #0
 800304e:	d105      	bne.n	800305c <HAL_ADC_ConfigChannel+0x33c>
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	0e9b      	lsrs	r3, r3, #26
 8003056:	f003 031f 	and.w	r3, r3, #31
 800305a:	e016      	b.n	800308a <HAL_ADC_ConfigChannel+0x36a>
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003064:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003068:	fa93 f3a3 	rbit	r3, r3
 800306c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800306e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003070:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003074:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003078:	2b00      	cmp	r3, #0
 800307a:	d101      	bne.n	8003080 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 800307c:	2320      	movs	r3, #32
 800307e:	e004      	b.n	800308a <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8003080:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003084:	fab3 f383 	clz	r3, r3
 8003088:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800308a:	429a      	cmp	r2, r3
 800308c:	d106      	bne.n	800309c <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2200      	movs	r2, #0
 8003094:	2102      	movs	r1, #2
 8003096:	4618      	mov	r0, r3
 8003098:	f7ff fb56 	bl	8002748 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2103      	movs	r1, #3
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7ff fb3a 	bl	800271c <LL_ADC_GetOffsetChannel>
 80030a8:	4603      	mov	r3, r0
 80030aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d10a      	bne.n	80030c8 <HAL_ADC_ConfigChannel+0x3a8>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2103      	movs	r1, #3
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7ff fb2f 	bl	800271c <LL_ADC_GetOffsetChannel>
 80030be:	4603      	mov	r3, r0
 80030c0:	0e9b      	lsrs	r3, r3, #26
 80030c2:	f003 021f 	and.w	r2, r3, #31
 80030c6:	e017      	b.n	80030f8 <HAL_ADC_ConfigChannel+0x3d8>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2103      	movs	r1, #3
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7ff fb24 	bl	800271c <LL_ADC_GetOffsetChannel>
 80030d4:	4603      	mov	r3, r0
 80030d6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030da:	fa93 f3a3 	rbit	r3, r3
 80030de:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80030e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80030e2:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80030e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80030ea:	2320      	movs	r3, #32
 80030ec:	e003      	b.n	80030f6 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80030ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80030f0:	fab3 f383 	clz	r3, r3
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003100:	2b00      	cmp	r3, #0
 8003102:	d105      	bne.n	8003110 <HAL_ADC_ConfigChannel+0x3f0>
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	0e9b      	lsrs	r3, r3, #26
 800310a:	f003 031f 	and.w	r3, r3, #31
 800310e:	e011      	b.n	8003134 <HAL_ADC_ConfigChannel+0x414>
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003116:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003118:	fa93 f3a3 	rbit	r3, r3
 800311c:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800311e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003120:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003122:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003124:	2b00      	cmp	r3, #0
 8003126:	d101      	bne.n	800312c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8003128:	2320      	movs	r3, #32
 800312a:	e003      	b.n	8003134 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 800312c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800312e:	fab3 f383 	clz	r3, r3
 8003132:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003134:	429a      	cmp	r2, r3
 8003136:	d106      	bne.n	8003146 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2200      	movs	r2, #0
 800313e:	2103      	movs	r1, #3
 8003140:	4618      	mov	r0, r3
 8003142:	f7ff fb01 	bl	8002748 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4618      	mov	r0, r3
 800314c:	f7ff fc2a 	bl	80029a4 <LL_ADC_IsEnabled>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	f040 8140 	bne.w	80033d8 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6818      	ldr	r0, [r3, #0]
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	6819      	ldr	r1, [r3, #0]
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	461a      	mov	r2, r3
 8003166:	f7ff fbab 	bl	80028c0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	4a8f      	ldr	r2, [pc, #572]	@ (80033ac <HAL_ADC_ConfigChannel+0x68c>)
 8003170:	4293      	cmp	r3, r2
 8003172:	f040 8131 	bne.w	80033d8 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003182:	2b00      	cmp	r3, #0
 8003184:	d10b      	bne.n	800319e <HAL_ADC_ConfigChannel+0x47e>
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	0e9b      	lsrs	r3, r3, #26
 800318c:	3301      	adds	r3, #1
 800318e:	f003 031f 	and.w	r3, r3, #31
 8003192:	2b09      	cmp	r3, #9
 8003194:	bf94      	ite	ls
 8003196:	2301      	movls	r3, #1
 8003198:	2300      	movhi	r3, #0
 800319a:	b2db      	uxtb	r3, r3
 800319c:	e019      	b.n	80031d2 <HAL_ADC_ConfigChannel+0x4b2>
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031a6:	fa93 f3a3 	rbit	r3, r3
 80031aa:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80031ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80031ae:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80031b0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80031b6:	2320      	movs	r3, #32
 80031b8:	e003      	b.n	80031c2 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80031ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80031bc:	fab3 f383 	clz	r3, r3
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	3301      	adds	r3, #1
 80031c4:	f003 031f 	and.w	r3, r3, #31
 80031c8:	2b09      	cmp	r3, #9
 80031ca:	bf94      	ite	ls
 80031cc:	2301      	movls	r3, #1
 80031ce:	2300      	movhi	r3, #0
 80031d0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d079      	beq.n	80032ca <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d107      	bne.n	80031f2 <HAL_ADC_ConfigChannel+0x4d2>
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	0e9b      	lsrs	r3, r3, #26
 80031e8:	3301      	adds	r3, #1
 80031ea:	069b      	lsls	r3, r3, #26
 80031ec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80031f0:	e015      	b.n	800321e <HAL_ADC_ConfigChannel+0x4fe>
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031fa:	fa93 f3a3 	rbit	r3, r3
 80031fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003200:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003202:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003204:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800320a:	2320      	movs	r3, #32
 800320c:	e003      	b.n	8003216 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800320e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003210:	fab3 f383 	clz	r3, r3
 8003214:	b2db      	uxtb	r3, r3
 8003216:	3301      	adds	r3, #1
 8003218:	069b      	lsls	r3, r3, #26
 800321a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003226:	2b00      	cmp	r3, #0
 8003228:	d109      	bne.n	800323e <HAL_ADC_ConfigChannel+0x51e>
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	0e9b      	lsrs	r3, r3, #26
 8003230:	3301      	adds	r3, #1
 8003232:	f003 031f 	and.w	r3, r3, #31
 8003236:	2101      	movs	r1, #1
 8003238:	fa01 f303 	lsl.w	r3, r1, r3
 800323c:	e017      	b.n	800326e <HAL_ADC_ConfigChannel+0x54e>
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003244:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003246:	fa93 f3a3 	rbit	r3, r3
 800324a:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800324c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800324e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003250:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8003256:	2320      	movs	r3, #32
 8003258:	e003      	b.n	8003262 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800325a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800325c:	fab3 f383 	clz	r3, r3
 8003260:	b2db      	uxtb	r3, r3
 8003262:	3301      	adds	r3, #1
 8003264:	f003 031f 	and.w	r3, r3, #31
 8003268:	2101      	movs	r1, #1
 800326a:	fa01 f303 	lsl.w	r3, r1, r3
 800326e:	ea42 0103 	orr.w	r1, r2, r3
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800327a:	2b00      	cmp	r3, #0
 800327c:	d10a      	bne.n	8003294 <HAL_ADC_ConfigChannel+0x574>
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	0e9b      	lsrs	r3, r3, #26
 8003284:	3301      	adds	r3, #1
 8003286:	f003 021f 	and.w	r2, r3, #31
 800328a:	4613      	mov	r3, r2
 800328c:	005b      	lsls	r3, r3, #1
 800328e:	4413      	add	r3, r2
 8003290:	051b      	lsls	r3, r3, #20
 8003292:	e018      	b.n	80032c6 <HAL_ADC_ConfigChannel+0x5a6>
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800329a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800329c:	fa93 f3a3 	rbit	r3, r3
 80032a0:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80032a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80032a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d101      	bne.n	80032b0 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80032ac:	2320      	movs	r3, #32
 80032ae:	e003      	b.n	80032b8 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80032b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032b2:	fab3 f383 	clz	r3, r3
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	3301      	adds	r3, #1
 80032ba:	f003 021f 	and.w	r2, r3, #31
 80032be:	4613      	mov	r3, r2
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	4413      	add	r3, r2
 80032c4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032c6:	430b      	orrs	r3, r1
 80032c8:	e081      	b.n	80033ce <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d107      	bne.n	80032e6 <HAL_ADC_ConfigChannel+0x5c6>
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	0e9b      	lsrs	r3, r3, #26
 80032dc:	3301      	adds	r3, #1
 80032de:	069b      	lsls	r3, r3, #26
 80032e0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80032e4:	e015      	b.n	8003312 <HAL_ADC_ConfigChannel+0x5f2>
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032ee:	fa93 f3a3 	rbit	r3, r3
 80032f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80032f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032f6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80032f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80032fe:	2320      	movs	r3, #32
 8003300:	e003      	b.n	800330a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8003302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003304:	fab3 f383 	clz	r3, r3
 8003308:	b2db      	uxtb	r3, r3
 800330a:	3301      	adds	r3, #1
 800330c:	069b      	lsls	r3, r3, #26
 800330e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800331a:	2b00      	cmp	r3, #0
 800331c:	d109      	bne.n	8003332 <HAL_ADC_ConfigChannel+0x612>
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	0e9b      	lsrs	r3, r3, #26
 8003324:	3301      	adds	r3, #1
 8003326:	f003 031f 	and.w	r3, r3, #31
 800332a:	2101      	movs	r1, #1
 800332c:	fa01 f303 	lsl.w	r3, r1, r3
 8003330:	e017      	b.n	8003362 <HAL_ADC_ConfigChannel+0x642>
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003338:	6a3b      	ldr	r3, [r7, #32]
 800333a:	fa93 f3a3 	rbit	r3, r3
 800333e:	61fb      	str	r3, [r7, #28]
  return result;
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800334a:	2320      	movs	r3, #32
 800334c:	e003      	b.n	8003356 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800334e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003350:	fab3 f383 	clz	r3, r3
 8003354:	b2db      	uxtb	r3, r3
 8003356:	3301      	adds	r3, #1
 8003358:	f003 031f 	and.w	r3, r3, #31
 800335c:	2101      	movs	r1, #1
 800335e:	fa01 f303 	lsl.w	r3, r1, r3
 8003362:	ea42 0103 	orr.w	r1, r2, r3
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10d      	bne.n	800338e <HAL_ADC_ConfigChannel+0x66e>
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	0e9b      	lsrs	r3, r3, #26
 8003378:	3301      	adds	r3, #1
 800337a:	f003 021f 	and.w	r2, r3, #31
 800337e:	4613      	mov	r3, r2
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	4413      	add	r3, r2
 8003384:	3b1e      	subs	r3, #30
 8003386:	051b      	lsls	r3, r3, #20
 8003388:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800338c:	e01e      	b.n	80033cc <HAL_ADC_ConfigChannel+0x6ac>
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	fa93 f3a3 	rbit	r3, r3
 800339a:	613b      	str	r3, [r7, #16]
  return result;
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d104      	bne.n	80033b0 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80033a6:	2320      	movs	r3, #32
 80033a8:	e006      	b.n	80033b8 <HAL_ADC_ConfigChannel+0x698>
 80033aa:	bf00      	nop
 80033ac:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	fab3 f383 	clz	r3, r3
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	3301      	adds	r3, #1
 80033ba:	f003 021f 	and.w	r2, r3, #31
 80033be:	4613      	mov	r3, r2
 80033c0:	005b      	lsls	r3, r3, #1
 80033c2:	4413      	add	r3, r2
 80033c4:	3b1e      	subs	r3, #30
 80033c6:	051b      	lsls	r3, r3, #20
 80033c8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033cc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80033ce:	683a      	ldr	r2, [r7, #0]
 80033d0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033d2:	4619      	mov	r1, r3
 80033d4:	f7ff fa48 	bl	8002868 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	4b3f      	ldr	r3, [pc, #252]	@ (80034dc <HAL_ADC_ConfigChannel+0x7bc>)
 80033de:	4013      	ands	r3, r2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d071      	beq.n	80034c8 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80033e4:	483e      	ldr	r0, [pc, #248]	@ (80034e0 <HAL_ADC_ConfigChannel+0x7c0>)
 80033e6:	f7ff f967 	bl	80026b8 <LL_ADC_GetCommonPathInternalCh>
 80033ea:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a3c      	ldr	r2, [pc, #240]	@ (80034e4 <HAL_ADC_ConfigChannel+0x7c4>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d004      	beq.n	8003402 <HAL_ADC_ConfigChannel+0x6e2>
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a3a      	ldr	r2, [pc, #232]	@ (80034e8 <HAL_ADC_ConfigChannel+0x7c8>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d127      	bne.n	8003452 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003402:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003406:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d121      	bne.n	8003452 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003416:	d157      	bne.n	80034c8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003418:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800341c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003420:	4619      	mov	r1, r3
 8003422:	482f      	ldr	r0, [pc, #188]	@ (80034e0 <HAL_ADC_ConfigChannel+0x7c0>)
 8003424:	f7ff f935 	bl	8002692 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003428:	4b30      	ldr	r3, [pc, #192]	@ (80034ec <HAL_ADC_ConfigChannel+0x7cc>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	099b      	lsrs	r3, r3, #6
 800342e:	4a30      	ldr	r2, [pc, #192]	@ (80034f0 <HAL_ADC_ConfigChannel+0x7d0>)
 8003430:	fba2 2303 	umull	r2, r3, r2, r3
 8003434:	099b      	lsrs	r3, r3, #6
 8003436:	1c5a      	adds	r2, r3, #1
 8003438:	4613      	mov	r3, r2
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	4413      	add	r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003442:	e002      	b.n	800344a <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	3b01      	subs	r3, #1
 8003448:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1f9      	bne.n	8003444 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003450:	e03a      	b.n	80034c8 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a27      	ldr	r2, [pc, #156]	@ (80034f4 <HAL_ADC_ConfigChannel+0x7d4>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d113      	bne.n	8003484 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800345c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003460:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d10d      	bne.n	8003484 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a22      	ldr	r2, [pc, #136]	@ (80034f8 <HAL_ADC_ConfigChannel+0x7d8>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d02a      	beq.n	80034c8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003472:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003476:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800347a:	4619      	mov	r1, r3
 800347c:	4818      	ldr	r0, [pc, #96]	@ (80034e0 <HAL_ADC_ConfigChannel+0x7c0>)
 800347e:	f7ff f908 	bl	8002692 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003482:	e021      	b.n	80034c8 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a1c      	ldr	r2, [pc, #112]	@ (80034fc <HAL_ADC_ConfigChannel+0x7dc>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d11c      	bne.n	80034c8 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800348e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003492:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d116      	bne.n	80034c8 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a16      	ldr	r2, [pc, #88]	@ (80034f8 <HAL_ADC_ConfigChannel+0x7d8>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d011      	beq.n	80034c8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80034a8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80034ac:	4619      	mov	r1, r3
 80034ae:	480c      	ldr	r0, [pc, #48]	@ (80034e0 <HAL_ADC_ConfigChannel+0x7c0>)
 80034b0:	f7ff f8ef 	bl	8002692 <LL_ADC_SetCommonPathInternalCh>
 80034b4:	e008      	b.n	80034c8 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ba:	f043 0220 	orr.w	r2, r3, #32
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80034d0:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	37d8      	adds	r7, #216	@ 0xd8
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	80080000 	.word	0x80080000
 80034e0:	50000300 	.word	0x50000300
 80034e4:	c3210000 	.word	0xc3210000
 80034e8:	90c00010 	.word	0x90c00010
 80034ec:	20000f44 	.word	0x20000f44
 80034f0:	053e2d63 	.word	0x053e2d63
 80034f4:	c7520000 	.word	0xc7520000
 80034f8:	50000100 	.word	0x50000100
 80034fc:	cb840000 	.word	0xcb840000

08003500 <LL_ADC_IsEnabled>:
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f003 0301 	and.w	r3, r3, #1
 8003510:	2b01      	cmp	r3, #1
 8003512:	d101      	bne.n	8003518 <LL_ADC_IsEnabled+0x18>
 8003514:	2301      	movs	r3, #1
 8003516:	e000      	b.n	800351a <LL_ADC_IsEnabled+0x1a>
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	370c      	adds	r7, #12
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr

08003526 <LL_ADC_REG_IsConversionOngoing>:
{
 8003526:	b480      	push	{r7}
 8003528:	b083      	sub	sp, #12
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f003 0304 	and.w	r3, r3, #4
 8003536:	2b04      	cmp	r3, #4
 8003538:	d101      	bne.n	800353e <LL_ADC_REG_IsConversionOngoing+0x18>
 800353a:	2301      	movs	r3, #1
 800353c:	e000      	b.n	8003540 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800354c:	b590      	push	{r4, r7, lr}
 800354e:	b0a1      	sub	sp, #132	@ 0x84
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003556:	2300      	movs	r3, #0
 8003558:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003562:	2b01      	cmp	r3, #1
 8003564:	d101      	bne.n	800356a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003566:	2302      	movs	r3, #2
 8003568:	e08b      	b.n	8003682 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2201      	movs	r2, #1
 800356e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003572:	2300      	movs	r3, #0
 8003574:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003576:	2300      	movs	r3, #0
 8003578:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003582:	d102      	bne.n	800358a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003584:	4b41      	ldr	r3, [pc, #260]	@ (800368c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003586:	60bb      	str	r3, [r7, #8]
 8003588:	e001      	b.n	800358e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800358a:	2300      	movs	r3, #0
 800358c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d10b      	bne.n	80035ac <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003598:	f043 0220 	orr.w	r2, r3, #32
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e06a      	b.n	8003682 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7ff ffb9 	bl	8003526 <LL_ADC_REG_IsConversionOngoing>
 80035b4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7ff ffb3 	bl	8003526 <LL_ADC_REG_IsConversionOngoing>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d14c      	bne.n	8003660 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80035c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d149      	bne.n	8003660 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80035cc:	4b30      	ldr	r3, [pc, #192]	@ (8003690 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80035ce:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d028      	beq.n	800362a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80035d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	6859      	ldr	r1, [r3, #4]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80035ea:	035b      	lsls	r3, r3, #13
 80035ec:	430b      	orrs	r3, r1
 80035ee:	431a      	orrs	r2, r3
 80035f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035f2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80035f4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80035f8:	f7ff ff82 	bl	8003500 <LL_ADC_IsEnabled>
 80035fc:	4604      	mov	r4, r0
 80035fe:	4823      	ldr	r0, [pc, #140]	@ (800368c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003600:	f7ff ff7e 	bl	8003500 <LL_ADC_IsEnabled>
 8003604:	4603      	mov	r3, r0
 8003606:	4323      	orrs	r3, r4
 8003608:	2b00      	cmp	r3, #0
 800360a:	d133      	bne.n	8003674 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800360c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003614:	f023 030f 	bic.w	r3, r3, #15
 8003618:	683a      	ldr	r2, [r7, #0]
 800361a:	6811      	ldr	r1, [r2, #0]
 800361c:	683a      	ldr	r2, [r7, #0]
 800361e:	6892      	ldr	r2, [r2, #8]
 8003620:	430a      	orrs	r2, r1
 8003622:	431a      	orrs	r2, r3
 8003624:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003626:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003628:	e024      	b.n	8003674 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800362a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003632:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003634:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003636:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800363a:	f7ff ff61 	bl	8003500 <LL_ADC_IsEnabled>
 800363e:	4604      	mov	r4, r0
 8003640:	4812      	ldr	r0, [pc, #72]	@ (800368c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003642:	f7ff ff5d 	bl	8003500 <LL_ADC_IsEnabled>
 8003646:	4603      	mov	r3, r0
 8003648:	4323      	orrs	r3, r4
 800364a:	2b00      	cmp	r3, #0
 800364c:	d112      	bne.n	8003674 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800364e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003656:	f023 030f 	bic.w	r3, r3, #15
 800365a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800365c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800365e:	e009      	b.n	8003674 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003664:	f043 0220 	orr.w	r2, r3, #32
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003672:	e000      	b.n	8003676 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003674:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800367e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003682:	4618      	mov	r0, r3
 8003684:	3784      	adds	r7, #132	@ 0x84
 8003686:	46bd      	mov	sp, r7
 8003688:	bd90      	pop	{r4, r7, pc}
 800368a:	bf00      	nop
 800368c:	50000100 	.word	0x50000100
 8003690:	50000300 	.word	0x50000300

08003694 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003694:	b480      	push	{r7}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f003 0307 	and.w	r3, r3, #7
 80036a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036a4:	4b0c      	ldr	r3, [pc, #48]	@ (80036d8 <__NVIC_SetPriorityGrouping+0x44>)
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036aa:	68ba      	ldr	r2, [r7, #8]
 80036ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80036b0:	4013      	ands	r3, r2
 80036b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80036c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036c6:	4a04      	ldr	r2, [pc, #16]	@ (80036d8 <__NVIC_SetPriorityGrouping+0x44>)
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	60d3      	str	r3, [r2, #12]
}
 80036cc:	bf00      	nop
 80036ce:	3714      	adds	r7, #20
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr
 80036d8:	e000ed00 	.word	0xe000ed00

080036dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036dc:	b480      	push	{r7}
 80036de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036e0:	4b04      	ldr	r3, [pc, #16]	@ (80036f4 <__NVIC_GetPriorityGrouping+0x18>)
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	0a1b      	lsrs	r3, r3, #8
 80036e6:	f003 0307 	and.w	r3, r3, #7
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr
 80036f4:	e000ed00 	.word	0xe000ed00

080036f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	4603      	mov	r3, r0
 8003700:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003706:	2b00      	cmp	r3, #0
 8003708:	db0b      	blt.n	8003722 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800370a:	79fb      	ldrb	r3, [r7, #7]
 800370c:	f003 021f 	and.w	r2, r3, #31
 8003710:	4907      	ldr	r1, [pc, #28]	@ (8003730 <__NVIC_EnableIRQ+0x38>)
 8003712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003716:	095b      	lsrs	r3, r3, #5
 8003718:	2001      	movs	r0, #1
 800371a:	fa00 f202 	lsl.w	r2, r0, r2
 800371e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003722:	bf00      	nop
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	e000e100 	.word	0xe000e100

08003734 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	4603      	mov	r3, r0
 800373c:	6039      	str	r1, [r7, #0]
 800373e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003744:	2b00      	cmp	r3, #0
 8003746:	db0a      	blt.n	800375e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	b2da      	uxtb	r2, r3
 800374c:	490c      	ldr	r1, [pc, #48]	@ (8003780 <__NVIC_SetPriority+0x4c>)
 800374e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003752:	0112      	lsls	r2, r2, #4
 8003754:	b2d2      	uxtb	r2, r2
 8003756:	440b      	add	r3, r1
 8003758:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800375c:	e00a      	b.n	8003774 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	b2da      	uxtb	r2, r3
 8003762:	4908      	ldr	r1, [pc, #32]	@ (8003784 <__NVIC_SetPriority+0x50>)
 8003764:	79fb      	ldrb	r3, [r7, #7]
 8003766:	f003 030f 	and.w	r3, r3, #15
 800376a:	3b04      	subs	r3, #4
 800376c:	0112      	lsls	r2, r2, #4
 800376e:	b2d2      	uxtb	r2, r2
 8003770:	440b      	add	r3, r1
 8003772:	761a      	strb	r2, [r3, #24]
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr
 8003780:	e000e100 	.word	0xe000e100
 8003784:	e000ed00 	.word	0xe000ed00

08003788 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003788:	b480      	push	{r7}
 800378a:	b089      	sub	sp, #36	@ 0x24
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f003 0307 	and.w	r3, r3, #7
 800379a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	f1c3 0307 	rsb	r3, r3, #7
 80037a2:	2b04      	cmp	r3, #4
 80037a4:	bf28      	it	cs
 80037a6:	2304      	movcs	r3, #4
 80037a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	3304      	adds	r3, #4
 80037ae:	2b06      	cmp	r3, #6
 80037b0:	d902      	bls.n	80037b8 <NVIC_EncodePriority+0x30>
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	3b03      	subs	r3, #3
 80037b6:	e000      	b.n	80037ba <NVIC_EncodePriority+0x32>
 80037b8:	2300      	movs	r3, #0
 80037ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	fa02 f303 	lsl.w	r3, r2, r3
 80037c6:	43da      	mvns	r2, r3
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	401a      	ands	r2, r3
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037d0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	fa01 f303 	lsl.w	r3, r1, r3
 80037da:	43d9      	mvns	r1, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037e0:	4313      	orrs	r3, r2
         );
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3724      	adds	r7, #36	@ 0x24
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr

080037ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b082      	sub	sp, #8
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f7ff ff4c 	bl	8003694 <__NVIC_SetPriorityGrouping>
}
 80037fc:	bf00      	nop
 80037fe:	3708      	adds	r7, #8
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b086      	sub	sp, #24
 8003808:	af00      	add	r7, sp, #0
 800380a:	4603      	mov	r3, r0
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
 8003810:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003812:	f7ff ff63 	bl	80036dc <__NVIC_GetPriorityGrouping>
 8003816:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	68b9      	ldr	r1, [r7, #8]
 800381c:	6978      	ldr	r0, [r7, #20]
 800381e:	f7ff ffb3 	bl	8003788 <NVIC_EncodePriority>
 8003822:	4602      	mov	r2, r0
 8003824:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003828:	4611      	mov	r1, r2
 800382a:	4618      	mov	r0, r3
 800382c:	f7ff ff82 	bl	8003734 <__NVIC_SetPriority>
}
 8003830:	bf00      	nop
 8003832:	3718      	adds	r7, #24
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	4603      	mov	r3, r0
 8003840:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003846:	4618      	mov	r0, r3
 8003848:	f7ff ff56 	bl	80036f8 <__NVIC_EnableIRQ>
}
 800384c:	bf00      	nop
 800384e:	3708      	adds	r7, #8
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d101      	bne.n	8003866 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e08d      	b.n	8003982 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	461a      	mov	r2, r3
 800386c:	4b47      	ldr	r3, [pc, #284]	@ (800398c <HAL_DMA_Init+0x138>)
 800386e:	429a      	cmp	r2, r3
 8003870:	d80f      	bhi.n	8003892 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	461a      	mov	r2, r3
 8003878:	4b45      	ldr	r3, [pc, #276]	@ (8003990 <HAL_DMA_Init+0x13c>)
 800387a:	4413      	add	r3, r2
 800387c:	4a45      	ldr	r2, [pc, #276]	@ (8003994 <HAL_DMA_Init+0x140>)
 800387e:	fba2 2303 	umull	r2, r3, r2, r3
 8003882:	091b      	lsrs	r3, r3, #4
 8003884:	009a      	lsls	r2, r3, #2
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a42      	ldr	r2, [pc, #264]	@ (8003998 <HAL_DMA_Init+0x144>)
 800388e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003890:	e00e      	b.n	80038b0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	461a      	mov	r2, r3
 8003898:	4b40      	ldr	r3, [pc, #256]	@ (800399c <HAL_DMA_Init+0x148>)
 800389a:	4413      	add	r3, r2
 800389c:	4a3d      	ldr	r2, [pc, #244]	@ (8003994 <HAL_DMA_Init+0x140>)
 800389e:	fba2 2303 	umull	r2, r3, r2, r3
 80038a2:	091b      	lsrs	r3, r3, #4
 80038a4:	009a      	lsls	r2, r3, #2
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a3c      	ldr	r2, [pc, #240]	@ (80039a0 <HAL_DMA_Init+0x14c>)
 80038ae:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2202      	movs	r2, #2
 80038b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80038c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038ca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80038d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 fa82 	bl	8003e0c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003910:	d102      	bne.n	8003918 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685a      	ldr	r2, [r3, #4]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003920:	b2d2      	uxtb	r2, r2
 8003922:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800392c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d010      	beq.n	8003958 <HAL_DMA_Init+0x104>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	2b04      	cmp	r3, #4
 800393c:	d80c      	bhi.n	8003958 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 faa2 	bl	8003e88 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003948:	2200      	movs	r2, #0
 800394a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003954:	605a      	str	r2, [r3, #4]
 8003956:	e008      	b.n	800396a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	40020407 	.word	0x40020407
 8003990:	bffdfff8 	.word	0xbffdfff8
 8003994:	cccccccd 	.word	0xcccccccd
 8003998:	40020000 	.word	0x40020000
 800399c:	bffdfbf8 	.word	0xbffdfbf8
 80039a0:	40020400 	.word	0x40020400

080039a4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b086      	sub	sp, #24
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
 80039b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039b2:	2300      	movs	r3, #0
 80039b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d101      	bne.n	80039c4 <HAL_DMA_Start_IT+0x20>
 80039c0:	2302      	movs	r3, #2
 80039c2:	e066      	b.n	8003a92 <HAL_DMA_Start_IT+0xee>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d155      	bne.n	8003a84 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2202      	movs	r2, #2
 80039dc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f022 0201 	bic.w	r2, r2, #1
 80039f4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	68b9      	ldr	r1, [r7, #8]
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f000 f9c7 	bl	8003d90 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d008      	beq.n	8003a1c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f042 020e 	orr.w	r2, r2, #14
 8003a18:	601a      	str	r2, [r3, #0]
 8003a1a:	e00f      	b.n	8003a3c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f022 0204 	bic.w	r2, r2, #4
 8003a2a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f042 020a 	orr.w	r2, r2, #10
 8003a3a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d007      	beq.n	8003a5a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a54:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a58:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d007      	beq.n	8003a72 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a6c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a70:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f042 0201 	orr.w	r2, r2, #1
 8003a80:	601a      	str	r2, [r3, #0]
 8003a82:	e005      	b.n	8003a90 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003a90:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3718      	adds	r7, #24
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	b085      	sub	sp, #20
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d005      	beq.n	8003abe <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2204      	movs	r2, #4
 8003ab6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	73fb      	strb	r3, [r7, #15]
 8003abc:	e037      	b.n	8003b2e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f022 020e 	bic.w	r2, r2, #14
 8003acc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ad8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003adc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f022 0201 	bic.w	r2, r2, #1
 8003aec:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003af2:	f003 021f 	and.w	r2, r3, #31
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003afa:	2101      	movs	r1, #1
 8003afc:	fa01 f202 	lsl.w	r2, r1, r2
 8003b00:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003b0a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00c      	beq.n	8003b2e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b1e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b22:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003b2c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3714      	adds	r7, #20
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b54:	2300      	movs	r3, #0
 8003b56:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d00d      	beq.n	8003b80 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2204      	movs	r2, #4
 8003b68:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	73fb      	strb	r3, [r7, #15]
 8003b7e:	e047      	b.n	8003c10 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f022 020e 	bic.w	r2, r2, #14
 8003b8e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f022 0201 	bic.w	r2, r2, #1
 8003b9e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003baa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003bae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bb4:	f003 021f 	and.w	r2, r3, #31
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bbc:	2101      	movs	r1, #1
 8003bbe:	fa01 f202 	lsl.w	r2, r1, r2
 8003bc2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003bcc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00c      	beq.n	8003bf0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003be0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003be4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003bee:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d003      	beq.n	8003c10 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	4798      	blx	r3
    }
  }
  return status;
 8003c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3710      	adds	r7, #16
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b084      	sub	sp, #16
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c36:	f003 031f 	and.w	r3, r3, #31
 8003c3a:	2204      	movs	r2, #4
 8003c3c:	409a      	lsls	r2, r3
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	4013      	ands	r3, r2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d026      	beq.n	8003c94 <HAL_DMA_IRQHandler+0x7a>
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	f003 0304 	and.w	r3, r3, #4
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d021      	beq.n	8003c94 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0320 	and.w	r3, r3, #32
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d107      	bne.n	8003c6e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f022 0204 	bic.w	r2, r2, #4
 8003c6c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c72:	f003 021f 	and.w	r2, r3, #31
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c7a:	2104      	movs	r1, #4
 8003c7c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c80:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d071      	beq.n	8003d6e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003c92:	e06c      	b.n	8003d6e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c98:	f003 031f 	and.w	r3, r3, #31
 8003c9c:	2202      	movs	r2, #2
 8003c9e:	409a      	lsls	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d02e      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d029      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0320 	and.w	r3, r3, #32
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d10b      	bne.n	8003cd8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f022 020a 	bic.w	r2, r2, #10
 8003cce:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cdc:	f003 021f 	and.w	r2, r3, #31
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ce4:	2102      	movs	r1, #2
 8003ce6:	fa01 f202 	lsl.w	r2, r1, r2
 8003cea:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d038      	beq.n	8003d6e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003d04:	e033      	b.n	8003d6e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d0a:	f003 031f 	and.w	r3, r3, #31
 8003d0e:	2208      	movs	r2, #8
 8003d10:	409a      	lsls	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	4013      	ands	r3, r2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d02a      	beq.n	8003d70 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	f003 0308 	and.w	r3, r3, #8
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d025      	beq.n	8003d70 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f022 020e 	bic.w	r2, r2, #14
 8003d32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d38:	f003 021f 	and.w	r2, r3, #31
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d40:	2101      	movs	r1, #1
 8003d42:	fa01 f202 	lsl.w	r2, r1, r2
 8003d46:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2201      	movs	r2, #1
 8003d52:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d004      	beq.n	8003d70 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003d6e:	bf00      	nop
 8003d70:	bf00      	nop
}
 8003d72:	3710      	adds	r7, #16
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
 8003d9c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003da6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d004      	beq.n	8003dba <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003db8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dbe:	f003 021f 	and.w	r2, r3, #31
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc6:	2101      	movs	r1, #1
 8003dc8:	fa01 f202 	lsl.w	r2, r1, r2
 8003dcc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	683a      	ldr	r2, [r7, #0]
 8003dd4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	2b10      	cmp	r3, #16
 8003ddc:	d108      	bne.n	8003df0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68ba      	ldr	r2, [r7, #8]
 8003dec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003dee:	e007      	b.n	8003e00 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68ba      	ldr	r2, [r7, #8]
 8003df6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	60da      	str	r2, [r3, #12]
}
 8003e00:	bf00      	nop
 8003e02:	3714      	adds	r7, #20
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b087      	sub	sp, #28
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	461a      	mov	r2, r3
 8003e1a:	4b16      	ldr	r3, [pc, #88]	@ (8003e74 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d802      	bhi.n	8003e26 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003e20:	4b15      	ldr	r3, [pc, #84]	@ (8003e78 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003e22:	617b      	str	r3, [r7, #20]
 8003e24:	e001      	b.n	8003e2a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8003e26:	4b15      	ldr	r3, [pc, #84]	@ (8003e7c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003e28:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	3b08      	subs	r3, #8
 8003e36:	4a12      	ldr	r2, [pc, #72]	@ (8003e80 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003e38:	fba2 2303 	umull	r2, r3, r2, r3
 8003e3c:	091b      	lsrs	r3, r3, #4
 8003e3e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e44:	089b      	lsrs	r3, r3, #2
 8003e46:	009a      	lsls	r2, r3, #2
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a0b      	ldr	r2, [pc, #44]	@ (8003e84 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003e56:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f003 031f 	and.w	r3, r3, #31
 8003e5e:	2201      	movs	r2, #1
 8003e60:	409a      	lsls	r2, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003e66:	bf00      	nop
 8003e68:	371c      	adds	r7, #28
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	40020407 	.word	0x40020407
 8003e78:	40020800 	.word	0x40020800
 8003e7c:	40020820 	.word	0x40020820
 8003e80:	cccccccd 	.word	0xcccccccd
 8003e84:	40020880 	.word	0x40020880

08003e88 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	4b0b      	ldr	r3, [pc, #44]	@ (8003ec8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003e9c:	4413      	add	r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a08      	ldr	r2, [pc, #32]	@ (8003ecc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003eaa:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	f003 031f 	and.w	r3, r3, #31
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	409a      	lsls	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003ebc:	bf00      	nop
 8003ebe:	3714      	adds	r7, #20
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr
 8003ec8:	1000823f 	.word	0x1000823f
 8003ecc:	40020940 	.word	0x40020940

08003ed0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b087      	sub	sp, #28
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003eda:	2300      	movs	r3, #0
 8003edc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003ede:	e15a      	b.n	8004196 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	2101      	movs	r1, #1
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8003eec:	4013      	ands	r3, r2
 8003eee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f000 814c 	beq.w	8004190 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f003 0303 	and.w	r3, r3, #3
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d005      	beq.n	8003f10 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d130      	bne.n	8003f72 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	005b      	lsls	r3, r3, #1
 8003f1a:	2203      	movs	r2, #3
 8003f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f20:	43db      	mvns	r3, r3
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	4013      	ands	r3, r2
 8003f26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	68da      	ldr	r2, [r3, #12]
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	005b      	lsls	r3, r3, #1
 8003f30:	fa02 f303 	lsl.w	r3, r2, r3
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	693a      	ldr	r2, [r7, #16]
 8003f3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f46:	2201      	movs	r2, #1
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4e:	43db      	mvns	r3, r3
 8003f50:	693a      	ldr	r2, [r7, #16]
 8003f52:	4013      	ands	r3, r2
 8003f54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	091b      	lsrs	r3, r3, #4
 8003f5c:	f003 0201 	and.w	r2, r3, #1
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	fa02 f303 	lsl.w	r3, r2, r3
 8003f66:	693a      	ldr	r2, [r7, #16]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	693a      	ldr	r2, [r7, #16]
 8003f70:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f003 0303 	and.w	r3, r3, #3
 8003f7a:	2b03      	cmp	r3, #3
 8003f7c:	d017      	beq.n	8003fae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	005b      	lsls	r3, r3, #1
 8003f88:	2203      	movs	r2, #3
 8003f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8e:	43db      	mvns	r3, r3
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	4013      	ands	r3, r2
 8003f94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	689a      	ldr	r2, [r3, #8]
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	005b      	lsls	r3, r3, #1
 8003f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	693a      	ldr	r2, [r7, #16]
 8003fac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f003 0303 	and.w	r3, r3, #3
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d123      	bne.n	8004002 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	08da      	lsrs	r2, r3, #3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	3208      	adds	r2, #8
 8003fc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fc6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	f003 0307 	and.w	r3, r3, #7
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	220f      	movs	r2, #15
 8003fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd6:	43db      	mvns	r3, r3
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	4013      	ands	r3, r2
 8003fdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	691a      	ldr	r2, [r3, #16]
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	f003 0307 	and.w	r3, r3, #7
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	fa02 f303 	lsl.w	r3, r2, r3
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	08da      	lsrs	r2, r3, #3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	3208      	adds	r2, #8
 8003ffc:	6939      	ldr	r1, [r7, #16]
 8003ffe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	005b      	lsls	r3, r3, #1
 800400c:	2203      	movs	r2, #3
 800400e:	fa02 f303 	lsl.w	r3, r2, r3
 8004012:	43db      	mvns	r3, r3
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	4013      	ands	r3, r2
 8004018:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f003 0203 	and.w	r2, r3, #3
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	005b      	lsls	r3, r3, #1
 8004026:	fa02 f303 	lsl.w	r3, r2, r3
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	4313      	orrs	r3, r2
 800402e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	693a      	ldr	r2, [r7, #16]
 8004034:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800403e:	2b00      	cmp	r3, #0
 8004040:	f000 80a6 	beq.w	8004190 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004044:	4b5b      	ldr	r3, [pc, #364]	@ (80041b4 <HAL_GPIO_Init+0x2e4>)
 8004046:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004048:	4a5a      	ldr	r2, [pc, #360]	@ (80041b4 <HAL_GPIO_Init+0x2e4>)
 800404a:	f043 0301 	orr.w	r3, r3, #1
 800404e:	6613      	str	r3, [r2, #96]	@ 0x60
 8004050:	4b58      	ldr	r3, [pc, #352]	@ (80041b4 <HAL_GPIO_Init+0x2e4>)
 8004052:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004054:	f003 0301 	and.w	r3, r3, #1
 8004058:	60bb      	str	r3, [r7, #8]
 800405a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800405c:	4a56      	ldr	r2, [pc, #344]	@ (80041b8 <HAL_GPIO_Init+0x2e8>)
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	089b      	lsrs	r3, r3, #2
 8004062:	3302      	adds	r3, #2
 8004064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004068:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	f003 0303 	and.w	r3, r3, #3
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	220f      	movs	r2, #15
 8004074:	fa02 f303 	lsl.w	r3, r2, r3
 8004078:	43db      	mvns	r3, r3
 800407a:	693a      	ldr	r2, [r7, #16]
 800407c:	4013      	ands	r3, r2
 800407e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004086:	d01f      	beq.n	80040c8 <HAL_GPIO_Init+0x1f8>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a4c      	ldr	r2, [pc, #304]	@ (80041bc <HAL_GPIO_Init+0x2ec>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d019      	beq.n	80040c4 <HAL_GPIO_Init+0x1f4>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a4b      	ldr	r2, [pc, #300]	@ (80041c0 <HAL_GPIO_Init+0x2f0>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d013      	beq.n	80040c0 <HAL_GPIO_Init+0x1f0>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a4a      	ldr	r2, [pc, #296]	@ (80041c4 <HAL_GPIO_Init+0x2f4>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d00d      	beq.n	80040bc <HAL_GPIO_Init+0x1ec>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a49      	ldr	r2, [pc, #292]	@ (80041c8 <HAL_GPIO_Init+0x2f8>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d007      	beq.n	80040b8 <HAL_GPIO_Init+0x1e8>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a48      	ldr	r2, [pc, #288]	@ (80041cc <HAL_GPIO_Init+0x2fc>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d101      	bne.n	80040b4 <HAL_GPIO_Init+0x1e4>
 80040b0:	2305      	movs	r3, #5
 80040b2:	e00a      	b.n	80040ca <HAL_GPIO_Init+0x1fa>
 80040b4:	2306      	movs	r3, #6
 80040b6:	e008      	b.n	80040ca <HAL_GPIO_Init+0x1fa>
 80040b8:	2304      	movs	r3, #4
 80040ba:	e006      	b.n	80040ca <HAL_GPIO_Init+0x1fa>
 80040bc:	2303      	movs	r3, #3
 80040be:	e004      	b.n	80040ca <HAL_GPIO_Init+0x1fa>
 80040c0:	2302      	movs	r3, #2
 80040c2:	e002      	b.n	80040ca <HAL_GPIO_Init+0x1fa>
 80040c4:	2301      	movs	r3, #1
 80040c6:	e000      	b.n	80040ca <HAL_GPIO_Init+0x1fa>
 80040c8:	2300      	movs	r3, #0
 80040ca:	697a      	ldr	r2, [r7, #20]
 80040cc:	f002 0203 	and.w	r2, r2, #3
 80040d0:	0092      	lsls	r2, r2, #2
 80040d2:	4093      	lsls	r3, r2
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040da:	4937      	ldr	r1, [pc, #220]	@ (80041b8 <HAL_GPIO_Init+0x2e8>)
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	089b      	lsrs	r3, r3, #2
 80040e0:	3302      	adds	r3, #2
 80040e2:	693a      	ldr	r2, [r7, #16]
 80040e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80040e8:	4b39      	ldr	r3, [pc, #228]	@ (80041d0 <HAL_GPIO_Init+0x300>)
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	43db      	mvns	r3, r3
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	4013      	ands	r3, r2
 80040f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d003      	beq.n	800410c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	4313      	orrs	r3, r2
 800410a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800410c:	4a30      	ldr	r2, [pc, #192]	@ (80041d0 <HAL_GPIO_Init+0x300>)
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004112:	4b2f      	ldr	r3, [pc, #188]	@ (80041d0 <HAL_GPIO_Init+0x300>)
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	43db      	mvns	r3, r3
 800411c:	693a      	ldr	r2, [r7, #16]
 800411e:	4013      	ands	r3, r2
 8004120:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d003      	beq.n	8004136 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	4313      	orrs	r3, r2
 8004134:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004136:	4a26      	ldr	r2, [pc, #152]	@ (80041d0 <HAL_GPIO_Init+0x300>)
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800413c:	4b24      	ldr	r3, [pc, #144]	@ (80041d0 <HAL_GPIO_Init+0x300>)
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	43db      	mvns	r3, r3
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	4013      	ands	r3, r2
 800414a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d003      	beq.n	8004160 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004158:	693a      	ldr	r2, [r7, #16]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	4313      	orrs	r3, r2
 800415e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004160:	4a1b      	ldr	r2, [pc, #108]	@ (80041d0 <HAL_GPIO_Init+0x300>)
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004166:	4b1a      	ldr	r3, [pc, #104]	@ (80041d0 <HAL_GPIO_Init+0x300>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	43db      	mvns	r3, r3
 8004170:	693a      	ldr	r2, [r7, #16]
 8004172:	4013      	ands	r3, r2
 8004174:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d003      	beq.n	800418a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004182:	693a      	ldr	r2, [r7, #16]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	4313      	orrs	r3, r2
 8004188:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800418a:	4a11      	ldr	r2, [pc, #68]	@ (80041d0 <HAL_GPIO_Init+0x300>)
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	3301      	adds	r3, #1
 8004194:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	fa22 f303 	lsr.w	r3, r2, r3
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	f47f ae9d 	bne.w	8003ee0 <HAL_GPIO_Init+0x10>
  }
}
 80041a6:	bf00      	nop
 80041a8:	bf00      	nop
 80041aa:	371c      	adds	r7, #28
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr
 80041b4:	40021000 	.word	0x40021000
 80041b8:	40010000 	.word	0x40010000
 80041bc:	48000400 	.word	0x48000400
 80041c0:	48000800 	.word	0x48000800
 80041c4:	48000c00 	.word	0x48000c00
 80041c8:	48001000 	.word	0x48001000
 80041cc:	48001400 	.word	0x48001400
 80041d0:	40010400 	.word	0x40010400

080041d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	460b      	mov	r3, r1
 80041de:	807b      	strh	r3, [r7, #2]
 80041e0:	4613      	mov	r3, r2
 80041e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80041e4:	787b      	ldrb	r3, [r7, #1]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d003      	beq.n	80041f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80041ea:	887a      	ldrh	r2, [r7, #2]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80041f0:	e002      	b.n	80041f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80041f2:	887a      	ldrh	r2, [r7, #2]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80041f8:	bf00      	nop
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004204:	b480      	push	{r7}
 8004206:	b085      	sub	sp, #20
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d141      	bne.n	8004296 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004212:	4b4b      	ldr	r3, [pc, #300]	@ (8004340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800421a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800421e:	d131      	bne.n	8004284 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004220:	4b47      	ldr	r3, [pc, #284]	@ (8004340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004222:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004226:	4a46      	ldr	r2, [pc, #280]	@ (8004340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004228:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800422c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004230:	4b43      	ldr	r3, [pc, #268]	@ (8004340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004238:	4a41      	ldr	r2, [pc, #260]	@ (8004340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800423a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800423e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004240:	4b40      	ldr	r3, [pc, #256]	@ (8004344 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2232      	movs	r2, #50	@ 0x32
 8004246:	fb02 f303 	mul.w	r3, r2, r3
 800424a:	4a3f      	ldr	r2, [pc, #252]	@ (8004348 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800424c:	fba2 2303 	umull	r2, r3, r2, r3
 8004250:	0c9b      	lsrs	r3, r3, #18
 8004252:	3301      	adds	r3, #1
 8004254:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004256:	e002      	b.n	800425e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	3b01      	subs	r3, #1
 800425c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800425e:	4b38      	ldr	r3, [pc, #224]	@ (8004340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004266:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800426a:	d102      	bne.n	8004272 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1f2      	bne.n	8004258 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004272:	4b33      	ldr	r3, [pc, #204]	@ (8004340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004274:	695b      	ldr	r3, [r3, #20]
 8004276:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800427a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800427e:	d158      	bne.n	8004332 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e057      	b.n	8004334 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004284:	4b2e      	ldr	r3, [pc, #184]	@ (8004340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004286:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800428a:	4a2d      	ldr	r2, [pc, #180]	@ (8004340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800428c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004290:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004294:	e04d      	b.n	8004332 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800429c:	d141      	bne.n	8004322 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800429e:	4b28      	ldr	r3, [pc, #160]	@ (8004340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80042a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042aa:	d131      	bne.n	8004310 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80042ac:	4b24      	ldr	r3, [pc, #144]	@ (8004340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042b2:	4a23      	ldr	r2, [pc, #140]	@ (8004340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042b8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80042bc:	4b20      	ldr	r3, [pc, #128]	@ (8004340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80042c4:	4a1e      	ldr	r2, [pc, #120]	@ (8004340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80042ca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80042cc:	4b1d      	ldr	r3, [pc, #116]	@ (8004344 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2232      	movs	r2, #50	@ 0x32
 80042d2:	fb02 f303 	mul.w	r3, r2, r3
 80042d6:	4a1c      	ldr	r2, [pc, #112]	@ (8004348 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80042d8:	fba2 2303 	umull	r2, r3, r2, r3
 80042dc:	0c9b      	lsrs	r3, r3, #18
 80042de:	3301      	adds	r3, #1
 80042e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042e2:	e002      	b.n	80042ea <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	3b01      	subs	r3, #1
 80042e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042ea:	4b15      	ldr	r3, [pc, #84]	@ (8004340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042ec:	695b      	ldr	r3, [r3, #20]
 80042ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042f6:	d102      	bne.n	80042fe <HAL_PWREx_ControlVoltageScaling+0xfa>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1f2      	bne.n	80042e4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80042fe:	4b10      	ldr	r3, [pc, #64]	@ (8004340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004306:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800430a:	d112      	bne.n	8004332 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e011      	b.n	8004334 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004310:	4b0b      	ldr	r3, [pc, #44]	@ (8004340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004312:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004316:	4a0a      	ldr	r2, [pc, #40]	@ (8004340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004318:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800431c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004320:	e007      	b.n	8004332 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004322:	4b07      	ldr	r3, [pc, #28]	@ (8004340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800432a:	4a05      	ldr	r2, [pc, #20]	@ (8004340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800432c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004330:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	3714      	adds	r7, #20
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr
 8004340:	40007000 	.word	0x40007000
 8004344:	20000f44 	.word	0x20000f44
 8004348:	431bde83 	.word	0x431bde83

0800434c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800434c:	b480      	push	{r7}
 800434e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004350:	4b05      	ldr	r3, [pc, #20]	@ (8004368 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	4a04      	ldr	r2, [pc, #16]	@ (8004368 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004356:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800435a:	6093      	str	r3, [r2, #8]
}
 800435c:	bf00      	nop
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	40007000 	.word	0x40007000

0800436c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b088      	sub	sp, #32
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d101      	bne.n	800437e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e2fe      	b.n	800497c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0301 	and.w	r3, r3, #1
 8004386:	2b00      	cmp	r3, #0
 8004388:	d075      	beq.n	8004476 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800438a:	4b97      	ldr	r3, [pc, #604]	@ (80045e8 <HAL_RCC_OscConfig+0x27c>)
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f003 030c 	and.w	r3, r3, #12
 8004392:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004394:	4b94      	ldr	r3, [pc, #592]	@ (80045e8 <HAL_RCC_OscConfig+0x27c>)
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	f003 0303 	and.w	r3, r3, #3
 800439c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	2b0c      	cmp	r3, #12
 80043a2:	d102      	bne.n	80043aa <HAL_RCC_OscConfig+0x3e>
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	2b03      	cmp	r3, #3
 80043a8:	d002      	beq.n	80043b0 <HAL_RCC_OscConfig+0x44>
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	2b08      	cmp	r3, #8
 80043ae:	d10b      	bne.n	80043c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043b0:	4b8d      	ldr	r3, [pc, #564]	@ (80045e8 <HAL_RCC_OscConfig+0x27c>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d05b      	beq.n	8004474 <HAL_RCC_OscConfig+0x108>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d157      	bne.n	8004474 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e2d9      	b.n	800497c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043d0:	d106      	bne.n	80043e0 <HAL_RCC_OscConfig+0x74>
 80043d2:	4b85      	ldr	r3, [pc, #532]	@ (80045e8 <HAL_RCC_OscConfig+0x27c>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a84      	ldr	r2, [pc, #528]	@ (80045e8 <HAL_RCC_OscConfig+0x27c>)
 80043d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043dc:	6013      	str	r3, [r2, #0]
 80043de:	e01d      	b.n	800441c <HAL_RCC_OscConfig+0xb0>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043e8:	d10c      	bne.n	8004404 <HAL_RCC_OscConfig+0x98>
 80043ea:	4b7f      	ldr	r3, [pc, #508]	@ (80045e8 <HAL_RCC_OscConfig+0x27c>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a7e      	ldr	r2, [pc, #504]	@ (80045e8 <HAL_RCC_OscConfig+0x27c>)
 80043f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043f4:	6013      	str	r3, [r2, #0]
 80043f6:	4b7c      	ldr	r3, [pc, #496]	@ (80045e8 <HAL_RCC_OscConfig+0x27c>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a7b      	ldr	r2, [pc, #492]	@ (80045e8 <HAL_RCC_OscConfig+0x27c>)
 80043fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004400:	6013      	str	r3, [r2, #0]
 8004402:	e00b      	b.n	800441c <HAL_RCC_OscConfig+0xb0>
 8004404:	4b78      	ldr	r3, [pc, #480]	@ (80045e8 <HAL_RCC_OscConfig+0x27c>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a77      	ldr	r2, [pc, #476]	@ (80045e8 <HAL_RCC_OscConfig+0x27c>)
 800440a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800440e:	6013      	str	r3, [r2, #0]
 8004410:	4b75      	ldr	r3, [pc, #468]	@ (80045e8 <HAL_RCC_OscConfig+0x27c>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a74      	ldr	r2, [pc, #464]	@ (80045e8 <HAL_RCC_OscConfig+0x27c>)
 8004416:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800441a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d013      	beq.n	800444c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004424:	f7fe f916 	bl	8002654 <HAL_GetTick>
 8004428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800442a:	e008      	b.n	800443e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800442c:	f7fe f912 	bl	8002654 <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	2b64      	cmp	r3, #100	@ 0x64
 8004438:	d901      	bls.n	800443e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e29e      	b.n	800497c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800443e:	4b6a      	ldr	r3, [pc, #424]	@ (80045e8 <HAL_RCC_OscConfig+0x27c>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d0f0      	beq.n	800442c <HAL_RCC_OscConfig+0xc0>
 800444a:	e014      	b.n	8004476 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800444c:	f7fe f902 	bl	8002654 <HAL_GetTick>
 8004450:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004452:	e008      	b.n	8004466 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004454:	f7fe f8fe 	bl	8002654 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	2b64      	cmp	r3, #100	@ 0x64
 8004460:	d901      	bls.n	8004466 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e28a      	b.n	800497c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004466:	4b60      	ldr	r3, [pc, #384]	@ (80045e8 <HAL_RCC_OscConfig+0x27c>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d1f0      	bne.n	8004454 <HAL_RCC_OscConfig+0xe8>
 8004472:	e000      	b.n	8004476 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004474:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d075      	beq.n	800456e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004482:	4b59      	ldr	r3, [pc, #356]	@ (80045e8 <HAL_RCC_OscConfig+0x27c>)
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	f003 030c 	and.w	r3, r3, #12
 800448a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800448c:	4b56      	ldr	r3, [pc, #344]	@ (80045e8 <HAL_RCC_OscConfig+0x27c>)
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	f003 0303 	and.w	r3, r3, #3
 8004494:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	2b0c      	cmp	r3, #12
 800449a:	d102      	bne.n	80044a2 <HAL_RCC_OscConfig+0x136>
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d002      	beq.n	80044a8 <HAL_RCC_OscConfig+0x13c>
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	2b04      	cmp	r3, #4
 80044a6:	d11f      	bne.n	80044e8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044a8:	4b4f      	ldr	r3, [pc, #316]	@ (80045e8 <HAL_RCC_OscConfig+0x27c>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d005      	beq.n	80044c0 <HAL_RCC_OscConfig+0x154>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d101      	bne.n	80044c0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e25d      	b.n	800497c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044c0:	4b49      	ldr	r3, [pc, #292]	@ (80045e8 <HAL_RCC_OscConfig+0x27c>)
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	061b      	lsls	r3, r3, #24
 80044ce:	4946      	ldr	r1, [pc, #280]	@ (80045e8 <HAL_RCC_OscConfig+0x27c>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80044d4:	4b45      	ldr	r3, [pc, #276]	@ (80045ec <HAL_RCC_OscConfig+0x280>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4618      	mov	r0, r3
 80044da:	f7fd f903 	bl	80016e4 <HAL_InitTick>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d043      	beq.n	800456c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e249      	b.n	800497c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d023      	beq.n	8004538 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044f0:	4b3d      	ldr	r3, [pc, #244]	@ (80045e8 <HAL_RCC_OscConfig+0x27c>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a3c      	ldr	r2, [pc, #240]	@ (80045e8 <HAL_RCC_OscConfig+0x27c>)
 80044f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044fc:	f7fe f8aa 	bl	8002654 <HAL_GetTick>
 8004500:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004502:	e008      	b.n	8004516 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004504:	f7fe f8a6 	bl	8002654 <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	2b02      	cmp	r3, #2
 8004510:	d901      	bls.n	8004516 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e232      	b.n	800497c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004516:	4b34      	ldr	r3, [pc, #208]	@ (80045e8 <HAL_RCC_OscConfig+0x27c>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800451e:	2b00      	cmp	r3, #0
 8004520:	d0f0      	beq.n	8004504 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004522:	4b31      	ldr	r3, [pc, #196]	@ (80045e8 <HAL_RCC_OscConfig+0x27c>)
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	061b      	lsls	r3, r3, #24
 8004530:	492d      	ldr	r1, [pc, #180]	@ (80045e8 <HAL_RCC_OscConfig+0x27c>)
 8004532:	4313      	orrs	r3, r2
 8004534:	604b      	str	r3, [r1, #4]
 8004536:	e01a      	b.n	800456e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004538:	4b2b      	ldr	r3, [pc, #172]	@ (80045e8 <HAL_RCC_OscConfig+0x27c>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a2a      	ldr	r2, [pc, #168]	@ (80045e8 <HAL_RCC_OscConfig+0x27c>)
 800453e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004542:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004544:	f7fe f886 	bl	8002654 <HAL_GetTick>
 8004548:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800454a:	e008      	b.n	800455e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800454c:	f7fe f882 	bl	8002654 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	2b02      	cmp	r3, #2
 8004558:	d901      	bls.n	800455e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e20e      	b.n	800497c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800455e:	4b22      	ldr	r3, [pc, #136]	@ (80045e8 <HAL_RCC_OscConfig+0x27c>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1f0      	bne.n	800454c <HAL_RCC_OscConfig+0x1e0>
 800456a:	e000      	b.n	800456e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800456c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0308 	and.w	r3, r3, #8
 8004576:	2b00      	cmp	r3, #0
 8004578:	d041      	beq.n	80045fe <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d01c      	beq.n	80045bc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004582:	4b19      	ldr	r3, [pc, #100]	@ (80045e8 <HAL_RCC_OscConfig+0x27c>)
 8004584:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004588:	4a17      	ldr	r2, [pc, #92]	@ (80045e8 <HAL_RCC_OscConfig+0x27c>)
 800458a:	f043 0301 	orr.w	r3, r3, #1
 800458e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004592:	f7fe f85f 	bl	8002654 <HAL_GetTick>
 8004596:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004598:	e008      	b.n	80045ac <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800459a:	f7fe f85b 	bl	8002654 <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d901      	bls.n	80045ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e1e7      	b.n	800497c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80045ac:	4b0e      	ldr	r3, [pc, #56]	@ (80045e8 <HAL_RCC_OscConfig+0x27c>)
 80045ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045b2:	f003 0302 	and.w	r3, r3, #2
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d0ef      	beq.n	800459a <HAL_RCC_OscConfig+0x22e>
 80045ba:	e020      	b.n	80045fe <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045bc:	4b0a      	ldr	r3, [pc, #40]	@ (80045e8 <HAL_RCC_OscConfig+0x27c>)
 80045be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045c2:	4a09      	ldr	r2, [pc, #36]	@ (80045e8 <HAL_RCC_OscConfig+0x27c>)
 80045c4:	f023 0301 	bic.w	r3, r3, #1
 80045c8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045cc:	f7fe f842 	bl	8002654 <HAL_GetTick>
 80045d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045d2:	e00d      	b.n	80045f0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045d4:	f7fe f83e 	bl	8002654 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d906      	bls.n	80045f0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e1ca      	b.n	800497c <HAL_RCC_OscConfig+0x610>
 80045e6:	bf00      	nop
 80045e8:	40021000 	.word	0x40021000
 80045ec:	20000f48 	.word	0x20000f48
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045f0:	4b8c      	ldr	r3, [pc, #560]	@ (8004824 <HAL_RCC_OscConfig+0x4b8>)
 80045f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045f6:	f003 0302 	and.w	r3, r3, #2
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1ea      	bne.n	80045d4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0304 	and.w	r3, r3, #4
 8004606:	2b00      	cmp	r3, #0
 8004608:	f000 80a6 	beq.w	8004758 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800460c:	2300      	movs	r3, #0
 800460e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004610:	4b84      	ldr	r3, [pc, #528]	@ (8004824 <HAL_RCC_OscConfig+0x4b8>)
 8004612:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004614:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d101      	bne.n	8004620 <HAL_RCC_OscConfig+0x2b4>
 800461c:	2301      	movs	r3, #1
 800461e:	e000      	b.n	8004622 <HAL_RCC_OscConfig+0x2b6>
 8004620:	2300      	movs	r3, #0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00d      	beq.n	8004642 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004626:	4b7f      	ldr	r3, [pc, #508]	@ (8004824 <HAL_RCC_OscConfig+0x4b8>)
 8004628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800462a:	4a7e      	ldr	r2, [pc, #504]	@ (8004824 <HAL_RCC_OscConfig+0x4b8>)
 800462c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004630:	6593      	str	r3, [r2, #88]	@ 0x58
 8004632:	4b7c      	ldr	r3, [pc, #496]	@ (8004824 <HAL_RCC_OscConfig+0x4b8>)
 8004634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004636:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800463a:	60fb      	str	r3, [r7, #12]
 800463c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800463e:	2301      	movs	r3, #1
 8004640:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004642:	4b79      	ldr	r3, [pc, #484]	@ (8004828 <HAL_RCC_OscConfig+0x4bc>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800464a:	2b00      	cmp	r3, #0
 800464c:	d118      	bne.n	8004680 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800464e:	4b76      	ldr	r3, [pc, #472]	@ (8004828 <HAL_RCC_OscConfig+0x4bc>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a75      	ldr	r2, [pc, #468]	@ (8004828 <HAL_RCC_OscConfig+0x4bc>)
 8004654:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004658:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800465a:	f7fd fffb 	bl	8002654 <HAL_GetTick>
 800465e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004660:	e008      	b.n	8004674 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004662:	f7fd fff7 	bl	8002654 <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	2b02      	cmp	r3, #2
 800466e:	d901      	bls.n	8004674 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	e183      	b.n	800497c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004674:	4b6c      	ldr	r3, [pc, #432]	@ (8004828 <HAL_RCC_OscConfig+0x4bc>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800467c:	2b00      	cmp	r3, #0
 800467e:	d0f0      	beq.n	8004662 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d108      	bne.n	800469a <HAL_RCC_OscConfig+0x32e>
 8004688:	4b66      	ldr	r3, [pc, #408]	@ (8004824 <HAL_RCC_OscConfig+0x4b8>)
 800468a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800468e:	4a65      	ldr	r2, [pc, #404]	@ (8004824 <HAL_RCC_OscConfig+0x4b8>)
 8004690:	f043 0301 	orr.w	r3, r3, #1
 8004694:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004698:	e024      	b.n	80046e4 <HAL_RCC_OscConfig+0x378>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	2b05      	cmp	r3, #5
 80046a0:	d110      	bne.n	80046c4 <HAL_RCC_OscConfig+0x358>
 80046a2:	4b60      	ldr	r3, [pc, #384]	@ (8004824 <HAL_RCC_OscConfig+0x4b8>)
 80046a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046a8:	4a5e      	ldr	r2, [pc, #376]	@ (8004824 <HAL_RCC_OscConfig+0x4b8>)
 80046aa:	f043 0304 	orr.w	r3, r3, #4
 80046ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80046b2:	4b5c      	ldr	r3, [pc, #368]	@ (8004824 <HAL_RCC_OscConfig+0x4b8>)
 80046b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046b8:	4a5a      	ldr	r2, [pc, #360]	@ (8004824 <HAL_RCC_OscConfig+0x4b8>)
 80046ba:	f043 0301 	orr.w	r3, r3, #1
 80046be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80046c2:	e00f      	b.n	80046e4 <HAL_RCC_OscConfig+0x378>
 80046c4:	4b57      	ldr	r3, [pc, #348]	@ (8004824 <HAL_RCC_OscConfig+0x4b8>)
 80046c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046ca:	4a56      	ldr	r2, [pc, #344]	@ (8004824 <HAL_RCC_OscConfig+0x4b8>)
 80046cc:	f023 0301 	bic.w	r3, r3, #1
 80046d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80046d4:	4b53      	ldr	r3, [pc, #332]	@ (8004824 <HAL_RCC_OscConfig+0x4b8>)
 80046d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046da:	4a52      	ldr	r2, [pc, #328]	@ (8004824 <HAL_RCC_OscConfig+0x4b8>)
 80046dc:	f023 0304 	bic.w	r3, r3, #4
 80046e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d016      	beq.n	800471a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ec:	f7fd ffb2 	bl	8002654 <HAL_GetTick>
 80046f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046f2:	e00a      	b.n	800470a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046f4:	f7fd ffae 	bl	8002654 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004702:	4293      	cmp	r3, r2
 8004704:	d901      	bls.n	800470a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e138      	b.n	800497c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800470a:	4b46      	ldr	r3, [pc, #280]	@ (8004824 <HAL_RCC_OscConfig+0x4b8>)
 800470c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004710:	f003 0302 	and.w	r3, r3, #2
 8004714:	2b00      	cmp	r3, #0
 8004716:	d0ed      	beq.n	80046f4 <HAL_RCC_OscConfig+0x388>
 8004718:	e015      	b.n	8004746 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800471a:	f7fd ff9b 	bl	8002654 <HAL_GetTick>
 800471e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004720:	e00a      	b.n	8004738 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004722:	f7fd ff97 	bl	8002654 <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004730:	4293      	cmp	r3, r2
 8004732:	d901      	bls.n	8004738 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e121      	b.n	800497c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004738:	4b3a      	ldr	r3, [pc, #232]	@ (8004824 <HAL_RCC_OscConfig+0x4b8>)
 800473a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800473e:	f003 0302 	and.w	r3, r3, #2
 8004742:	2b00      	cmp	r3, #0
 8004744:	d1ed      	bne.n	8004722 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004746:	7ffb      	ldrb	r3, [r7, #31]
 8004748:	2b01      	cmp	r3, #1
 800474a:	d105      	bne.n	8004758 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800474c:	4b35      	ldr	r3, [pc, #212]	@ (8004824 <HAL_RCC_OscConfig+0x4b8>)
 800474e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004750:	4a34      	ldr	r2, [pc, #208]	@ (8004824 <HAL_RCC_OscConfig+0x4b8>)
 8004752:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004756:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0320 	and.w	r3, r3, #32
 8004760:	2b00      	cmp	r3, #0
 8004762:	d03c      	beq.n	80047de <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d01c      	beq.n	80047a6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800476c:	4b2d      	ldr	r3, [pc, #180]	@ (8004824 <HAL_RCC_OscConfig+0x4b8>)
 800476e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004772:	4a2c      	ldr	r2, [pc, #176]	@ (8004824 <HAL_RCC_OscConfig+0x4b8>)
 8004774:	f043 0301 	orr.w	r3, r3, #1
 8004778:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800477c:	f7fd ff6a 	bl	8002654 <HAL_GetTick>
 8004780:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004782:	e008      	b.n	8004796 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004784:	f7fd ff66 	bl	8002654 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	2b02      	cmp	r3, #2
 8004790:	d901      	bls.n	8004796 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e0f2      	b.n	800497c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004796:	4b23      	ldr	r3, [pc, #140]	@ (8004824 <HAL_RCC_OscConfig+0x4b8>)
 8004798:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800479c:	f003 0302 	and.w	r3, r3, #2
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d0ef      	beq.n	8004784 <HAL_RCC_OscConfig+0x418>
 80047a4:	e01b      	b.n	80047de <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80047a6:	4b1f      	ldr	r3, [pc, #124]	@ (8004824 <HAL_RCC_OscConfig+0x4b8>)
 80047a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80047ac:	4a1d      	ldr	r2, [pc, #116]	@ (8004824 <HAL_RCC_OscConfig+0x4b8>)
 80047ae:	f023 0301 	bic.w	r3, r3, #1
 80047b2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047b6:	f7fd ff4d 	bl	8002654 <HAL_GetTick>
 80047ba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80047bc:	e008      	b.n	80047d0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80047be:	f7fd ff49 	bl	8002654 <HAL_GetTick>
 80047c2:	4602      	mov	r2, r0
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d901      	bls.n	80047d0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e0d5      	b.n	800497c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80047d0:	4b14      	ldr	r3, [pc, #80]	@ (8004824 <HAL_RCC_OscConfig+0x4b8>)
 80047d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80047d6:	f003 0302 	and.w	r3, r3, #2
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1ef      	bne.n	80047be <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	69db      	ldr	r3, [r3, #28]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f000 80c9 	beq.w	800497a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047e8:	4b0e      	ldr	r3, [pc, #56]	@ (8004824 <HAL_RCC_OscConfig+0x4b8>)
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f003 030c 	and.w	r3, r3, #12
 80047f0:	2b0c      	cmp	r3, #12
 80047f2:	f000 8083 	beq.w	80048fc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	69db      	ldr	r3, [r3, #28]
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d15e      	bne.n	80048bc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047fe:	4b09      	ldr	r3, [pc, #36]	@ (8004824 <HAL_RCC_OscConfig+0x4b8>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a08      	ldr	r2, [pc, #32]	@ (8004824 <HAL_RCC_OscConfig+0x4b8>)
 8004804:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004808:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800480a:	f7fd ff23 	bl	8002654 <HAL_GetTick>
 800480e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004810:	e00c      	b.n	800482c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004812:	f7fd ff1f 	bl	8002654 <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	2b02      	cmp	r3, #2
 800481e:	d905      	bls.n	800482c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e0ab      	b.n	800497c <HAL_RCC_OscConfig+0x610>
 8004824:	40021000 	.word	0x40021000
 8004828:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800482c:	4b55      	ldr	r3, [pc, #340]	@ (8004984 <HAL_RCC_OscConfig+0x618>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d1ec      	bne.n	8004812 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004838:	4b52      	ldr	r3, [pc, #328]	@ (8004984 <HAL_RCC_OscConfig+0x618>)
 800483a:	68da      	ldr	r2, [r3, #12]
 800483c:	4b52      	ldr	r3, [pc, #328]	@ (8004988 <HAL_RCC_OscConfig+0x61c>)
 800483e:	4013      	ands	r3, r2
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	6a11      	ldr	r1, [r2, #32]
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004848:	3a01      	subs	r2, #1
 800484a:	0112      	lsls	r2, r2, #4
 800484c:	4311      	orrs	r1, r2
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004852:	0212      	lsls	r2, r2, #8
 8004854:	4311      	orrs	r1, r2
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800485a:	0852      	lsrs	r2, r2, #1
 800485c:	3a01      	subs	r2, #1
 800485e:	0552      	lsls	r2, r2, #21
 8004860:	4311      	orrs	r1, r2
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004866:	0852      	lsrs	r2, r2, #1
 8004868:	3a01      	subs	r2, #1
 800486a:	0652      	lsls	r2, r2, #25
 800486c:	4311      	orrs	r1, r2
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004872:	06d2      	lsls	r2, r2, #27
 8004874:	430a      	orrs	r2, r1
 8004876:	4943      	ldr	r1, [pc, #268]	@ (8004984 <HAL_RCC_OscConfig+0x618>)
 8004878:	4313      	orrs	r3, r2
 800487a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800487c:	4b41      	ldr	r3, [pc, #260]	@ (8004984 <HAL_RCC_OscConfig+0x618>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a40      	ldr	r2, [pc, #256]	@ (8004984 <HAL_RCC_OscConfig+0x618>)
 8004882:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004886:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004888:	4b3e      	ldr	r3, [pc, #248]	@ (8004984 <HAL_RCC_OscConfig+0x618>)
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	4a3d      	ldr	r2, [pc, #244]	@ (8004984 <HAL_RCC_OscConfig+0x618>)
 800488e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004892:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004894:	f7fd fede 	bl	8002654 <HAL_GetTick>
 8004898:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800489a:	e008      	b.n	80048ae <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800489c:	f7fd feda 	bl	8002654 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e066      	b.n	800497c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048ae:	4b35      	ldr	r3, [pc, #212]	@ (8004984 <HAL_RCC_OscConfig+0x618>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d0f0      	beq.n	800489c <HAL_RCC_OscConfig+0x530>
 80048ba:	e05e      	b.n	800497a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048bc:	4b31      	ldr	r3, [pc, #196]	@ (8004984 <HAL_RCC_OscConfig+0x618>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a30      	ldr	r2, [pc, #192]	@ (8004984 <HAL_RCC_OscConfig+0x618>)
 80048c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80048c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048c8:	f7fd fec4 	bl	8002654 <HAL_GetTick>
 80048cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048ce:	e008      	b.n	80048e2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048d0:	f7fd fec0 	bl	8002654 <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d901      	bls.n	80048e2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e04c      	b.n	800497c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048e2:	4b28      	ldr	r3, [pc, #160]	@ (8004984 <HAL_RCC_OscConfig+0x618>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d1f0      	bne.n	80048d0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80048ee:	4b25      	ldr	r3, [pc, #148]	@ (8004984 <HAL_RCC_OscConfig+0x618>)
 80048f0:	68da      	ldr	r2, [r3, #12]
 80048f2:	4924      	ldr	r1, [pc, #144]	@ (8004984 <HAL_RCC_OscConfig+0x618>)
 80048f4:	4b25      	ldr	r3, [pc, #148]	@ (800498c <HAL_RCC_OscConfig+0x620>)
 80048f6:	4013      	ands	r3, r2
 80048f8:	60cb      	str	r3, [r1, #12]
 80048fa:	e03e      	b.n	800497a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	69db      	ldr	r3, [r3, #28]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d101      	bne.n	8004908 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e039      	b.n	800497c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004908:	4b1e      	ldr	r3, [pc, #120]	@ (8004984 <HAL_RCC_OscConfig+0x618>)
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	f003 0203 	and.w	r2, r3, #3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a1b      	ldr	r3, [r3, #32]
 8004918:	429a      	cmp	r2, r3
 800491a:	d12c      	bne.n	8004976 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004926:	3b01      	subs	r3, #1
 8004928:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800492a:	429a      	cmp	r2, r3
 800492c:	d123      	bne.n	8004976 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004938:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800493a:	429a      	cmp	r2, r3
 800493c:	d11b      	bne.n	8004976 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004948:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800494a:	429a      	cmp	r2, r3
 800494c:	d113      	bne.n	8004976 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004958:	085b      	lsrs	r3, r3, #1
 800495a:	3b01      	subs	r3, #1
 800495c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800495e:	429a      	cmp	r2, r3
 8004960:	d109      	bne.n	8004976 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800496c:	085b      	lsrs	r3, r3, #1
 800496e:	3b01      	subs	r3, #1
 8004970:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004972:	429a      	cmp	r2, r3
 8004974:	d001      	beq.n	800497a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e000      	b.n	800497c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3720      	adds	r7, #32
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	40021000 	.word	0x40021000
 8004988:	019f800c 	.word	0x019f800c
 800498c:	feeefffc 	.word	0xfeeefffc

08004990 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b086      	sub	sp, #24
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800499a:	2300      	movs	r3, #0
 800499c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d101      	bne.n	80049a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e11e      	b.n	8004be6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049a8:	4b91      	ldr	r3, [pc, #580]	@ (8004bf0 <HAL_RCC_ClockConfig+0x260>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 030f 	and.w	r3, r3, #15
 80049b0:	683a      	ldr	r2, [r7, #0]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d910      	bls.n	80049d8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049b6:	4b8e      	ldr	r3, [pc, #568]	@ (8004bf0 <HAL_RCC_ClockConfig+0x260>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f023 020f 	bic.w	r2, r3, #15
 80049be:	498c      	ldr	r1, [pc, #560]	@ (8004bf0 <HAL_RCC_ClockConfig+0x260>)
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049c6:	4b8a      	ldr	r3, [pc, #552]	@ (8004bf0 <HAL_RCC_ClockConfig+0x260>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 030f 	and.w	r3, r3, #15
 80049ce:	683a      	ldr	r2, [r7, #0]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d001      	beq.n	80049d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e106      	b.n	8004be6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0301 	and.w	r3, r3, #1
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d073      	beq.n	8004acc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	2b03      	cmp	r3, #3
 80049ea:	d129      	bne.n	8004a40 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049ec:	4b81      	ldr	r3, [pc, #516]	@ (8004bf4 <HAL_RCC_ClockConfig+0x264>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d101      	bne.n	80049fc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e0f4      	b.n	8004be6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80049fc:	f000 f9d0 	bl	8004da0 <RCC_GetSysClockFreqFromPLLSource>
 8004a00:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	4a7c      	ldr	r2, [pc, #496]	@ (8004bf8 <HAL_RCC_ClockConfig+0x268>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d93f      	bls.n	8004a8a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004a0a:	4b7a      	ldr	r3, [pc, #488]	@ (8004bf4 <HAL_RCC_ClockConfig+0x264>)
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d009      	beq.n	8004a2a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d033      	beq.n	8004a8a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d12f      	bne.n	8004a8a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004a2a:	4b72      	ldr	r3, [pc, #456]	@ (8004bf4 <HAL_RCC_ClockConfig+0x264>)
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a32:	4a70      	ldr	r2, [pc, #448]	@ (8004bf4 <HAL_RCC_ClockConfig+0x264>)
 8004a34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a38:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004a3a:	2380      	movs	r3, #128	@ 0x80
 8004a3c:	617b      	str	r3, [r7, #20]
 8004a3e:	e024      	b.n	8004a8a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d107      	bne.n	8004a58 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a48:	4b6a      	ldr	r3, [pc, #424]	@ (8004bf4 <HAL_RCC_ClockConfig+0x264>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d109      	bne.n	8004a68 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e0c6      	b.n	8004be6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a58:	4b66      	ldr	r3, [pc, #408]	@ (8004bf4 <HAL_RCC_ClockConfig+0x264>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d101      	bne.n	8004a68 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e0be      	b.n	8004be6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004a68:	f000 f8ce 	bl	8004c08 <HAL_RCC_GetSysClockFreq>
 8004a6c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	4a61      	ldr	r2, [pc, #388]	@ (8004bf8 <HAL_RCC_ClockConfig+0x268>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d909      	bls.n	8004a8a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004a76:	4b5f      	ldr	r3, [pc, #380]	@ (8004bf4 <HAL_RCC_ClockConfig+0x264>)
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a7e:	4a5d      	ldr	r2, [pc, #372]	@ (8004bf4 <HAL_RCC_ClockConfig+0x264>)
 8004a80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a84:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004a86:	2380      	movs	r3, #128	@ 0x80
 8004a88:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a8a:	4b5a      	ldr	r3, [pc, #360]	@ (8004bf4 <HAL_RCC_ClockConfig+0x264>)
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f023 0203 	bic.w	r2, r3, #3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	4957      	ldr	r1, [pc, #348]	@ (8004bf4 <HAL_RCC_ClockConfig+0x264>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a9c:	f7fd fdda 	bl	8002654 <HAL_GetTick>
 8004aa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aa2:	e00a      	b.n	8004aba <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004aa4:	f7fd fdd6 	bl	8002654 <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d901      	bls.n	8004aba <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e095      	b.n	8004be6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aba:	4b4e      	ldr	r3, [pc, #312]	@ (8004bf4 <HAL_RCC_ClockConfig+0x264>)
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	f003 020c 	and.w	r2, r3, #12
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d1eb      	bne.n	8004aa4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0302 	and.w	r3, r3, #2
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d023      	beq.n	8004b20 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0304 	and.w	r3, r3, #4
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d005      	beq.n	8004af0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ae4:	4b43      	ldr	r3, [pc, #268]	@ (8004bf4 <HAL_RCC_ClockConfig+0x264>)
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	4a42      	ldr	r2, [pc, #264]	@ (8004bf4 <HAL_RCC_ClockConfig+0x264>)
 8004aea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004aee:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0308 	and.w	r3, r3, #8
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d007      	beq.n	8004b0c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004afc:	4b3d      	ldr	r3, [pc, #244]	@ (8004bf4 <HAL_RCC_ClockConfig+0x264>)
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004b04:	4a3b      	ldr	r2, [pc, #236]	@ (8004bf4 <HAL_RCC_ClockConfig+0x264>)
 8004b06:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004b0a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b0c:	4b39      	ldr	r3, [pc, #228]	@ (8004bf4 <HAL_RCC_ClockConfig+0x264>)
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	4936      	ldr	r1, [pc, #216]	@ (8004bf4 <HAL_RCC_ClockConfig+0x264>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	608b      	str	r3, [r1, #8]
 8004b1e:	e008      	b.n	8004b32 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	2b80      	cmp	r3, #128	@ 0x80
 8004b24:	d105      	bne.n	8004b32 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004b26:	4b33      	ldr	r3, [pc, #204]	@ (8004bf4 <HAL_RCC_ClockConfig+0x264>)
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	4a32      	ldr	r2, [pc, #200]	@ (8004bf4 <HAL_RCC_ClockConfig+0x264>)
 8004b2c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b30:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b32:	4b2f      	ldr	r3, [pc, #188]	@ (8004bf0 <HAL_RCC_ClockConfig+0x260>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 030f 	and.w	r3, r3, #15
 8004b3a:	683a      	ldr	r2, [r7, #0]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d21d      	bcs.n	8004b7c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b40:	4b2b      	ldr	r3, [pc, #172]	@ (8004bf0 <HAL_RCC_ClockConfig+0x260>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f023 020f 	bic.w	r2, r3, #15
 8004b48:	4929      	ldr	r1, [pc, #164]	@ (8004bf0 <HAL_RCC_ClockConfig+0x260>)
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004b50:	f7fd fd80 	bl	8002654 <HAL_GetTick>
 8004b54:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b56:	e00a      	b.n	8004b6e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b58:	f7fd fd7c 	bl	8002654 <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d901      	bls.n	8004b6e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e03b      	b.n	8004be6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b6e:	4b20      	ldr	r3, [pc, #128]	@ (8004bf0 <HAL_RCC_ClockConfig+0x260>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 030f 	and.w	r3, r3, #15
 8004b76:	683a      	ldr	r2, [r7, #0]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d1ed      	bne.n	8004b58 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0304 	and.w	r3, r3, #4
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d008      	beq.n	8004b9a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b88:	4b1a      	ldr	r3, [pc, #104]	@ (8004bf4 <HAL_RCC_ClockConfig+0x264>)
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	4917      	ldr	r1, [pc, #92]	@ (8004bf4 <HAL_RCC_ClockConfig+0x264>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0308 	and.w	r3, r3, #8
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d009      	beq.n	8004bba <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ba6:	4b13      	ldr	r3, [pc, #76]	@ (8004bf4 <HAL_RCC_ClockConfig+0x264>)
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	00db      	lsls	r3, r3, #3
 8004bb4:	490f      	ldr	r1, [pc, #60]	@ (8004bf4 <HAL_RCC_ClockConfig+0x264>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004bba:	f000 f825 	bl	8004c08 <HAL_RCC_GetSysClockFreq>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8004bf4 <HAL_RCC_ClockConfig+0x264>)
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	091b      	lsrs	r3, r3, #4
 8004bc6:	f003 030f 	and.w	r3, r3, #15
 8004bca:	490c      	ldr	r1, [pc, #48]	@ (8004bfc <HAL_RCC_ClockConfig+0x26c>)
 8004bcc:	5ccb      	ldrb	r3, [r1, r3]
 8004bce:	f003 031f 	and.w	r3, r3, #31
 8004bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8004bd6:	4a0a      	ldr	r2, [pc, #40]	@ (8004c00 <HAL_RCC_ClockConfig+0x270>)
 8004bd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004bda:	4b0a      	ldr	r3, [pc, #40]	@ (8004c04 <HAL_RCC_ClockConfig+0x274>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4618      	mov	r0, r3
 8004be0:	f7fc fd80 	bl	80016e4 <HAL_InitTick>
 8004be4:	4603      	mov	r3, r0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3718      	adds	r7, #24
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	40022000 	.word	0x40022000
 8004bf4:	40021000 	.word	0x40021000
 8004bf8:	04c4b400 	.word	0x04c4b400
 8004bfc:	0800cc48 	.word	0x0800cc48
 8004c00:	20000f44 	.word	0x20000f44
 8004c04:	20000f48 	.word	0x20000f48

08004c08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b087      	sub	sp, #28
 8004c0c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004c0e:	4b2c      	ldr	r3, [pc, #176]	@ (8004cc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f003 030c 	and.w	r3, r3, #12
 8004c16:	2b04      	cmp	r3, #4
 8004c18:	d102      	bne.n	8004c20 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004c1a:	4b2a      	ldr	r3, [pc, #168]	@ (8004cc4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004c1c:	613b      	str	r3, [r7, #16]
 8004c1e:	e047      	b.n	8004cb0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004c20:	4b27      	ldr	r3, [pc, #156]	@ (8004cc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	f003 030c 	and.w	r3, r3, #12
 8004c28:	2b08      	cmp	r3, #8
 8004c2a:	d102      	bne.n	8004c32 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004c2c:	4b26      	ldr	r3, [pc, #152]	@ (8004cc8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004c2e:	613b      	str	r3, [r7, #16]
 8004c30:	e03e      	b.n	8004cb0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004c32:	4b23      	ldr	r3, [pc, #140]	@ (8004cc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f003 030c 	and.w	r3, r3, #12
 8004c3a:	2b0c      	cmp	r3, #12
 8004c3c:	d136      	bne.n	8004cac <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c3e:	4b20      	ldr	r3, [pc, #128]	@ (8004cc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	f003 0303 	and.w	r3, r3, #3
 8004c46:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c48:	4b1d      	ldr	r3, [pc, #116]	@ (8004cc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	091b      	lsrs	r3, r3, #4
 8004c4e:	f003 030f 	and.w	r3, r3, #15
 8004c52:	3301      	adds	r3, #1
 8004c54:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2b03      	cmp	r3, #3
 8004c5a:	d10c      	bne.n	8004c76 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c5c:	4a1a      	ldr	r2, [pc, #104]	@ (8004cc8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c64:	4a16      	ldr	r2, [pc, #88]	@ (8004cc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c66:	68d2      	ldr	r2, [r2, #12]
 8004c68:	0a12      	lsrs	r2, r2, #8
 8004c6a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004c6e:	fb02 f303 	mul.w	r3, r2, r3
 8004c72:	617b      	str	r3, [r7, #20]
      break;
 8004c74:	e00c      	b.n	8004c90 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c76:	4a13      	ldr	r2, [pc, #76]	@ (8004cc4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c7e:	4a10      	ldr	r2, [pc, #64]	@ (8004cc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c80:	68d2      	ldr	r2, [r2, #12]
 8004c82:	0a12      	lsrs	r2, r2, #8
 8004c84:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004c88:	fb02 f303 	mul.w	r3, r2, r3
 8004c8c:	617b      	str	r3, [r7, #20]
      break;
 8004c8e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c90:	4b0b      	ldr	r3, [pc, #44]	@ (8004cc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	0e5b      	lsrs	r3, r3, #25
 8004c96:	f003 0303 	and.w	r3, r3, #3
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	005b      	lsls	r3, r3, #1
 8004c9e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004ca0:	697a      	ldr	r2, [r7, #20]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ca8:	613b      	str	r3, [r7, #16]
 8004caa:	e001      	b.n	8004cb0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004cac:	2300      	movs	r3, #0
 8004cae:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004cb0:	693b      	ldr	r3, [r7, #16]
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	371c      	adds	r7, #28
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	40021000 	.word	0x40021000
 8004cc4:	00f42400 	.word	0x00f42400
 8004cc8:	007a1200 	.word	0x007a1200

08004ccc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cd0:	4b03      	ldr	r3, [pc, #12]	@ (8004ce0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	20000f44 	.word	0x20000f44

08004ce4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004ce8:	f7ff fff0 	bl	8004ccc <HAL_RCC_GetHCLKFreq>
 8004cec:	4602      	mov	r2, r0
 8004cee:	4b06      	ldr	r3, [pc, #24]	@ (8004d08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	0a1b      	lsrs	r3, r3, #8
 8004cf4:	f003 0307 	and.w	r3, r3, #7
 8004cf8:	4904      	ldr	r1, [pc, #16]	@ (8004d0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004cfa:	5ccb      	ldrb	r3, [r1, r3]
 8004cfc:	f003 031f 	and.w	r3, r3, #31
 8004d00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	40021000 	.word	0x40021000
 8004d0c:	0800cc58 	.word	0x0800cc58

08004d10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004d14:	f7ff ffda 	bl	8004ccc <HAL_RCC_GetHCLKFreq>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	4b06      	ldr	r3, [pc, #24]	@ (8004d34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	0adb      	lsrs	r3, r3, #11
 8004d20:	f003 0307 	and.w	r3, r3, #7
 8004d24:	4904      	ldr	r1, [pc, #16]	@ (8004d38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d26:	5ccb      	ldrb	r3, [r1, r3]
 8004d28:	f003 031f 	and.w	r3, r3, #31
 8004d2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	40021000 	.word	0x40021000
 8004d38:	0800cc58 	.word	0x0800cc58

08004d3c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	220f      	movs	r2, #15
 8004d4a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004d4c:	4b12      	ldr	r3, [pc, #72]	@ (8004d98 <HAL_RCC_GetClockConfig+0x5c>)
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	f003 0203 	and.w	r2, r3, #3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004d58:	4b0f      	ldr	r3, [pc, #60]	@ (8004d98 <HAL_RCC_GetClockConfig+0x5c>)
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004d64:	4b0c      	ldr	r3, [pc, #48]	@ (8004d98 <HAL_RCC_GetClockConfig+0x5c>)
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004d70:	4b09      	ldr	r3, [pc, #36]	@ (8004d98 <HAL_RCC_GetClockConfig+0x5c>)
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	08db      	lsrs	r3, r3, #3
 8004d76:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004d7e:	4b07      	ldr	r3, [pc, #28]	@ (8004d9c <HAL_RCC_GetClockConfig+0x60>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 020f 	and.w	r2, r3, #15
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	601a      	str	r2, [r3, #0]
}
 8004d8a:	bf00      	nop
 8004d8c:	370c      	adds	r7, #12
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
 8004d96:	bf00      	nop
 8004d98:	40021000 	.word	0x40021000
 8004d9c:	40022000 	.word	0x40022000

08004da0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b087      	sub	sp, #28
 8004da4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004da6:	4b1e      	ldr	r3, [pc, #120]	@ (8004e20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	f003 0303 	and.w	r3, r3, #3
 8004dae:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004db0:	4b1b      	ldr	r3, [pc, #108]	@ (8004e20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	091b      	lsrs	r3, r3, #4
 8004db6:	f003 030f 	and.w	r3, r3, #15
 8004dba:	3301      	adds	r3, #1
 8004dbc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	2b03      	cmp	r3, #3
 8004dc2:	d10c      	bne.n	8004dde <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004dc4:	4a17      	ldr	r2, [pc, #92]	@ (8004e24 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dcc:	4a14      	ldr	r2, [pc, #80]	@ (8004e20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004dce:	68d2      	ldr	r2, [r2, #12]
 8004dd0:	0a12      	lsrs	r2, r2, #8
 8004dd2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004dd6:	fb02 f303 	mul.w	r3, r2, r3
 8004dda:	617b      	str	r3, [r7, #20]
    break;
 8004ddc:	e00c      	b.n	8004df8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004dde:	4a12      	ldr	r2, [pc, #72]	@ (8004e28 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004de6:	4a0e      	ldr	r2, [pc, #56]	@ (8004e20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004de8:	68d2      	ldr	r2, [r2, #12]
 8004dea:	0a12      	lsrs	r2, r2, #8
 8004dec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004df0:	fb02 f303 	mul.w	r3, r2, r3
 8004df4:	617b      	str	r3, [r7, #20]
    break;
 8004df6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004df8:	4b09      	ldr	r3, [pc, #36]	@ (8004e20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	0e5b      	lsrs	r3, r3, #25
 8004dfe:	f003 0303 	and.w	r3, r3, #3
 8004e02:	3301      	adds	r3, #1
 8004e04:	005b      	lsls	r3, r3, #1
 8004e06:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004e08:	697a      	ldr	r2, [r7, #20]
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e10:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004e12:	687b      	ldr	r3, [r7, #4]
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	371c      	adds	r7, #28
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr
 8004e20:	40021000 	.word	0x40021000
 8004e24:	007a1200 	.word	0x007a1200
 8004e28:	00f42400 	.word	0x00f42400

08004e2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b086      	sub	sp, #24
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e34:	2300      	movs	r3, #0
 8004e36:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e38:	2300      	movs	r3, #0
 8004e3a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	f000 8098 	beq.w	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e4e:	4b43      	ldr	r3, [pc, #268]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d10d      	bne.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e5a:	4b40      	ldr	r3, [pc, #256]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e5e:	4a3f      	ldr	r2, [pc, #252]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e64:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e66:	4b3d      	ldr	r3, [pc, #244]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e6e:	60bb      	str	r3, [r7, #8]
 8004e70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e72:	2301      	movs	r3, #1
 8004e74:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e76:	4b3a      	ldr	r3, [pc, #232]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a39      	ldr	r2, [pc, #228]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004e7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e80:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e82:	f7fd fbe7 	bl	8002654 <HAL_GetTick>
 8004e86:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e88:	e009      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e8a:	f7fd fbe3 	bl	8002654 <HAL_GetTick>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d902      	bls.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	74fb      	strb	r3, [r7, #19]
        break;
 8004e9c:	e005      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e9e:	4b30      	ldr	r3, [pc, #192]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d0ef      	beq.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004eaa:	7cfb      	ldrb	r3, [r7, #19]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d159      	bne.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004eb0:	4b2a      	ldr	r3, [pc, #168]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004eba:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d01e      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ec6:	697a      	ldr	r2, [r7, #20]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d019      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ecc:	4b23      	ldr	r3, [pc, #140]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ed2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ed6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ed8:	4b20      	ldr	r3, [pc, #128]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ede:	4a1f      	ldr	r2, [pc, #124]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ee0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ee4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ee8:	4b1c      	ldr	r3, [pc, #112]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eee:	4a1b      	ldr	r2, [pc, #108]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ef0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ef4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004ef8:	4a18      	ldr	r2, [pc, #96]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	f003 0301 	and.w	r3, r3, #1
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d016      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f0a:	f7fd fba3 	bl	8002654 <HAL_GetTick>
 8004f0e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f10:	e00b      	b.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f12:	f7fd fb9f 	bl	8002654 <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d902      	bls.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	74fb      	strb	r3, [r7, #19]
            break;
 8004f28:	e006      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f2a:	4b0c      	ldr	r3, [pc, #48]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f30:	f003 0302 	and.w	r3, r3, #2
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d0ec      	beq.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004f38:	7cfb      	ldrb	r3, [r7, #19]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d10b      	bne.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f3e:	4b07      	ldr	r3, [pc, #28]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f44:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f4c:	4903      	ldr	r1, [pc, #12]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004f54:	e008      	b.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f56:	7cfb      	ldrb	r3, [r7, #19]
 8004f58:	74bb      	strb	r3, [r7, #18]
 8004f5a:	e005      	b.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004f5c:	40021000 	.word	0x40021000
 8004f60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f64:	7cfb      	ldrb	r3, [r7, #19]
 8004f66:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f68:	7c7b      	ldrb	r3, [r7, #17]
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d105      	bne.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f6e:	4ba6      	ldr	r3, [pc, #664]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f72:	4aa5      	ldr	r2, [pc, #660]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f78:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0301 	and.w	r3, r3, #1
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d00a      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f86:	4ba0      	ldr	r3, [pc, #640]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f8c:	f023 0203 	bic.w	r2, r3, #3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	499c      	ldr	r1, [pc, #624]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f96:	4313      	orrs	r3, r2
 8004f98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0302 	and.w	r3, r3, #2
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d00a      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004fa8:	4b97      	ldr	r3, [pc, #604]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fae:	f023 020c 	bic.w	r2, r3, #12
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	4994      	ldr	r1, [pc, #592]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0304 	and.w	r3, r3, #4
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00a      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004fca:	4b8f      	ldr	r3, [pc, #572]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fd0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	498b      	ldr	r1, [pc, #556]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0308 	and.w	r3, r3, #8
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d00a      	beq.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004fec:	4b86      	ldr	r3, [pc, #536]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ff2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	4983      	ldr	r1, [pc, #524]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0320 	and.w	r3, r3, #32
 800500a:	2b00      	cmp	r3, #0
 800500c:	d00a      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800500e:	4b7e      	ldr	r3, [pc, #504]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005010:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005014:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	695b      	ldr	r3, [r3, #20]
 800501c:	497a      	ldr	r1, [pc, #488]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800501e:	4313      	orrs	r3, r2
 8005020:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800502c:	2b00      	cmp	r3, #0
 800502e:	d00a      	beq.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005030:	4b75      	ldr	r3, [pc, #468]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005032:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005036:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	699b      	ldr	r3, [r3, #24]
 800503e:	4972      	ldr	r1, [pc, #456]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005040:	4313      	orrs	r3, r2
 8005042:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00a      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005052:	4b6d      	ldr	r3, [pc, #436]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005054:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005058:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	69db      	ldr	r3, [r3, #28]
 8005060:	4969      	ldr	r1, [pc, #420]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005062:	4313      	orrs	r3, r2
 8005064:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005070:	2b00      	cmp	r3, #0
 8005072:	d00a      	beq.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005074:	4b64      	ldr	r3, [pc, #400]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005076:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800507a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a1b      	ldr	r3, [r3, #32]
 8005082:	4961      	ldr	r1, [pc, #388]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005084:	4313      	orrs	r3, r2
 8005086:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00a      	beq.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005096:	4b5c      	ldr	r3, [pc, #368]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005098:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800509c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050a4:	4958      	ldr	r1, [pc, #352]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050a6:	4313      	orrs	r3, r2
 80050a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d015      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050b8:	4b53      	ldr	r3, [pc, #332]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050c6:	4950      	ldr	r1, [pc, #320]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050c8:	4313      	orrs	r3, r2
 80050ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050d6:	d105      	bne.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050d8:	4b4b      	ldr	r3, [pc, #300]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	4a4a      	ldr	r2, [pc, #296]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80050e2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d015      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80050f0:	4b45      	ldr	r3, [pc, #276]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050f6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050fe:	4942      	ldr	r1, [pc, #264]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005100:	4313      	orrs	r3, r2
 8005102:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800510a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800510e:	d105      	bne.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005110:	4b3d      	ldr	r3, [pc, #244]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	4a3c      	ldr	r2, [pc, #240]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005116:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800511a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d015      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005128:	4b37      	ldr	r3, [pc, #220]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800512a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800512e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005136:	4934      	ldr	r1, [pc, #208]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005138:	4313      	orrs	r3, r2
 800513a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005142:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005146:	d105      	bne.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005148:	4b2f      	ldr	r3, [pc, #188]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	4a2e      	ldr	r2, [pc, #184]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800514e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005152:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800515c:	2b00      	cmp	r3, #0
 800515e:	d015      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005160:	4b29      	ldr	r3, [pc, #164]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005162:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005166:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800516e:	4926      	ldr	r1, [pc, #152]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005170:	4313      	orrs	r3, r2
 8005172:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800517a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800517e:	d105      	bne.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005180:	4b21      	ldr	r3, [pc, #132]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	4a20      	ldr	r2, [pc, #128]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005186:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800518a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d015      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005198:	4b1b      	ldr	r3, [pc, #108]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800519a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800519e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051a6:	4918      	ldr	r1, [pc, #96]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051a8:	4313      	orrs	r3, r2
 80051aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80051b6:	d105      	bne.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051b8:	4b13      	ldr	r3, [pc, #76]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	4a12      	ldr	r2, [pc, #72]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051c2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d015      	beq.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80051d0:	4b0d      	ldr	r3, [pc, #52]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051d6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051de:	490a      	ldr	r1, [pc, #40]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051e0:	4313      	orrs	r3, r2
 80051e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80051ee:	d105      	bne.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80051f0:	4b05      	ldr	r3, [pc, #20]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	4a04      	ldr	r2, [pc, #16]	@ (8005208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051fa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80051fc:	7cbb      	ldrb	r3, [r7, #18]
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3718      	adds	r7, #24
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	40021000 	.word	0x40021000

0800520c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d101      	bne.n	800521e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e09d      	b.n	800535a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005222:	2b00      	cmp	r3, #0
 8005224:	d108      	bne.n	8005238 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800522e:	d009      	beq.n	8005244 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	61da      	str	r2, [r3, #28]
 8005236:	e005      	b.n	8005244 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005250:	b2db      	uxtb	r3, r3
 8005252:	2b00      	cmp	r3, #0
 8005254:	d106      	bne.n	8005264 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f7fc f9da 	bl	8001618 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2202      	movs	r2, #2
 8005268:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800527a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005284:	d902      	bls.n	800528c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005286:	2300      	movs	r3, #0
 8005288:	60fb      	str	r3, [r7, #12]
 800528a:	e002      	b.n	8005292 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800528c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005290:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800529a:	d007      	beq.n	80052ac <HAL_SPI_Init+0xa0>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80052a4:	d002      	beq.n	80052ac <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80052bc:	431a      	orrs	r2, r3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	f003 0302 	and.w	r3, r3, #2
 80052c6:	431a      	orrs	r2, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	695b      	ldr	r3, [r3, #20]
 80052cc:	f003 0301 	and.w	r3, r3, #1
 80052d0:	431a      	orrs	r2, r3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	699b      	ldr	r3, [r3, #24]
 80052d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052da:	431a      	orrs	r2, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	69db      	ldr	r3, [r3, #28]
 80052e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80052e4:	431a      	orrs	r2, r3
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a1b      	ldr	r3, [r3, #32]
 80052ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052ee:	ea42 0103 	orr.w	r1, r2, r3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052f6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	430a      	orrs	r2, r1
 8005300:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	699b      	ldr	r3, [r3, #24]
 8005306:	0c1b      	lsrs	r3, r3, #16
 8005308:	f003 0204 	and.w	r2, r3, #4
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005310:	f003 0310 	and.w	r3, r3, #16
 8005314:	431a      	orrs	r2, r3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800531a:	f003 0308 	and.w	r3, r3, #8
 800531e:	431a      	orrs	r2, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005328:	ea42 0103 	orr.w	r1, r2, r3
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	430a      	orrs	r2, r1
 8005338:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	69da      	ldr	r2, [r3, #28]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005348:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3710      	adds	r7, #16
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}

08005362 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005362:	b580      	push	{r7, lr}
 8005364:	b082      	sub	sp, #8
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d101      	bne.n	8005374 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	e049      	b.n	8005408 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800537a:	b2db      	uxtb	r3, r3
 800537c:	2b00      	cmp	r3, #0
 800537e:	d106      	bne.n	800538e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f7fc fcb1 	bl	8001cf0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2202      	movs	r2, #2
 8005392:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	3304      	adds	r3, #4
 800539e:	4619      	mov	r1, r3
 80053a0:	4610      	mov	r0, r2
 80053a2:	f000 fd2b 	bl	8005dfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2201      	movs	r2, #1
 80053aa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2201      	movs	r2, #1
 80053b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2201      	movs	r2, #1
 80053ba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2201      	movs	r2, #1
 80053d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2201      	movs	r2, #1
 80053da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2201      	movs	r2, #1
 80053ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2201      	movs	r2, #1
 80053fa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2201      	movs	r2, #1
 8005402:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3708      	adds	r7, #8
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005410:	b480      	push	{r7}
 8005412:	b085      	sub	sp, #20
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800541e:	b2db      	uxtb	r3, r3
 8005420:	2b01      	cmp	r3, #1
 8005422:	d001      	beq.n	8005428 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e04a      	b.n	80054be <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2202      	movs	r2, #2
 800542c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68da      	ldr	r2, [r3, #12]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f042 0201 	orr.w	r2, r2, #1
 800543e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a21      	ldr	r2, [pc, #132]	@ (80054cc <HAL_TIM_Base_Start_IT+0xbc>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d018      	beq.n	800547c <HAL_TIM_Base_Start_IT+0x6c>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005452:	d013      	beq.n	800547c <HAL_TIM_Base_Start_IT+0x6c>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a1d      	ldr	r2, [pc, #116]	@ (80054d0 <HAL_TIM_Base_Start_IT+0xc0>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d00e      	beq.n	800547c <HAL_TIM_Base_Start_IT+0x6c>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a1c      	ldr	r2, [pc, #112]	@ (80054d4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d009      	beq.n	800547c <HAL_TIM_Base_Start_IT+0x6c>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a1a      	ldr	r2, [pc, #104]	@ (80054d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d004      	beq.n	800547c <HAL_TIM_Base_Start_IT+0x6c>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a19      	ldr	r2, [pc, #100]	@ (80054dc <HAL_TIM_Base_Start_IT+0xcc>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d115      	bne.n	80054a8 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	689a      	ldr	r2, [r3, #8]
 8005482:	4b17      	ldr	r3, [pc, #92]	@ (80054e0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005484:	4013      	ands	r3, r2
 8005486:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2b06      	cmp	r3, #6
 800548c:	d015      	beq.n	80054ba <HAL_TIM_Base_Start_IT+0xaa>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005494:	d011      	beq.n	80054ba <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f042 0201 	orr.w	r2, r2, #1
 80054a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054a6:	e008      	b.n	80054ba <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f042 0201 	orr.w	r2, r2, #1
 80054b6:	601a      	str	r2, [r3, #0]
 80054b8:	e000      	b.n	80054bc <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80054bc:	2300      	movs	r3, #0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3714      	adds	r7, #20
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop
 80054cc:	40012c00 	.word	0x40012c00
 80054d0:	40000400 	.word	0x40000400
 80054d4:	40000800 	.word	0x40000800
 80054d8:	40013400 	.word	0x40013400
 80054dc:	40014000 	.word	0x40014000
 80054e0:	00010007 	.word	0x00010007

080054e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b082      	sub	sp, #8
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d101      	bne.n	80054f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e049      	b.n	800558a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d106      	bne.n	8005510 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 f841 	bl	8005592 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2202      	movs	r2, #2
 8005514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	3304      	adds	r3, #4
 8005520:	4619      	mov	r1, r3
 8005522:	4610      	mov	r0, r2
 8005524:	f000 fc6a 	bl	8005dfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	3708      	adds	r7, #8
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}

08005592 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005592:	b480      	push	{r7}
 8005594:	b083      	sub	sp, #12
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800559a:	bf00      	nop
 800559c:	370c      	adds	r7, #12
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr

080055a6 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80055a6:	b580      	push	{r7, lr}
 80055a8:	b086      	sub	sp, #24
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
 80055ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d101      	bne.n	80055ba <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e097      	b.n	80056ea <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d106      	bne.n	80055d4 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f7fc fbae 	bl	8001d30 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2202      	movs	r2, #2
 80055d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	6812      	ldr	r2, [r2, #0]
 80055e6:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80055ea:	f023 0307 	bic.w	r3, r3, #7
 80055ee:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	3304      	adds	r3, #4
 80055f8:	4619      	mov	r1, r3
 80055fa:	4610      	mov	r0, r2
 80055fc:	f000 fbfe 	bl	8005dfc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	6a1b      	ldr	r3, [r3, #32]
 8005616:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	697a      	ldr	r2, [r7, #20]
 800561e:	4313      	orrs	r3, r2
 8005620:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005628:	f023 0303 	bic.w	r3, r3, #3
 800562c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	689a      	ldr	r2, [r3, #8]
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	699b      	ldr	r3, [r3, #24]
 8005636:	021b      	lsls	r3, r3, #8
 8005638:	4313      	orrs	r3, r2
 800563a:	693a      	ldr	r2, [r7, #16]
 800563c:	4313      	orrs	r3, r2
 800563e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005646:	f023 030c 	bic.w	r3, r3, #12
 800564a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005652:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005656:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	68da      	ldr	r2, [r3, #12]
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	69db      	ldr	r3, [r3, #28]
 8005660:	021b      	lsls	r3, r3, #8
 8005662:	4313      	orrs	r3, r2
 8005664:	693a      	ldr	r2, [r7, #16]
 8005666:	4313      	orrs	r3, r2
 8005668:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	011a      	lsls	r2, r3, #4
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	6a1b      	ldr	r3, [r3, #32]
 8005674:	031b      	lsls	r3, r3, #12
 8005676:	4313      	orrs	r3, r2
 8005678:	693a      	ldr	r2, [r7, #16]
 800567a:	4313      	orrs	r3, r2
 800567c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005684:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800568c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	685a      	ldr	r2, [r3, #4]
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	695b      	ldr	r3, [r3, #20]
 8005696:	011b      	lsls	r3, r3, #4
 8005698:	4313      	orrs	r3, r2
 800569a:	68fa      	ldr	r2, [r7, #12]
 800569c:	4313      	orrs	r3, r2
 800569e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	697a      	ldr	r2, [r7, #20]
 80056a6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	693a      	ldr	r2, [r7, #16]
 80056ae:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3718      	adds	r7, #24
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}

080056f2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80056f2:	b580      	push	{r7, lr}
 80056f4:	b084      	sub	sp, #16
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	691b      	ldr	r3, [r3, #16]
 8005708:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	f003 0302 	and.w	r3, r3, #2
 8005710:	2b00      	cmp	r3, #0
 8005712:	d020      	beq.n	8005756 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f003 0302 	and.w	r3, r3, #2
 800571a:	2b00      	cmp	r3, #0
 800571c:	d01b      	beq.n	8005756 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f06f 0202 	mvn.w	r2, #2
 8005726:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	699b      	ldr	r3, [r3, #24]
 8005734:	f003 0303 	and.w	r3, r3, #3
 8005738:	2b00      	cmp	r3, #0
 800573a:	d003      	beq.n	8005744 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 fb3f 	bl	8005dc0 <HAL_TIM_IC_CaptureCallback>
 8005742:	e005      	b.n	8005750 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 fb31 	bl	8005dac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 fb42 	bl	8005dd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	f003 0304 	and.w	r3, r3, #4
 800575c:	2b00      	cmp	r3, #0
 800575e:	d020      	beq.n	80057a2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f003 0304 	and.w	r3, r3, #4
 8005766:	2b00      	cmp	r3, #0
 8005768:	d01b      	beq.n	80057a2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f06f 0204 	mvn.w	r2, #4
 8005772:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2202      	movs	r2, #2
 8005778:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	699b      	ldr	r3, [r3, #24]
 8005780:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005784:	2b00      	cmp	r3, #0
 8005786:	d003      	beq.n	8005790 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f000 fb19 	bl	8005dc0 <HAL_TIM_IC_CaptureCallback>
 800578e:	e005      	b.n	800579c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f000 fb0b 	bl	8005dac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 fb1c 	bl	8005dd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	f003 0308 	and.w	r3, r3, #8
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d020      	beq.n	80057ee <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f003 0308 	and.w	r3, r3, #8
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d01b      	beq.n	80057ee <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f06f 0208 	mvn.w	r2, #8
 80057be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2204      	movs	r2, #4
 80057c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	69db      	ldr	r3, [r3, #28]
 80057cc:	f003 0303 	and.w	r3, r3, #3
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d003      	beq.n	80057dc <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 faf3 	bl	8005dc0 <HAL_TIM_IC_CaptureCallback>
 80057da:	e005      	b.n	80057e8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 fae5 	bl	8005dac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 faf6 	bl	8005dd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2200      	movs	r2, #0
 80057ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	f003 0310 	and.w	r3, r3, #16
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d020      	beq.n	800583a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f003 0310 	and.w	r3, r3, #16
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d01b      	beq.n	800583a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f06f 0210 	mvn.w	r2, #16
 800580a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2208      	movs	r2, #8
 8005810:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	69db      	ldr	r3, [r3, #28]
 8005818:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800581c:	2b00      	cmp	r3, #0
 800581e:	d003      	beq.n	8005828 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 facd 	bl	8005dc0 <HAL_TIM_IC_CaptureCallback>
 8005826:	e005      	b.n	8005834 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 fabf 	bl	8005dac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 fad0 	bl	8005dd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	f003 0301 	and.w	r3, r3, #1
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00c      	beq.n	800585e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f003 0301 	and.w	r3, r3, #1
 800584a:	2b00      	cmp	r3, #0
 800584c:	d007      	beq.n	800585e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f06f 0201 	mvn.w	r2, #1
 8005856:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f7fb fe8a 	bl	8001572 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005864:	2b00      	cmp	r3, #0
 8005866:	d104      	bne.n	8005872 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00c      	beq.n	800588c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005878:	2b00      	cmp	r3, #0
 800587a:	d007      	beq.n	800588c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 fffe 	bl	8006888 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00c      	beq.n	80058b0 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800589c:	2b00      	cmp	r3, #0
 800589e:	d007      	beq.n	80058b0 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80058a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 fff6 	bl	800689c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d00c      	beq.n	80058d4 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d007      	beq.n	80058d4 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80058cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 fa8a 	bl	8005de8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	f003 0320 	and.w	r3, r3, #32
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00c      	beq.n	80058f8 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f003 0320 	and.w	r3, r3, #32
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d007      	beq.n	80058f8 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f06f 0220 	mvn.w	r2, #32
 80058f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 ffbe 	bl	8006874 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00c      	beq.n	800591c <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005908:	2b00      	cmp	r3, #0
 800590a:	d007      	beq.n	800591c <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005914:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 ffca 	bl	80068b0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005922:	2b00      	cmp	r3, #0
 8005924:	d00c      	beq.n	8005940 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800592c:	2b00      	cmp	r3, #0
 800592e:	d007      	beq.n	8005940 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 ffc2 	bl	80068c4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d00c      	beq.n	8005964 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005950:	2b00      	cmp	r3, #0
 8005952:	d007      	beq.n	8005964 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800595c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 ffba 	bl	80068d8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800596a:	2b00      	cmp	r3, #0
 800596c:	d00c      	beq.n	8005988 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005974:	2b00      	cmp	r3, #0
 8005976:	d007      	beq.n	8005988 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005980:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 ffb2 	bl	80068ec <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005988:	bf00      	nop
 800598a:	3710      	adds	r7, #16
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b086      	sub	sp, #24
 8005994:	af00      	add	r7, sp, #0
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	60b9      	str	r1, [r7, #8]
 800599a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800599c:	2300      	movs	r3, #0
 800599e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d101      	bne.n	80059ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80059aa:	2302      	movs	r3, #2
 80059ac:	e0ff      	b.n	8005bae <HAL_TIM_PWM_ConfigChannel+0x21e>
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2201      	movs	r2, #1
 80059b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2b14      	cmp	r3, #20
 80059ba:	f200 80f0 	bhi.w	8005b9e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80059be:	a201      	add	r2, pc, #4	@ (adr r2, 80059c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80059c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c4:	08005a19 	.word	0x08005a19
 80059c8:	08005b9f 	.word	0x08005b9f
 80059cc:	08005b9f 	.word	0x08005b9f
 80059d0:	08005b9f 	.word	0x08005b9f
 80059d4:	08005a59 	.word	0x08005a59
 80059d8:	08005b9f 	.word	0x08005b9f
 80059dc:	08005b9f 	.word	0x08005b9f
 80059e0:	08005b9f 	.word	0x08005b9f
 80059e4:	08005a9b 	.word	0x08005a9b
 80059e8:	08005b9f 	.word	0x08005b9f
 80059ec:	08005b9f 	.word	0x08005b9f
 80059f0:	08005b9f 	.word	0x08005b9f
 80059f4:	08005adb 	.word	0x08005adb
 80059f8:	08005b9f 	.word	0x08005b9f
 80059fc:	08005b9f 	.word	0x08005b9f
 8005a00:	08005b9f 	.word	0x08005b9f
 8005a04:	08005b1d 	.word	0x08005b1d
 8005a08:	08005b9f 	.word	0x08005b9f
 8005a0c:	08005b9f 	.word	0x08005b9f
 8005a10:	08005b9f 	.word	0x08005b9f
 8005a14:	08005b5d 	.word	0x08005b5d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68b9      	ldr	r1, [r7, #8]
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f000 fa88 	bl	8005f34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	699a      	ldr	r2, [r3, #24]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f042 0208 	orr.w	r2, r2, #8
 8005a32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	699a      	ldr	r2, [r3, #24]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f022 0204 	bic.w	r2, r2, #4
 8005a42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	6999      	ldr	r1, [r3, #24]
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	691a      	ldr	r2, [r3, #16]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	430a      	orrs	r2, r1
 8005a54:	619a      	str	r2, [r3, #24]
      break;
 8005a56:	e0a5      	b.n	8005ba4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	68b9      	ldr	r1, [r7, #8]
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f000 faf8 	bl	8006054 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	699a      	ldr	r2, [r3, #24]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	699a      	ldr	r2, [r3, #24]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	6999      	ldr	r1, [r3, #24]
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	021a      	lsls	r2, r3, #8
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	430a      	orrs	r2, r1
 8005a96:	619a      	str	r2, [r3, #24]
      break;
 8005a98:	e084      	b.n	8005ba4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	68b9      	ldr	r1, [r7, #8]
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f000 fb61 	bl	8006168 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	69da      	ldr	r2, [r3, #28]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f042 0208 	orr.w	r2, r2, #8
 8005ab4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	69da      	ldr	r2, [r3, #28]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f022 0204 	bic.w	r2, r2, #4
 8005ac4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	69d9      	ldr	r1, [r3, #28]
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	691a      	ldr	r2, [r3, #16]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	430a      	orrs	r2, r1
 8005ad6:	61da      	str	r2, [r3, #28]
      break;
 8005ad8:	e064      	b.n	8005ba4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68b9      	ldr	r1, [r7, #8]
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f000 fbc9 	bl	8006278 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	69da      	ldr	r2, [r3, #28]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005af4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	69da      	ldr	r2, [r3, #28]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	69d9      	ldr	r1, [r3, #28]
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	691b      	ldr	r3, [r3, #16]
 8005b10:	021a      	lsls	r2, r3, #8
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	430a      	orrs	r2, r1
 8005b18:	61da      	str	r2, [r3, #28]
      break;
 8005b1a:	e043      	b.n	8005ba4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68b9      	ldr	r1, [r7, #8]
 8005b22:	4618      	mov	r0, r3
 8005b24:	f000 fc32 	bl	800638c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f042 0208 	orr.w	r2, r2, #8
 8005b36:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f022 0204 	bic.w	r2, r2, #4
 8005b46:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	691a      	ldr	r2, [r3, #16]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	430a      	orrs	r2, r1
 8005b58:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005b5a:	e023      	b.n	8005ba4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	68b9      	ldr	r1, [r7, #8]
 8005b62:	4618      	mov	r0, r3
 8005b64:	f000 fc76 	bl	8006454 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b76:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b86:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	021a      	lsls	r2, r3, #8
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	430a      	orrs	r2, r1
 8005b9a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005b9c:	e002      	b.n	8005ba4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	75fb      	strb	r3, [r7, #23]
      break;
 8005ba2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005bac:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3718      	adds	r7, #24
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop

08005bb8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d101      	bne.n	8005bd4 <HAL_TIM_ConfigClockSource+0x1c>
 8005bd0:	2302      	movs	r3, #2
 8005bd2:	e0de      	b.n	8005d92 <HAL_TIM_ConfigClockSource+0x1da>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2202      	movs	r2, #2
 8005be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005bf2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005bf6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005bfe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68ba      	ldr	r2, [r7, #8]
 8005c06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a63      	ldr	r2, [pc, #396]	@ (8005d9c <HAL_TIM_ConfigClockSource+0x1e4>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	f000 80a9 	beq.w	8005d66 <HAL_TIM_ConfigClockSource+0x1ae>
 8005c14:	4a61      	ldr	r2, [pc, #388]	@ (8005d9c <HAL_TIM_ConfigClockSource+0x1e4>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	f200 80ae 	bhi.w	8005d78 <HAL_TIM_ConfigClockSource+0x1c0>
 8005c1c:	4a60      	ldr	r2, [pc, #384]	@ (8005da0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	f000 80a1 	beq.w	8005d66 <HAL_TIM_ConfigClockSource+0x1ae>
 8005c24:	4a5e      	ldr	r2, [pc, #376]	@ (8005da0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	f200 80a6 	bhi.w	8005d78 <HAL_TIM_ConfigClockSource+0x1c0>
 8005c2c:	4a5d      	ldr	r2, [pc, #372]	@ (8005da4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	f000 8099 	beq.w	8005d66 <HAL_TIM_ConfigClockSource+0x1ae>
 8005c34:	4a5b      	ldr	r2, [pc, #364]	@ (8005da4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	f200 809e 	bhi.w	8005d78 <HAL_TIM_ConfigClockSource+0x1c0>
 8005c3c:	4a5a      	ldr	r2, [pc, #360]	@ (8005da8 <HAL_TIM_ConfigClockSource+0x1f0>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	f000 8091 	beq.w	8005d66 <HAL_TIM_ConfigClockSource+0x1ae>
 8005c44:	4a58      	ldr	r2, [pc, #352]	@ (8005da8 <HAL_TIM_ConfigClockSource+0x1f0>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	f200 8096 	bhi.w	8005d78 <HAL_TIM_ConfigClockSource+0x1c0>
 8005c4c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005c50:	f000 8089 	beq.w	8005d66 <HAL_TIM_ConfigClockSource+0x1ae>
 8005c54:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005c58:	f200 808e 	bhi.w	8005d78 <HAL_TIM_ConfigClockSource+0x1c0>
 8005c5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c60:	d03e      	beq.n	8005ce0 <HAL_TIM_ConfigClockSource+0x128>
 8005c62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c66:	f200 8087 	bhi.w	8005d78 <HAL_TIM_ConfigClockSource+0x1c0>
 8005c6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c6e:	f000 8086 	beq.w	8005d7e <HAL_TIM_ConfigClockSource+0x1c6>
 8005c72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c76:	d87f      	bhi.n	8005d78 <HAL_TIM_ConfigClockSource+0x1c0>
 8005c78:	2b70      	cmp	r3, #112	@ 0x70
 8005c7a:	d01a      	beq.n	8005cb2 <HAL_TIM_ConfigClockSource+0xfa>
 8005c7c:	2b70      	cmp	r3, #112	@ 0x70
 8005c7e:	d87b      	bhi.n	8005d78 <HAL_TIM_ConfigClockSource+0x1c0>
 8005c80:	2b60      	cmp	r3, #96	@ 0x60
 8005c82:	d050      	beq.n	8005d26 <HAL_TIM_ConfigClockSource+0x16e>
 8005c84:	2b60      	cmp	r3, #96	@ 0x60
 8005c86:	d877      	bhi.n	8005d78 <HAL_TIM_ConfigClockSource+0x1c0>
 8005c88:	2b50      	cmp	r3, #80	@ 0x50
 8005c8a:	d03c      	beq.n	8005d06 <HAL_TIM_ConfigClockSource+0x14e>
 8005c8c:	2b50      	cmp	r3, #80	@ 0x50
 8005c8e:	d873      	bhi.n	8005d78 <HAL_TIM_ConfigClockSource+0x1c0>
 8005c90:	2b40      	cmp	r3, #64	@ 0x40
 8005c92:	d058      	beq.n	8005d46 <HAL_TIM_ConfigClockSource+0x18e>
 8005c94:	2b40      	cmp	r3, #64	@ 0x40
 8005c96:	d86f      	bhi.n	8005d78 <HAL_TIM_ConfigClockSource+0x1c0>
 8005c98:	2b30      	cmp	r3, #48	@ 0x30
 8005c9a:	d064      	beq.n	8005d66 <HAL_TIM_ConfigClockSource+0x1ae>
 8005c9c:	2b30      	cmp	r3, #48	@ 0x30
 8005c9e:	d86b      	bhi.n	8005d78 <HAL_TIM_ConfigClockSource+0x1c0>
 8005ca0:	2b20      	cmp	r3, #32
 8005ca2:	d060      	beq.n	8005d66 <HAL_TIM_ConfigClockSource+0x1ae>
 8005ca4:	2b20      	cmp	r3, #32
 8005ca6:	d867      	bhi.n	8005d78 <HAL_TIM_ConfigClockSource+0x1c0>
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d05c      	beq.n	8005d66 <HAL_TIM_ConfigClockSource+0x1ae>
 8005cac:	2b10      	cmp	r3, #16
 8005cae:	d05a      	beq.n	8005d66 <HAL_TIM_ConfigClockSource+0x1ae>
 8005cb0:	e062      	b.n	8005d78 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005cc2:	f000 fca9 	bl	8006618 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005cd4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	68ba      	ldr	r2, [r7, #8]
 8005cdc:	609a      	str	r2, [r3, #8]
      break;
 8005cde:	e04f      	b.n	8005d80 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005cf0:	f000 fc92 	bl	8006618 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	689a      	ldr	r2, [r3, #8]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005d02:	609a      	str	r2, [r3, #8]
      break;
 8005d04:	e03c      	b.n	8005d80 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d12:	461a      	mov	r2, r3
 8005d14:	f000 fc04 	bl	8006520 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2150      	movs	r1, #80	@ 0x50
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f000 fc5d 	bl	80065de <TIM_ITRx_SetConfig>
      break;
 8005d24:	e02c      	b.n	8005d80 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d32:	461a      	mov	r2, r3
 8005d34:	f000 fc23 	bl	800657e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2160      	movs	r1, #96	@ 0x60
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f000 fc4d 	bl	80065de <TIM_ITRx_SetConfig>
      break;
 8005d44:	e01c      	b.n	8005d80 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d52:	461a      	mov	r2, r3
 8005d54:	f000 fbe4 	bl	8006520 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2140      	movs	r1, #64	@ 0x40
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f000 fc3d 	bl	80065de <TIM_ITRx_SetConfig>
      break;
 8005d64:	e00c      	b.n	8005d80 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4619      	mov	r1, r3
 8005d70:	4610      	mov	r0, r2
 8005d72:	f000 fc34 	bl	80065de <TIM_ITRx_SetConfig>
      break;
 8005d76:	e003      	b.n	8005d80 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	73fb      	strb	r3, [r7, #15]
      break;
 8005d7c:	e000      	b.n	8005d80 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8005d7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3710      	adds	r7, #16
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	bf00      	nop
 8005d9c:	00100070 	.word	0x00100070
 8005da0:	00100040 	.word	0x00100040
 8005da4:	00100030 	.word	0x00100030
 8005da8:	00100020 	.word	0x00100020

08005dac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005db4:	bf00      	nop
 8005db6:	370c      	adds	r7, #12
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005dc8:	bf00      	nop
 8005dca:	370c      	adds	r7, #12
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ddc:	bf00      	nop
 8005dde:	370c      	adds	r7, #12
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005df0:	bf00      	nop
 8005df2:	370c      	adds	r7, #12
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b085      	sub	sp, #20
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a42      	ldr	r2, [pc, #264]	@ (8005f18 <TIM_Base_SetConfig+0x11c>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d00f      	beq.n	8005e34 <TIM_Base_SetConfig+0x38>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e1a:	d00b      	beq.n	8005e34 <TIM_Base_SetConfig+0x38>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	4a3f      	ldr	r2, [pc, #252]	@ (8005f1c <TIM_Base_SetConfig+0x120>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d007      	beq.n	8005e34 <TIM_Base_SetConfig+0x38>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4a3e      	ldr	r2, [pc, #248]	@ (8005f20 <TIM_Base_SetConfig+0x124>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d003      	beq.n	8005e34 <TIM_Base_SetConfig+0x38>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4a3d      	ldr	r2, [pc, #244]	@ (8005f24 <TIM_Base_SetConfig+0x128>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d108      	bne.n	8005e46 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a33      	ldr	r2, [pc, #204]	@ (8005f18 <TIM_Base_SetConfig+0x11c>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d01b      	beq.n	8005e86 <TIM_Base_SetConfig+0x8a>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e54:	d017      	beq.n	8005e86 <TIM_Base_SetConfig+0x8a>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a30      	ldr	r2, [pc, #192]	@ (8005f1c <TIM_Base_SetConfig+0x120>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d013      	beq.n	8005e86 <TIM_Base_SetConfig+0x8a>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a2f      	ldr	r2, [pc, #188]	@ (8005f20 <TIM_Base_SetConfig+0x124>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d00f      	beq.n	8005e86 <TIM_Base_SetConfig+0x8a>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a2e      	ldr	r2, [pc, #184]	@ (8005f24 <TIM_Base_SetConfig+0x128>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d00b      	beq.n	8005e86 <TIM_Base_SetConfig+0x8a>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4a2d      	ldr	r2, [pc, #180]	@ (8005f28 <TIM_Base_SetConfig+0x12c>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d007      	beq.n	8005e86 <TIM_Base_SetConfig+0x8a>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a2c      	ldr	r2, [pc, #176]	@ (8005f2c <TIM_Base_SetConfig+0x130>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d003      	beq.n	8005e86 <TIM_Base_SetConfig+0x8a>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a2b      	ldr	r2, [pc, #172]	@ (8005f30 <TIM_Base_SetConfig+0x134>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d108      	bne.n	8005e98 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	68fa      	ldr	r2, [r7, #12]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	695b      	ldr	r3, [r3, #20]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	689a      	ldr	r2, [r3, #8]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4a16      	ldr	r2, [pc, #88]	@ (8005f18 <TIM_Base_SetConfig+0x11c>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d00f      	beq.n	8005ee4 <TIM_Base_SetConfig+0xe8>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a17      	ldr	r2, [pc, #92]	@ (8005f24 <TIM_Base_SetConfig+0x128>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d00b      	beq.n	8005ee4 <TIM_Base_SetConfig+0xe8>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4a16      	ldr	r2, [pc, #88]	@ (8005f28 <TIM_Base_SetConfig+0x12c>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d007      	beq.n	8005ee4 <TIM_Base_SetConfig+0xe8>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	4a15      	ldr	r2, [pc, #84]	@ (8005f2c <TIM_Base_SetConfig+0x130>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d003      	beq.n	8005ee4 <TIM_Base_SetConfig+0xe8>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a14      	ldr	r2, [pc, #80]	@ (8005f30 <TIM_Base_SetConfig+0x134>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d103      	bne.n	8005eec <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	691a      	ldr	r2, [r3, #16]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	f003 0301 	and.w	r3, r3, #1
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d105      	bne.n	8005f0a <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	f023 0201 	bic.w	r2, r3, #1
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	611a      	str	r2, [r3, #16]
  }
}
 8005f0a:	bf00      	nop
 8005f0c:	3714      	adds	r7, #20
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	40012c00 	.word	0x40012c00
 8005f1c:	40000400 	.word	0x40000400
 8005f20:	40000800 	.word	0x40000800
 8005f24:	40013400 	.word	0x40013400
 8005f28:	40014000 	.word	0x40014000
 8005f2c:	40014400 	.word	0x40014400
 8005f30:	40014800 	.word	0x40014800

08005f34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b087      	sub	sp, #28
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a1b      	ldr	r3, [r3, #32]
 8005f42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6a1b      	ldr	r3, [r3, #32]
 8005f48:	f023 0201 	bic.w	r2, r3, #1
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	699b      	ldr	r3, [r3, #24]
 8005f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f023 0303 	bic.w	r3, r3, #3
 8005f6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	f023 0302 	bic.w	r3, r3, #2
 8005f80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	697a      	ldr	r2, [r7, #20]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4a2c      	ldr	r2, [pc, #176]	@ (8006040 <TIM_OC1_SetConfig+0x10c>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d00f      	beq.n	8005fb4 <TIM_OC1_SetConfig+0x80>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	4a2b      	ldr	r2, [pc, #172]	@ (8006044 <TIM_OC1_SetConfig+0x110>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d00b      	beq.n	8005fb4 <TIM_OC1_SetConfig+0x80>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	4a2a      	ldr	r2, [pc, #168]	@ (8006048 <TIM_OC1_SetConfig+0x114>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d007      	beq.n	8005fb4 <TIM_OC1_SetConfig+0x80>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	4a29      	ldr	r2, [pc, #164]	@ (800604c <TIM_OC1_SetConfig+0x118>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d003      	beq.n	8005fb4 <TIM_OC1_SetConfig+0x80>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4a28      	ldr	r2, [pc, #160]	@ (8006050 <TIM_OC1_SetConfig+0x11c>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d10c      	bne.n	8005fce <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	f023 0308 	bic.w	r3, r3, #8
 8005fba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	697a      	ldr	r2, [r7, #20]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	f023 0304 	bic.w	r3, r3, #4
 8005fcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4a1b      	ldr	r2, [pc, #108]	@ (8006040 <TIM_OC1_SetConfig+0x10c>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d00f      	beq.n	8005ff6 <TIM_OC1_SetConfig+0xc2>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a1a      	ldr	r2, [pc, #104]	@ (8006044 <TIM_OC1_SetConfig+0x110>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d00b      	beq.n	8005ff6 <TIM_OC1_SetConfig+0xc2>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4a19      	ldr	r2, [pc, #100]	@ (8006048 <TIM_OC1_SetConfig+0x114>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d007      	beq.n	8005ff6 <TIM_OC1_SetConfig+0xc2>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4a18      	ldr	r2, [pc, #96]	@ (800604c <TIM_OC1_SetConfig+0x118>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d003      	beq.n	8005ff6 <TIM_OC1_SetConfig+0xc2>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	4a17      	ldr	r2, [pc, #92]	@ (8006050 <TIM_OC1_SetConfig+0x11c>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d111      	bne.n	800601a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ffc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006004:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	695b      	ldr	r3, [r3, #20]
 800600a:	693a      	ldr	r2, [r7, #16]
 800600c:	4313      	orrs	r3, r2
 800600e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	699b      	ldr	r3, [r3, #24]
 8006014:	693a      	ldr	r2, [r7, #16]
 8006016:	4313      	orrs	r3, r2
 8006018:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	693a      	ldr	r2, [r7, #16]
 800601e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	68fa      	ldr	r2, [r7, #12]
 8006024:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	685a      	ldr	r2, [r3, #4]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	697a      	ldr	r2, [r7, #20]
 8006032:	621a      	str	r2, [r3, #32]
}
 8006034:	bf00      	nop
 8006036:	371c      	adds	r7, #28
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr
 8006040:	40012c00 	.word	0x40012c00
 8006044:	40013400 	.word	0x40013400
 8006048:	40014000 	.word	0x40014000
 800604c:	40014400 	.word	0x40014400
 8006050:	40014800 	.word	0x40014800

08006054 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006054:	b480      	push	{r7}
 8006056:	b087      	sub	sp, #28
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a1b      	ldr	r3, [r3, #32]
 8006062:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6a1b      	ldr	r3, [r3, #32]
 8006068:	f023 0210 	bic.w	r2, r3, #16
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	699b      	ldr	r3, [r3, #24]
 800607a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006082:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800608e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	021b      	lsls	r3, r3, #8
 8006096:	68fa      	ldr	r2, [r7, #12]
 8006098:	4313      	orrs	r3, r2
 800609a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	f023 0320 	bic.w	r3, r3, #32
 80060a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	011b      	lsls	r3, r3, #4
 80060aa:	697a      	ldr	r2, [r7, #20]
 80060ac:	4313      	orrs	r3, r2
 80060ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	4a28      	ldr	r2, [pc, #160]	@ (8006154 <TIM_OC2_SetConfig+0x100>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d003      	beq.n	80060c0 <TIM_OC2_SetConfig+0x6c>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	4a27      	ldr	r2, [pc, #156]	@ (8006158 <TIM_OC2_SetConfig+0x104>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d10d      	bne.n	80060dc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	011b      	lsls	r3, r3, #4
 80060ce:	697a      	ldr	r2, [r7, #20]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4a1d      	ldr	r2, [pc, #116]	@ (8006154 <TIM_OC2_SetConfig+0x100>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d00f      	beq.n	8006104 <TIM_OC2_SetConfig+0xb0>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a1c      	ldr	r2, [pc, #112]	@ (8006158 <TIM_OC2_SetConfig+0x104>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d00b      	beq.n	8006104 <TIM_OC2_SetConfig+0xb0>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a1b      	ldr	r2, [pc, #108]	@ (800615c <TIM_OC2_SetConfig+0x108>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d007      	beq.n	8006104 <TIM_OC2_SetConfig+0xb0>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4a1a      	ldr	r2, [pc, #104]	@ (8006160 <TIM_OC2_SetConfig+0x10c>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d003      	beq.n	8006104 <TIM_OC2_SetConfig+0xb0>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a19      	ldr	r2, [pc, #100]	@ (8006164 <TIM_OC2_SetConfig+0x110>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d113      	bne.n	800612c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800610a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006112:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	695b      	ldr	r3, [r3, #20]
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	693a      	ldr	r2, [r7, #16]
 800611c:	4313      	orrs	r3, r2
 800611e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	699b      	ldr	r3, [r3, #24]
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	693a      	ldr	r2, [r7, #16]
 8006128:	4313      	orrs	r3, r2
 800612a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	693a      	ldr	r2, [r7, #16]
 8006130:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	685a      	ldr	r2, [r3, #4]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	697a      	ldr	r2, [r7, #20]
 8006144:	621a      	str	r2, [r3, #32]
}
 8006146:	bf00      	nop
 8006148:	371c      	adds	r7, #28
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr
 8006152:	bf00      	nop
 8006154:	40012c00 	.word	0x40012c00
 8006158:	40013400 	.word	0x40013400
 800615c:	40014000 	.word	0x40014000
 8006160:	40014400 	.word	0x40014400
 8006164:	40014800 	.word	0x40014800

08006168 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006168:	b480      	push	{r7}
 800616a:	b087      	sub	sp, #28
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6a1b      	ldr	r3, [r3, #32]
 8006176:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6a1b      	ldr	r3, [r3, #32]
 800617c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	69db      	ldr	r3, [r3, #28]
 800618e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006196:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800619a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f023 0303 	bic.w	r3, r3, #3
 80061a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80061b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	021b      	lsls	r3, r3, #8
 80061bc:	697a      	ldr	r2, [r7, #20]
 80061be:	4313      	orrs	r3, r2
 80061c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a27      	ldr	r2, [pc, #156]	@ (8006264 <TIM_OC3_SetConfig+0xfc>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d003      	beq.n	80061d2 <TIM_OC3_SetConfig+0x6a>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a26      	ldr	r2, [pc, #152]	@ (8006268 <TIM_OC3_SetConfig+0x100>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d10d      	bne.n	80061ee <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80061d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	021b      	lsls	r3, r3, #8
 80061e0:	697a      	ldr	r2, [r7, #20]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80061ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a1c      	ldr	r2, [pc, #112]	@ (8006264 <TIM_OC3_SetConfig+0xfc>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d00f      	beq.n	8006216 <TIM_OC3_SetConfig+0xae>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a1b      	ldr	r2, [pc, #108]	@ (8006268 <TIM_OC3_SetConfig+0x100>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d00b      	beq.n	8006216 <TIM_OC3_SetConfig+0xae>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a1a      	ldr	r2, [pc, #104]	@ (800626c <TIM_OC3_SetConfig+0x104>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d007      	beq.n	8006216 <TIM_OC3_SetConfig+0xae>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a19      	ldr	r2, [pc, #100]	@ (8006270 <TIM_OC3_SetConfig+0x108>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d003      	beq.n	8006216 <TIM_OC3_SetConfig+0xae>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a18      	ldr	r2, [pc, #96]	@ (8006274 <TIM_OC3_SetConfig+0x10c>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d113      	bne.n	800623e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800621c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006224:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	695b      	ldr	r3, [r3, #20]
 800622a:	011b      	lsls	r3, r3, #4
 800622c:	693a      	ldr	r2, [r7, #16]
 800622e:	4313      	orrs	r3, r2
 8006230:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	699b      	ldr	r3, [r3, #24]
 8006236:	011b      	lsls	r3, r3, #4
 8006238:	693a      	ldr	r2, [r7, #16]
 800623a:	4313      	orrs	r3, r2
 800623c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	693a      	ldr	r2, [r7, #16]
 8006242:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	68fa      	ldr	r2, [r7, #12]
 8006248:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	685a      	ldr	r2, [r3, #4]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	697a      	ldr	r2, [r7, #20]
 8006256:	621a      	str	r2, [r3, #32]
}
 8006258:	bf00      	nop
 800625a:	371c      	adds	r7, #28
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr
 8006264:	40012c00 	.word	0x40012c00
 8006268:	40013400 	.word	0x40013400
 800626c:	40014000 	.word	0x40014000
 8006270:	40014400 	.word	0x40014400
 8006274:	40014800 	.word	0x40014800

08006278 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006278:	b480      	push	{r7}
 800627a:	b087      	sub	sp, #28
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6a1b      	ldr	r3, [r3, #32]
 8006286:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6a1b      	ldr	r3, [r3, #32]
 800628c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	69db      	ldr	r3, [r3, #28]
 800629e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80062a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	021b      	lsls	r3, r3, #8
 80062ba:	68fa      	ldr	r2, [r7, #12]
 80062bc:	4313      	orrs	r3, r2
 80062be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80062c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	031b      	lsls	r3, r3, #12
 80062ce:	697a      	ldr	r2, [r7, #20]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4a28      	ldr	r2, [pc, #160]	@ (8006378 <TIM_OC4_SetConfig+0x100>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d003      	beq.n	80062e4 <TIM_OC4_SetConfig+0x6c>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	4a27      	ldr	r2, [pc, #156]	@ (800637c <TIM_OC4_SetConfig+0x104>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d10d      	bne.n	8006300 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80062ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	031b      	lsls	r3, r3, #12
 80062f2:	697a      	ldr	r2, [r7, #20]
 80062f4:	4313      	orrs	r3, r2
 80062f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80062fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a1d      	ldr	r2, [pc, #116]	@ (8006378 <TIM_OC4_SetConfig+0x100>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d00f      	beq.n	8006328 <TIM_OC4_SetConfig+0xb0>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	4a1c      	ldr	r2, [pc, #112]	@ (800637c <TIM_OC4_SetConfig+0x104>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d00b      	beq.n	8006328 <TIM_OC4_SetConfig+0xb0>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4a1b      	ldr	r2, [pc, #108]	@ (8006380 <TIM_OC4_SetConfig+0x108>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d007      	beq.n	8006328 <TIM_OC4_SetConfig+0xb0>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	4a1a      	ldr	r2, [pc, #104]	@ (8006384 <TIM_OC4_SetConfig+0x10c>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d003      	beq.n	8006328 <TIM_OC4_SetConfig+0xb0>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4a19      	ldr	r2, [pc, #100]	@ (8006388 <TIM_OC4_SetConfig+0x110>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d113      	bne.n	8006350 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800632e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006336:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	695b      	ldr	r3, [r3, #20]
 800633c:	019b      	lsls	r3, r3, #6
 800633e:	693a      	ldr	r2, [r7, #16]
 8006340:	4313      	orrs	r3, r2
 8006342:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	699b      	ldr	r3, [r3, #24]
 8006348:	019b      	lsls	r3, r3, #6
 800634a:	693a      	ldr	r2, [r7, #16]
 800634c:	4313      	orrs	r3, r2
 800634e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	693a      	ldr	r2, [r7, #16]
 8006354:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	68fa      	ldr	r2, [r7, #12]
 800635a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	685a      	ldr	r2, [r3, #4]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	697a      	ldr	r2, [r7, #20]
 8006368:	621a      	str	r2, [r3, #32]
}
 800636a:	bf00      	nop
 800636c:	371c      	adds	r7, #28
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop
 8006378:	40012c00 	.word	0x40012c00
 800637c:	40013400 	.word	0x40013400
 8006380:	40014000 	.word	0x40014000
 8006384:	40014400 	.word	0x40014400
 8006388:	40014800 	.word	0x40014800

0800638c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800638c:	b480      	push	{r7}
 800638e:	b087      	sub	sp, #28
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a1b      	ldr	r3, [r3, #32]
 800639a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6a1b      	ldr	r3, [r3, #32]
 80063a0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80063d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	041b      	lsls	r3, r3, #16
 80063d8:	693a      	ldr	r2, [r7, #16]
 80063da:	4313      	orrs	r3, r2
 80063dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a17      	ldr	r2, [pc, #92]	@ (8006440 <TIM_OC5_SetConfig+0xb4>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d00f      	beq.n	8006406 <TIM_OC5_SetConfig+0x7a>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4a16      	ldr	r2, [pc, #88]	@ (8006444 <TIM_OC5_SetConfig+0xb8>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d00b      	beq.n	8006406 <TIM_OC5_SetConfig+0x7a>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4a15      	ldr	r2, [pc, #84]	@ (8006448 <TIM_OC5_SetConfig+0xbc>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d007      	beq.n	8006406 <TIM_OC5_SetConfig+0x7a>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a14      	ldr	r2, [pc, #80]	@ (800644c <TIM_OC5_SetConfig+0xc0>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d003      	beq.n	8006406 <TIM_OC5_SetConfig+0x7a>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a13      	ldr	r2, [pc, #76]	@ (8006450 <TIM_OC5_SetConfig+0xc4>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d109      	bne.n	800641a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800640c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	695b      	ldr	r3, [r3, #20]
 8006412:	021b      	lsls	r3, r3, #8
 8006414:	697a      	ldr	r2, [r7, #20]
 8006416:	4313      	orrs	r3, r2
 8006418:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	697a      	ldr	r2, [r7, #20]
 800641e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	685a      	ldr	r2, [r3, #4]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	693a      	ldr	r2, [r7, #16]
 8006432:	621a      	str	r2, [r3, #32]
}
 8006434:	bf00      	nop
 8006436:	371c      	adds	r7, #28
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr
 8006440:	40012c00 	.word	0x40012c00
 8006444:	40013400 	.word	0x40013400
 8006448:	40014000 	.word	0x40014000
 800644c:	40014400 	.word	0x40014400
 8006450:	40014800 	.word	0x40014800

08006454 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006454:	b480      	push	{r7}
 8006456:	b087      	sub	sp, #28
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6a1b      	ldr	r3, [r3, #32]
 8006462:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6a1b      	ldr	r3, [r3, #32]
 8006468:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800647a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006482:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006486:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	021b      	lsls	r3, r3, #8
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	4313      	orrs	r3, r2
 8006492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800649a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	051b      	lsls	r3, r3, #20
 80064a2:	693a      	ldr	r2, [r7, #16]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	4a18      	ldr	r2, [pc, #96]	@ (800650c <TIM_OC6_SetConfig+0xb8>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d00f      	beq.n	80064d0 <TIM_OC6_SetConfig+0x7c>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4a17      	ldr	r2, [pc, #92]	@ (8006510 <TIM_OC6_SetConfig+0xbc>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d00b      	beq.n	80064d0 <TIM_OC6_SetConfig+0x7c>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	4a16      	ldr	r2, [pc, #88]	@ (8006514 <TIM_OC6_SetConfig+0xc0>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d007      	beq.n	80064d0 <TIM_OC6_SetConfig+0x7c>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	4a15      	ldr	r2, [pc, #84]	@ (8006518 <TIM_OC6_SetConfig+0xc4>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d003      	beq.n	80064d0 <TIM_OC6_SetConfig+0x7c>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	4a14      	ldr	r2, [pc, #80]	@ (800651c <TIM_OC6_SetConfig+0xc8>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d109      	bne.n	80064e4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80064d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	695b      	ldr	r3, [r3, #20]
 80064dc:	029b      	lsls	r3, r3, #10
 80064de:	697a      	ldr	r2, [r7, #20]
 80064e0:	4313      	orrs	r3, r2
 80064e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	697a      	ldr	r2, [r7, #20]
 80064e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	68fa      	ldr	r2, [r7, #12]
 80064ee:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	685a      	ldr	r2, [r3, #4]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	693a      	ldr	r2, [r7, #16]
 80064fc:	621a      	str	r2, [r3, #32]
}
 80064fe:	bf00      	nop
 8006500:	371c      	adds	r7, #28
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr
 800650a:	bf00      	nop
 800650c:	40012c00 	.word	0x40012c00
 8006510:	40013400 	.word	0x40013400
 8006514:	40014000 	.word	0x40014000
 8006518:	40014400 	.word	0x40014400
 800651c:	40014800 	.word	0x40014800

08006520 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006520:	b480      	push	{r7}
 8006522:	b087      	sub	sp, #28
 8006524:	af00      	add	r7, sp, #0
 8006526:	60f8      	str	r0, [r7, #12]
 8006528:	60b9      	str	r1, [r7, #8]
 800652a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6a1b      	ldr	r3, [r3, #32]
 8006530:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	6a1b      	ldr	r3, [r3, #32]
 8006536:	f023 0201 	bic.w	r2, r3, #1
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	699b      	ldr	r3, [r3, #24]
 8006542:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800654a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	011b      	lsls	r3, r3, #4
 8006550:	693a      	ldr	r2, [r7, #16]
 8006552:	4313      	orrs	r3, r2
 8006554:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	f023 030a 	bic.w	r3, r3, #10
 800655c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800655e:	697a      	ldr	r2, [r7, #20]
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	4313      	orrs	r3, r2
 8006564:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	693a      	ldr	r2, [r7, #16]
 800656a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	697a      	ldr	r2, [r7, #20]
 8006570:	621a      	str	r2, [r3, #32]
}
 8006572:	bf00      	nop
 8006574:	371c      	adds	r7, #28
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr

0800657e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800657e:	b480      	push	{r7}
 8006580:	b087      	sub	sp, #28
 8006582:	af00      	add	r7, sp, #0
 8006584:	60f8      	str	r0, [r7, #12]
 8006586:	60b9      	str	r1, [r7, #8]
 8006588:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	6a1b      	ldr	r3, [r3, #32]
 800658e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6a1b      	ldr	r3, [r3, #32]
 8006594:	f023 0210 	bic.w	r2, r3, #16
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	699b      	ldr	r3, [r3, #24]
 80065a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80065a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	031b      	lsls	r3, r3, #12
 80065ae:	693a      	ldr	r2, [r7, #16]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80065ba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	011b      	lsls	r3, r3, #4
 80065c0:	697a      	ldr	r2, [r7, #20]
 80065c2:	4313      	orrs	r3, r2
 80065c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	693a      	ldr	r2, [r7, #16]
 80065ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	697a      	ldr	r2, [r7, #20]
 80065d0:	621a      	str	r2, [r3, #32]
}
 80065d2:	bf00      	nop
 80065d4:	371c      	adds	r7, #28
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr

080065de <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80065de:	b480      	push	{r7}
 80065e0:	b085      	sub	sp, #20
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]
 80065e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80065f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80065fa:	683a      	ldr	r2, [r7, #0]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	4313      	orrs	r3, r2
 8006600:	f043 0307 	orr.w	r3, r3, #7
 8006604:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	609a      	str	r2, [r3, #8]
}
 800660c:	bf00      	nop
 800660e:	3714      	adds	r7, #20
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006618:	b480      	push	{r7}
 800661a:	b087      	sub	sp, #28
 800661c:	af00      	add	r7, sp, #0
 800661e:	60f8      	str	r0, [r7, #12]
 8006620:	60b9      	str	r1, [r7, #8]
 8006622:	607a      	str	r2, [r7, #4]
 8006624:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006632:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	021a      	lsls	r2, r3, #8
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	431a      	orrs	r2, r3
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	4313      	orrs	r3, r2
 8006640:	697a      	ldr	r2, [r7, #20]
 8006642:	4313      	orrs	r3, r2
 8006644:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	697a      	ldr	r2, [r7, #20]
 800664a:	609a      	str	r2, [r3, #8]
}
 800664c:	bf00      	nop
 800664e:	371c      	adds	r7, #28
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr

08006658 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006658:	b480      	push	{r7}
 800665a:	b085      	sub	sp, #20
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006668:	2b01      	cmp	r3, #1
 800666a:	d101      	bne.n	8006670 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800666c:	2302      	movs	r3, #2
 800666e:	e065      	b.n	800673c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2201      	movs	r2, #1
 8006674:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2202      	movs	r2, #2
 800667c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a2c      	ldr	r2, [pc, #176]	@ (8006748 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d004      	beq.n	80066a4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a2b      	ldr	r2, [pc, #172]	@ (800674c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d108      	bne.n	80066b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80066aa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	68fa      	ldr	r2, [r7, #12]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80066bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066c0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	4313      	orrs	r3, r2
 80066ca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	68fa      	ldr	r2, [r7, #12]
 80066d2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a1b      	ldr	r2, [pc, #108]	@ (8006748 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d018      	beq.n	8006710 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066e6:	d013      	beq.n	8006710 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a18      	ldr	r2, [pc, #96]	@ (8006750 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d00e      	beq.n	8006710 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a17      	ldr	r2, [pc, #92]	@ (8006754 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d009      	beq.n	8006710 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a12      	ldr	r2, [pc, #72]	@ (800674c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d004      	beq.n	8006710 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a13      	ldr	r2, [pc, #76]	@ (8006758 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d10c      	bne.n	800672a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006716:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	68ba      	ldr	r2, [r7, #8]
 800671e:	4313      	orrs	r3, r2
 8006720:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	68ba      	ldr	r2, [r7, #8]
 8006728:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2201      	movs	r2, #1
 800672e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2200      	movs	r2, #0
 8006736:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800673a:	2300      	movs	r3, #0
}
 800673c:	4618      	mov	r0, r3
 800673e:	3714      	adds	r7, #20
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr
 8006748:	40012c00 	.word	0x40012c00
 800674c:	40013400 	.word	0x40013400
 8006750:	40000400 	.word	0x40000400
 8006754:	40000800 	.word	0x40000800
 8006758:	40014000 	.word	0x40014000

0800675c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800675c:	b480      	push	{r7}
 800675e:	b085      	sub	sp, #20
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006766:	2300      	movs	r3, #0
 8006768:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006770:	2b01      	cmp	r3, #1
 8006772:	d101      	bne.n	8006778 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006774:	2302      	movs	r3, #2
 8006776:	e073      	b.n	8006860 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	68db      	ldr	r3, [r3, #12]
 800678a:	4313      	orrs	r3, r2
 800678c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	4313      	orrs	r3, r2
 800679a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	691b      	ldr	r3, [r3, #16]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	695b      	ldr	r3, [r3, #20]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067de:	4313      	orrs	r3, r2
 80067e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	699b      	ldr	r3, [r3, #24]
 80067ec:	041b      	lsls	r3, r3, #16
 80067ee:	4313      	orrs	r3, r2
 80067f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	69db      	ldr	r3, [r3, #28]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a19      	ldr	r2, [pc, #100]	@ (800686c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d004      	beq.n	8006814 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a18      	ldr	r2, [pc, #96]	@ (8006870 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d11c      	bne.n	800684e <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800681e:	051b      	lsls	r3, r3, #20
 8006820:	4313      	orrs	r3, r2
 8006822:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	6a1b      	ldr	r3, [r3, #32]
 800682e:	4313      	orrs	r3, r2
 8006830:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800683c:	4313      	orrs	r3, r2
 800683e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800684a:	4313      	orrs	r3, r2
 800684c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800685e:	2300      	movs	r3, #0
}
 8006860:	4618      	mov	r0, r3
 8006862:	3714      	adds	r7, #20
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr
 800686c:	40012c00 	.word	0x40012c00
 8006870:	40013400 	.word	0x40013400

08006874 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800687c:	bf00      	nop
 800687e:	370c      	adds	r7, #12
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006890:	bf00      	nop
 8006892:	370c      	adds	r7, #12
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr

0800689c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80068a4:	bf00      	nop
 80068a6:	370c      	adds	r7, #12
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b083      	sub	sp, #12
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80068b8:	bf00      	nop
 80068ba:	370c      	adds	r7, #12
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80068cc:	bf00      	nop
 80068ce:	370c      	adds	r7, #12
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr

080068d8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80068d8:	b480      	push	{r7}
 80068da:	b083      	sub	sp, #12
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80068e0:	bf00      	nop
 80068e2:	370c      	adds	r7, #12
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr

080068ec <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b083      	sub	sp, #12
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80068f4:	bf00      	nop
 80068f6:	370c      	adds	r7, #12
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr

08006900 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b082      	sub	sp, #8
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d101      	bne.n	8006912 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	e042      	b.n	8006998 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006918:	2b00      	cmp	r3, #0
 800691a:	d106      	bne.n	800692a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f7fb fb67 	bl	8001ff8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2224      	movs	r2, #36	@ 0x24
 800692e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f022 0201 	bic.w	r2, r2, #1
 8006940:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006946:	2b00      	cmp	r3, #0
 8006948:	d002      	beq.n	8006950 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 ffca 	bl	80078e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f000 fcfb 	bl	800734c <UART_SetConfig>
 8006956:	4603      	mov	r3, r0
 8006958:	2b01      	cmp	r3, #1
 800695a:	d101      	bne.n	8006960 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	e01b      	b.n	8006998 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	685a      	ldr	r2, [r3, #4]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800696e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	689a      	ldr	r2, [r3, #8]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800697e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f042 0201 	orr.w	r2, r2, #1
 800698e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f001 f849 	bl	8007a28 <UART_CheckIdleState>
 8006996:	4603      	mov	r3, r0
}
 8006998:	4618      	mov	r0, r3
 800699a:	3708      	adds	r7, #8
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b08a      	sub	sp, #40	@ 0x28
 80069a4:	af02      	add	r7, sp, #8
 80069a6:	60f8      	str	r0, [r7, #12]
 80069a8:	60b9      	str	r1, [r7, #8]
 80069aa:	603b      	str	r3, [r7, #0]
 80069ac:	4613      	mov	r3, r2
 80069ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069b6:	2b20      	cmp	r3, #32
 80069b8:	d17b      	bne.n	8006ab2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d002      	beq.n	80069c6 <HAL_UART_Transmit+0x26>
 80069c0:	88fb      	ldrh	r3, [r7, #6]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d101      	bne.n	80069ca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80069c6:	2301      	movs	r3, #1
 80069c8:	e074      	b.n	8006ab4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2200      	movs	r2, #0
 80069ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2221      	movs	r2, #33	@ 0x21
 80069d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80069da:	f7fb fe3b 	bl	8002654 <HAL_GetTick>
 80069de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	88fa      	ldrh	r2, [r7, #6]
 80069e4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	88fa      	ldrh	r2, [r7, #6]
 80069ec:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069f8:	d108      	bne.n	8006a0c <HAL_UART_Transmit+0x6c>
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	691b      	ldr	r3, [r3, #16]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d104      	bne.n	8006a0c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006a02:	2300      	movs	r3, #0
 8006a04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	61bb      	str	r3, [r7, #24]
 8006a0a:	e003      	b.n	8006a14 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a10:	2300      	movs	r3, #0
 8006a12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006a14:	e030      	b.n	8006a78 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	9300      	str	r3, [sp, #0]
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	2180      	movs	r1, #128	@ 0x80
 8006a20:	68f8      	ldr	r0, [r7, #12]
 8006a22:	f001 f8ab 	bl	8007b7c <UART_WaitOnFlagUntilTimeout>
 8006a26:	4603      	mov	r3, r0
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d005      	beq.n	8006a38 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2220      	movs	r2, #32
 8006a30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006a34:	2303      	movs	r3, #3
 8006a36:	e03d      	b.n	8006ab4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006a38:	69fb      	ldr	r3, [r7, #28]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d10b      	bne.n	8006a56 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a3e:	69bb      	ldr	r3, [r7, #24]
 8006a40:	881b      	ldrh	r3, [r3, #0]
 8006a42:	461a      	mov	r2, r3
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a4c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006a4e:	69bb      	ldr	r3, [r7, #24]
 8006a50:	3302      	adds	r3, #2
 8006a52:	61bb      	str	r3, [r7, #24]
 8006a54:	e007      	b.n	8006a66 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	781a      	ldrb	r2, [r3, #0]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006a60:	69fb      	ldr	r3, [r7, #28]
 8006a62:	3301      	adds	r3, #1
 8006a64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	3b01      	subs	r3, #1
 8006a70:	b29a      	uxth	r2, r3
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d1c8      	bne.n	8006a16 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	9300      	str	r3, [sp, #0]
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	2140      	movs	r1, #64	@ 0x40
 8006a8e:	68f8      	ldr	r0, [r7, #12]
 8006a90:	f001 f874 	bl	8007b7c <UART_WaitOnFlagUntilTimeout>
 8006a94:	4603      	mov	r3, r0
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d005      	beq.n	8006aa6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2220      	movs	r2, #32
 8006a9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006aa2:	2303      	movs	r3, #3
 8006aa4:	e006      	b.n	8006ab4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2220      	movs	r2, #32
 8006aaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	e000      	b.n	8006ab4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006ab2:	2302      	movs	r3, #2
  }
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3720      	adds	r7, #32
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}

08006abc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b08a      	sub	sp, #40	@ 0x28
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	4613      	mov	r3, r2
 8006ac8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006ad0:	2b20      	cmp	r3, #32
 8006ad2:	d137      	bne.n	8006b44 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d002      	beq.n	8006ae0 <HAL_UART_Receive_DMA+0x24>
 8006ada:	88fb      	ldrh	r3, [r7, #6]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d101      	bne.n	8006ae4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e030      	b.n	8006b46 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a18      	ldr	r2, [pc, #96]	@ (8006b50 <HAL_UART_Receive_DMA+0x94>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d01f      	beq.n	8006b34 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d018      	beq.n	8006b34 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	e853 3f00 	ldrex	r3, [r3]
 8006b0e:	613b      	str	r3, [r7, #16]
   return(result);
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006b16:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b20:	623b      	str	r3, [r7, #32]
 8006b22:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b24:	69f9      	ldr	r1, [r7, #28]
 8006b26:	6a3a      	ldr	r2, [r7, #32]
 8006b28:	e841 2300 	strex	r3, r2, [r1]
 8006b2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b2e:	69bb      	ldr	r3, [r7, #24]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d1e6      	bne.n	8006b02 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006b34:	88fb      	ldrh	r3, [r7, #6]
 8006b36:	461a      	mov	r2, r3
 8006b38:	68b9      	ldr	r1, [r7, #8]
 8006b3a:	68f8      	ldr	r0, [r7, #12]
 8006b3c:	f001 f88c 	bl	8007c58 <UART_Start_Receive_DMA>
 8006b40:	4603      	mov	r3, r0
 8006b42:	e000      	b.n	8006b46 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006b44:	2302      	movs	r3, #2
  }
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3728      	adds	r7, #40	@ 0x28
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	40008000 	.word	0x40008000

08006b54 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b090      	sub	sp, #64	@ 0x40
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b6a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b76:	2b80      	cmp	r3, #128	@ 0x80
 8006b78:	d139      	bne.n	8006bee <HAL_UART_DMAStop+0x9a>
 8006b7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b7c:	2b21      	cmp	r3, #33	@ 0x21
 8006b7e:	d136      	bne.n	8006bee <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	3308      	adds	r3, #8
 8006b86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b88:	6a3b      	ldr	r3, [r7, #32]
 8006b8a:	e853 3f00 	ldrex	r3, [r3]
 8006b8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b90:	69fb      	ldr	r3, [r7, #28]
 8006b92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b96:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	3308      	adds	r3, #8
 8006b9e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006ba0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ba2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ba6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ba8:	e841 2300 	strex	r3, r2, [r1]
 8006bac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d1e5      	bne.n	8006b80 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d015      	beq.n	8006be8 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f7fc ff6a 	bl	8003a9a <HAL_DMA_Abort>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d00d      	beq.n	8006be8 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f7fd f8d1 	bl	8003d78 <HAL_DMA_GetError>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	2b20      	cmp	r3, #32
 8006bda:	d105      	bne.n	8006be8 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2210      	movs	r2, #16
 8006be0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8006be4:	2303      	movs	r3, #3
 8006be6:	e047      	b.n	8006c78 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f001 f8db 	bl	8007da4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bf8:	2b40      	cmp	r3, #64	@ 0x40
 8006bfa:	d13c      	bne.n	8006c76 <HAL_UART_DMAStop+0x122>
 8006bfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bfe:	2b22      	cmp	r3, #34	@ 0x22
 8006c00:	d139      	bne.n	8006c76 <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	3308      	adds	r3, #8
 8006c08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	e853 3f00 	ldrex	r3, [r3]
 8006c10:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c18:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	3308      	adds	r3, #8
 8006c20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c22:	61ba      	str	r2, [r7, #24]
 8006c24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c26:	6979      	ldr	r1, [r7, #20]
 8006c28:	69ba      	ldr	r2, [r7, #24]
 8006c2a:	e841 2300 	strex	r3, r2, [r1]
 8006c2e:	613b      	str	r3, [r7, #16]
   return(result);
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d1e5      	bne.n	8006c02 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d017      	beq.n	8006c70 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c46:	4618      	mov	r0, r3
 8006c48:	f7fc ff27 	bl	8003a9a <HAL_DMA_Abort>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d00e      	beq.n	8006c70 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f7fd f88d 	bl	8003d78 <HAL_DMA_GetError>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	2b20      	cmp	r3, #32
 8006c62:	d105      	bne.n	8006c70 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2210      	movs	r2, #16
 8006c68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8006c6c:	2303      	movs	r3, #3
 8006c6e:	e003      	b.n	8006c78 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f001 f8d8 	bl	8007e26 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8006c76:	2300      	movs	r3, #0
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3740      	adds	r7, #64	@ 0x40
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b0ba      	sub	sp, #232	@ 0xe8
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	69db      	ldr	r3, [r3, #28]
 8006c8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006ca6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006caa:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006cae:	4013      	ands	r3, r2
 8006cb0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006cb4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d11b      	bne.n	8006cf4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006cbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cc0:	f003 0320 	and.w	r3, r3, #32
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d015      	beq.n	8006cf4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006cc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ccc:	f003 0320 	and.w	r3, r3, #32
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d105      	bne.n	8006ce0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006cd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006cd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d009      	beq.n	8006cf4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	f000 8300 	beq.w	80072ea <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	4798      	blx	r3
      }
      return;
 8006cf2:	e2fa      	b.n	80072ea <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006cf4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	f000 8123 	beq.w	8006f44 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006cfe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006d02:	4b8d      	ldr	r3, [pc, #564]	@ (8006f38 <HAL_UART_IRQHandler+0x2b8>)
 8006d04:	4013      	ands	r3, r2
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d106      	bne.n	8006d18 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006d0a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006d0e:	4b8b      	ldr	r3, [pc, #556]	@ (8006f3c <HAL_UART_IRQHandler+0x2bc>)
 8006d10:	4013      	ands	r3, r2
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	f000 8116 	beq.w	8006f44 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006d18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d1c:	f003 0301 	and.w	r3, r3, #1
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d011      	beq.n	8006d48 <HAL_UART_IRQHandler+0xc8>
 8006d24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d00b      	beq.n	8006d48 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	2201      	movs	r2, #1
 8006d36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d3e:	f043 0201 	orr.w	r2, r3, #1
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d4c:	f003 0302 	and.w	r3, r3, #2
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d011      	beq.n	8006d78 <HAL_UART_IRQHandler+0xf8>
 8006d54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d58:	f003 0301 	and.w	r3, r3, #1
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d00b      	beq.n	8006d78 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2202      	movs	r2, #2
 8006d66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d6e:	f043 0204 	orr.w	r2, r3, #4
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d7c:	f003 0304 	and.w	r3, r3, #4
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d011      	beq.n	8006da8 <HAL_UART_IRQHandler+0x128>
 8006d84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d88:	f003 0301 	and.w	r3, r3, #1
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d00b      	beq.n	8006da8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	2204      	movs	r2, #4
 8006d96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d9e:	f043 0202 	orr.w	r2, r3, #2
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006da8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006dac:	f003 0308 	and.w	r3, r3, #8
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d017      	beq.n	8006de4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006db4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006db8:	f003 0320 	and.w	r3, r3, #32
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d105      	bne.n	8006dcc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006dc0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006dc4:	4b5c      	ldr	r3, [pc, #368]	@ (8006f38 <HAL_UART_IRQHandler+0x2b8>)
 8006dc6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d00b      	beq.n	8006de4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	2208      	movs	r2, #8
 8006dd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dda:	f043 0208 	orr.w	r2, r3, #8
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006de4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006de8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d012      	beq.n	8006e16 <HAL_UART_IRQHandler+0x196>
 8006df0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006df4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d00c      	beq.n	8006e16 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006e04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e0c:	f043 0220 	orr.w	r2, r3, #32
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	f000 8266 	beq.w	80072ee <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e26:	f003 0320 	and.w	r3, r3, #32
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d013      	beq.n	8006e56 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006e2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e32:	f003 0320 	and.w	r3, r3, #32
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d105      	bne.n	8006e46 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006e3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d007      	beq.n	8006e56 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d003      	beq.n	8006e56 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e5c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e6a:	2b40      	cmp	r3, #64	@ 0x40
 8006e6c:	d005      	beq.n	8006e7a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006e6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e72:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d054      	beq.n	8006f24 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 ffd3 	bl	8007e26 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e8a:	2b40      	cmp	r3, #64	@ 0x40
 8006e8c:	d146      	bne.n	8006f1c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	3308      	adds	r3, #8
 8006e94:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e98:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006e9c:	e853 3f00 	ldrex	r3, [r3]
 8006ea0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006ea4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006ea8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006eac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	3308      	adds	r3, #8
 8006eb6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006eba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006ebe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006ec6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006eca:	e841 2300 	strex	r3, r2, [r1]
 8006ece:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006ed2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d1d9      	bne.n	8006e8e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d017      	beq.n	8006f14 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006eea:	4a15      	ldr	r2, [pc, #84]	@ (8006f40 <HAL_UART_IRQHandler+0x2c0>)
 8006eec:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f7fc fe29 	bl	8003b4c <HAL_DMA_Abort_IT>
 8006efa:	4603      	mov	r3, r0
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d019      	beq.n	8006f34 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006f0e:	4610      	mov	r0, r2
 8006f10:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f12:	e00f      	b.n	8006f34 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f7fa fa53 	bl	80013c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f1a:	e00b      	b.n	8006f34 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f7fa fa4f 	bl	80013c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f22:	e007      	b.n	8006f34 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f7fa fa4b 	bl	80013c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006f32:	e1dc      	b.n	80072ee <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f34:	bf00      	nop
    return;
 8006f36:	e1da      	b.n	80072ee <HAL_UART_IRQHandler+0x66e>
 8006f38:	10000001 	.word	0x10000001
 8006f3c:	04000120 	.word	0x04000120
 8006f40:	080080dd 	.word	0x080080dd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	f040 8170 	bne.w	800722e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006f4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f52:	f003 0310 	and.w	r3, r3, #16
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	f000 8169 	beq.w	800722e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006f5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f60:	f003 0310 	and.w	r3, r3, #16
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	f000 8162 	beq.w	800722e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	2210      	movs	r2, #16
 8006f70:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f7c:	2b40      	cmp	r3, #64	@ 0x40
 8006f7e:	f040 80d8 	bne.w	8007132 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006f90:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	f000 80af 	beq.w	80070f8 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006fa0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	f080 80a7 	bcs.w	80070f8 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006fb0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f003 0320 	and.w	r3, r3, #32
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	f040 8087 	bne.w	80070d6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006fd4:	e853 3f00 	ldrex	r3, [r3]
 8006fd8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006fdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006fe0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006fe4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	461a      	mov	r2, r3
 8006fee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006ff2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006ff6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ffa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006ffe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007002:	e841 2300 	strex	r3, r2, [r1]
 8007006:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800700a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800700e:	2b00      	cmp	r3, #0
 8007010:	d1da      	bne.n	8006fc8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	3308      	adds	r3, #8
 8007018:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800701a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800701c:	e853 3f00 	ldrex	r3, [r3]
 8007020:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007022:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007024:	f023 0301 	bic.w	r3, r3, #1
 8007028:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	3308      	adds	r3, #8
 8007032:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007036:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800703a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800703c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800703e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007042:	e841 2300 	strex	r3, r2, [r1]
 8007046:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007048:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800704a:	2b00      	cmp	r3, #0
 800704c:	d1e1      	bne.n	8007012 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	3308      	adds	r3, #8
 8007054:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007056:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007058:	e853 3f00 	ldrex	r3, [r3]
 800705c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800705e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007060:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007064:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	3308      	adds	r3, #8
 800706e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007072:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007074:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007076:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007078:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800707a:	e841 2300 	strex	r3, r2, [r1]
 800707e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007080:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007082:	2b00      	cmp	r3, #0
 8007084:	d1e3      	bne.n	800704e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2220      	movs	r2, #32
 800708a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800709a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800709c:	e853 3f00 	ldrex	r3, [r3]
 80070a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80070a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80070a4:	f023 0310 	bic.w	r3, r3, #16
 80070a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	461a      	mov	r2, r3
 80070b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80070b6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80070b8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80070bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80070be:	e841 2300 	strex	r3, r2, [r1]
 80070c2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80070c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d1e4      	bne.n	8007094 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070d0:	4618      	mov	r0, r3
 80070d2:	f7fc fce2 	bl	8003a9a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2202      	movs	r2, #2
 80070da:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	1ad3      	subs	r3, r2, r3
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	4619      	mov	r1, r3
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 f911 	bl	8007318 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80070f6:	e0fc      	b.n	80072f2 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80070fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007102:	429a      	cmp	r2, r3
 8007104:	f040 80f5 	bne.w	80072f2 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f003 0320 	and.w	r3, r3, #32
 8007116:	2b20      	cmp	r3, #32
 8007118:	f040 80eb 	bne.w	80072f2 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2202      	movs	r2, #2
 8007120:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007128:	4619      	mov	r1, r3
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 f8f4 	bl	8007318 <HAL_UARTEx_RxEventCallback>
      return;
 8007130:	e0df      	b.n	80072f2 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800713e:	b29b      	uxth	r3, r3
 8007140:	1ad3      	subs	r3, r2, r3
 8007142:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800714c:	b29b      	uxth	r3, r3
 800714e:	2b00      	cmp	r3, #0
 8007150:	f000 80d1 	beq.w	80072f6 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8007154:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007158:	2b00      	cmp	r3, #0
 800715a:	f000 80cc 	beq.w	80072f6 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007166:	e853 3f00 	ldrex	r3, [r3]
 800716a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800716c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800716e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007172:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	461a      	mov	r2, r3
 800717c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007180:	647b      	str	r3, [r7, #68]	@ 0x44
 8007182:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007184:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007186:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007188:	e841 2300 	strex	r3, r2, [r1]
 800718c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800718e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007190:	2b00      	cmp	r3, #0
 8007192:	d1e4      	bne.n	800715e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	3308      	adds	r3, #8
 800719a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800719c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800719e:	e853 3f00 	ldrex	r3, [r3]
 80071a2:	623b      	str	r3, [r7, #32]
   return(result);
 80071a4:	6a3b      	ldr	r3, [r7, #32]
 80071a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80071aa:	f023 0301 	bic.w	r3, r3, #1
 80071ae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	3308      	adds	r3, #8
 80071b8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80071bc:	633a      	str	r2, [r7, #48]	@ 0x30
 80071be:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80071c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071c4:	e841 2300 	strex	r3, r2, [r1]
 80071c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80071ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d1e1      	bne.n	8007194 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2220      	movs	r2, #32
 80071d4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2200      	movs	r2, #0
 80071e2:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	e853 3f00 	ldrex	r3, [r3]
 80071f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f023 0310 	bic.w	r3, r3, #16
 80071f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	461a      	mov	r2, r3
 8007202:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007206:	61fb      	str	r3, [r7, #28]
 8007208:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800720a:	69b9      	ldr	r1, [r7, #24]
 800720c:	69fa      	ldr	r2, [r7, #28]
 800720e:	e841 2300 	strex	r3, r2, [r1]
 8007212:	617b      	str	r3, [r7, #20]
   return(result);
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d1e4      	bne.n	80071e4 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2202      	movs	r2, #2
 800721e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007220:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007224:	4619      	mov	r1, r3
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 f876 	bl	8007318 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800722c:	e063      	b.n	80072f6 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800722e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007232:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007236:	2b00      	cmp	r3, #0
 8007238:	d00e      	beq.n	8007258 <HAL_UART_IRQHandler+0x5d8>
 800723a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800723e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007242:	2b00      	cmp	r3, #0
 8007244:	d008      	beq.n	8007258 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800724e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f000 ff84 	bl	800815e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007256:	e051      	b.n	80072fc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800725c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007260:	2b00      	cmp	r3, #0
 8007262:	d014      	beq.n	800728e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007264:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007268:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800726c:	2b00      	cmp	r3, #0
 800726e:	d105      	bne.n	800727c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007270:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007274:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007278:	2b00      	cmp	r3, #0
 800727a:	d008      	beq.n	800728e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007280:	2b00      	cmp	r3, #0
 8007282:	d03a      	beq.n	80072fa <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	4798      	blx	r3
    }
    return;
 800728c:	e035      	b.n	80072fa <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800728e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007292:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007296:	2b00      	cmp	r3, #0
 8007298:	d009      	beq.n	80072ae <HAL_UART_IRQHandler+0x62e>
 800729a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800729e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d003      	beq.n	80072ae <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f000 ff2e 	bl	8008108 <UART_EndTransmit_IT>
    return;
 80072ac:	e026      	b.n	80072fc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80072ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d009      	beq.n	80072ce <HAL_UART_IRQHandler+0x64e>
 80072ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072be:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d003      	beq.n	80072ce <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 ff5d 	bl	8008186 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80072cc:	e016      	b.n	80072fc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80072ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d010      	beq.n	80072fc <HAL_UART_IRQHandler+0x67c>
 80072da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	da0c      	bge.n	80072fc <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 ff45 	bl	8008172 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80072e8:	e008      	b.n	80072fc <HAL_UART_IRQHandler+0x67c>
      return;
 80072ea:	bf00      	nop
 80072ec:	e006      	b.n	80072fc <HAL_UART_IRQHandler+0x67c>
    return;
 80072ee:	bf00      	nop
 80072f0:	e004      	b.n	80072fc <HAL_UART_IRQHandler+0x67c>
      return;
 80072f2:	bf00      	nop
 80072f4:	e002      	b.n	80072fc <HAL_UART_IRQHandler+0x67c>
      return;
 80072f6:	bf00      	nop
 80072f8:	e000      	b.n	80072fc <HAL_UART_IRQHandler+0x67c>
    return;
 80072fa:	bf00      	nop
  }
}
 80072fc:	37e8      	adds	r7, #232	@ 0xe8
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}
 8007302:	bf00      	nop

08007304 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007304:	b480      	push	{r7}
 8007306:	b083      	sub	sp, #12
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800730c:	bf00      	nop
 800730e:	370c      	adds	r7, #12
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr

08007318 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007318:	b480      	push	{r7}
 800731a:	b083      	sub	sp, #12
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	460b      	mov	r3, r1
 8007322:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007324:	bf00      	nop
 8007326:	370c      	adds	r7, #12
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr

08007330 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8007330:	b480      	push	{r7}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800733e:	4618      	mov	r0, r3
 8007340:	370c      	adds	r7, #12
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr
	...

0800734c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800734c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007350:	b08c      	sub	sp, #48	@ 0x30
 8007352:	af00      	add	r7, sp, #0
 8007354:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007356:	2300      	movs	r3, #0
 8007358:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	689a      	ldr	r2, [r3, #8]
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	691b      	ldr	r3, [r3, #16]
 8007364:	431a      	orrs	r2, r3
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	695b      	ldr	r3, [r3, #20]
 800736a:	431a      	orrs	r2, r3
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	69db      	ldr	r3, [r3, #28]
 8007370:	4313      	orrs	r3, r2
 8007372:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	4bab      	ldr	r3, [pc, #684]	@ (8007628 <UART_SetConfig+0x2dc>)
 800737c:	4013      	ands	r3, r2
 800737e:	697a      	ldr	r2, [r7, #20]
 8007380:	6812      	ldr	r2, [r2, #0]
 8007382:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007384:	430b      	orrs	r3, r1
 8007386:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	68da      	ldr	r2, [r3, #12]
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	430a      	orrs	r2, r1
 800739c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	699b      	ldr	r3, [r3, #24]
 80073a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4aa0      	ldr	r2, [pc, #640]	@ (800762c <UART_SetConfig+0x2e0>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d004      	beq.n	80073b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	6a1b      	ldr	r3, [r3, #32]
 80073b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073b4:	4313      	orrs	r3, r2
 80073b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80073c2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80073c6:	697a      	ldr	r2, [r7, #20]
 80073c8:	6812      	ldr	r2, [r2, #0]
 80073ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80073cc:	430b      	orrs	r3, r1
 80073ce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073d6:	f023 010f 	bic.w	r1, r3, #15
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	430a      	orrs	r2, r1
 80073e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a91      	ldr	r2, [pc, #580]	@ (8007630 <UART_SetConfig+0x2e4>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d125      	bne.n	800743c <UART_SetConfig+0xf0>
 80073f0:	4b90      	ldr	r3, [pc, #576]	@ (8007634 <UART_SetConfig+0x2e8>)
 80073f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073f6:	f003 0303 	and.w	r3, r3, #3
 80073fa:	2b03      	cmp	r3, #3
 80073fc:	d81a      	bhi.n	8007434 <UART_SetConfig+0xe8>
 80073fe:	a201      	add	r2, pc, #4	@ (adr r2, 8007404 <UART_SetConfig+0xb8>)
 8007400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007404:	08007415 	.word	0x08007415
 8007408:	08007425 	.word	0x08007425
 800740c:	0800741d 	.word	0x0800741d
 8007410:	0800742d 	.word	0x0800742d
 8007414:	2301      	movs	r3, #1
 8007416:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800741a:	e0d6      	b.n	80075ca <UART_SetConfig+0x27e>
 800741c:	2302      	movs	r3, #2
 800741e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007422:	e0d2      	b.n	80075ca <UART_SetConfig+0x27e>
 8007424:	2304      	movs	r3, #4
 8007426:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800742a:	e0ce      	b.n	80075ca <UART_SetConfig+0x27e>
 800742c:	2308      	movs	r3, #8
 800742e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007432:	e0ca      	b.n	80075ca <UART_SetConfig+0x27e>
 8007434:	2310      	movs	r3, #16
 8007436:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800743a:	e0c6      	b.n	80075ca <UART_SetConfig+0x27e>
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a7d      	ldr	r2, [pc, #500]	@ (8007638 <UART_SetConfig+0x2ec>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d138      	bne.n	80074b8 <UART_SetConfig+0x16c>
 8007446:	4b7b      	ldr	r3, [pc, #492]	@ (8007634 <UART_SetConfig+0x2e8>)
 8007448:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800744c:	f003 030c 	and.w	r3, r3, #12
 8007450:	2b0c      	cmp	r3, #12
 8007452:	d82d      	bhi.n	80074b0 <UART_SetConfig+0x164>
 8007454:	a201      	add	r2, pc, #4	@ (adr r2, 800745c <UART_SetConfig+0x110>)
 8007456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800745a:	bf00      	nop
 800745c:	08007491 	.word	0x08007491
 8007460:	080074b1 	.word	0x080074b1
 8007464:	080074b1 	.word	0x080074b1
 8007468:	080074b1 	.word	0x080074b1
 800746c:	080074a1 	.word	0x080074a1
 8007470:	080074b1 	.word	0x080074b1
 8007474:	080074b1 	.word	0x080074b1
 8007478:	080074b1 	.word	0x080074b1
 800747c:	08007499 	.word	0x08007499
 8007480:	080074b1 	.word	0x080074b1
 8007484:	080074b1 	.word	0x080074b1
 8007488:	080074b1 	.word	0x080074b1
 800748c:	080074a9 	.word	0x080074a9
 8007490:	2300      	movs	r3, #0
 8007492:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007496:	e098      	b.n	80075ca <UART_SetConfig+0x27e>
 8007498:	2302      	movs	r3, #2
 800749a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800749e:	e094      	b.n	80075ca <UART_SetConfig+0x27e>
 80074a0:	2304      	movs	r3, #4
 80074a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074a6:	e090      	b.n	80075ca <UART_SetConfig+0x27e>
 80074a8:	2308      	movs	r3, #8
 80074aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074ae:	e08c      	b.n	80075ca <UART_SetConfig+0x27e>
 80074b0:	2310      	movs	r3, #16
 80074b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074b6:	e088      	b.n	80075ca <UART_SetConfig+0x27e>
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a5f      	ldr	r2, [pc, #380]	@ (800763c <UART_SetConfig+0x2f0>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d125      	bne.n	800750e <UART_SetConfig+0x1c2>
 80074c2:	4b5c      	ldr	r3, [pc, #368]	@ (8007634 <UART_SetConfig+0x2e8>)
 80074c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074c8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80074cc:	2b30      	cmp	r3, #48	@ 0x30
 80074ce:	d016      	beq.n	80074fe <UART_SetConfig+0x1b2>
 80074d0:	2b30      	cmp	r3, #48	@ 0x30
 80074d2:	d818      	bhi.n	8007506 <UART_SetConfig+0x1ba>
 80074d4:	2b20      	cmp	r3, #32
 80074d6:	d00a      	beq.n	80074ee <UART_SetConfig+0x1a2>
 80074d8:	2b20      	cmp	r3, #32
 80074da:	d814      	bhi.n	8007506 <UART_SetConfig+0x1ba>
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d002      	beq.n	80074e6 <UART_SetConfig+0x19a>
 80074e0:	2b10      	cmp	r3, #16
 80074e2:	d008      	beq.n	80074f6 <UART_SetConfig+0x1aa>
 80074e4:	e00f      	b.n	8007506 <UART_SetConfig+0x1ba>
 80074e6:	2300      	movs	r3, #0
 80074e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074ec:	e06d      	b.n	80075ca <UART_SetConfig+0x27e>
 80074ee:	2302      	movs	r3, #2
 80074f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074f4:	e069      	b.n	80075ca <UART_SetConfig+0x27e>
 80074f6:	2304      	movs	r3, #4
 80074f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074fc:	e065      	b.n	80075ca <UART_SetConfig+0x27e>
 80074fe:	2308      	movs	r3, #8
 8007500:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007504:	e061      	b.n	80075ca <UART_SetConfig+0x27e>
 8007506:	2310      	movs	r3, #16
 8007508:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800750c:	e05d      	b.n	80075ca <UART_SetConfig+0x27e>
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a4b      	ldr	r2, [pc, #300]	@ (8007640 <UART_SetConfig+0x2f4>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d125      	bne.n	8007564 <UART_SetConfig+0x218>
 8007518:	4b46      	ldr	r3, [pc, #280]	@ (8007634 <UART_SetConfig+0x2e8>)
 800751a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800751e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007522:	2bc0      	cmp	r3, #192	@ 0xc0
 8007524:	d016      	beq.n	8007554 <UART_SetConfig+0x208>
 8007526:	2bc0      	cmp	r3, #192	@ 0xc0
 8007528:	d818      	bhi.n	800755c <UART_SetConfig+0x210>
 800752a:	2b80      	cmp	r3, #128	@ 0x80
 800752c:	d00a      	beq.n	8007544 <UART_SetConfig+0x1f8>
 800752e:	2b80      	cmp	r3, #128	@ 0x80
 8007530:	d814      	bhi.n	800755c <UART_SetConfig+0x210>
 8007532:	2b00      	cmp	r3, #0
 8007534:	d002      	beq.n	800753c <UART_SetConfig+0x1f0>
 8007536:	2b40      	cmp	r3, #64	@ 0x40
 8007538:	d008      	beq.n	800754c <UART_SetConfig+0x200>
 800753a:	e00f      	b.n	800755c <UART_SetConfig+0x210>
 800753c:	2300      	movs	r3, #0
 800753e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007542:	e042      	b.n	80075ca <UART_SetConfig+0x27e>
 8007544:	2302      	movs	r3, #2
 8007546:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800754a:	e03e      	b.n	80075ca <UART_SetConfig+0x27e>
 800754c:	2304      	movs	r3, #4
 800754e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007552:	e03a      	b.n	80075ca <UART_SetConfig+0x27e>
 8007554:	2308      	movs	r3, #8
 8007556:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800755a:	e036      	b.n	80075ca <UART_SetConfig+0x27e>
 800755c:	2310      	movs	r3, #16
 800755e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007562:	e032      	b.n	80075ca <UART_SetConfig+0x27e>
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a30      	ldr	r2, [pc, #192]	@ (800762c <UART_SetConfig+0x2e0>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d12a      	bne.n	80075c4 <UART_SetConfig+0x278>
 800756e:	4b31      	ldr	r3, [pc, #196]	@ (8007634 <UART_SetConfig+0x2e8>)
 8007570:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007574:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007578:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800757c:	d01a      	beq.n	80075b4 <UART_SetConfig+0x268>
 800757e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007582:	d81b      	bhi.n	80075bc <UART_SetConfig+0x270>
 8007584:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007588:	d00c      	beq.n	80075a4 <UART_SetConfig+0x258>
 800758a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800758e:	d815      	bhi.n	80075bc <UART_SetConfig+0x270>
 8007590:	2b00      	cmp	r3, #0
 8007592:	d003      	beq.n	800759c <UART_SetConfig+0x250>
 8007594:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007598:	d008      	beq.n	80075ac <UART_SetConfig+0x260>
 800759a:	e00f      	b.n	80075bc <UART_SetConfig+0x270>
 800759c:	2300      	movs	r3, #0
 800759e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075a2:	e012      	b.n	80075ca <UART_SetConfig+0x27e>
 80075a4:	2302      	movs	r3, #2
 80075a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075aa:	e00e      	b.n	80075ca <UART_SetConfig+0x27e>
 80075ac:	2304      	movs	r3, #4
 80075ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075b2:	e00a      	b.n	80075ca <UART_SetConfig+0x27e>
 80075b4:	2308      	movs	r3, #8
 80075b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075ba:	e006      	b.n	80075ca <UART_SetConfig+0x27e>
 80075bc:	2310      	movs	r3, #16
 80075be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075c2:	e002      	b.n	80075ca <UART_SetConfig+0x27e>
 80075c4:	2310      	movs	r3, #16
 80075c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a17      	ldr	r2, [pc, #92]	@ (800762c <UART_SetConfig+0x2e0>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	f040 80a8 	bne.w	8007726 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80075d6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80075da:	2b08      	cmp	r3, #8
 80075dc:	d834      	bhi.n	8007648 <UART_SetConfig+0x2fc>
 80075de:	a201      	add	r2, pc, #4	@ (adr r2, 80075e4 <UART_SetConfig+0x298>)
 80075e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075e4:	08007609 	.word	0x08007609
 80075e8:	08007649 	.word	0x08007649
 80075ec:	08007611 	.word	0x08007611
 80075f0:	08007649 	.word	0x08007649
 80075f4:	08007617 	.word	0x08007617
 80075f8:	08007649 	.word	0x08007649
 80075fc:	08007649 	.word	0x08007649
 8007600:	08007649 	.word	0x08007649
 8007604:	0800761f 	.word	0x0800761f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007608:	f7fd fb6c 	bl	8004ce4 <HAL_RCC_GetPCLK1Freq>
 800760c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800760e:	e021      	b.n	8007654 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007610:	4b0c      	ldr	r3, [pc, #48]	@ (8007644 <UART_SetConfig+0x2f8>)
 8007612:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007614:	e01e      	b.n	8007654 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007616:	f7fd faf7 	bl	8004c08 <HAL_RCC_GetSysClockFreq>
 800761a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800761c:	e01a      	b.n	8007654 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800761e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007622:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007624:	e016      	b.n	8007654 <UART_SetConfig+0x308>
 8007626:	bf00      	nop
 8007628:	cfff69f3 	.word	0xcfff69f3
 800762c:	40008000 	.word	0x40008000
 8007630:	40013800 	.word	0x40013800
 8007634:	40021000 	.word	0x40021000
 8007638:	40004400 	.word	0x40004400
 800763c:	40004800 	.word	0x40004800
 8007640:	40004c00 	.word	0x40004c00
 8007644:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007648:	2300      	movs	r3, #0
 800764a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800764c:	2301      	movs	r3, #1
 800764e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007652:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007656:	2b00      	cmp	r3, #0
 8007658:	f000 812a 	beq.w	80078b0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007660:	4a9e      	ldr	r2, [pc, #632]	@ (80078dc <UART_SetConfig+0x590>)
 8007662:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007666:	461a      	mov	r2, r3
 8007668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800766a:	fbb3 f3f2 	udiv	r3, r3, r2
 800766e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	685a      	ldr	r2, [r3, #4]
 8007674:	4613      	mov	r3, r2
 8007676:	005b      	lsls	r3, r3, #1
 8007678:	4413      	add	r3, r2
 800767a:	69ba      	ldr	r2, [r7, #24]
 800767c:	429a      	cmp	r2, r3
 800767e:	d305      	bcc.n	800768c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007686:	69ba      	ldr	r2, [r7, #24]
 8007688:	429a      	cmp	r2, r3
 800768a:	d903      	bls.n	8007694 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800768c:	2301      	movs	r3, #1
 800768e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007692:	e10d      	b.n	80078b0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007696:	2200      	movs	r2, #0
 8007698:	60bb      	str	r3, [r7, #8]
 800769a:	60fa      	str	r2, [r7, #12]
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076a0:	4a8e      	ldr	r2, [pc, #568]	@ (80078dc <UART_SetConfig+0x590>)
 80076a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	2200      	movs	r2, #0
 80076aa:	603b      	str	r3, [r7, #0]
 80076ac:	607a      	str	r2, [r7, #4]
 80076ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80076b6:	f7f9 fb0f 	bl	8000cd8 <__aeabi_uldivmod>
 80076ba:	4602      	mov	r2, r0
 80076bc:	460b      	mov	r3, r1
 80076be:	4610      	mov	r0, r2
 80076c0:	4619      	mov	r1, r3
 80076c2:	f04f 0200 	mov.w	r2, #0
 80076c6:	f04f 0300 	mov.w	r3, #0
 80076ca:	020b      	lsls	r3, r1, #8
 80076cc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80076d0:	0202      	lsls	r2, r0, #8
 80076d2:	6979      	ldr	r1, [r7, #20]
 80076d4:	6849      	ldr	r1, [r1, #4]
 80076d6:	0849      	lsrs	r1, r1, #1
 80076d8:	2000      	movs	r0, #0
 80076da:	460c      	mov	r4, r1
 80076dc:	4605      	mov	r5, r0
 80076de:	eb12 0804 	adds.w	r8, r2, r4
 80076e2:	eb43 0905 	adc.w	r9, r3, r5
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	469a      	mov	sl, r3
 80076ee:	4693      	mov	fp, r2
 80076f0:	4652      	mov	r2, sl
 80076f2:	465b      	mov	r3, fp
 80076f4:	4640      	mov	r0, r8
 80076f6:	4649      	mov	r1, r9
 80076f8:	f7f9 faee 	bl	8000cd8 <__aeabi_uldivmod>
 80076fc:	4602      	mov	r2, r0
 80076fe:	460b      	mov	r3, r1
 8007700:	4613      	mov	r3, r2
 8007702:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007704:	6a3b      	ldr	r3, [r7, #32]
 8007706:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800770a:	d308      	bcc.n	800771e <UART_SetConfig+0x3d2>
 800770c:	6a3b      	ldr	r3, [r7, #32]
 800770e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007712:	d204      	bcs.n	800771e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	6a3a      	ldr	r2, [r7, #32]
 800771a:	60da      	str	r2, [r3, #12]
 800771c:	e0c8      	b.n	80078b0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800771e:	2301      	movs	r3, #1
 8007720:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007724:	e0c4      	b.n	80078b0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	69db      	ldr	r3, [r3, #28]
 800772a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800772e:	d167      	bne.n	8007800 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8007730:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007734:	2b08      	cmp	r3, #8
 8007736:	d828      	bhi.n	800778a <UART_SetConfig+0x43e>
 8007738:	a201      	add	r2, pc, #4	@ (adr r2, 8007740 <UART_SetConfig+0x3f4>)
 800773a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800773e:	bf00      	nop
 8007740:	08007765 	.word	0x08007765
 8007744:	0800776d 	.word	0x0800776d
 8007748:	08007775 	.word	0x08007775
 800774c:	0800778b 	.word	0x0800778b
 8007750:	0800777b 	.word	0x0800777b
 8007754:	0800778b 	.word	0x0800778b
 8007758:	0800778b 	.word	0x0800778b
 800775c:	0800778b 	.word	0x0800778b
 8007760:	08007783 	.word	0x08007783
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007764:	f7fd fabe 	bl	8004ce4 <HAL_RCC_GetPCLK1Freq>
 8007768:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800776a:	e014      	b.n	8007796 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800776c:	f7fd fad0 	bl	8004d10 <HAL_RCC_GetPCLK2Freq>
 8007770:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007772:	e010      	b.n	8007796 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007774:	4b5a      	ldr	r3, [pc, #360]	@ (80078e0 <UART_SetConfig+0x594>)
 8007776:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007778:	e00d      	b.n	8007796 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800777a:	f7fd fa45 	bl	8004c08 <HAL_RCC_GetSysClockFreq>
 800777e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007780:	e009      	b.n	8007796 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007782:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007786:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007788:	e005      	b.n	8007796 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800778a:	2300      	movs	r3, #0
 800778c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007794:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007798:	2b00      	cmp	r3, #0
 800779a:	f000 8089 	beq.w	80078b0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077a2:	4a4e      	ldr	r2, [pc, #312]	@ (80078dc <UART_SetConfig+0x590>)
 80077a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077a8:	461a      	mov	r2, r3
 80077aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80077b0:	005a      	lsls	r2, r3, #1
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	085b      	lsrs	r3, r3, #1
 80077b8:	441a      	add	r2, r3
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	fbb2 f3f3 	udiv	r3, r2, r3
 80077c2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077c4:	6a3b      	ldr	r3, [r7, #32]
 80077c6:	2b0f      	cmp	r3, #15
 80077c8:	d916      	bls.n	80077f8 <UART_SetConfig+0x4ac>
 80077ca:	6a3b      	ldr	r3, [r7, #32]
 80077cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077d0:	d212      	bcs.n	80077f8 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80077d2:	6a3b      	ldr	r3, [r7, #32]
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	f023 030f 	bic.w	r3, r3, #15
 80077da:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80077dc:	6a3b      	ldr	r3, [r7, #32]
 80077de:	085b      	lsrs	r3, r3, #1
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	f003 0307 	and.w	r3, r3, #7
 80077e6:	b29a      	uxth	r2, r3
 80077e8:	8bfb      	ldrh	r3, [r7, #30]
 80077ea:	4313      	orrs	r3, r2
 80077ec:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	8bfa      	ldrh	r2, [r7, #30]
 80077f4:	60da      	str	r2, [r3, #12]
 80077f6:	e05b      	b.n	80078b0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80077f8:	2301      	movs	r3, #1
 80077fa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80077fe:	e057      	b.n	80078b0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007800:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007804:	2b08      	cmp	r3, #8
 8007806:	d828      	bhi.n	800785a <UART_SetConfig+0x50e>
 8007808:	a201      	add	r2, pc, #4	@ (adr r2, 8007810 <UART_SetConfig+0x4c4>)
 800780a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800780e:	bf00      	nop
 8007810:	08007835 	.word	0x08007835
 8007814:	0800783d 	.word	0x0800783d
 8007818:	08007845 	.word	0x08007845
 800781c:	0800785b 	.word	0x0800785b
 8007820:	0800784b 	.word	0x0800784b
 8007824:	0800785b 	.word	0x0800785b
 8007828:	0800785b 	.word	0x0800785b
 800782c:	0800785b 	.word	0x0800785b
 8007830:	08007853 	.word	0x08007853
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007834:	f7fd fa56 	bl	8004ce4 <HAL_RCC_GetPCLK1Freq>
 8007838:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800783a:	e014      	b.n	8007866 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800783c:	f7fd fa68 	bl	8004d10 <HAL_RCC_GetPCLK2Freq>
 8007840:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007842:	e010      	b.n	8007866 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007844:	4b26      	ldr	r3, [pc, #152]	@ (80078e0 <UART_SetConfig+0x594>)
 8007846:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007848:	e00d      	b.n	8007866 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800784a:	f7fd f9dd 	bl	8004c08 <HAL_RCC_GetSysClockFreq>
 800784e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007850:	e009      	b.n	8007866 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007852:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007856:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007858:	e005      	b.n	8007866 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800785a:	2300      	movs	r3, #0
 800785c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800785e:	2301      	movs	r3, #1
 8007860:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007864:	bf00      	nop
    }

    if (pclk != 0U)
 8007866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007868:	2b00      	cmp	r3, #0
 800786a:	d021      	beq.n	80078b0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007870:	4a1a      	ldr	r2, [pc, #104]	@ (80078dc <UART_SetConfig+0x590>)
 8007872:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007876:	461a      	mov	r2, r3
 8007878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800787a:	fbb3 f2f2 	udiv	r2, r3, r2
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	085b      	lsrs	r3, r3, #1
 8007884:	441a      	add	r2, r3
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	fbb2 f3f3 	udiv	r3, r2, r3
 800788e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007890:	6a3b      	ldr	r3, [r7, #32]
 8007892:	2b0f      	cmp	r3, #15
 8007894:	d909      	bls.n	80078aa <UART_SetConfig+0x55e>
 8007896:	6a3b      	ldr	r3, [r7, #32]
 8007898:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800789c:	d205      	bcs.n	80078aa <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800789e:	6a3b      	ldr	r3, [r7, #32]
 80078a0:	b29a      	uxth	r2, r3
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	60da      	str	r2, [r3, #12]
 80078a8:	e002      	b.n	80078b0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80078aa:	2301      	movs	r3, #1
 80078ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	2201      	movs	r2, #1
 80078b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	2201      	movs	r2, #1
 80078bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	2200      	movs	r2, #0
 80078c4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	2200      	movs	r2, #0
 80078ca:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80078cc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3730      	adds	r7, #48	@ 0x30
 80078d4:	46bd      	mov	sp, r7
 80078d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80078da:	bf00      	nop
 80078dc:	0800cc60 	.word	0x0800cc60
 80078e0:	00f42400 	.word	0x00f42400

080078e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b083      	sub	sp, #12
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078f0:	f003 0308 	and.w	r3, r3, #8
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d00a      	beq.n	800790e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	430a      	orrs	r2, r1
 800790c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007912:	f003 0301 	and.w	r3, r3, #1
 8007916:	2b00      	cmp	r3, #0
 8007918:	d00a      	beq.n	8007930 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	430a      	orrs	r2, r1
 800792e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007934:	f003 0302 	and.w	r3, r3, #2
 8007938:	2b00      	cmp	r3, #0
 800793a:	d00a      	beq.n	8007952 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	430a      	orrs	r2, r1
 8007950:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007956:	f003 0304 	and.w	r3, r3, #4
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00a      	beq.n	8007974 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	430a      	orrs	r2, r1
 8007972:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007978:	f003 0310 	and.w	r3, r3, #16
 800797c:	2b00      	cmp	r3, #0
 800797e:	d00a      	beq.n	8007996 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	430a      	orrs	r2, r1
 8007994:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800799a:	f003 0320 	and.w	r3, r3, #32
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d00a      	beq.n	80079b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	430a      	orrs	r2, r1
 80079b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d01a      	beq.n	80079fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	430a      	orrs	r2, r1
 80079d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80079e2:	d10a      	bne.n	80079fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	430a      	orrs	r2, r1
 80079f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d00a      	beq.n	8007a1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	430a      	orrs	r2, r1
 8007a1a:	605a      	str	r2, [r3, #4]
  }
}
 8007a1c:	bf00      	nop
 8007a1e:	370c      	adds	r7, #12
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr

08007a28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b098      	sub	sp, #96	@ 0x60
 8007a2c:	af02      	add	r7, sp, #8
 8007a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2200      	movs	r2, #0
 8007a34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a38:	f7fa fe0c 	bl	8002654 <HAL_GetTick>
 8007a3c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f003 0308 	and.w	r3, r3, #8
 8007a48:	2b08      	cmp	r3, #8
 8007a4a:	d12f      	bne.n	8007aac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a4c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007a50:	9300      	str	r3, [sp, #0]
 8007a52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a54:	2200      	movs	r2, #0
 8007a56:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 f88e 	bl	8007b7c <UART_WaitOnFlagUntilTimeout>
 8007a60:	4603      	mov	r3, r0
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d022      	beq.n	8007aac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a6e:	e853 3f00 	ldrex	r3, [r3]
 8007a72:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007a74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007a7a:	653b      	str	r3, [r7, #80]	@ 0x50
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	461a      	mov	r2, r3
 8007a82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a84:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a86:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a88:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007a8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a8c:	e841 2300 	strex	r3, r2, [r1]
 8007a90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007a92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d1e6      	bne.n	8007a66 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2220      	movs	r2, #32
 8007a9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007aa8:	2303      	movs	r3, #3
 8007aaa:	e063      	b.n	8007b74 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f003 0304 	and.w	r3, r3, #4
 8007ab6:	2b04      	cmp	r3, #4
 8007ab8:	d149      	bne.n	8007b4e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007aba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007abe:	9300      	str	r3, [sp, #0]
 8007ac0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f000 f857 	bl	8007b7c <UART_WaitOnFlagUntilTimeout>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d03c      	beq.n	8007b4e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007adc:	e853 3f00 	ldrex	r3, [r3]
 8007ae0:	623b      	str	r3, [r7, #32]
   return(result);
 8007ae2:	6a3b      	ldr	r3, [r7, #32]
 8007ae4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ae8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	461a      	mov	r2, r3
 8007af0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007af2:	633b      	str	r3, [r7, #48]	@ 0x30
 8007af4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007af8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007afa:	e841 2300 	strex	r3, r2, [r1]
 8007afe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d1e6      	bne.n	8007ad4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	3308      	adds	r3, #8
 8007b0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	e853 3f00 	ldrex	r3, [r3]
 8007b14:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	f023 0301 	bic.w	r3, r3, #1
 8007b1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	3308      	adds	r3, #8
 8007b24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007b26:	61fa      	str	r2, [r7, #28]
 8007b28:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b2a:	69b9      	ldr	r1, [r7, #24]
 8007b2c:	69fa      	ldr	r2, [r7, #28]
 8007b2e:	e841 2300 	strex	r3, r2, [r1]
 8007b32:	617b      	str	r3, [r7, #20]
   return(result);
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d1e5      	bne.n	8007b06 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2220      	movs	r2, #32
 8007b3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b4a:	2303      	movs	r3, #3
 8007b4c:	e012      	b.n	8007b74 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2220      	movs	r2, #32
 8007b52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2220      	movs	r2, #32
 8007b5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2200      	movs	r2, #0
 8007b62:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2200      	movs	r2, #0
 8007b68:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007b72:	2300      	movs	r3, #0
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3758      	adds	r7, #88	@ 0x58
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	60f8      	str	r0, [r7, #12]
 8007b84:	60b9      	str	r1, [r7, #8]
 8007b86:	603b      	str	r3, [r7, #0]
 8007b88:	4613      	mov	r3, r2
 8007b8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b8c:	e04f      	b.n	8007c2e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b8e:	69bb      	ldr	r3, [r7, #24]
 8007b90:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007b94:	d04b      	beq.n	8007c2e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b96:	f7fa fd5d 	bl	8002654 <HAL_GetTick>
 8007b9a:	4602      	mov	r2, r0
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	1ad3      	subs	r3, r2, r3
 8007ba0:	69ba      	ldr	r2, [r7, #24]
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d302      	bcc.n	8007bac <UART_WaitOnFlagUntilTimeout+0x30>
 8007ba6:	69bb      	ldr	r3, [r7, #24]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d101      	bne.n	8007bb0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007bac:	2303      	movs	r3, #3
 8007bae:	e04e      	b.n	8007c4e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f003 0304 	and.w	r3, r3, #4
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d037      	beq.n	8007c2e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	2b80      	cmp	r3, #128	@ 0x80
 8007bc2:	d034      	beq.n	8007c2e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	2b40      	cmp	r3, #64	@ 0x40
 8007bc8:	d031      	beq.n	8007c2e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	69db      	ldr	r3, [r3, #28]
 8007bd0:	f003 0308 	and.w	r3, r3, #8
 8007bd4:	2b08      	cmp	r3, #8
 8007bd6:	d110      	bne.n	8007bfa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	2208      	movs	r2, #8
 8007bde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007be0:	68f8      	ldr	r0, [r7, #12]
 8007be2:	f000 f920 	bl	8007e26 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2208      	movs	r2, #8
 8007bea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	e029      	b.n	8007c4e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	69db      	ldr	r3, [r3, #28]
 8007c00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c08:	d111      	bne.n	8007c2e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007c12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c14:	68f8      	ldr	r0, [r7, #12]
 8007c16:	f000 f906 	bl	8007e26 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2220      	movs	r2, #32
 8007c1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2200      	movs	r2, #0
 8007c26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007c2a:	2303      	movs	r3, #3
 8007c2c:	e00f      	b.n	8007c4e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	69da      	ldr	r2, [r3, #28]
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	4013      	ands	r3, r2
 8007c38:	68ba      	ldr	r2, [r7, #8]
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	bf0c      	ite	eq
 8007c3e:	2301      	moveq	r3, #1
 8007c40:	2300      	movne	r3, #0
 8007c42:	b2db      	uxtb	r3, r3
 8007c44:	461a      	mov	r2, r3
 8007c46:	79fb      	ldrb	r3, [r7, #7]
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	d0a0      	beq.n	8007b8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c4c:	2300      	movs	r3, #0
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3710      	adds	r7, #16
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
	...

08007c58 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b096      	sub	sp, #88	@ 0x58
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	60f8      	str	r0, [r7, #12]
 8007c60:	60b9      	str	r1, [r7, #8]
 8007c62:	4613      	mov	r3, r2
 8007c64:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	68ba      	ldr	r2, [r7, #8]
 8007c6a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	88fa      	ldrh	r2, [r7, #6]
 8007c70:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2200      	movs	r2, #0
 8007c78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2222      	movs	r2, #34	@ 0x22
 8007c80:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d02d      	beq.n	8007cea <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c94:	4a40      	ldr	r2, [pc, #256]	@ (8007d98 <UART_Start_Receive_DMA+0x140>)
 8007c96:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c9e:	4a3f      	ldr	r2, [pc, #252]	@ (8007d9c <UART_Start_Receive_DMA+0x144>)
 8007ca0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ca8:	4a3d      	ldr	r2, [pc, #244]	@ (8007da0 <UART_Start_Receive_DMA+0x148>)
 8007caa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	3324      	adds	r3, #36	@ 0x24
 8007cc2:	4619      	mov	r1, r3
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cc8:	461a      	mov	r2, r3
 8007cca:	88fb      	ldrh	r3, [r7, #6]
 8007ccc:	f7fb fe6a 	bl	80039a4 <HAL_DMA_Start_IT>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d009      	beq.n	8007cea <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2210      	movs	r2, #16
 8007cda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2220      	movs	r2, #32
 8007ce2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	e051      	b.n	8007d8e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	691b      	ldr	r3, [r3, #16]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d018      	beq.n	8007d24 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cfa:	e853 3f00 	ldrex	r3, [r3]
 8007cfe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007d00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d06:	657b      	str	r3, [r7, #84]	@ 0x54
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d10:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d12:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d14:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007d16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d18:	e841 2300 	strex	r3, r2, [r1]
 8007d1c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007d1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d1e6      	bne.n	8007cf2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	3308      	adds	r3, #8
 8007d2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d2e:	e853 3f00 	ldrex	r3, [r3]
 8007d32:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d36:	f043 0301 	orr.w	r3, r3, #1
 8007d3a:	653b      	str	r3, [r7, #80]	@ 0x50
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	3308      	adds	r3, #8
 8007d42:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007d44:	637a      	str	r2, [r7, #52]	@ 0x34
 8007d46:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d48:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007d4a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007d4c:	e841 2300 	strex	r3, r2, [r1]
 8007d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007d52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d1e5      	bne.n	8007d24 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	3308      	adds	r3, #8
 8007d5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	e853 3f00 	ldrex	r3, [r3]
 8007d66:	613b      	str	r3, [r7, #16]
   return(result);
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	3308      	adds	r3, #8
 8007d76:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007d78:	623a      	str	r2, [r7, #32]
 8007d7a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d7c:	69f9      	ldr	r1, [r7, #28]
 8007d7e:	6a3a      	ldr	r2, [r7, #32]
 8007d80:	e841 2300 	strex	r3, r2, [r1]
 8007d84:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d86:	69bb      	ldr	r3, [r7, #24]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d1e5      	bne.n	8007d58 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8007d8c:	2300      	movs	r3, #0
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3758      	adds	r7, #88	@ 0x58
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}
 8007d96:	bf00      	nop
 8007d98:	08007ef3 	.word	0x08007ef3
 8007d9c:	0800801f 	.word	0x0800801f
 8007da0:	0800805d 	.word	0x0800805d

08007da4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b08f      	sub	sp, #60	@ 0x3c
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db2:	6a3b      	ldr	r3, [r7, #32]
 8007db4:	e853 3f00 	ldrex	r3, [r3]
 8007db8:	61fb      	str	r3, [r7, #28]
   return(result);
 8007dba:	69fb      	ldr	r3, [r7, #28]
 8007dbc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007dc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	461a      	mov	r2, r3
 8007dc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007dcc:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007dd0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007dd2:	e841 2300 	strex	r3, r2, [r1]
 8007dd6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d1e6      	bne.n	8007dac <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	3308      	adds	r3, #8
 8007de4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	e853 3f00 	ldrex	r3, [r3]
 8007dec:	60bb      	str	r3, [r7, #8]
   return(result);
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007df4:	633b      	str	r3, [r7, #48]	@ 0x30
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	3308      	adds	r3, #8
 8007dfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007dfe:	61ba      	str	r2, [r7, #24]
 8007e00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e02:	6979      	ldr	r1, [r7, #20]
 8007e04:	69ba      	ldr	r2, [r7, #24]
 8007e06:	e841 2300 	strex	r3, r2, [r1]
 8007e0a:	613b      	str	r3, [r7, #16]
   return(result);
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d1e5      	bne.n	8007dde <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2220      	movs	r2, #32
 8007e16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8007e1a:	bf00      	nop
 8007e1c:	373c      	adds	r7, #60	@ 0x3c
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr

08007e26 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e26:	b480      	push	{r7}
 8007e28:	b095      	sub	sp, #84	@ 0x54
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e36:	e853 3f00 	ldrex	r3, [r3]
 8007e3a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e3e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	461a      	mov	r2, r3
 8007e4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e4e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e50:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007e52:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007e54:	e841 2300 	strex	r3, r2, [r1]
 8007e58:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d1e6      	bne.n	8007e2e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	3308      	adds	r3, #8
 8007e66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e68:	6a3b      	ldr	r3, [r7, #32]
 8007e6a:	e853 3f00 	ldrex	r3, [r3]
 8007e6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e70:	69fb      	ldr	r3, [r7, #28]
 8007e72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007e76:	f023 0301 	bic.w	r3, r3, #1
 8007e7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	3308      	adds	r3, #8
 8007e82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e84:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007e86:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007e8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e8c:	e841 2300 	strex	r3, r2, [r1]
 8007e90:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d1e3      	bne.n	8007e60 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d118      	bne.n	8007ed2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	e853 3f00 	ldrex	r3, [r3]
 8007eac:	60bb      	str	r3, [r7, #8]
   return(result);
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	f023 0310 	bic.w	r3, r3, #16
 8007eb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	461a      	mov	r2, r3
 8007ebc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ebe:	61bb      	str	r3, [r7, #24]
 8007ec0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec2:	6979      	ldr	r1, [r7, #20]
 8007ec4:	69ba      	ldr	r2, [r7, #24]
 8007ec6:	e841 2300 	strex	r3, r2, [r1]
 8007eca:	613b      	str	r3, [r7, #16]
   return(result);
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d1e6      	bne.n	8007ea0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2220      	movs	r2, #32
 8007ed6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2200      	movs	r2, #0
 8007ede:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007ee6:	bf00      	nop
 8007ee8:	3754      	adds	r7, #84	@ 0x54
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr

08007ef2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007ef2:	b580      	push	{r7, lr}
 8007ef4:	b09c      	sub	sp, #112	@ 0x70
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007efe:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f003 0320 	and.w	r3, r3, #32
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d171      	bne.n	8007ff2 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8007f0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f10:	2200      	movs	r2, #0
 8007f12:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f1e:	e853 3f00 	ldrex	r3, [r3]
 8007f22:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007f24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f26:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f2a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007f2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	461a      	mov	r2, r3
 8007f32:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007f34:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007f36:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f38:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007f3a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007f3c:	e841 2300 	strex	r3, r2, [r1]
 8007f40:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007f42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d1e6      	bne.n	8007f16 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	3308      	adds	r3, #8
 8007f4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f52:	e853 3f00 	ldrex	r3, [r3]
 8007f56:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007f58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f5a:	f023 0301 	bic.w	r3, r3, #1
 8007f5e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007f60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	3308      	adds	r3, #8
 8007f66:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007f68:	647a      	str	r2, [r7, #68]	@ 0x44
 8007f6a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f6c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007f6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007f70:	e841 2300 	strex	r3, r2, [r1]
 8007f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007f76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d1e5      	bne.n	8007f48 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	3308      	adds	r3, #8
 8007f82:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f86:	e853 3f00 	ldrex	r3, [r3]
 8007f8a:	623b      	str	r3, [r7, #32]
   return(result);
 8007f8c:	6a3b      	ldr	r3, [r7, #32]
 8007f8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f92:	663b      	str	r3, [r7, #96]	@ 0x60
 8007f94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	3308      	adds	r3, #8
 8007f9a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007f9c:	633a      	str	r2, [r7, #48]	@ 0x30
 8007f9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007fa2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fa4:	e841 2300 	strex	r3, r2, [r1]
 8007fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d1e5      	bne.n	8007f7c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007fb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007fb2:	2220      	movs	r2, #32
 8007fb4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fb8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007fba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	d118      	bne.n	8007ff2 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	e853 3f00 	ldrex	r3, [r3]
 8007fcc:	60fb      	str	r3, [r7, #12]
   return(result);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	f023 0310 	bic.w	r3, r3, #16
 8007fd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007fd6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	461a      	mov	r2, r3
 8007fdc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007fde:	61fb      	str	r3, [r7, #28]
 8007fe0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe2:	69b9      	ldr	r1, [r7, #24]
 8007fe4:	69fa      	ldr	r2, [r7, #28]
 8007fe6:	e841 2300 	strex	r3, r2, [r1]
 8007fea:	617b      	str	r3, [r7, #20]
   return(result);
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d1e6      	bne.n	8007fc0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ff2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ff8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ffa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d107      	bne.n	8008010 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008000:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008002:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008006:	4619      	mov	r1, r3
 8008008:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800800a:	f7ff f985 	bl	8007318 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800800e:	e002      	b.n	8008016 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8008010:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008012:	f7f9 f9c1 	bl	8001398 <HAL_UART_RxCpltCallback>
}
 8008016:	bf00      	nop
 8008018:	3770      	adds	r7, #112	@ 0x70
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}

0800801e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800801e:	b580      	push	{r7, lr}
 8008020:	b084      	sub	sp, #16
 8008022:	af00      	add	r7, sp, #0
 8008024:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800802a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2201      	movs	r2, #1
 8008030:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008036:	2b01      	cmp	r3, #1
 8008038:	d109      	bne.n	800804e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008040:	085b      	lsrs	r3, r3, #1
 8008042:	b29b      	uxth	r3, r3
 8008044:	4619      	mov	r1, r3
 8008046:	68f8      	ldr	r0, [r7, #12]
 8008048:	f7ff f966 	bl	8007318 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800804c:	e002      	b.n	8008054 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800804e:	68f8      	ldr	r0, [r7, #12]
 8008050:	f7f9 f98e 	bl	8001370 <HAL_UART_RxHalfCpltCallback>
}
 8008054:	bf00      	nop
 8008056:	3710      	adds	r7, #16
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b086      	sub	sp, #24
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008068:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008070:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008078:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	689b      	ldr	r3, [r3, #8]
 8008080:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008084:	2b80      	cmp	r3, #128	@ 0x80
 8008086:	d109      	bne.n	800809c <UART_DMAError+0x40>
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	2b21      	cmp	r3, #33	@ 0x21
 800808c:	d106      	bne.n	800809c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	2200      	movs	r2, #0
 8008092:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8008096:	6978      	ldr	r0, [r7, #20]
 8008098:	f7ff fe84 	bl	8007da4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080a6:	2b40      	cmp	r3, #64	@ 0x40
 80080a8:	d109      	bne.n	80080be <UART_DMAError+0x62>
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2b22      	cmp	r3, #34	@ 0x22
 80080ae:	d106      	bne.n	80080be <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	2200      	movs	r2, #0
 80080b4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80080b8:	6978      	ldr	r0, [r7, #20]
 80080ba:	f7ff feb4 	bl	8007e26 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080c4:	f043 0210 	orr.w	r2, r3, #16
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80080ce:	6978      	ldr	r0, [r7, #20]
 80080d0:	f7f9 f976 	bl	80013c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080d4:	bf00      	nop
 80080d6:	3718      	adds	r7, #24
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}

080080dc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b084      	sub	sp, #16
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2200      	movs	r2, #0
 80080ee:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	2200      	movs	r2, #0
 80080f6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80080fa:	68f8      	ldr	r0, [r7, #12]
 80080fc:	f7f9 f960 	bl	80013c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008100:	bf00      	nop
 8008102:	3710      	adds	r7, #16
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b088      	sub	sp, #32
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	e853 3f00 	ldrex	r3, [r3]
 800811c:	60bb      	str	r3, [r7, #8]
   return(result);
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008124:	61fb      	str	r3, [r7, #28]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	461a      	mov	r2, r3
 800812c:	69fb      	ldr	r3, [r7, #28]
 800812e:	61bb      	str	r3, [r7, #24]
 8008130:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008132:	6979      	ldr	r1, [r7, #20]
 8008134:	69ba      	ldr	r2, [r7, #24]
 8008136:	e841 2300 	strex	r3, r2, [r1]
 800813a:	613b      	str	r3, [r7, #16]
   return(result);
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d1e6      	bne.n	8008110 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2220      	movs	r2, #32
 8008146:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2200      	movs	r2, #0
 800814e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f7ff f8d7 	bl	8007304 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008156:	bf00      	nop
 8008158:	3720      	adds	r7, #32
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}

0800815e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800815e:	b480      	push	{r7}
 8008160:	b083      	sub	sp, #12
 8008162:	af00      	add	r7, sp, #0
 8008164:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008166:	bf00      	nop
 8008168:	370c      	adds	r7, #12
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr

08008172 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008172:	b480      	push	{r7}
 8008174:	b083      	sub	sp, #12
 8008176:	af00      	add	r7, sp, #0
 8008178:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800817a:	bf00      	nop
 800817c:	370c      	adds	r7, #12
 800817e:	46bd      	mov	sp, r7
 8008180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008184:	4770      	bx	lr

08008186 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008186:	b480      	push	{r7}
 8008188:	b083      	sub	sp, #12
 800818a:	af00      	add	r7, sp, #0
 800818c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800818e:	bf00      	nop
 8008190:	370c      	adds	r7, #12
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr

0800819a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800819a:	b480      	push	{r7}
 800819c:	b085      	sub	sp, #20
 800819e:	af00      	add	r7, sp, #0
 80081a0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d101      	bne.n	80081b0 <HAL_UARTEx_DisableFifoMode+0x16>
 80081ac:	2302      	movs	r3, #2
 80081ae:	e027      	b.n	8008200 <HAL_UARTEx_DisableFifoMode+0x66>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2201      	movs	r2, #1
 80081b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2224      	movs	r2, #36	@ 0x24
 80081bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	681a      	ldr	r2, [r3, #0]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f022 0201 	bic.w	r2, r2, #1
 80081d6:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80081de:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2200      	movs	r2, #0
 80081e4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	68fa      	ldr	r2, [r7, #12]
 80081ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2220      	movs	r2, #32
 80081f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2200      	movs	r2, #0
 80081fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80081fe:	2300      	movs	r3, #0
}
 8008200:	4618      	mov	r0, r3
 8008202:	3714      	adds	r7, #20
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr

0800820c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b084      	sub	sp, #16
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800821c:	2b01      	cmp	r3, #1
 800821e:	d101      	bne.n	8008224 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008220:	2302      	movs	r3, #2
 8008222:	e02d      	b.n	8008280 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2201      	movs	r2, #1
 8008228:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2224      	movs	r2, #36	@ 0x24
 8008230:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f022 0201 	bic.w	r2, r2, #1
 800824a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	689b      	ldr	r3, [r3, #8]
 8008252:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	683a      	ldr	r2, [r7, #0]
 800825c:	430a      	orrs	r2, r1
 800825e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f000 f84f 	bl	8008304 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	68fa      	ldr	r2, [r7, #12]
 800826c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2220      	movs	r2, #32
 8008272:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2200      	movs	r2, #0
 800827a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800827e:	2300      	movs	r3, #0
}
 8008280:	4618      	mov	r0, r3
 8008282:	3710      	adds	r7, #16
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}

08008288 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b084      	sub	sp, #16
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
 8008290:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008298:	2b01      	cmp	r3, #1
 800829a:	d101      	bne.n	80082a0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800829c:	2302      	movs	r3, #2
 800829e:	e02d      	b.n	80082fc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2201      	movs	r2, #1
 80082a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2224      	movs	r2, #36	@ 0x24
 80082ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	681a      	ldr	r2, [r3, #0]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f022 0201 	bic.w	r2, r2, #1
 80082c6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	689b      	ldr	r3, [r3, #8]
 80082ce:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	683a      	ldr	r2, [r7, #0]
 80082d8:	430a      	orrs	r2, r1
 80082da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f000 f811 	bl	8008304 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	68fa      	ldr	r2, [r7, #12]
 80082e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2220      	movs	r2, #32
 80082ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2200      	movs	r2, #0
 80082f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80082fa:	2300      	movs	r3, #0
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3710      	adds	r7, #16
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008304:	b480      	push	{r7}
 8008306:	b085      	sub	sp, #20
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008310:	2b00      	cmp	r3, #0
 8008312:	d108      	bne.n	8008326 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2201      	movs	r2, #1
 8008318:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2201      	movs	r2, #1
 8008320:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008324:	e031      	b.n	800838a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008326:	2308      	movs	r3, #8
 8008328:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800832a:	2308      	movs	r3, #8
 800832c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	689b      	ldr	r3, [r3, #8]
 8008334:	0e5b      	lsrs	r3, r3, #25
 8008336:	b2db      	uxtb	r3, r3
 8008338:	f003 0307 	and.w	r3, r3, #7
 800833c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	689b      	ldr	r3, [r3, #8]
 8008344:	0f5b      	lsrs	r3, r3, #29
 8008346:	b2db      	uxtb	r3, r3
 8008348:	f003 0307 	and.w	r3, r3, #7
 800834c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800834e:	7bbb      	ldrb	r3, [r7, #14]
 8008350:	7b3a      	ldrb	r2, [r7, #12]
 8008352:	4911      	ldr	r1, [pc, #68]	@ (8008398 <UARTEx_SetNbDataToProcess+0x94>)
 8008354:	5c8a      	ldrb	r2, [r1, r2]
 8008356:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800835a:	7b3a      	ldrb	r2, [r7, #12]
 800835c:	490f      	ldr	r1, [pc, #60]	@ (800839c <UARTEx_SetNbDataToProcess+0x98>)
 800835e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008360:	fb93 f3f2 	sdiv	r3, r3, r2
 8008364:	b29a      	uxth	r2, r3
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800836c:	7bfb      	ldrb	r3, [r7, #15]
 800836e:	7b7a      	ldrb	r2, [r7, #13]
 8008370:	4909      	ldr	r1, [pc, #36]	@ (8008398 <UARTEx_SetNbDataToProcess+0x94>)
 8008372:	5c8a      	ldrb	r2, [r1, r2]
 8008374:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008378:	7b7a      	ldrb	r2, [r7, #13]
 800837a:	4908      	ldr	r1, [pc, #32]	@ (800839c <UARTEx_SetNbDataToProcess+0x98>)
 800837c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800837e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008382:	b29a      	uxth	r2, r3
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800838a:	bf00      	nop
 800838c:	3714      	adds	r7, #20
 800838e:	46bd      	mov	sp, r7
 8008390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008394:	4770      	bx	lr
 8008396:	bf00      	nop
 8008398:	0800cc78 	.word	0x0800cc78
 800839c:	0800cc80 	.word	0x0800cc80

080083a0 <__cvt>:
 80083a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083a4:	ec57 6b10 	vmov	r6, r7, d0
 80083a8:	2f00      	cmp	r7, #0
 80083aa:	460c      	mov	r4, r1
 80083ac:	4619      	mov	r1, r3
 80083ae:	463b      	mov	r3, r7
 80083b0:	bfbb      	ittet	lt
 80083b2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80083b6:	461f      	movlt	r7, r3
 80083b8:	2300      	movge	r3, #0
 80083ba:	232d      	movlt	r3, #45	@ 0x2d
 80083bc:	700b      	strb	r3, [r1, #0]
 80083be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80083c0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80083c4:	4691      	mov	r9, r2
 80083c6:	f023 0820 	bic.w	r8, r3, #32
 80083ca:	bfbc      	itt	lt
 80083cc:	4632      	movlt	r2, r6
 80083ce:	4616      	movlt	r6, r2
 80083d0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80083d4:	d005      	beq.n	80083e2 <__cvt+0x42>
 80083d6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80083da:	d100      	bne.n	80083de <__cvt+0x3e>
 80083dc:	3401      	adds	r4, #1
 80083de:	2102      	movs	r1, #2
 80083e0:	e000      	b.n	80083e4 <__cvt+0x44>
 80083e2:	2103      	movs	r1, #3
 80083e4:	ab03      	add	r3, sp, #12
 80083e6:	9301      	str	r3, [sp, #4]
 80083e8:	ab02      	add	r3, sp, #8
 80083ea:	9300      	str	r3, [sp, #0]
 80083ec:	ec47 6b10 	vmov	d0, r6, r7
 80083f0:	4653      	mov	r3, sl
 80083f2:	4622      	mov	r2, r4
 80083f4:	f001 f978 	bl	80096e8 <_dtoa_r>
 80083f8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80083fc:	4605      	mov	r5, r0
 80083fe:	d119      	bne.n	8008434 <__cvt+0x94>
 8008400:	f019 0f01 	tst.w	r9, #1
 8008404:	d00e      	beq.n	8008424 <__cvt+0x84>
 8008406:	eb00 0904 	add.w	r9, r0, r4
 800840a:	2200      	movs	r2, #0
 800840c:	2300      	movs	r3, #0
 800840e:	4630      	mov	r0, r6
 8008410:	4639      	mov	r1, r7
 8008412:	f7f8 fb81 	bl	8000b18 <__aeabi_dcmpeq>
 8008416:	b108      	cbz	r0, 800841c <__cvt+0x7c>
 8008418:	f8cd 900c 	str.w	r9, [sp, #12]
 800841c:	2230      	movs	r2, #48	@ 0x30
 800841e:	9b03      	ldr	r3, [sp, #12]
 8008420:	454b      	cmp	r3, r9
 8008422:	d31e      	bcc.n	8008462 <__cvt+0xc2>
 8008424:	9b03      	ldr	r3, [sp, #12]
 8008426:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008428:	1b5b      	subs	r3, r3, r5
 800842a:	4628      	mov	r0, r5
 800842c:	6013      	str	r3, [r2, #0]
 800842e:	b004      	add	sp, #16
 8008430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008434:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008438:	eb00 0904 	add.w	r9, r0, r4
 800843c:	d1e5      	bne.n	800840a <__cvt+0x6a>
 800843e:	7803      	ldrb	r3, [r0, #0]
 8008440:	2b30      	cmp	r3, #48	@ 0x30
 8008442:	d10a      	bne.n	800845a <__cvt+0xba>
 8008444:	2200      	movs	r2, #0
 8008446:	2300      	movs	r3, #0
 8008448:	4630      	mov	r0, r6
 800844a:	4639      	mov	r1, r7
 800844c:	f7f8 fb64 	bl	8000b18 <__aeabi_dcmpeq>
 8008450:	b918      	cbnz	r0, 800845a <__cvt+0xba>
 8008452:	f1c4 0401 	rsb	r4, r4, #1
 8008456:	f8ca 4000 	str.w	r4, [sl]
 800845a:	f8da 3000 	ldr.w	r3, [sl]
 800845e:	4499      	add	r9, r3
 8008460:	e7d3      	b.n	800840a <__cvt+0x6a>
 8008462:	1c59      	adds	r1, r3, #1
 8008464:	9103      	str	r1, [sp, #12]
 8008466:	701a      	strb	r2, [r3, #0]
 8008468:	e7d9      	b.n	800841e <__cvt+0x7e>

0800846a <__exponent>:
 800846a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800846c:	2900      	cmp	r1, #0
 800846e:	bfba      	itte	lt
 8008470:	4249      	neglt	r1, r1
 8008472:	232d      	movlt	r3, #45	@ 0x2d
 8008474:	232b      	movge	r3, #43	@ 0x2b
 8008476:	2909      	cmp	r1, #9
 8008478:	7002      	strb	r2, [r0, #0]
 800847a:	7043      	strb	r3, [r0, #1]
 800847c:	dd29      	ble.n	80084d2 <__exponent+0x68>
 800847e:	f10d 0307 	add.w	r3, sp, #7
 8008482:	461d      	mov	r5, r3
 8008484:	270a      	movs	r7, #10
 8008486:	461a      	mov	r2, r3
 8008488:	fbb1 f6f7 	udiv	r6, r1, r7
 800848c:	fb07 1416 	mls	r4, r7, r6, r1
 8008490:	3430      	adds	r4, #48	@ 0x30
 8008492:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008496:	460c      	mov	r4, r1
 8008498:	2c63      	cmp	r4, #99	@ 0x63
 800849a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800849e:	4631      	mov	r1, r6
 80084a0:	dcf1      	bgt.n	8008486 <__exponent+0x1c>
 80084a2:	3130      	adds	r1, #48	@ 0x30
 80084a4:	1e94      	subs	r4, r2, #2
 80084a6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80084aa:	1c41      	adds	r1, r0, #1
 80084ac:	4623      	mov	r3, r4
 80084ae:	42ab      	cmp	r3, r5
 80084b0:	d30a      	bcc.n	80084c8 <__exponent+0x5e>
 80084b2:	f10d 0309 	add.w	r3, sp, #9
 80084b6:	1a9b      	subs	r3, r3, r2
 80084b8:	42ac      	cmp	r4, r5
 80084ba:	bf88      	it	hi
 80084bc:	2300      	movhi	r3, #0
 80084be:	3302      	adds	r3, #2
 80084c0:	4403      	add	r3, r0
 80084c2:	1a18      	subs	r0, r3, r0
 80084c4:	b003      	add	sp, #12
 80084c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084c8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80084cc:	f801 6f01 	strb.w	r6, [r1, #1]!
 80084d0:	e7ed      	b.n	80084ae <__exponent+0x44>
 80084d2:	2330      	movs	r3, #48	@ 0x30
 80084d4:	3130      	adds	r1, #48	@ 0x30
 80084d6:	7083      	strb	r3, [r0, #2]
 80084d8:	70c1      	strb	r1, [r0, #3]
 80084da:	1d03      	adds	r3, r0, #4
 80084dc:	e7f1      	b.n	80084c2 <__exponent+0x58>
	...

080084e0 <_printf_float>:
 80084e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084e4:	b08d      	sub	sp, #52	@ 0x34
 80084e6:	460c      	mov	r4, r1
 80084e8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80084ec:	4616      	mov	r6, r2
 80084ee:	461f      	mov	r7, r3
 80084f0:	4605      	mov	r5, r0
 80084f2:	f000 fff3 	bl	80094dc <_localeconv_r>
 80084f6:	6803      	ldr	r3, [r0, #0]
 80084f8:	9304      	str	r3, [sp, #16]
 80084fa:	4618      	mov	r0, r3
 80084fc:	f7f7 fee0 	bl	80002c0 <strlen>
 8008500:	2300      	movs	r3, #0
 8008502:	930a      	str	r3, [sp, #40]	@ 0x28
 8008504:	f8d8 3000 	ldr.w	r3, [r8]
 8008508:	9005      	str	r0, [sp, #20]
 800850a:	3307      	adds	r3, #7
 800850c:	f023 0307 	bic.w	r3, r3, #7
 8008510:	f103 0208 	add.w	r2, r3, #8
 8008514:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008518:	f8d4 b000 	ldr.w	fp, [r4]
 800851c:	f8c8 2000 	str.w	r2, [r8]
 8008520:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008524:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008528:	9307      	str	r3, [sp, #28]
 800852a:	f8cd 8018 	str.w	r8, [sp, #24]
 800852e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008532:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008536:	4b9c      	ldr	r3, [pc, #624]	@ (80087a8 <_printf_float+0x2c8>)
 8008538:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800853c:	f7f8 fb1e 	bl	8000b7c <__aeabi_dcmpun>
 8008540:	bb70      	cbnz	r0, 80085a0 <_printf_float+0xc0>
 8008542:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008546:	4b98      	ldr	r3, [pc, #608]	@ (80087a8 <_printf_float+0x2c8>)
 8008548:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800854c:	f7f8 faf8 	bl	8000b40 <__aeabi_dcmple>
 8008550:	bb30      	cbnz	r0, 80085a0 <_printf_float+0xc0>
 8008552:	2200      	movs	r2, #0
 8008554:	2300      	movs	r3, #0
 8008556:	4640      	mov	r0, r8
 8008558:	4649      	mov	r1, r9
 800855a:	f7f8 fae7 	bl	8000b2c <__aeabi_dcmplt>
 800855e:	b110      	cbz	r0, 8008566 <_printf_float+0x86>
 8008560:	232d      	movs	r3, #45	@ 0x2d
 8008562:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008566:	4a91      	ldr	r2, [pc, #580]	@ (80087ac <_printf_float+0x2cc>)
 8008568:	4b91      	ldr	r3, [pc, #580]	@ (80087b0 <_printf_float+0x2d0>)
 800856a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800856e:	bf94      	ite	ls
 8008570:	4690      	movls	r8, r2
 8008572:	4698      	movhi	r8, r3
 8008574:	2303      	movs	r3, #3
 8008576:	6123      	str	r3, [r4, #16]
 8008578:	f02b 0304 	bic.w	r3, fp, #4
 800857c:	6023      	str	r3, [r4, #0]
 800857e:	f04f 0900 	mov.w	r9, #0
 8008582:	9700      	str	r7, [sp, #0]
 8008584:	4633      	mov	r3, r6
 8008586:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008588:	4621      	mov	r1, r4
 800858a:	4628      	mov	r0, r5
 800858c:	f000 f9d2 	bl	8008934 <_printf_common>
 8008590:	3001      	adds	r0, #1
 8008592:	f040 808d 	bne.w	80086b0 <_printf_float+0x1d0>
 8008596:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800859a:	b00d      	add	sp, #52	@ 0x34
 800859c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085a0:	4642      	mov	r2, r8
 80085a2:	464b      	mov	r3, r9
 80085a4:	4640      	mov	r0, r8
 80085a6:	4649      	mov	r1, r9
 80085a8:	f7f8 fae8 	bl	8000b7c <__aeabi_dcmpun>
 80085ac:	b140      	cbz	r0, 80085c0 <_printf_float+0xe0>
 80085ae:	464b      	mov	r3, r9
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	bfbc      	itt	lt
 80085b4:	232d      	movlt	r3, #45	@ 0x2d
 80085b6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80085ba:	4a7e      	ldr	r2, [pc, #504]	@ (80087b4 <_printf_float+0x2d4>)
 80085bc:	4b7e      	ldr	r3, [pc, #504]	@ (80087b8 <_printf_float+0x2d8>)
 80085be:	e7d4      	b.n	800856a <_printf_float+0x8a>
 80085c0:	6863      	ldr	r3, [r4, #4]
 80085c2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80085c6:	9206      	str	r2, [sp, #24]
 80085c8:	1c5a      	adds	r2, r3, #1
 80085ca:	d13b      	bne.n	8008644 <_printf_float+0x164>
 80085cc:	2306      	movs	r3, #6
 80085ce:	6063      	str	r3, [r4, #4]
 80085d0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80085d4:	2300      	movs	r3, #0
 80085d6:	6022      	str	r2, [r4, #0]
 80085d8:	9303      	str	r3, [sp, #12]
 80085da:	ab0a      	add	r3, sp, #40	@ 0x28
 80085dc:	e9cd a301 	strd	sl, r3, [sp, #4]
 80085e0:	ab09      	add	r3, sp, #36	@ 0x24
 80085e2:	9300      	str	r3, [sp, #0]
 80085e4:	6861      	ldr	r1, [r4, #4]
 80085e6:	ec49 8b10 	vmov	d0, r8, r9
 80085ea:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80085ee:	4628      	mov	r0, r5
 80085f0:	f7ff fed6 	bl	80083a0 <__cvt>
 80085f4:	9b06      	ldr	r3, [sp, #24]
 80085f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80085f8:	2b47      	cmp	r3, #71	@ 0x47
 80085fa:	4680      	mov	r8, r0
 80085fc:	d129      	bne.n	8008652 <_printf_float+0x172>
 80085fe:	1cc8      	adds	r0, r1, #3
 8008600:	db02      	blt.n	8008608 <_printf_float+0x128>
 8008602:	6863      	ldr	r3, [r4, #4]
 8008604:	4299      	cmp	r1, r3
 8008606:	dd41      	ble.n	800868c <_printf_float+0x1ac>
 8008608:	f1aa 0a02 	sub.w	sl, sl, #2
 800860c:	fa5f fa8a 	uxtb.w	sl, sl
 8008610:	3901      	subs	r1, #1
 8008612:	4652      	mov	r2, sl
 8008614:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008618:	9109      	str	r1, [sp, #36]	@ 0x24
 800861a:	f7ff ff26 	bl	800846a <__exponent>
 800861e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008620:	1813      	adds	r3, r2, r0
 8008622:	2a01      	cmp	r2, #1
 8008624:	4681      	mov	r9, r0
 8008626:	6123      	str	r3, [r4, #16]
 8008628:	dc02      	bgt.n	8008630 <_printf_float+0x150>
 800862a:	6822      	ldr	r2, [r4, #0]
 800862c:	07d2      	lsls	r2, r2, #31
 800862e:	d501      	bpl.n	8008634 <_printf_float+0x154>
 8008630:	3301      	adds	r3, #1
 8008632:	6123      	str	r3, [r4, #16]
 8008634:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008638:	2b00      	cmp	r3, #0
 800863a:	d0a2      	beq.n	8008582 <_printf_float+0xa2>
 800863c:	232d      	movs	r3, #45	@ 0x2d
 800863e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008642:	e79e      	b.n	8008582 <_printf_float+0xa2>
 8008644:	9a06      	ldr	r2, [sp, #24]
 8008646:	2a47      	cmp	r2, #71	@ 0x47
 8008648:	d1c2      	bne.n	80085d0 <_printf_float+0xf0>
 800864a:	2b00      	cmp	r3, #0
 800864c:	d1c0      	bne.n	80085d0 <_printf_float+0xf0>
 800864e:	2301      	movs	r3, #1
 8008650:	e7bd      	b.n	80085ce <_printf_float+0xee>
 8008652:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008656:	d9db      	bls.n	8008610 <_printf_float+0x130>
 8008658:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800865c:	d118      	bne.n	8008690 <_printf_float+0x1b0>
 800865e:	2900      	cmp	r1, #0
 8008660:	6863      	ldr	r3, [r4, #4]
 8008662:	dd0b      	ble.n	800867c <_printf_float+0x19c>
 8008664:	6121      	str	r1, [r4, #16]
 8008666:	b913      	cbnz	r3, 800866e <_printf_float+0x18e>
 8008668:	6822      	ldr	r2, [r4, #0]
 800866a:	07d0      	lsls	r0, r2, #31
 800866c:	d502      	bpl.n	8008674 <_printf_float+0x194>
 800866e:	3301      	adds	r3, #1
 8008670:	440b      	add	r3, r1
 8008672:	6123      	str	r3, [r4, #16]
 8008674:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008676:	f04f 0900 	mov.w	r9, #0
 800867a:	e7db      	b.n	8008634 <_printf_float+0x154>
 800867c:	b913      	cbnz	r3, 8008684 <_printf_float+0x1a4>
 800867e:	6822      	ldr	r2, [r4, #0]
 8008680:	07d2      	lsls	r2, r2, #31
 8008682:	d501      	bpl.n	8008688 <_printf_float+0x1a8>
 8008684:	3302      	adds	r3, #2
 8008686:	e7f4      	b.n	8008672 <_printf_float+0x192>
 8008688:	2301      	movs	r3, #1
 800868a:	e7f2      	b.n	8008672 <_printf_float+0x192>
 800868c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008690:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008692:	4299      	cmp	r1, r3
 8008694:	db05      	blt.n	80086a2 <_printf_float+0x1c2>
 8008696:	6823      	ldr	r3, [r4, #0]
 8008698:	6121      	str	r1, [r4, #16]
 800869a:	07d8      	lsls	r0, r3, #31
 800869c:	d5ea      	bpl.n	8008674 <_printf_float+0x194>
 800869e:	1c4b      	adds	r3, r1, #1
 80086a0:	e7e7      	b.n	8008672 <_printf_float+0x192>
 80086a2:	2900      	cmp	r1, #0
 80086a4:	bfd4      	ite	le
 80086a6:	f1c1 0202 	rsble	r2, r1, #2
 80086aa:	2201      	movgt	r2, #1
 80086ac:	4413      	add	r3, r2
 80086ae:	e7e0      	b.n	8008672 <_printf_float+0x192>
 80086b0:	6823      	ldr	r3, [r4, #0]
 80086b2:	055a      	lsls	r2, r3, #21
 80086b4:	d407      	bmi.n	80086c6 <_printf_float+0x1e6>
 80086b6:	6923      	ldr	r3, [r4, #16]
 80086b8:	4642      	mov	r2, r8
 80086ba:	4631      	mov	r1, r6
 80086bc:	4628      	mov	r0, r5
 80086be:	47b8      	blx	r7
 80086c0:	3001      	adds	r0, #1
 80086c2:	d12b      	bne.n	800871c <_printf_float+0x23c>
 80086c4:	e767      	b.n	8008596 <_printf_float+0xb6>
 80086c6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80086ca:	f240 80dd 	bls.w	8008888 <_printf_float+0x3a8>
 80086ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80086d2:	2200      	movs	r2, #0
 80086d4:	2300      	movs	r3, #0
 80086d6:	f7f8 fa1f 	bl	8000b18 <__aeabi_dcmpeq>
 80086da:	2800      	cmp	r0, #0
 80086dc:	d033      	beq.n	8008746 <_printf_float+0x266>
 80086de:	4a37      	ldr	r2, [pc, #220]	@ (80087bc <_printf_float+0x2dc>)
 80086e0:	2301      	movs	r3, #1
 80086e2:	4631      	mov	r1, r6
 80086e4:	4628      	mov	r0, r5
 80086e6:	47b8      	blx	r7
 80086e8:	3001      	adds	r0, #1
 80086ea:	f43f af54 	beq.w	8008596 <_printf_float+0xb6>
 80086ee:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80086f2:	4543      	cmp	r3, r8
 80086f4:	db02      	blt.n	80086fc <_printf_float+0x21c>
 80086f6:	6823      	ldr	r3, [r4, #0]
 80086f8:	07d8      	lsls	r0, r3, #31
 80086fa:	d50f      	bpl.n	800871c <_printf_float+0x23c>
 80086fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008700:	4631      	mov	r1, r6
 8008702:	4628      	mov	r0, r5
 8008704:	47b8      	blx	r7
 8008706:	3001      	adds	r0, #1
 8008708:	f43f af45 	beq.w	8008596 <_printf_float+0xb6>
 800870c:	f04f 0900 	mov.w	r9, #0
 8008710:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8008714:	f104 0a1a 	add.w	sl, r4, #26
 8008718:	45c8      	cmp	r8, r9
 800871a:	dc09      	bgt.n	8008730 <_printf_float+0x250>
 800871c:	6823      	ldr	r3, [r4, #0]
 800871e:	079b      	lsls	r3, r3, #30
 8008720:	f100 8103 	bmi.w	800892a <_printf_float+0x44a>
 8008724:	68e0      	ldr	r0, [r4, #12]
 8008726:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008728:	4298      	cmp	r0, r3
 800872a:	bfb8      	it	lt
 800872c:	4618      	movlt	r0, r3
 800872e:	e734      	b.n	800859a <_printf_float+0xba>
 8008730:	2301      	movs	r3, #1
 8008732:	4652      	mov	r2, sl
 8008734:	4631      	mov	r1, r6
 8008736:	4628      	mov	r0, r5
 8008738:	47b8      	blx	r7
 800873a:	3001      	adds	r0, #1
 800873c:	f43f af2b 	beq.w	8008596 <_printf_float+0xb6>
 8008740:	f109 0901 	add.w	r9, r9, #1
 8008744:	e7e8      	b.n	8008718 <_printf_float+0x238>
 8008746:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008748:	2b00      	cmp	r3, #0
 800874a:	dc39      	bgt.n	80087c0 <_printf_float+0x2e0>
 800874c:	4a1b      	ldr	r2, [pc, #108]	@ (80087bc <_printf_float+0x2dc>)
 800874e:	2301      	movs	r3, #1
 8008750:	4631      	mov	r1, r6
 8008752:	4628      	mov	r0, r5
 8008754:	47b8      	blx	r7
 8008756:	3001      	adds	r0, #1
 8008758:	f43f af1d 	beq.w	8008596 <_printf_float+0xb6>
 800875c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008760:	ea59 0303 	orrs.w	r3, r9, r3
 8008764:	d102      	bne.n	800876c <_printf_float+0x28c>
 8008766:	6823      	ldr	r3, [r4, #0]
 8008768:	07d9      	lsls	r1, r3, #31
 800876a:	d5d7      	bpl.n	800871c <_printf_float+0x23c>
 800876c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008770:	4631      	mov	r1, r6
 8008772:	4628      	mov	r0, r5
 8008774:	47b8      	blx	r7
 8008776:	3001      	adds	r0, #1
 8008778:	f43f af0d 	beq.w	8008596 <_printf_float+0xb6>
 800877c:	f04f 0a00 	mov.w	sl, #0
 8008780:	f104 0b1a 	add.w	fp, r4, #26
 8008784:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008786:	425b      	negs	r3, r3
 8008788:	4553      	cmp	r3, sl
 800878a:	dc01      	bgt.n	8008790 <_printf_float+0x2b0>
 800878c:	464b      	mov	r3, r9
 800878e:	e793      	b.n	80086b8 <_printf_float+0x1d8>
 8008790:	2301      	movs	r3, #1
 8008792:	465a      	mov	r2, fp
 8008794:	4631      	mov	r1, r6
 8008796:	4628      	mov	r0, r5
 8008798:	47b8      	blx	r7
 800879a:	3001      	adds	r0, #1
 800879c:	f43f aefb 	beq.w	8008596 <_printf_float+0xb6>
 80087a0:	f10a 0a01 	add.w	sl, sl, #1
 80087a4:	e7ee      	b.n	8008784 <_printf_float+0x2a4>
 80087a6:	bf00      	nop
 80087a8:	7fefffff 	.word	0x7fefffff
 80087ac:	0800cc88 	.word	0x0800cc88
 80087b0:	0800cc8c 	.word	0x0800cc8c
 80087b4:	0800cc90 	.word	0x0800cc90
 80087b8:	0800cc94 	.word	0x0800cc94
 80087bc:	0800cc98 	.word	0x0800cc98
 80087c0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80087c2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80087c6:	4553      	cmp	r3, sl
 80087c8:	bfa8      	it	ge
 80087ca:	4653      	movge	r3, sl
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	4699      	mov	r9, r3
 80087d0:	dc36      	bgt.n	8008840 <_printf_float+0x360>
 80087d2:	f04f 0b00 	mov.w	fp, #0
 80087d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80087da:	f104 021a 	add.w	r2, r4, #26
 80087de:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80087e0:	9306      	str	r3, [sp, #24]
 80087e2:	eba3 0309 	sub.w	r3, r3, r9
 80087e6:	455b      	cmp	r3, fp
 80087e8:	dc31      	bgt.n	800884e <_printf_float+0x36e>
 80087ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087ec:	459a      	cmp	sl, r3
 80087ee:	dc3a      	bgt.n	8008866 <_printf_float+0x386>
 80087f0:	6823      	ldr	r3, [r4, #0]
 80087f2:	07da      	lsls	r2, r3, #31
 80087f4:	d437      	bmi.n	8008866 <_printf_float+0x386>
 80087f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087f8:	ebaa 0903 	sub.w	r9, sl, r3
 80087fc:	9b06      	ldr	r3, [sp, #24]
 80087fe:	ebaa 0303 	sub.w	r3, sl, r3
 8008802:	4599      	cmp	r9, r3
 8008804:	bfa8      	it	ge
 8008806:	4699      	movge	r9, r3
 8008808:	f1b9 0f00 	cmp.w	r9, #0
 800880c:	dc33      	bgt.n	8008876 <_printf_float+0x396>
 800880e:	f04f 0800 	mov.w	r8, #0
 8008812:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008816:	f104 0b1a 	add.w	fp, r4, #26
 800881a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800881c:	ebaa 0303 	sub.w	r3, sl, r3
 8008820:	eba3 0309 	sub.w	r3, r3, r9
 8008824:	4543      	cmp	r3, r8
 8008826:	f77f af79 	ble.w	800871c <_printf_float+0x23c>
 800882a:	2301      	movs	r3, #1
 800882c:	465a      	mov	r2, fp
 800882e:	4631      	mov	r1, r6
 8008830:	4628      	mov	r0, r5
 8008832:	47b8      	blx	r7
 8008834:	3001      	adds	r0, #1
 8008836:	f43f aeae 	beq.w	8008596 <_printf_float+0xb6>
 800883a:	f108 0801 	add.w	r8, r8, #1
 800883e:	e7ec      	b.n	800881a <_printf_float+0x33a>
 8008840:	4642      	mov	r2, r8
 8008842:	4631      	mov	r1, r6
 8008844:	4628      	mov	r0, r5
 8008846:	47b8      	blx	r7
 8008848:	3001      	adds	r0, #1
 800884a:	d1c2      	bne.n	80087d2 <_printf_float+0x2f2>
 800884c:	e6a3      	b.n	8008596 <_printf_float+0xb6>
 800884e:	2301      	movs	r3, #1
 8008850:	4631      	mov	r1, r6
 8008852:	4628      	mov	r0, r5
 8008854:	9206      	str	r2, [sp, #24]
 8008856:	47b8      	blx	r7
 8008858:	3001      	adds	r0, #1
 800885a:	f43f ae9c 	beq.w	8008596 <_printf_float+0xb6>
 800885e:	9a06      	ldr	r2, [sp, #24]
 8008860:	f10b 0b01 	add.w	fp, fp, #1
 8008864:	e7bb      	b.n	80087de <_printf_float+0x2fe>
 8008866:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800886a:	4631      	mov	r1, r6
 800886c:	4628      	mov	r0, r5
 800886e:	47b8      	blx	r7
 8008870:	3001      	adds	r0, #1
 8008872:	d1c0      	bne.n	80087f6 <_printf_float+0x316>
 8008874:	e68f      	b.n	8008596 <_printf_float+0xb6>
 8008876:	9a06      	ldr	r2, [sp, #24]
 8008878:	464b      	mov	r3, r9
 800887a:	4442      	add	r2, r8
 800887c:	4631      	mov	r1, r6
 800887e:	4628      	mov	r0, r5
 8008880:	47b8      	blx	r7
 8008882:	3001      	adds	r0, #1
 8008884:	d1c3      	bne.n	800880e <_printf_float+0x32e>
 8008886:	e686      	b.n	8008596 <_printf_float+0xb6>
 8008888:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800888c:	f1ba 0f01 	cmp.w	sl, #1
 8008890:	dc01      	bgt.n	8008896 <_printf_float+0x3b6>
 8008892:	07db      	lsls	r3, r3, #31
 8008894:	d536      	bpl.n	8008904 <_printf_float+0x424>
 8008896:	2301      	movs	r3, #1
 8008898:	4642      	mov	r2, r8
 800889a:	4631      	mov	r1, r6
 800889c:	4628      	mov	r0, r5
 800889e:	47b8      	blx	r7
 80088a0:	3001      	adds	r0, #1
 80088a2:	f43f ae78 	beq.w	8008596 <_printf_float+0xb6>
 80088a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088aa:	4631      	mov	r1, r6
 80088ac:	4628      	mov	r0, r5
 80088ae:	47b8      	blx	r7
 80088b0:	3001      	adds	r0, #1
 80088b2:	f43f ae70 	beq.w	8008596 <_printf_float+0xb6>
 80088b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80088ba:	2200      	movs	r2, #0
 80088bc:	2300      	movs	r3, #0
 80088be:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80088c2:	f7f8 f929 	bl	8000b18 <__aeabi_dcmpeq>
 80088c6:	b9c0      	cbnz	r0, 80088fa <_printf_float+0x41a>
 80088c8:	4653      	mov	r3, sl
 80088ca:	f108 0201 	add.w	r2, r8, #1
 80088ce:	4631      	mov	r1, r6
 80088d0:	4628      	mov	r0, r5
 80088d2:	47b8      	blx	r7
 80088d4:	3001      	adds	r0, #1
 80088d6:	d10c      	bne.n	80088f2 <_printf_float+0x412>
 80088d8:	e65d      	b.n	8008596 <_printf_float+0xb6>
 80088da:	2301      	movs	r3, #1
 80088dc:	465a      	mov	r2, fp
 80088de:	4631      	mov	r1, r6
 80088e0:	4628      	mov	r0, r5
 80088e2:	47b8      	blx	r7
 80088e4:	3001      	adds	r0, #1
 80088e6:	f43f ae56 	beq.w	8008596 <_printf_float+0xb6>
 80088ea:	f108 0801 	add.w	r8, r8, #1
 80088ee:	45d0      	cmp	r8, sl
 80088f0:	dbf3      	blt.n	80088da <_printf_float+0x3fa>
 80088f2:	464b      	mov	r3, r9
 80088f4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80088f8:	e6df      	b.n	80086ba <_printf_float+0x1da>
 80088fa:	f04f 0800 	mov.w	r8, #0
 80088fe:	f104 0b1a 	add.w	fp, r4, #26
 8008902:	e7f4      	b.n	80088ee <_printf_float+0x40e>
 8008904:	2301      	movs	r3, #1
 8008906:	4642      	mov	r2, r8
 8008908:	e7e1      	b.n	80088ce <_printf_float+0x3ee>
 800890a:	2301      	movs	r3, #1
 800890c:	464a      	mov	r2, r9
 800890e:	4631      	mov	r1, r6
 8008910:	4628      	mov	r0, r5
 8008912:	47b8      	blx	r7
 8008914:	3001      	adds	r0, #1
 8008916:	f43f ae3e 	beq.w	8008596 <_printf_float+0xb6>
 800891a:	f108 0801 	add.w	r8, r8, #1
 800891e:	68e3      	ldr	r3, [r4, #12]
 8008920:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008922:	1a5b      	subs	r3, r3, r1
 8008924:	4543      	cmp	r3, r8
 8008926:	dcf0      	bgt.n	800890a <_printf_float+0x42a>
 8008928:	e6fc      	b.n	8008724 <_printf_float+0x244>
 800892a:	f04f 0800 	mov.w	r8, #0
 800892e:	f104 0919 	add.w	r9, r4, #25
 8008932:	e7f4      	b.n	800891e <_printf_float+0x43e>

08008934 <_printf_common>:
 8008934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008938:	4616      	mov	r6, r2
 800893a:	4698      	mov	r8, r3
 800893c:	688a      	ldr	r2, [r1, #8]
 800893e:	690b      	ldr	r3, [r1, #16]
 8008940:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008944:	4293      	cmp	r3, r2
 8008946:	bfb8      	it	lt
 8008948:	4613      	movlt	r3, r2
 800894a:	6033      	str	r3, [r6, #0]
 800894c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008950:	4607      	mov	r7, r0
 8008952:	460c      	mov	r4, r1
 8008954:	b10a      	cbz	r2, 800895a <_printf_common+0x26>
 8008956:	3301      	adds	r3, #1
 8008958:	6033      	str	r3, [r6, #0]
 800895a:	6823      	ldr	r3, [r4, #0]
 800895c:	0699      	lsls	r1, r3, #26
 800895e:	bf42      	ittt	mi
 8008960:	6833      	ldrmi	r3, [r6, #0]
 8008962:	3302      	addmi	r3, #2
 8008964:	6033      	strmi	r3, [r6, #0]
 8008966:	6825      	ldr	r5, [r4, #0]
 8008968:	f015 0506 	ands.w	r5, r5, #6
 800896c:	d106      	bne.n	800897c <_printf_common+0x48>
 800896e:	f104 0a19 	add.w	sl, r4, #25
 8008972:	68e3      	ldr	r3, [r4, #12]
 8008974:	6832      	ldr	r2, [r6, #0]
 8008976:	1a9b      	subs	r3, r3, r2
 8008978:	42ab      	cmp	r3, r5
 800897a:	dc26      	bgt.n	80089ca <_printf_common+0x96>
 800897c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008980:	6822      	ldr	r2, [r4, #0]
 8008982:	3b00      	subs	r3, #0
 8008984:	bf18      	it	ne
 8008986:	2301      	movne	r3, #1
 8008988:	0692      	lsls	r2, r2, #26
 800898a:	d42b      	bmi.n	80089e4 <_printf_common+0xb0>
 800898c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008990:	4641      	mov	r1, r8
 8008992:	4638      	mov	r0, r7
 8008994:	47c8      	blx	r9
 8008996:	3001      	adds	r0, #1
 8008998:	d01e      	beq.n	80089d8 <_printf_common+0xa4>
 800899a:	6823      	ldr	r3, [r4, #0]
 800899c:	6922      	ldr	r2, [r4, #16]
 800899e:	f003 0306 	and.w	r3, r3, #6
 80089a2:	2b04      	cmp	r3, #4
 80089a4:	bf02      	ittt	eq
 80089a6:	68e5      	ldreq	r5, [r4, #12]
 80089a8:	6833      	ldreq	r3, [r6, #0]
 80089aa:	1aed      	subeq	r5, r5, r3
 80089ac:	68a3      	ldr	r3, [r4, #8]
 80089ae:	bf0c      	ite	eq
 80089b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80089b4:	2500      	movne	r5, #0
 80089b6:	4293      	cmp	r3, r2
 80089b8:	bfc4      	itt	gt
 80089ba:	1a9b      	subgt	r3, r3, r2
 80089bc:	18ed      	addgt	r5, r5, r3
 80089be:	2600      	movs	r6, #0
 80089c0:	341a      	adds	r4, #26
 80089c2:	42b5      	cmp	r5, r6
 80089c4:	d11a      	bne.n	80089fc <_printf_common+0xc8>
 80089c6:	2000      	movs	r0, #0
 80089c8:	e008      	b.n	80089dc <_printf_common+0xa8>
 80089ca:	2301      	movs	r3, #1
 80089cc:	4652      	mov	r2, sl
 80089ce:	4641      	mov	r1, r8
 80089d0:	4638      	mov	r0, r7
 80089d2:	47c8      	blx	r9
 80089d4:	3001      	adds	r0, #1
 80089d6:	d103      	bne.n	80089e0 <_printf_common+0xac>
 80089d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80089dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089e0:	3501      	adds	r5, #1
 80089e2:	e7c6      	b.n	8008972 <_printf_common+0x3e>
 80089e4:	18e1      	adds	r1, r4, r3
 80089e6:	1c5a      	adds	r2, r3, #1
 80089e8:	2030      	movs	r0, #48	@ 0x30
 80089ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80089ee:	4422      	add	r2, r4
 80089f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80089f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80089f8:	3302      	adds	r3, #2
 80089fa:	e7c7      	b.n	800898c <_printf_common+0x58>
 80089fc:	2301      	movs	r3, #1
 80089fe:	4622      	mov	r2, r4
 8008a00:	4641      	mov	r1, r8
 8008a02:	4638      	mov	r0, r7
 8008a04:	47c8      	blx	r9
 8008a06:	3001      	adds	r0, #1
 8008a08:	d0e6      	beq.n	80089d8 <_printf_common+0xa4>
 8008a0a:	3601      	adds	r6, #1
 8008a0c:	e7d9      	b.n	80089c2 <_printf_common+0x8e>
	...

08008a10 <_printf_i>:
 8008a10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a14:	7e0f      	ldrb	r7, [r1, #24]
 8008a16:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008a18:	2f78      	cmp	r7, #120	@ 0x78
 8008a1a:	4691      	mov	r9, r2
 8008a1c:	4680      	mov	r8, r0
 8008a1e:	460c      	mov	r4, r1
 8008a20:	469a      	mov	sl, r3
 8008a22:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008a26:	d807      	bhi.n	8008a38 <_printf_i+0x28>
 8008a28:	2f62      	cmp	r7, #98	@ 0x62
 8008a2a:	d80a      	bhi.n	8008a42 <_printf_i+0x32>
 8008a2c:	2f00      	cmp	r7, #0
 8008a2e:	f000 80d2 	beq.w	8008bd6 <_printf_i+0x1c6>
 8008a32:	2f58      	cmp	r7, #88	@ 0x58
 8008a34:	f000 80b9 	beq.w	8008baa <_printf_i+0x19a>
 8008a38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008a3c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008a40:	e03a      	b.n	8008ab8 <_printf_i+0xa8>
 8008a42:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008a46:	2b15      	cmp	r3, #21
 8008a48:	d8f6      	bhi.n	8008a38 <_printf_i+0x28>
 8008a4a:	a101      	add	r1, pc, #4	@ (adr r1, 8008a50 <_printf_i+0x40>)
 8008a4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a50:	08008aa9 	.word	0x08008aa9
 8008a54:	08008abd 	.word	0x08008abd
 8008a58:	08008a39 	.word	0x08008a39
 8008a5c:	08008a39 	.word	0x08008a39
 8008a60:	08008a39 	.word	0x08008a39
 8008a64:	08008a39 	.word	0x08008a39
 8008a68:	08008abd 	.word	0x08008abd
 8008a6c:	08008a39 	.word	0x08008a39
 8008a70:	08008a39 	.word	0x08008a39
 8008a74:	08008a39 	.word	0x08008a39
 8008a78:	08008a39 	.word	0x08008a39
 8008a7c:	08008bbd 	.word	0x08008bbd
 8008a80:	08008ae7 	.word	0x08008ae7
 8008a84:	08008b77 	.word	0x08008b77
 8008a88:	08008a39 	.word	0x08008a39
 8008a8c:	08008a39 	.word	0x08008a39
 8008a90:	08008bdf 	.word	0x08008bdf
 8008a94:	08008a39 	.word	0x08008a39
 8008a98:	08008ae7 	.word	0x08008ae7
 8008a9c:	08008a39 	.word	0x08008a39
 8008aa0:	08008a39 	.word	0x08008a39
 8008aa4:	08008b7f 	.word	0x08008b7f
 8008aa8:	6833      	ldr	r3, [r6, #0]
 8008aaa:	1d1a      	adds	r2, r3, #4
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	6032      	str	r2, [r6, #0]
 8008ab0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008ab4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008ab8:	2301      	movs	r3, #1
 8008aba:	e09d      	b.n	8008bf8 <_printf_i+0x1e8>
 8008abc:	6833      	ldr	r3, [r6, #0]
 8008abe:	6820      	ldr	r0, [r4, #0]
 8008ac0:	1d19      	adds	r1, r3, #4
 8008ac2:	6031      	str	r1, [r6, #0]
 8008ac4:	0606      	lsls	r6, r0, #24
 8008ac6:	d501      	bpl.n	8008acc <_printf_i+0xbc>
 8008ac8:	681d      	ldr	r5, [r3, #0]
 8008aca:	e003      	b.n	8008ad4 <_printf_i+0xc4>
 8008acc:	0645      	lsls	r5, r0, #25
 8008ace:	d5fb      	bpl.n	8008ac8 <_printf_i+0xb8>
 8008ad0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008ad4:	2d00      	cmp	r5, #0
 8008ad6:	da03      	bge.n	8008ae0 <_printf_i+0xd0>
 8008ad8:	232d      	movs	r3, #45	@ 0x2d
 8008ada:	426d      	negs	r5, r5
 8008adc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ae0:	4859      	ldr	r0, [pc, #356]	@ (8008c48 <_printf_i+0x238>)
 8008ae2:	230a      	movs	r3, #10
 8008ae4:	e011      	b.n	8008b0a <_printf_i+0xfa>
 8008ae6:	6821      	ldr	r1, [r4, #0]
 8008ae8:	6833      	ldr	r3, [r6, #0]
 8008aea:	0608      	lsls	r0, r1, #24
 8008aec:	f853 5b04 	ldr.w	r5, [r3], #4
 8008af0:	d402      	bmi.n	8008af8 <_printf_i+0xe8>
 8008af2:	0649      	lsls	r1, r1, #25
 8008af4:	bf48      	it	mi
 8008af6:	b2ad      	uxthmi	r5, r5
 8008af8:	2f6f      	cmp	r7, #111	@ 0x6f
 8008afa:	4853      	ldr	r0, [pc, #332]	@ (8008c48 <_printf_i+0x238>)
 8008afc:	6033      	str	r3, [r6, #0]
 8008afe:	bf14      	ite	ne
 8008b00:	230a      	movne	r3, #10
 8008b02:	2308      	moveq	r3, #8
 8008b04:	2100      	movs	r1, #0
 8008b06:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008b0a:	6866      	ldr	r6, [r4, #4]
 8008b0c:	60a6      	str	r6, [r4, #8]
 8008b0e:	2e00      	cmp	r6, #0
 8008b10:	bfa2      	ittt	ge
 8008b12:	6821      	ldrge	r1, [r4, #0]
 8008b14:	f021 0104 	bicge.w	r1, r1, #4
 8008b18:	6021      	strge	r1, [r4, #0]
 8008b1a:	b90d      	cbnz	r5, 8008b20 <_printf_i+0x110>
 8008b1c:	2e00      	cmp	r6, #0
 8008b1e:	d04b      	beq.n	8008bb8 <_printf_i+0x1a8>
 8008b20:	4616      	mov	r6, r2
 8008b22:	fbb5 f1f3 	udiv	r1, r5, r3
 8008b26:	fb03 5711 	mls	r7, r3, r1, r5
 8008b2a:	5dc7      	ldrb	r7, [r0, r7]
 8008b2c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008b30:	462f      	mov	r7, r5
 8008b32:	42bb      	cmp	r3, r7
 8008b34:	460d      	mov	r5, r1
 8008b36:	d9f4      	bls.n	8008b22 <_printf_i+0x112>
 8008b38:	2b08      	cmp	r3, #8
 8008b3a:	d10b      	bne.n	8008b54 <_printf_i+0x144>
 8008b3c:	6823      	ldr	r3, [r4, #0]
 8008b3e:	07df      	lsls	r7, r3, #31
 8008b40:	d508      	bpl.n	8008b54 <_printf_i+0x144>
 8008b42:	6923      	ldr	r3, [r4, #16]
 8008b44:	6861      	ldr	r1, [r4, #4]
 8008b46:	4299      	cmp	r1, r3
 8008b48:	bfde      	ittt	le
 8008b4a:	2330      	movle	r3, #48	@ 0x30
 8008b4c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008b50:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008b54:	1b92      	subs	r2, r2, r6
 8008b56:	6122      	str	r2, [r4, #16]
 8008b58:	f8cd a000 	str.w	sl, [sp]
 8008b5c:	464b      	mov	r3, r9
 8008b5e:	aa03      	add	r2, sp, #12
 8008b60:	4621      	mov	r1, r4
 8008b62:	4640      	mov	r0, r8
 8008b64:	f7ff fee6 	bl	8008934 <_printf_common>
 8008b68:	3001      	adds	r0, #1
 8008b6a:	d14a      	bne.n	8008c02 <_printf_i+0x1f2>
 8008b6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008b70:	b004      	add	sp, #16
 8008b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b76:	6823      	ldr	r3, [r4, #0]
 8008b78:	f043 0320 	orr.w	r3, r3, #32
 8008b7c:	6023      	str	r3, [r4, #0]
 8008b7e:	4833      	ldr	r0, [pc, #204]	@ (8008c4c <_printf_i+0x23c>)
 8008b80:	2778      	movs	r7, #120	@ 0x78
 8008b82:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008b86:	6823      	ldr	r3, [r4, #0]
 8008b88:	6831      	ldr	r1, [r6, #0]
 8008b8a:	061f      	lsls	r7, r3, #24
 8008b8c:	f851 5b04 	ldr.w	r5, [r1], #4
 8008b90:	d402      	bmi.n	8008b98 <_printf_i+0x188>
 8008b92:	065f      	lsls	r7, r3, #25
 8008b94:	bf48      	it	mi
 8008b96:	b2ad      	uxthmi	r5, r5
 8008b98:	6031      	str	r1, [r6, #0]
 8008b9a:	07d9      	lsls	r1, r3, #31
 8008b9c:	bf44      	itt	mi
 8008b9e:	f043 0320 	orrmi.w	r3, r3, #32
 8008ba2:	6023      	strmi	r3, [r4, #0]
 8008ba4:	b11d      	cbz	r5, 8008bae <_printf_i+0x19e>
 8008ba6:	2310      	movs	r3, #16
 8008ba8:	e7ac      	b.n	8008b04 <_printf_i+0xf4>
 8008baa:	4827      	ldr	r0, [pc, #156]	@ (8008c48 <_printf_i+0x238>)
 8008bac:	e7e9      	b.n	8008b82 <_printf_i+0x172>
 8008bae:	6823      	ldr	r3, [r4, #0]
 8008bb0:	f023 0320 	bic.w	r3, r3, #32
 8008bb4:	6023      	str	r3, [r4, #0]
 8008bb6:	e7f6      	b.n	8008ba6 <_printf_i+0x196>
 8008bb8:	4616      	mov	r6, r2
 8008bba:	e7bd      	b.n	8008b38 <_printf_i+0x128>
 8008bbc:	6833      	ldr	r3, [r6, #0]
 8008bbe:	6825      	ldr	r5, [r4, #0]
 8008bc0:	6961      	ldr	r1, [r4, #20]
 8008bc2:	1d18      	adds	r0, r3, #4
 8008bc4:	6030      	str	r0, [r6, #0]
 8008bc6:	062e      	lsls	r6, r5, #24
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	d501      	bpl.n	8008bd0 <_printf_i+0x1c0>
 8008bcc:	6019      	str	r1, [r3, #0]
 8008bce:	e002      	b.n	8008bd6 <_printf_i+0x1c6>
 8008bd0:	0668      	lsls	r0, r5, #25
 8008bd2:	d5fb      	bpl.n	8008bcc <_printf_i+0x1bc>
 8008bd4:	8019      	strh	r1, [r3, #0]
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	6123      	str	r3, [r4, #16]
 8008bda:	4616      	mov	r6, r2
 8008bdc:	e7bc      	b.n	8008b58 <_printf_i+0x148>
 8008bde:	6833      	ldr	r3, [r6, #0]
 8008be0:	1d1a      	adds	r2, r3, #4
 8008be2:	6032      	str	r2, [r6, #0]
 8008be4:	681e      	ldr	r6, [r3, #0]
 8008be6:	6862      	ldr	r2, [r4, #4]
 8008be8:	2100      	movs	r1, #0
 8008bea:	4630      	mov	r0, r6
 8008bec:	f7f7 fb18 	bl	8000220 <memchr>
 8008bf0:	b108      	cbz	r0, 8008bf6 <_printf_i+0x1e6>
 8008bf2:	1b80      	subs	r0, r0, r6
 8008bf4:	6060      	str	r0, [r4, #4]
 8008bf6:	6863      	ldr	r3, [r4, #4]
 8008bf8:	6123      	str	r3, [r4, #16]
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c00:	e7aa      	b.n	8008b58 <_printf_i+0x148>
 8008c02:	6923      	ldr	r3, [r4, #16]
 8008c04:	4632      	mov	r2, r6
 8008c06:	4649      	mov	r1, r9
 8008c08:	4640      	mov	r0, r8
 8008c0a:	47d0      	blx	sl
 8008c0c:	3001      	adds	r0, #1
 8008c0e:	d0ad      	beq.n	8008b6c <_printf_i+0x15c>
 8008c10:	6823      	ldr	r3, [r4, #0]
 8008c12:	079b      	lsls	r3, r3, #30
 8008c14:	d413      	bmi.n	8008c3e <_printf_i+0x22e>
 8008c16:	68e0      	ldr	r0, [r4, #12]
 8008c18:	9b03      	ldr	r3, [sp, #12]
 8008c1a:	4298      	cmp	r0, r3
 8008c1c:	bfb8      	it	lt
 8008c1e:	4618      	movlt	r0, r3
 8008c20:	e7a6      	b.n	8008b70 <_printf_i+0x160>
 8008c22:	2301      	movs	r3, #1
 8008c24:	4632      	mov	r2, r6
 8008c26:	4649      	mov	r1, r9
 8008c28:	4640      	mov	r0, r8
 8008c2a:	47d0      	blx	sl
 8008c2c:	3001      	adds	r0, #1
 8008c2e:	d09d      	beq.n	8008b6c <_printf_i+0x15c>
 8008c30:	3501      	adds	r5, #1
 8008c32:	68e3      	ldr	r3, [r4, #12]
 8008c34:	9903      	ldr	r1, [sp, #12]
 8008c36:	1a5b      	subs	r3, r3, r1
 8008c38:	42ab      	cmp	r3, r5
 8008c3a:	dcf2      	bgt.n	8008c22 <_printf_i+0x212>
 8008c3c:	e7eb      	b.n	8008c16 <_printf_i+0x206>
 8008c3e:	2500      	movs	r5, #0
 8008c40:	f104 0619 	add.w	r6, r4, #25
 8008c44:	e7f5      	b.n	8008c32 <_printf_i+0x222>
 8008c46:	bf00      	nop
 8008c48:	0800cc9a 	.word	0x0800cc9a
 8008c4c:	0800ccab 	.word	0x0800ccab

08008c50 <_scanf_float>:
 8008c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c54:	b087      	sub	sp, #28
 8008c56:	4617      	mov	r7, r2
 8008c58:	9303      	str	r3, [sp, #12]
 8008c5a:	688b      	ldr	r3, [r1, #8]
 8008c5c:	1e5a      	subs	r2, r3, #1
 8008c5e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008c62:	bf81      	itttt	hi
 8008c64:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008c68:	eb03 0b05 	addhi.w	fp, r3, r5
 8008c6c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008c70:	608b      	strhi	r3, [r1, #8]
 8008c72:	680b      	ldr	r3, [r1, #0]
 8008c74:	460a      	mov	r2, r1
 8008c76:	f04f 0500 	mov.w	r5, #0
 8008c7a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008c7e:	f842 3b1c 	str.w	r3, [r2], #28
 8008c82:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008c86:	4680      	mov	r8, r0
 8008c88:	460c      	mov	r4, r1
 8008c8a:	bf98      	it	ls
 8008c8c:	f04f 0b00 	movls.w	fp, #0
 8008c90:	9201      	str	r2, [sp, #4]
 8008c92:	4616      	mov	r6, r2
 8008c94:	46aa      	mov	sl, r5
 8008c96:	46a9      	mov	r9, r5
 8008c98:	9502      	str	r5, [sp, #8]
 8008c9a:	68a2      	ldr	r2, [r4, #8]
 8008c9c:	b152      	cbz	r2, 8008cb4 <_scanf_float+0x64>
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	2b4e      	cmp	r3, #78	@ 0x4e
 8008ca4:	d864      	bhi.n	8008d70 <_scanf_float+0x120>
 8008ca6:	2b40      	cmp	r3, #64	@ 0x40
 8008ca8:	d83c      	bhi.n	8008d24 <_scanf_float+0xd4>
 8008caa:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008cae:	b2c8      	uxtb	r0, r1
 8008cb0:	280e      	cmp	r0, #14
 8008cb2:	d93a      	bls.n	8008d2a <_scanf_float+0xda>
 8008cb4:	f1b9 0f00 	cmp.w	r9, #0
 8008cb8:	d003      	beq.n	8008cc2 <_scanf_float+0x72>
 8008cba:	6823      	ldr	r3, [r4, #0]
 8008cbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008cc0:	6023      	str	r3, [r4, #0]
 8008cc2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008cc6:	f1ba 0f01 	cmp.w	sl, #1
 8008cca:	f200 8117 	bhi.w	8008efc <_scanf_float+0x2ac>
 8008cce:	9b01      	ldr	r3, [sp, #4]
 8008cd0:	429e      	cmp	r6, r3
 8008cd2:	f200 8108 	bhi.w	8008ee6 <_scanf_float+0x296>
 8008cd6:	2001      	movs	r0, #1
 8008cd8:	b007      	add	sp, #28
 8008cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cde:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008ce2:	2a0d      	cmp	r2, #13
 8008ce4:	d8e6      	bhi.n	8008cb4 <_scanf_float+0x64>
 8008ce6:	a101      	add	r1, pc, #4	@ (adr r1, 8008cec <_scanf_float+0x9c>)
 8008ce8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008cec:	08008e33 	.word	0x08008e33
 8008cf0:	08008cb5 	.word	0x08008cb5
 8008cf4:	08008cb5 	.word	0x08008cb5
 8008cf8:	08008cb5 	.word	0x08008cb5
 8008cfc:	08008e93 	.word	0x08008e93
 8008d00:	08008e6b 	.word	0x08008e6b
 8008d04:	08008cb5 	.word	0x08008cb5
 8008d08:	08008cb5 	.word	0x08008cb5
 8008d0c:	08008e41 	.word	0x08008e41
 8008d10:	08008cb5 	.word	0x08008cb5
 8008d14:	08008cb5 	.word	0x08008cb5
 8008d18:	08008cb5 	.word	0x08008cb5
 8008d1c:	08008cb5 	.word	0x08008cb5
 8008d20:	08008df9 	.word	0x08008df9
 8008d24:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008d28:	e7db      	b.n	8008ce2 <_scanf_float+0x92>
 8008d2a:	290e      	cmp	r1, #14
 8008d2c:	d8c2      	bhi.n	8008cb4 <_scanf_float+0x64>
 8008d2e:	a001      	add	r0, pc, #4	@ (adr r0, 8008d34 <_scanf_float+0xe4>)
 8008d30:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008d34:	08008de9 	.word	0x08008de9
 8008d38:	08008cb5 	.word	0x08008cb5
 8008d3c:	08008de9 	.word	0x08008de9
 8008d40:	08008e7f 	.word	0x08008e7f
 8008d44:	08008cb5 	.word	0x08008cb5
 8008d48:	08008d91 	.word	0x08008d91
 8008d4c:	08008dcf 	.word	0x08008dcf
 8008d50:	08008dcf 	.word	0x08008dcf
 8008d54:	08008dcf 	.word	0x08008dcf
 8008d58:	08008dcf 	.word	0x08008dcf
 8008d5c:	08008dcf 	.word	0x08008dcf
 8008d60:	08008dcf 	.word	0x08008dcf
 8008d64:	08008dcf 	.word	0x08008dcf
 8008d68:	08008dcf 	.word	0x08008dcf
 8008d6c:	08008dcf 	.word	0x08008dcf
 8008d70:	2b6e      	cmp	r3, #110	@ 0x6e
 8008d72:	d809      	bhi.n	8008d88 <_scanf_float+0x138>
 8008d74:	2b60      	cmp	r3, #96	@ 0x60
 8008d76:	d8b2      	bhi.n	8008cde <_scanf_float+0x8e>
 8008d78:	2b54      	cmp	r3, #84	@ 0x54
 8008d7a:	d07b      	beq.n	8008e74 <_scanf_float+0x224>
 8008d7c:	2b59      	cmp	r3, #89	@ 0x59
 8008d7e:	d199      	bne.n	8008cb4 <_scanf_float+0x64>
 8008d80:	2d07      	cmp	r5, #7
 8008d82:	d197      	bne.n	8008cb4 <_scanf_float+0x64>
 8008d84:	2508      	movs	r5, #8
 8008d86:	e02c      	b.n	8008de2 <_scanf_float+0x192>
 8008d88:	2b74      	cmp	r3, #116	@ 0x74
 8008d8a:	d073      	beq.n	8008e74 <_scanf_float+0x224>
 8008d8c:	2b79      	cmp	r3, #121	@ 0x79
 8008d8e:	e7f6      	b.n	8008d7e <_scanf_float+0x12e>
 8008d90:	6821      	ldr	r1, [r4, #0]
 8008d92:	05c8      	lsls	r0, r1, #23
 8008d94:	d51b      	bpl.n	8008dce <_scanf_float+0x17e>
 8008d96:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008d9a:	6021      	str	r1, [r4, #0]
 8008d9c:	f109 0901 	add.w	r9, r9, #1
 8008da0:	f1bb 0f00 	cmp.w	fp, #0
 8008da4:	d003      	beq.n	8008dae <_scanf_float+0x15e>
 8008da6:	3201      	adds	r2, #1
 8008da8:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8008dac:	60a2      	str	r2, [r4, #8]
 8008dae:	68a3      	ldr	r3, [r4, #8]
 8008db0:	3b01      	subs	r3, #1
 8008db2:	60a3      	str	r3, [r4, #8]
 8008db4:	6923      	ldr	r3, [r4, #16]
 8008db6:	3301      	adds	r3, #1
 8008db8:	6123      	str	r3, [r4, #16]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	3b01      	subs	r3, #1
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	607b      	str	r3, [r7, #4]
 8008dc2:	f340 8087 	ble.w	8008ed4 <_scanf_float+0x284>
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	3301      	adds	r3, #1
 8008dca:	603b      	str	r3, [r7, #0]
 8008dcc:	e765      	b.n	8008c9a <_scanf_float+0x4a>
 8008dce:	eb1a 0105 	adds.w	r1, sl, r5
 8008dd2:	f47f af6f 	bne.w	8008cb4 <_scanf_float+0x64>
 8008dd6:	6822      	ldr	r2, [r4, #0]
 8008dd8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008ddc:	6022      	str	r2, [r4, #0]
 8008dde:	460d      	mov	r5, r1
 8008de0:	468a      	mov	sl, r1
 8008de2:	f806 3b01 	strb.w	r3, [r6], #1
 8008de6:	e7e2      	b.n	8008dae <_scanf_float+0x15e>
 8008de8:	6822      	ldr	r2, [r4, #0]
 8008dea:	0610      	lsls	r0, r2, #24
 8008dec:	f57f af62 	bpl.w	8008cb4 <_scanf_float+0x64>
 8008df0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008df4:	6022      	str	r2, [r4, #0]
 8008df6:	e7f4      	b.n	8008de2 <_scanf_float+0x192>
 8008df8:	f1ba 0f00 	cmp.w	sl, #0
 8008dfc:	d10e      	bne.n	8008e1c <_scanf_float+0x1cc>
 8008dfe:	f1b9 0f00 	cmp.w	r9, #0
 8008e02:	d10e      	bne.n	8008e22 <_scanf_float+0x1d2>
 8008e04:	6822      	ldr	r2, [r4, #0]
 8008e06:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008e0a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008e0e:	d108      	bne.n	8008e22 <_scanf_float+0x1d2>
 8008e10:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008e14:	6022      	str	r2, [r4, #0]
 8008e16:	f04f 0a01 	mov.w	sl, #1
 8008e1a:	e7e2      	b.n	8008de2 <_scanf_float+0x192>
 8008e1c:	f1ba 0f02 	cmp.w	sl, #2
 8008e20:	d055      	beq.n	8008ece <_scanf_float+0x27e>
 8008e22:	2d01      	cmp	r5, #1
 8008e24:	d002      	beq.n	8008e2c <_scanf_float+0x1dc>
 8008e26:	2d04      	cmp	r5, #4
 8008e28:	f47f af44 	bne.w	8008cb4 <_scanf_float+0x64>
 8008e2c:	3501      	adds	r5, #1
 8008e2e:	b2ed      	uxtb	r5, r5
 8008e30:	e7d7      	b.n	8008de2 <_scanf_float+0x192>
 8008e32:	f1ba 0f01 	cmp.w	sl, #1
 8008e36:	f47f af3d 	bne.w	8008cb4 <_scanf_float+0x64>
 8008e3a:	f04f 0a02 	mov.w	sl, #2
 8008e3e:	e7d0      	b.n	8008de2 <_scanf_float+0x192>
 8008e40:	b97d      	cbnz	r5, 8008e62 <_scanf_float+0x212>
 8008e42:	f1b9 0f00 	cmp.w	r9, #0
 8008e46:	f47f af38 	bne.w	8008cba <_scanf_float+0x6a>
 8008e4a:	6822      	ldr	r2, [r4, #0]
 8008e4c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008e50:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008e54:	f040 8108 	bne.w	8009068 <_scanf_float+0x418>
 8008e58:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008e5c:	6022      	str	r2, [r4, #0]
 8008e5e:	2501      	movs	r5, #1
 8008e60:	e7bf      	b.n	8008de2 <_scanf_float+0x192>
 8008e62:	2d03      	cmp	r5, #3
 8008e64:	d0e2      	beq.n	8008e2c <_scanf_float+0x1dc>
 8008e66:	2d05      	cmp	r5, #5
 8008e68:	e7de      	b.n	8008e28 <_scanf_float+0x1d8>
 8008e6a:	2d02      	cmp	r5, #2
 8008e6c:	f47f af22 	bne.w	8008cb4 <_scanf_float+0x64>
 8008e70:	2503      	movs	r5, #3
 8008e72:	e7b6      	b.n	8008de2 <_scanf_float+0x192>
 8008e74:	2d06      	cmp	r5, #6
 8008e76:	f47f af1d 	bne.w	8008cb4 <_scanf_float+0x64>
 8008e7a:	2507      	movs	r5, #7
 8008e7c:	e7b1      	b.n	8008de2 <_scanf_float+0x192>
 8008e7e:	6822      	ldr	r2, [r4, #0]
 8008e80:	0591      	lsls	r1, r2, #22
 8008e82:	f57f af17 	bpl.w	8008cb4 <_scanf_float+0x64>
 8008e86:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008e8a:	6022      	str	r2, [r4, #0]
 8008e8c:	f8cd 9008 	str.w	r9, [sp, #8]
 8008e90:	e7a7      	b.n	8008de2 <_scanf_float+0x192>
 8008e92:	6822      	ldr	r2, [r4, #0]
 8008e94:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008e98:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008e9c:	d006      	beq.n	8008eac <_scanf_float+0x25c>
 8008e9e:	0550      	lsls	r0, r2, #21
 8008ea0:	f57f af08 	bpl.w	8008cb4 <_scanf_float+0x64>
 8008ea4:	f1b9 0f00 	cmp.w	r9, #0
 8008ea8:	f000 80de 	beq.w	8009068 <_scanf_float+0x418>
 8008eac:	0591      	lsls	r1, r2, #22
 8008eae:	bf58      	it	pl
 8008eb0:	9902      	ldrpl	r1, [sp, #8]
 8008eb2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008eb6:	bf58      	it	pl
 8008eb8:	eba9 0101 	subpl.w	r1, r9, r1
 8008ebc:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008ec0:	bf58      	it	pl
 8008ec2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008ec6:	6022      	str	r2, [r4, #0]
 8008ec8:	f04f 0900 	mov.w	r9, #0
 8008ecc:	e789      	b.n	8008de2 <_scanf_float+0x192>
 8008ece:	f04f 0a03 	mov.w	sl, #3
 8008ed2:	e786      	b.n	8008de2 <_scanf_float+0x192>
 8008ed4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008ed8:	4639      	mov	r1, r7
 8008eda:	4640      	mov	r0, r8
 8008edc:	4798      	blx	r3
 8008ede:	2800      	cmp	r0, #0
 8008ee0:	f43f aedb 	beq.w	8008c9a <_scanf_float+0x4a>
 8008ee4:	e6e6      	b.n	8008cb4 <_scanf_float+0x64>
 8008ee6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008eea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008eee:	463a      	mov	r2, r7
 8008ef0:	4640      	mov	r0, r8
 8008ef2:	4798      	blx	r3
 8008ef4:	6923      	ldr	r3, [r4, #16]
 8008ef6:	3b01      	subs	r3, #1
 8008ef8:	6123      	str	r3, [r4, #16]
 8008efa:	e6e8      	b.n	8008cce <_scanf_float+0x7e>
 8008efc:	1e6b      	subs	r3, r5, #1
 8008efe:	2b06      	cmp	r3, #6
 8008f00:	d824      	bhi.n	8008f4c <_scanf_float+0x2fc>
 8008f02:	2d02      	cmp	r5, #2
 8008f04:	d836      	bhi.n	8008f74 <_scanf_float+0x324>
 8008f06:	9b01      	ldr	r3, [sp, #4]
 8008f08:	429e      	cmp	r6, r3
 8008f0a:	f67f aee4 	bls.w	8008cd6 <_scanf_float+0x86>
 8008f0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008f12:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008f16:	463a      	mov	r2, r7
 8008f18:	4640      	mov	r0, r8
 8008f1a:	4798      	blx	r3
 8008f1c:	6923      	ldr	r3, [r4, #16]
 8008f1e:	3b01      	subs	r3, #1
 8008f20:	6123      	str	r3, [r4, #16]
 8008f22:	e7f0      	b.n	8008f06 <_scanf_float+0x2b6>
 8008f24:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008f28:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008f2c:	463a      	mov	r2, r7
 8008f2e:	4640      	mov	r0, r8
 8008f30:	4798      	blx	r3
 8008f32:	6923      	ldr	r3, [r4, #16]
 8008f34:	3b01      	subs	r3, #1
 8008f36:	6123      	str	r3, [r4, #16]
 8008f38:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008f3c:	fa5f fa8a 	uxtb.w	sl, sl
 8008f40:	f1ba 0f02 	cmp.w	sl, #2
 8008f44:	d1ee      	bne.n	8008f24 <_scanf_float+0x2d4>
 8008f46:	3d03      	subs	r5, #3
 8008f48:	b2ed      	uxtb	r5, r5
 8008f4a:	1b76      	subs	r6, r6, r5
 8008f4c:	6823      	ldr	r3, [r4, #0]
 8008f4e:	05da      	lsls	r2, r3, #23
 8008f50:	d530      	bpl.n	8008fb4 <_scanf_float+0x364>
 8008f52:	055b      	lsls	r3, r3, #21
 8008f54:	d511      	bpl.n	8008f7a <_scanf_float+0x32a>
 8008f56:	9b01      	ldr	r3, [sp, #4]
 8008f58:	429e      	cmp	r6, r3
 8008f5a:	f67f aebc 	bls.w	8008cd6 <_scanf_float+0x86>
 8008f5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008f62:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008f66:	463a      	mov	r2, r7
 8008f68:	4640      	mov	r0, r8
 8008f6a:	4798      	blx	r3
 8008f6c:	6923      	ldr	r3, [r4, #16]
 8008f6e:	3b01      	subs	r3, #1
 8008f70:	6123      	str	r3, [r4, #16]
 8008f72:	e7f0      	b.n	8008f56 <_scanf_float+0x306>
 8008f74:	46aa      	mov	sl, r5
 8008f76:	46b3      	mov	fp, r6
 8008f78:	e7de      	b.n	8008f38 <_scanf_float+0x2e8>
 8008f7a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008f7e:	6923      	ldr	r3, [r4, #16]
 8008f80:	2965      	cmp	r1, #101	@ 0x65
 8008f82:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8008f86:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8008f8a:	6123      	str	r3, [r4, #16]
 8008f8c:	d00c      	beq.n	8008fa8 <_scanf_float+0x358>
 8008f8e:	2945      	cmp	r1, #69	@ 0x45
 8008f90:	d00a      	beq.n	8008fa8 <_scanf_float+0x358>
 8008f92:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008f96:	463a      	mov	r2, r7
 8008f98:	4640      	mov	r0, r8
 8008f9a:	4798      	blx	r3
 8008f9c:	6923      	ldr	r3, [r4, #16]
 8008f9e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008fa2:	3b01      	subs	r3, #1
 8008fa4:	1eb5      	subs	r5, r6, #2
 8008fa6:	6123      	str	r3, [r4, #16]
 8008fa8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008fac:	463a      	mov	r2, r7
 8008fae:	4640      	mov	r0, r8
 8008fb0:	4798      	blx	r3
 8008fb2:	462e      	mov	r6, r5
 8008fb4:	6822      	ldr	r2, [r4, #0]
 8008fb6:	f012 0210 	ands.w	r2, r2, #16
 8008fba:	d001      	beq.n	8008fc0 <_scanf_float+0x370>
 8008fbc:	2000      	movs	r0, #0
 8008fbe:	e68b      	b.n	8008cd8 <_scanf_float+0x88>
 8008fc0:	7032      	strb	r2, [r6, #0]
 8008fc2:	6823      	ldr	r3, [r4, #0]
 8008fc4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008fc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008fcc:	d11c      	bne.n	8009008 <_scanf_float+0x3b8>
 8008fce:	9b02      	ldr	r3, [sp, #8]
 8008fd0:	454b      	cmp	r3, r9
 8008fd2:	eba3 0209 	sub.w	r2, r3, r9
 8008fd6:	d123      	bne.n	8009020 <_scanf_float+0x3d0>
 8008fd8:	9901      	ldr	r1, [sp, #4]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	4640      	mov	r0, r8
 8008fde:	f002 fcfb 	bl	800b9d8 <_strtod_r>
 8008fe2:	9b03      	ldr	r3, [sp, #12]
 8008fe4:	6821      	ldr	r1, [r4, #0]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f011 0f02 	tst.w	r1, #2
 8008fec:	ec57 6b10 	vmov	r6, r7, d0
 8008ff0:	f103 0204 	add.w	r2, r3, #4
 8008ff4:	d01f      	beq.n	8009036 <_scanf_float+0x3e6>
 8008ff6:	9903      	ldr	r1, [sp, #12]
 8008ff8:	600a      	str	r2, [r1, #0]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	e9c3 6700 	strd	r6, r7, [r3]
 8009000:	68e3      	ldr	r3, [r4, #12]
 8009002:	3301      	adds	r3, #1
 8009004:	60e3      	str	r3, [r4, #12]
 8009006:	e7d9      	b.n	8008fbc <_scanf_float+0x36c>
 8009008:	9b04      	ldr	r3, [sp, #16]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d0e4      	beq.n	8008fd8 <_scanf_float+0x388>
 800900e:	9905      	ldr	r1, [sp, #20]
 8009010:	230a      	movs	r3, #10
 8009012:	3101      	adds	r1, #1
 8009014:	4640      	mov	r0, r8
 8009016:	f002 fd5f 	bl	800bad8 <_strtol_r>
 800901a:	9b04      	ldr	r3, [sp, #16]
 800901c:	9e05      	ldr	r6, [sp, #20]
 800901e:	1ac2      	subs	r2, r0, r3
 8009020:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009024:	429e      	cmp	r6, r3
 8009026:	bf28      	it	cs
 8009028:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800902c:	4910      	ldr	r1, [pc, #64]	@ (8009070 <_scanf_float+0x420>)
 800902e:	4630      	mov	r0, r6
 8009030:	f000 f954 	bl	80092dc <siprintf>
 8009034:	e7d0      	b.n	8008fd8 <_scanf_float+0x388>
 8009036:	f011 0f04 	tst.w	r1, #4
 800903a:	9903      	ldr	r1, [sp, #12]
 800903c:	600a      	str	r2, [r1, #0]
 800903e:	d1dc      	bne.n	8008ffa <_scanf_float+0x3aa>
 8009040:	681d      	ldr	r5, [r3, #0]
 8009042:	4632      	mov	r2, r6
 8009044:	463b      	mov	r3, r7
 8009046:	4630      	mov	r0, r6
 8009048:	4639      	mov	r1, r7
 800904a:	f7f7 fd97 	bl	8000b7c <__aeabi_dcmpun>
 800904e:	b128      	cbz	r0, 800905c <_scanf_float+0x40c>
 8009050:	4808      	ldr	r0, [pc, #32]	@ (8009074 <_scanf_float+0x424>)
 8009052:	f000 fabb 	bl	80095cc <nanf>
 8009056:	ed85 0a00 	vstr	s0, [r5]
 800905a:	e7d1      	b.n	8009000 <_scanf_float+0x3b0>
 800905c:	4630      	mov	r0, r6
 800905e:	4639      	mov	r1, r7
 8009060:	f7f7 fdea 	bl	8000c38 <__aeabi_d2f>
 8009064:	6028      	str	r0, [r5, #0]
 8009066:	e7cb      	b.n	8009000 <_scanf_float+0x3b0>
 8009068:	f04f 0900 	mov.w	r9, #0
 800906c:	e629      	b.n	8008cc2 <_scanf_float+0x72>
 800906e:	bf00      	nop
 8009070:	0800ccbc 	.word	0x0800ccbc
 8009074:	0800d055 	.word	0x0800d055

08009078 <std>:
 8009078:	2300      	movs	r3, #0
 800907a:	b510      	push	{r4, lr}
 800907c:	4604      	mov	r4, r0
 800907e:	e9c0 3300 	strd	r3, r3, [r0]
 8009082:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009086:	6083      	str	r3, [r0, #8]
 8009088:	8181      	strh	r1, [r0, #12]
 800908a:	6643      	str	r3, [r0, #100]	@ 0x64
 800908c:	81c2      	strh	r2, [r0, #14]
 800908e:	6183      	str	r3, [r0, #24]
 8009090:	4619      	mov	r1, r3
 8009092:	2208      	movs	r2, #8
 8009094:	305c      	adds	r0, #92	@ 0x5c
 8009096:	f000 fa19 	bl	80094cc <memset>
 800909a:	4b0d      	ldr	r3, [pc, #52]	@ (80090d0 <std+0x58>)
 800909c:	6263      	str	r3, [r4, #36]	@ 0x24
 800909e:	4b0d      	ldr	r3, [pc, #52]	@ (80090d4 <std+0x5c>)
 80090a0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80090a2:	4b0d      	ldr	r3, [pc, #52]	@ (80090d8 <std+0x60>)
 80090a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80090a6:	4b0d      	ldr	r3, [pc, #52]	@ (80090dc <std+0x64>)
 80090a8:	6323      	str	r3, [r4, #48]	@ 0x30
 80090aa:	4b0d      	ldr	r3, [pc, #52]	@ (80090e0 <std+0x68>)
 80090ac:	6224      	str	r4, [r4, #32]
 80090ae:	429c      	cmp	r4, r3
 80090b0:	d006      	beq.n	80090c0 <std+0x48>
 80090b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80090b6:	4294      	cmp	r4, r2
 80090b8:	d002      	beq.n	80090c0 <std+0x48>
 80090ba:	33d0      	adds	r3, #208	@ 0xd0
 80090bc:	429c      	cmp	r4, r3
 80090be:	d105      	bne.n	80090cc <std+0x54>
 80090c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80090c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090c8:	f000 ba7c 	b.w	80095c4 <__retarget_lock_init_recursive>
 80090cc:	bd10      	pop	{r4, pc}
 80090ce:	bf00      	nop
 80090d0:	0800931d 	.word	0x0800931d
 80090d4:	0800933f 	.word	0x0800933f
 80090d8:	08009377 	.word	0x08009377
 80090dc:	0800939b 	.word	0x0800939b
 80090e0:	20003028 	.word	0x20003028

080090e4 <stdio_exit_handler>:
 80090e4:	4a02      	ldr	r2, [pc, #8]	@ (80090f0 <stdio_exit_handler+0xc>)
 80090e6:	4903      	ldr	r1, [pc, #12]	@ (80090f4 <stdio_exit_handler+0x10>)
 80090e8:	4803      	ldr	r0, [pc, #12]	@ (80090f8 <stdio_exit_handler+0x14>)
 80090ea:	f000 b869 	b.w	80091c0 <_fwalk_sglue>
 80090ee:	bf00      	nop
 80090f0:	20000f50 	.word	0x20000f50
 80090f4:	0800c119 	.word	0x0800c119
 80090f8:	20000f60 	.word	0x20000f60

080090fc <cleanup_stdio>:
 80090fc:	6841      	ldr	r1, [r0, #4]
 80090fe:	4b0c      	ldr	r3, [pc, #48]	@ (8009130 <cleanup_stdio+0x34>)
 8009100:	4299      	cmp	r1, r3
 8009102:	b510      	push	{r4, lr}
 8009104:	4604      	mov	r4, r0
 8009106:	d001      	beq.n	800910c <cleanup_stdio+0x10>
 8009108:	f003 f806 	bl	800c118 <_fflush_r>
 800910c:	68a1      	ldr	r1, [r4, #8]
 800910e:	4b09      	ldr	r3, [pc, #36]	@ (8009134 <cleanup_stdio+0x38>)
 8009110:	4299      	cmp	r1, r3
 8009112:	d002      	beq.n	800911a <cleanup_stdio+0x1e>
 8009114:	4620      	mov	r0, r4
 8009116:	f002 ffff 	bl	800c118 <_fflush_r>
 800911a:	68e1      	ldr	r1, [r4, #12]
 800911c:	4b06      	ldr	r3, [pc, #24]	@ (8009138 <cleanup_stdio+0x3c>)
 800911e:	4299      	cmp	r1, r3
 8009120:	d004      	beq.n	800912c <cleanup_stdio+0x30>
 8009122:	4620      	mov	r0, r4
 8009124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009128:	f002 bff6 	b.w	800c118 <_fflush_r>
 800912c:	bd10      	pop	{r4, pc}
 800912e:	bf00      	nop
 8009130:	20003028 	.word	0x20003028
 8009134:	20003090 	.word	0x20003090
 8009138:	200030f8 	.word	0x200030f8

0800913c <global_stdio_init.part.0>:
 800913c:	b510      	push	{r4, lr}
 800913e:	4b0b      	ldr	r3, [pc, #44]	@ (800916c <global_stdio_init.part.0+0x30>)
 8009140:	4c0b      	ldr	r4, [pc, #44]	@ (8009170 <global_stdio_init.part.0+0x34>)
 8009142:	4a0c      	ldr	r2, [pc, #48]	@ (8009174 <global_stdio_init.part.0+0x38>)
 8009144:	601a      	str	r2, [r3, #0]
 8009146:	4620      	mov	r0, r4
 8009148:	2200      	movs	r2, #0
 800914a:	2104      	movs	r1, #4
 800914c:	f7ff ff94 	bl	8009078 <std>
 8009150:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009154:	2201      	movs	r2, #1
 8009156:	2109      	movs	r1, #9
 8009158:	f7ff ff8e 	bl	8009078 <std>
 800915c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009160:	2202      	movs	r2, #2
 8009162:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009166:	2112      	movs	r1, #18
 8009168:	f7ff bf86 	b.w	8009078 <std>
 800916c:	20003160 	.word	0x20003160
 8009170:	20003028 	.word	0x20003028
 8009174:	080090e5 	.word	0x080090e5

08009178 <__sfp_lock_acquire>:
 8009178:	4801      	ldr	r0, [pc, #4]	@ (8009180 <__sfp_lock_acquire+0x8>)
 800917a:	f000 ba24 	b.w	80095c6 <__retarget_lock_acquire_recursive>
 800917e:	bf00      	nop
 8009180:	20003169 	.word	0x20003169

08009184 <__sfp_lock_release>:
 8009184:	4801      	ldr	r0, [pc, #4]	@ (800918c <__sfp_lock_release+0x8>)
 8009186:	f000 ba1f 	b.w	80095c8 <__retarget_lock_release_recursive>
 800918a:	bf00      	nop
 800918c:	20003169 	.word	0x20003169

08009190 <__sinit>:
 8009190:	b510      	push	{r4, lr}
 8009192:	4604      	mov	r4, r0
 8009194:	f7ff fff0 	bl	8009178 <__sfp_lock_acquire>
 8009198:	6a23      	ldr	r3, [r4, #32]
 800919a:	b11b      	cbz	r3, 80091a4 <__sinit+0x14>
 800919c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091a0:	f7ff bff0 	b.w	8009184 <__sfp_lock_release>
 80091a4:	4b04      	ldr	r3, [pc, #16]	@ (80091b8 <__sinit+0x28>)
 80091a6:	6223      	str	r3, [r4, #32]
 80091a8:	4b04      	ldr	r3, [pc, #16]	@ (80091bc <__sinit+0x2c>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d1f5      	bne.n	800919c <__sinit+0xc>
 80091b0:	f7ff ffc4 	bl	800913c <global_stdio_init.part.0>
 80091b4:	e7f2      	b.n	800919c <__sinit+0xc>
 80091b6:	bf00      	nop
 80091b8:	080090fd 	.word	0x080090fd
 80091bc:	20003160 	.word	0x20003160

080091c0 <_fwalk_sglue>:
 80091c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091c4:	4607      	mov	r7, r0
 80091c6:	4688      	mov	r8, r1
 80091c8:	4614      	mov	r4, r2
 80091ca:	2600      	movs	r6, #0
 80091cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80091d0:	f1b9 0901 	subs.w	r9, r9, #1
 80091d4:	d505      	bpl.n	80091e2 <_fwalk_sglue+0x22>
 80091d6:	6824      	ldr	r4, [r4, #0]
 80091d8:	2c00      	cmp	r4, #0
 80091da:	d1f7      	bne.n	80091cc <_fwalk_sglue+0xc>
 80091dc:	4630      	mov	r0, r6
 80091de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091e2:	89ab      	ldrh	r3, [r5, #12]
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	d907      	bls.n	80091f8 <_fwalk_sglue+0x38>
 80091e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80091ec:	3301      	adds	r3, #1
 80091ee:	d003      	beq.n	80091f8 <_fwalk_sglue+0x38>
 80091f0:	4629      	mov	r1, r5
 80091f2:	4638      	mov	r0, r7
 80091f4:	47c0      	blx	r8
 80091f6:	4306      	orrs	r6, r0
 80091f8:	3568      	adds	r5, #104	@ 0x68
 80091fa:	e7e9      	b.n	80091d0 <_fwalk_sglue+0x10>

080091fc <iprintf>:
 80091fc:	b40f      	push	{r0, r1, r2, r3}
 80091fe:	b507      	push	{r0, r1, r2, lr}
 8009200:	4906      	ldr	r1, [pc, #24]	@ (800921c <iprintf+0x20>)
 8009202:	ab04      	add	r3, sp, #16
 8009204:	6808      	ldr	r0, [r1, #0]
 8009206:	f853 2b04 	ldr.w	r2, [r3], #4
 800920a:	6881      	ldr	r1, [r0, #8]
 800920c:	9301      	str	r3, [sp, #4]
 800920e:	f002 fde7 	bl	800bde0 <_vfiprintf_r>
 8009212:	b003      	add	sp, #12
 8009214:	f85d eb04 	ldr.w	lr, [sp], #4
 8009218:	b004      	add	sp, #16
 800921a:	4770      	bx	lr
 800921c:	20000f5c 	.word	0x20000f5c

08009220 <_puts_r>:
 8009220:	6a03      	ldr	r3, [r0, #32]
 8009222:	b570      	push	{r4, r5, r6, lr}
 8009224:	6884      	ldr	r4, [r0, #8]
 8009226:	4605      	mov	r5, r0
 8009228:	460e      	mov	r6, r1
 800922a:	b90b      	cbnz	r3, 8009230 <_puts_r+0x10>
 800922c:	f7ff ffb0 	bl	8009190 <__sinit>
 8009230:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009232:	07db      	lsls	r3, r3, #31
 8009234:	d405      	bmi.n	8009242 <_puts_r+0x22>
 8009236:	89a3      	ldrh	r3, [r4, #12]
 8009238:	0598      	lsls	r0, r3, #22
 800923a:	d402      	bmi.n	8009242 <_puts_r+0x22>
 800923c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800923e:	f000 f9c2 	bl	80095c6 <__retarget_lock_acquire_recursive>
 8009242:	89a3      	ldrh	r3, [r4, #12]
 8009244:	0719      	lsls	r1, r3, #28
 8009246:	d502      	bpl.n	800924e <_puts_r+0x2e>
 8009248:	6923      	ldr	r3, [r4, #16]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d135      	bne.n	80092ba <_puts_r+0x9a>
 800924e:	4621      	mov	r1, r4
 8009250:	4628      	mov	r0, r5
 8009252:	f000 f8e5 	bl	8009420 <__swsetup_r>
 8009256:	b380      	cbz	r0, 80092ba <_puts_r+0x9a>
 8009258:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800925c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800925e:	07da      	lsls	r2, r3, #31
 8009260:	d405      	bmi.n	800926e <_puts_r+0x4e>
 8009262:	89a3      	ldrh	r3, [r4, #12]
 8009264:	059b      	lsls	r3, r3, #22
 8009266:	d402      	bmi.n	800926e <_puts_r+0x4e>
 8009268:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800926a:	f000 f9ad 	bl	80095c8 <__retarget_lock_release_recursive>
 800926e:	4628      	mov	r0, r5
 8009270:	bd70      	pop	{r4, r5, r6, pc}
 8009272:	2b00      	cmp	r3, #0
 8009274:	da04      	bge.n	8009280 <_puts_r+0x60>
 8009276:	69a2      	ldr	r2, [r4, #24]
 8009278:	429a      	cmp	r2, r3
 800927a:	dc17      	bgt.n	80092ac <_puts_r+0x8c>
 800927c:	290a      	cmp	r1, #10
 800927e:	d015      	beq.n	80092ac <_puts_r+0x8c>
 8009280:	6823      	ldr	r3, [r4, #0]
 8009282:	1c5a      	adds	r2, r3, #1
 8009284:	6022      	str	r2, [r4, #0]
 8009286:	7019      	strb	r1, [r3, #0]
 8009288:	68a3      	ldr	r3, [r4, #8]
 800928a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800928e:	3b01      	subs	r3, #1
 8009290:	60a3      	str	r3, [r4, #8]
 8009292:	2900      	cmp	r1, #0
 8009294:	d1ed      	bne.n	8009272 <_puts_r+0x52>
 8009296:	2b00      	cmp	r3, #0
 8009298:	da11      	bge.n	80092be <_puts_r+0x9e>
 800929a:	4622      	mov	r2, r4
 800929c:	210a      	movs	r1, #10
 800929e:	4628      	mov	r0, r5
 80092a0:	f000 f87f 	bl	80093a2 <__swbuf_r>
 80092a4:	3001      	adds	r0, #1
 80092a6:	d0d7      	beq.n	8009258 <_puts_r+0x38>
 80092a8:	250a      	movs	r5, #10
 80092aa:	e7d7      	b.n	800925c <_puts_r+0x3c>
 80092ac:	4622      	mov	r2, r4
 80092ae:	4628      	mov	r0, r5
 80092b0:	f000 f877 	bl	80093a2 <__swbuf_r>
 80092b4:	3001      	adds	r0, #1
 80092b6:	d1e7      	bne.n	8009288 <_puts_r+0x68>
 80092b8:	e7ce      	b.n	8009258 <_puts_r+0x38>
 80092ba:	3e01      	subs	r6, #1
 80092bc:	e7e4      	b.n	8009288 <_puts_r+0x68>
 80092be:	6823      	ldr	r3, [r4, #0]
 80092c0:	1c5a      	adds	r2, r3, #1
 80092c2:	6022      	str	r2, [r4, #0]
 80092c4:	220a      	movs	r2, #10
 80092c6:	701a      	strb	r2, [r3, #0]
 80092c8:	e7ee      	b.n	80092a8 <_puts_r+0x88>
	...

080092cc <puts>:
 80092cc:	4b02      	ldr	r3, [pc, #8]	@ (80092d8 <puts+0xc>)
 80092ce:	4601      	mov	r1, r0
 80092d0:	6818      	ldr	r0, [r3, #0]
 80092d2:	f7ff bfa5 	b.w	8009220 <_puts_r>
 80092d6:	bf00      	nop
 80092d8:	20000f5c 	.word	0x20000f5c

080092dc <siprintf>:
 80092dc:	b40e      	push	{r1, r2, r3}
 80092de:	b500      	push	{lr}
 80092e0:	b09c      	sub	sp, #112	@ 0x70
 80092e2:	ab1d      	add	r3, sp, #116	@ 0x74
 80092e4:	9002      	str	r0, [sp, #8]
 80092e6:	9006      	str	r0, [sp, #24]
 80092e8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80092ec:	4809      	ldr	r0, [pc, #36]	@ (8009314 <siprintf+0x38>)
 80092ee:	9107      	str	r1, [sp, #28]
 80092f0:	9104      	str	r1, [sp, #16]
 80092f2:	4909      	ldr	r1, [pc, #36]	@ (8009318 <siprintf+0x3c>)
 80092f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80092f8:	9105      	str	r1, [sp, #20]
 80092fa:	6800      	ldr	r0, [r0, #0]
 80092fc:	9301      	str	r3, [sp, #4]
 80092fe:	a902      	add	r1, sp, #8
 8009300:	f002 fc48 	bl	800bb94 <_svfiprintf_r>
 8009304:	9b02      	ldr	r3, [sp, #8]
 8009306:	2200      	movs	r2, #0
 8009308:	701a      	strb	r2, [r3, #0]
 800930a:	b01c      	add	sp, #112	@ 0x70
 800930c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009310:	b003      	add	sp, #12
 8009312:	4770      	bx	lr
 8009314:	20000f5c 	.word	0x20000f5c
 8009318:	ffff0208 	.word	0xffff0208

0800931c <__sread>:
 800931c:	b510      	push	{r4, lr}
 800931e:	460c      	mov	r4, r1
 8009320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009324:	f000 f900 	bl	8009528 <_read_r>
 8009328:	2800      	cmp	r0, #0
 800932a:	bfab      	itete	ge
 800932c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800932e:	89a3      	ldrhlt	r3, [r4, #12]
 8009330:	181b      	addge	r3, r3, r0
 8009332:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009336:	bfac      	ite	ge
 8009338:	6563      	strge	r3, [r4, #84]	@ 0x54
 800933a:	81a3      	strhlt	r3, [r4, #12]
 800933c:	bd10      	pop	{r4, pc}

0800933e <__swrite>:
 800933e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009342:	461f      	mov	r7, r3
 8009344:	898b      	ldrh	r3, [r1, #12]
 8009346:	05db      	lsls	r3, r3, #23
 8009348:	4605      	mov	r5, r0
 800934a:	460c      	mov	r4, r1
 800934c:	4616      	mov	r6, r2
 800934e:	d505      	bpl.n	800935c <__swrite+0x1e>
 8009350:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009354:	2302      	movs	r3, #2
 8009356:	2200      	movs	r2, #0
 8009358:	f000 f8d4 	bl	8009504 <_lseek_r>
 800935c:	89a3      	ldrh	r3, [r4, #12]
 800935e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009362:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009366:	81a3      	strh	r3, [r4, #12]
 8009368:	4632      	mov	r2, r6
 800936a:	463b      	mov	r3, r7
 800936c:	4628      	mov	r0, r5
 800936e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009372:	f000 b8eb 	b.w	800954c <_write_r>

08009376 <__sseek>:
 8009376:	b510      	push	{r4, lr}
 8009378:	460c      	mov	r4, r1
 800937a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800937e:	f000 f8c1 	bl	8009504 <_lseek_r>
 8009382:	1c43      	adds	r3, r0, #1
 8009384:	89a3      	ldrh	r3, [r4, #12]
 8009386:	bf15      	itete	ne
 8009388:	6560      	strne	r0, [r4, #84]	@ 0x54
 800938a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800938e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009392:	81a3      	strheq	r3, [r4, #12]
 8009394:	bf18      	it	ne
 8009396:	81a3      	strhne	r3, [r4, #12]
 8009398:	bd10      	pop	{r4, pc}

0800939a <__sclose>:
 800939a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800939e:	f000 b8a1 	b.w	80094e4 <_close_r>

080093a2 <__swbuf_r>:
 80093a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093a4:	460e      	mov	r6, r1
 80093a6:	4614      	mov	r4, r2
 80093a8:	4605      	mov	r5, r0
 80093aa:	b118      	cbz	r0, 80093b4 <__swbuf_r+0x12>
 80093ac:	6a03      	ldr	r3, [r0, #32]
 80093ae:	b90b      	cbnz	r3, 80093b4 <__swbuf_r+0x12>
 80093b0:	f7ff feee 	bl	8009190 <__sinit>
 80093b4:	69a3      	ldr	r3, [r4, #24]
 80093b6:	60a3      	str	r3, [r4, #8]
 80093b8:	89a3      	ldrh	r3, [r4, #12]
 80093ba:	071a      	lsls	r2, r3, #28
 80093bc:	d501      	bpl.n	80093c2 <__swbuf_r+0x20>
 80093be:	6923      	ldr	r3, [r4, #16]
 80093c0:	b943      	cbnz	r3, 80093d4 <__swbuf_r+0x32>
 80093c2:	4621      	mov	r1, r4
 80093c4:	4628      	mov	r0, r5
 80093c6:	f000 f82b 	bl	8009420 <__swsetup_r>
 80093ca:	b118      	cbz	r0, 80093d4 <__swbuf_r+0x32>
 80093cc:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80093d0:	4638      	mov	r0, r7
 80093d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093d4:	6823      	ldr	r3, [r4, #0]
 80093d6:	6922      	ldr	r2, [r4, #16]
 80093d8:	1a98      	subs	r0, r3, r2
 80093da:	6963      	ldr	r3, [r4, #20]
 80093dc:	b2f6      	uxtb	r6, r6
 80093de:	4283      	cmp	r3, r0
 80093e0:	4637      	mov	r7, r6
 80093e2:	dc05      	bgt.n	80093f0 <__swbuf_r+0x4e>
 80093e4:	4621      	mov	r1, r4
 80093e6:	4628      	mov	r0, r5
 80093e8:	f002 fe96 	bl	800c118 <_fflush_r>
 80093ec:	2800      	cmp	r0, #0
 80093ee:	d1ed      	bne.n	80093cc <__swbuf_r+0x2a>
 80093f0:	68a3      	ldr	r3, [r4, #8]
 80093f2:	3b01      	subs	r3, #1
 80093f4:	60a3      	str	r3, [r4, #8]
 80093f6:	6823      	ldr	r3, [r4, #0]
 80093f8:	1c5a      	adds	r2, r3, #1
 80093fa:	6022      	str	r2, [r4, #0]
 80093fc:	701e      	strb	r6, [r3, #0]
 80093fe:	6962      	ldr	r2, [r4, #20]
 8009400:	1c43      	adds	r3, r0, #1
 8009402:	429a      	cmp	r2, r3
 8009404:	d004      	beq.n	8009410 <__swbuf_r+0x6e>
 8009406:	89a3      	ldrh	r3, [r4, #12]
 8009408:	07db      	lsls	r3, r3, #31
 800940a:	d5e1      	bpl.n	80093d0 <__swbuf_r+0x2e>
 800940c:	2e0a      	cmp	r6, #10
 800940e:	d1df      	bne.n	80093d0 <__swbuf_r+0x2e>
 8009410:	4621      	mov	r1, r4
 8009412:	4628      	mov	r0, r5
 8009414:	f002 fe80 	bl	800c118 <_fflush_r>
 8009418:	2800      	cmp	r0, #0
 800941a:	d0d9      	beq.n	80093d0 <__swbuf_r+0x2e>
 800941c:	e7d6      	b.n	80093cc <__swbuf_r+0x2a>
	...

08009420 <__swsetup_r>:
 8009420:	b538      	push	{r3, r4, r5, lr}
 8009422:	4b29      	ldr	r3, [pc, #164]	@ (80094c8 <__swsetup_r+0xa8>)
 8009424:	4605      	mov	r5, r0
 8009426:	6818      	ldr	r0, [r3, #0]
 8009428:	460c      	mov	r4, r1
 800942a:	b118      	cbz	r0, 8009434 <__swsetup_r+0x14>
 800942c:	6a03      	ldr	r3, [r0, #32]
 800942e:	b90b      	cbnz	r3, 8009434 <__swsetup_r+0x14>
 8009430:	f7ff feae 	bl	8009190 <__sinit>
 8009434:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009438:	0719      	lsls	r1, r3, #28
 800943a:	d422      	bmi.n	8009482 <__swsetup_r+0x62>
 800943c:	06da      	lsls	r2, r3, #27
 800943e:	d407      	bmi.n	8009450 <__swsetup_r+0x30>
 8009440:	2209      	movs	r2, #9
 8009442:	602a      	str	r2, [r5, #0]
 8009444:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009448:	81a3      	strh	r3, [r4, #12]
 800944a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800944e:	e033      	b.n	80094b8 <__swsetup_r+0x98>
 8009450:	0758      	lsls	r0, r3, #29
 8009452:	d512      	bpl.n	800947a <__swsetup_r+0x5a>
 8009454:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009456:	b141      	cbz	r1, 800946a <__swsetup_r+0x4a>
 8009458:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800945c:	4299      	cmp	r1, r3
 800945e:	d002      	beq.n	8009466 <__swsetup_r+0x46>
 8009460:	4628      	mov	r0, r5
 8009462:	f000 ff05 	bl	800a270 <_free_r>
 8009466:	2300      	movs	r3, #0
 8009468:	6363      	str	r3, [r4, #52]	@ 0x34
 800946a:	89a3      	ldrh	r3, [r4, #12]
 800946c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009470:	81a3      	strh	r3, [r4, #12]
 8009472:	2300      	movs	r3, #0
 8009474:	6063      	str	r3, [r4, #4]
 8009476:	6923      	ldr	r3, [r4, #16]
 8009478:	6023      	str	r3, [r4, #0]
 800947a:	89a3      	ldrh	r3, [r4, #12]
 800947c:	f043 0308 	orr.w	r3, r3, #8
 8009480:	81a3      	strh	r3, [r4, #12]
 8009482:	6923      	ldr	r3, [r4, #16]
 8009484:	b94b      	cbnz	r3, 800949a <__swsetup_r+0x7a>
 8009486:	89a3      	ldrh	r3, [r4, #12]
 8009488:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800948c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009490:	d003      	beq.n	800949a <__swsetup_r+0x7a>
 8009492:	4621      	mov	r1, r4
 8009494:	4628      	mov	r0, r5
 8009496:	f002 fe8d 	bl	800c1b4 <__smakebuf_r>
 800949a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800949e:	f013 0201 	ands.w	r2, r3, #1
 80094a2:	d00a      	beq.n	80094ba <__swsetup_r+0x9a>
 80094a4:	2200      	movs	r2, #0
 80094a6:	60a2      	str	r2, [r4, #8]
 80094a8:	6962      	ldr	r2, [r4, #20]
 80094aa:	4252      	negs	r2, r2
 80094ac:	61a2      	str	r2, [r4, #24]
 80094ae:	6922      	ldr	r2, [r4, #16]
 80094b0:	b942      	cbnz	r2, 80094c4 <__swsetup_r+0xa4>
 80094b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80094b6:	d1c5      	bne.n	8009444 <__swsetup_r+0x24>
 80094b8:	bd38      	pop	{r3, r4, r5, pc}
 80094ba:	0799      	lsls	r1, r3, #30
 80094bc:	bf58      	it	pl
 80094be:	6962      	ldrpl	r2, [r4, #20]
 80094c0:	60a2      	str	r2, [r4, #8]
 80094c2:	e7f4      	b.n	80094ae <__swsetup_r+0x8e>
 80094c4:	2000      	movs	r0, #0
 80094c6:	e7f7      	b.n	80094b8 <__swsetup_r+0x98>
 80094c8:	20000f5c 	.word	0x20000f5c

080094cc <memset>:
 80094cc:	4402      	add	r2, r0
 80094ce:	4603      	mov	r3, r0
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d100      	bne.n	80094d6 <memset+0xa>
 80094d4:	4770      	bx	lr
 80094d6:	f803 1b01 	strb.w	r1, [r3], #1
 80094da:	e7f9      	b.n	80094d0 <memset+0x4>

080094dc <_localeconv_r>:
 80094dc:	4800      	ldr	r0, [pc, #0]	@ (80094e0 <_localeconv_r+0x4>)
 80094de:	4770      	bx	lr
 80094e0:	2000109c 	.word	0x2000109c

080094e4 <_close_r>:
 80094e4:	b538      	push	{r3, r4, r5, lr}
 80094e6:	4d06      	ldr	r5, [pc, #24]	@ (8009500 <_close_r+0x1c>)
 80094e8:	2300      	movs	r3, #0
 80094ea:	4604      	mov	r4, r0
 80094ec:	4608      	mov	r0, r1
 80094ee:	602b      	str	r3, [r5, #0]
 80094f0:	f7f8 fa0e 	bl	8001910 <_close>
 80094f4:	1c43      	adds	r3, r0, #1
 80094f6:	d102      	bne.n	80094fe <_close_r+0x1a>
 80094f8:	682b      	ldr	r3, [r5, #0]
 80094fa:	b103      	cbz	r3, 80094fe <_close_r+0x1a>
 80094fc:	6023      	str	r3, [r4, #0]
 80094fe:	bd38      	pop	{r3, r4, r5, pc}
 8009500:	20003164 	.word	0x20003164

08009504 <_lseek_r>:
 8009504:	b538      	push	{r3, r4, r5, lr}
 8009506:	4d07      	ldr	r5, [pc, #28]	@ (8009524 <_lseek_r+0x20>)
 8009508:	4604      	mov	r4, r0
 800950a:	4608      	mov	r0, r1
 800950c:	4611      	mov	r1, r2
 800950e:	2200      	movs	r2, #0
 8009510:	602a      	str	r2, [r5, #0]
 8009512:	461a      	mov	r2, r3
 8009514:	f7f8 fa23 	bl	800195e <_lseek>
 8009518:	1c43      	adds	r3, r0, #1
 800951a:	d102      	bne.n	8009522 <_lseek_r+0x1e>
 800951c:	682b      	ldr	r3, [r5, #0]
 800951e:	b103      	cbz	r3, 8009522 <_lseek_r+0x1e>
 8009520:	6023      	str	r3, [r4, #0]
 8009522:	bd38      	pop	{r3, r4, r5, pc}
 8009524:	20003164 	.word	0x20003164

08009528 <_read_r>:
 8009528:	b538      	push	{r3, r4, r5, lr}
 800952a:	4d07      	ldr	r5, [pc, #28]	@ (8009548 <_read_r+0x20>)
 800952c:	4604      	mov	r4, r0
 800952e:	4608      	mov	r0, r1
 8009530:	4611      	mov	r1, r2
 8009532:	2200      	movs	r2, #0
 8009534:	602a      	str	r2, [r5, #0]
 8009536:	461a      	mov	r2, r3
 8009538:	f7f8 f9b1 	bl	800189e <_read>
 800953c:	1c43      	adds	r3, r0, #1
 800953e:	d102      	bne.n	8009546 <_read_r+0x1e>
 8009540:	682b      	ldr	r3, [r5, #0]
 8009542:	b103      	cbz	r3, 8009546 <_read_r+0x1e>
 8009544:	6023      	str	r3, [r4, #0]
 8009546:	bd38      	pop	{r3, r4, r5, pc}
 8009548:	20003164 	.word	0x20003164

0800954c <_write_r>:
 800954c:	b538      	push	{r3, r4, r5, lr}
 800954e:	4d07      	ldr	r5, [pc, #28]	@ (800956c <_write_r+0x20>)
 8009550:	4604      	mov	r4, r0
 8009552:	4608      	mov	r0, r1
 8009554:	4611      	mov	r1, r2
 8009556:	2200      	movs	r2, #0
 8009558:	602a      	str	r2, [r5, #0]
 800955a:	461a      	mov	r2, r3
 800955c:	f7f8 f9bc 	bl	80018d8 <_write>
 8009560:	1c43      	adds	r3, r0, #1
 8009562:	d102      	bne.n	800956a <_write_r+0x1e>
 8009564:	682b      	ldr	r3, [r5, #0]
 8009566:	b103      	cbz	r3, 800956a <_write_r+0x1e>
 8009568:	6023      	str	r3, [r4, #0]
 800956a:	bd38      	pop	{r3, r4, r5, pc}
 800956c:	20003164 	.word	0x20003164

08009570 <__errno>:
 8009570:	4b01      	ldr	r3, [pc, #4]	@ (8009578 <__errno+0x8>)
 8009572:	6818      	ldr	r0, [r3, #0]
 8009574:	4770      	bx	lr
 8009576:	bf00      	nop
 8009578:	20000f5c 	.word	0x20000f5c

0800957c <__libc_init_array>:
 800957c:	b570      	push	{r4, r5, r6, lr}
 800957e:	4d0d      	ldr	r5, [pc, #52]	@ (80095b4 <__libc_init_array+0x38>)
 8009580:	4c0d      	ldr	r4, [pc, #52]	@ (80095b8 <__libc_init_array+0x3c>)
 8009582:	1b64      	subs	r4, r4, r5
 8009584:	10a4      	asrs	r4, r4, #2
 8009586:	2600      	movs	r6, #0
 8009588:	42a6      	cmp	r6, r4
 800958a:	d109      	bne.n	80095a0 <__libc_init_array+0x24>
 800958c:	4d0b      	ldr	r5, [pc, #44]	@ (80095bc <__libc_init_array+0x40>)
 800958e:	4c0c      	ldr	r4, [pc, #48]	@ (80095c0 <__libc_init_array+0x44>)
 8009590:	f003 fae0 	bl	800cb54 <_init>
 8009594:	1b64      	subs	r4, r4, r5
 8009596:	10a4      	asrs	r4, r4, #2
 8009598:	2600      	movs	r6, #0
 800959a:	42a6      	cmp	r6, r4
 800959c:	d105      	bne.n	80095aa <__libc_init_array+0x2e>
 800959e:	bd70      	pop	{r4, r5, r6, pc}
 80095a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80095a4:	4798      	blx	r3
 80095a6:	3601      	adds	r6, #1
 80095a8:	e7ee      	b.n	8009588 <__libc_init_array+0xc>
 80095aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80095ae:	4798      	blx	r3
 80095b0:	3601      	adds	r6, #1
 80095b2:	e7f2      	b.n	800959a <__libc_init_array+0x1e>
 80095b4:	0800d0c0 	.word	0x0800d0c0
 80095b8:	0800d0c0 	.word	0x0800d0c0
 80095bc:	0800d0c0 	.word	0x0800d0c0
 80095c0:	0800d0c4 	.word	0x0800d0c4

080095c4 <__retarget_lock_init_recursive>:
 80095c4:	4770      	bx	lr

080095c6 <__retarget_lock_acquire_recursive>:
 80095c6:	4770      	bx	lr

080095c8 <__retarget_lock_release_recursive>:
 80095c8:	4770      	bx	lr
	...

080095cc <nanf>:
 80095cc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80095d4 <nanf+0x8>
 80095d0:	4770      	bx	lr
 80095d2:	bf00      	nop
 80095d4:	7fc00000 	.word	0x7fc00000

080095d8 <quorem>:
 80095d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095dc:	6903      	ldr	r3, [r0, #16]
 80095de:	690c      	ldr	r4, [r1, #16]
 80095e0:	42a3      	cmp	r3, r4
 80095e2:	4607      	mov	r7, r0
 80095e4:	db7e      	blt.n	80096e4 <quorem+0x10c>
 80095e6:	3c01      	subs	r4, #1
 80095e8:	f101 0814 	add.w	r8, r1, #20
 80095ec:	00a3      	lsls	r3, r4, #2
 80095ee:	f100 0514 	add.w	r5, r0, #20
 80095f2:	9300      	str	r3, [sp, #0]
 80095f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80095f8:	9301      	str	r3, [sp, #4]
 80095fa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80095fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009602:	3301      	adds	r3, #1
 8009604:	429a      	cmp	r2, r3
 8009606:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800960a:	fbb2 f6f3 	udiv	r6, r2, r3
 800960e:	d32e      	bcc.n	800966e <quorem+0x96>
 8009610:	f04f 0a00 	mov.w	sl, #0
 8009614:	46c4      	mov	ip, r8
 8009616:	46ae      	mov	lr, r5
 8009618:	46d3      	mov	fp, sl
 800961a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800961e:	b298      	uxth	r0, r3
 8009620:	fb06 a000 	mla	r0, r6, r0, sl
 8009624:	0c02      	lsrs	r2, r0, #16
 8009626:	0c1b      	lsrs	r3, r3, #16
 8009628:	fb06 2303 	mla	r3, r6, r3, r2
 800962c:	f8de 2000 	ldr.w	r2, [lr]
 8009630:	b280      	uxth	r0, r0
 8009632:	b292      	uxth	r2, r2
 8009634:	1a12      	subs	r2, r2, r0
 8009636:	445a      	add	r2, fp
 8009638:	f8de 0000 	ldr.w	r0, [lr]
 800963c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009640:	b29b      	uxth	r3, r3
 8009642:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009646:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800964a:	b292      	uxth	r2, r2
 800964c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009650:	45e1      	cmp	r9, ip
 8009652:	f84e 2b04 	str.w	r2, [lr], #4
 8009656:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800965a:	d2de      	bcs.n	800961a <quorem+0x42>
 800965c:	9b00      	ldr	r3, [sp, #0]
 800965e:	58eb      	ldr	r3, [r5, r3]
 8009660:	b92b      	cbnz	r3, 800966e <quorem+0x96>
 8009662:	9b01      	ldr	r3, [sp, #4]
 8009664:	3b04      	subs	r3, #4
 8009666:	429d      	cmp	r5, r3
 8009668:	461a      	mov	r2, r3
 800966a:	d32f      	bcc.n	80096cc <quorem+0xf4>
 800966c:	613c      	str	r4, [r7, #16]
 800966e:	4638      	mov	r0, r7
 8009670:	f001 f9c2 	bl	800a9f8 <__mcmp>
 8009674:	2800      	cmp	r0, #0
 8009676:	db25      	blt.n	80096c4 <quorem+0xec>
 8009678:	4629      	mov	r1, r5
 800967a:	2000      	movs	r0, #0
 800967c:	f858 2b04 	ldr.w	r2, [r8], #4
 8009680:	f8d1 c000 	ldr.w	ip, [r1]
 8009684:	fa1f fe82 	uxth.w	lr, r2
 8009688:	fa1f f38c 	uxth.w	r3, ip
 800968c:	eba3 030e 	sub.w	r3, r3, lr
 8009690:	4403      	add	r3, r0
 8009692:	0c12      	lsrs	r2, r2, #16
 8009694:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009698:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800969c:	b29b      	uxth	r3, r3
 800969e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80096a2:	45c1      	cmp	r9, r8
 80096a4:	f841 3b04 	str.w	r3, [r1], #4
 80096a8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80096ac:	d2e6      	bcs.n	800967c <quorem+0xa4>
 80096ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80096b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80096b6:	b922      	cbnz	r2, 80096c2 <quorem+0xea>
 80096b8:	3b04      	subs	r3, #4
 80096ba:	429d      	cmp	r5, r3
 80096bc:	461a      	mov	r2, r3
 80096be:	d30b      	bcc.n	80096d8 <quorem+0x100>
 80096c0:	613c      	str	r4, [r7, #16]
 80096c2:	3601      	adds	r6, #1
 80096c4:	4630      	mov	r0, r6
 80096c6:	b003      	add	sp, #12
 80096c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096cc:	6812      	ldr	r2, [r2, #0]
 80096ce:	3b04      	subs	r3, #4
 80096d0:	2a00      	cmp	r2, #0
 80096d2:	d1cb      	bne.n	800966c <quorem+0x94>
 80096d4:	3c01      	subs	r4, #1
 80096d6:	e7c6      	b.n	8009666 <quorem+0x8e>
 80096d8:	6812      	ldr	r2, [r2, #0]
 80096da:	3b04      	subs	r3, #4
 80096dc:	2a00      	cmp	r2, #0
 80096de:	d1ef      	bne.n	80096c0 <quorem+0xe8>
 80096e0:	3c01      	subs	r4, #1
 80096e2:	e7ea      	b.n	80096ba <quorem+0xe2>
 80096e4:	2000      	movs	r0, #0
 80096e6:	e7ee      	b.n	80096c6 <quorem+0xee>

080096e8 <_dtoa_r>:
 80096e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096ec:	69c7      	ldr	r7, [r0, #28]
 80096ee:	b099      	sub	sp, #100	@ 0x64
 80096f0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80096f4:	ec55 4b10 	vmov	r4, r5, d0
 80096f8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80096fa:	9109      	str	r1, [sp, #36]	@ 0x24
 80096fc:	4683      	mov	fp, r0
 80096fe:	920e      	str	r2, [sp, #56]	@ 0x38
 8009700:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009702:	b97f      	cbnz	r7, 8009724 <_dtoa_r+0x3c>
 8009704:	2010      	movs	r0, #16
 8009706:	f000 fdfd 	bl	800a304 <malloc>
 800970a:	4602      	mov	r2, r0
 800970c:	f8cb 001c 	str.w	r0, [fp, #28]
 8009710:	b920      	cbnz	r0, 800971c <_dtoa_r+0x34>
 8009712:	4ba7      	ldr	r3, [pc, #668]	@ (80099b0 <_dtoa_r+0x2c8>)
 8009714:	21ef      	movs	r1, #239	@ 0xef
 8009716:	48a7      	ldr	r0, [pc, #668]	@ (80099b4 <_dtoa_r+0x2cc>)
 8009718:	f002 fdfe 	bl	800c318 <__assert_func>
 800971c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009720:	6007      	str	r7, [r0, #0]
 8009722:	60c7      	str	r7, [r0, #12]
 8009724:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009728:	6819      	ldr	r1, [r3, #0]
 800972a:	b159      	cbz	r1, 8009744 <_dtoa_r+0x5c>
 800972c:	685a      	ldr	r2, [r3, #4]
 800972e:	604a      	str	r2, [r1, #4]
 8009730:	2301      	movs	r3, #1
 8009732:	4093      	lsls	r3, r2
 8009734:	608b      	str	r3, [r1, #8]
 8009736:	4658      	mov	r0, fp
 8009738:	f000 feda 	bl	800a4f0 <_Bfree>
 800973c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009740:	2200      	movs	r2, #0
 8009742:	601a      	str	r2, [r3, #0]
 8009744:	1e2b      	subs	r3, r5, #0
 8009746:	bfb9      	ittee	lt
 8009748:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800974c:	9303      	strlt	r3, [sp, #12]
 800974e:	2300      	movge	r3, #0
 8009750:	6033      	strge	r3, [r6, #0]
 8009752:	9f03      	ldr	r7, [sp, #12]
 8009754:	4b98      	ldr	r3, [pc, #608]	@ (80099b8 <_dtoa_r+0x2d0>)
 8009756:	bfbc      	itt	lt
 8009758:	2201      	movlt	r2, #1
 800975a:	6032      	strlt	r2, [r6, #0]
 800975c:	43bb      	bics	r3, r7
 800975e:	d112      	bne.n	8009786 <_dtoa_r+0x9e>
 8009760:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009762:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009766:	6013      	str	r3, [r2, #0]
 8009768:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800976c:	4323      	orrs	r3, r4
 800976e:	f000 854d 	beq.w	800a20c <_dtoa_r+0xb24>
 8009772:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009774:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80099cc <_dtoa_r+0x2e4>
 8009778:	2b00      	cmp	r3, #0
 800977a:	f000 854f 	beq.w	800a21c <_dtoa_r+0xb34>
 800977e:	f10a 0303 	add.w	r3, sl, #3
 8009782:	f000 bd49 	b.w	800a218 <_dtoa_r+0xb30>
 8009786:	ed9d 7b02 	vldr	d7, [sp, #8]
 800978a:	2200      	movs	r2, #0
 800978c:	ec51 0b17 	vmov	r0, r1, d7
 8009790:	2300      	movs	r3, #0
 8009792:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009796:	f7f7 f9bf 	bl	8000b18 <__aeabi_dcmpeq>
 800979a:	4680      	mov	r8, r0
 800979c:	b158      	cbz	r0, 80097b6 <_dtoa_r+0xce>
 800979e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80097a0:	2301      	movs	r3, #1
 80097a2:	6013      	str	r3, [r2, #0]
 80097a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80097a6:	b113      	cbz	r3, 80097ae <_dtoa_r+0xc6>
 80097a8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80097aa:	4b84      	ldr	r3, [pc, #528]	@ (80099bc <_dtoa_r+0x2d4>)
 80097ac:	6013      	str	r3, [r2, #0]
 80097ae:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80099d0 <_dtoa_r+0x2e8>
 80097b2:	f000 bd33 	b.w	800a21c <_dtoa_r+0xb34>
 80097b6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80097ba:	aa16      	add	r2, sp, #88	@ 0x58
 80097bc:	a917      	add	r1, sp, #92	@ 0x5c
 80097be:	4658      	mov	r0, fp
 80097c0:	f001 fa3a 	bl	800ac38 <__d2b>
 80097c4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80097c8:	4681      	mov	r9, r0
 80097ca:	2e00      	cmp	r6, #0
 80097cc:	d077      	beq.n	80098be <_dtoa_r+0x1d6>
 80097ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80097d0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80097d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80097d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80097dc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80097e0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80097e4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80097e8:	4619      	mov	r1, r3
 80097ea:	2200      	movs	r2, #0
 80097ec:	4b74      	ldr	r3, [pc, #464]	@ (80099c0 <_dtoa_r+0x2d8>)
 80097ee:	f7f6 fd73 	bl	80002d8 <__aeabi_dsub>
 80097f2:	a369      	add	r3, pc, #420	@ (adr r3, 8009998 <_dtoa_r+0x2b0>)
 80097f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f8:	f7f6 ff26 	bl	8000648 <__aeabi_dmul>
 80097fc:	a368      	add	r3, pc, #416	@ (adr r3, 80099a0 <_dtoa_r+0x2b8>)
 80097fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009802:	f7f6 fd6b 	bl	80002dc <__adddf3>
 8009806:	4604      	mov	r4, r0
 8009808:	4630      	mov	r0, r6
 800980a:	460d      	mov	r5, r1
 800980c:	f7f6 feb2 	bl	8000574 <__aeabi_i2d>
 8009810:	a365      	add	r3, pc, #404	@ (adr r3, 80099a8 <_dtoa_r+0x2c0>)
 8009812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009816:	f7f6 ff17 	bl	8000648 <__aeabi_dmul>
 800981a:	4602      	mov	r2, r0
 800981c:	460b      	mov	r3, r1
 800981e:	4620      	mov	r0, r4
 8009820:	4629      	mov	r1, r5
 8009822:	f7f6 fd5b 	bl	80002dc <__adddf3>
 8009826:	4604      	mov	r4, r0
 8009828:	460d      	mov	r5, r1
 800982a:	f7f7 f9bd 	bl	8000ba8 <__aeabi_d2iz>
 800982e:	2200      	movs	r2, #0
 8009830:	4607      	mov	r7, r0
 8009832:	2300      	movs	r3, #0
 8009834:	4620      	mov	r0, r4
 8009836:	4629      	mov	r1, r5
 8009838:	f7f7 f978 	bl	8000b2c <__aeabi_dcmplt>
 800983c:	b140      	cbz	r0, 8009850 <_dtoa_r+0x168>
 800983e:	4638      	mov	r0, r7
 8009840:	f7f6 fe98 	bl	8000574 <__aeabi_i2d>
 8009844:	4622      	mov	r2, r4
 8009846:	462b      	mov	r3, r5
 8009848:	f7f7 f966 	bl	8000b18 <__aeabi_dcmpeq>
 800984c:	b900      	cbnz	r0, 8009850 <_dtoa_r+0x168>
 800984e:	3f01      	subs	r7, #1
 8009850:	2f16      	cmp	r7, #22
 8009852:	d851      	bhi.n	80098f8 <_dtoa_r+0x210>
 8009854:	4b5b      	ldr	r3, [pc, #364]	@ (80099c4 <_dtoa_r+0x2dc>)
 8009856:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800985a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800985e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009862:	f7f7 f963 	bl	8000b2c <__aeabi_dcmplt>
 8009866:	2800      	cmp	r0, #0
 8009868:	d048      	beq.n	80098fc <_dtoa_r+0x214>
 800986a:	3f01      	subs	r7, #1
 800986c:	2300      	movs	r3, #0
 800986e:	9312      	str	r3, [sp, #72]	@ 0x48
 8009870:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009872:	1b9b      	subs	r3, r3, r6
 8009874:	1e5a      	subs	r2, r3, #1
 8009876:	bf44      	itt	mi
 8009878:	f1c3 0801 	rsbmi	r8, r3, #1
 800987c:	2300      	movmi	r3, #0
 800987e:	9208      	str	r2, [sp, #32]
 8009880:	bf54      	ite	pl
 8009882:	f04f 0800 	movpl.w	r8, #0
 8009886:	9308      	strmi	r3, [sp, #32]
 8009888:	2f00      	cmp	r7, #0
 800988a:	db39      	blt.n	8009900 <_dtoa_r+0x218>
 800988c:	9b08      	ldr	r3, [sp, #32]
 800988e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009890:	443b      	add	r3, r7
 8009892:	9308      	str	r3, [sp, #32]
 8009894:	2300      	movs	r3, #0
 8009896:	930a      	str	r3, [sp, #40]	@ 0x28
 8009898:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800989a:	2b09      	cmp	r3, #9
 800989c:	d864      	bhi.n	8009968 <_dtoa_r+0x280>
 800989e:	2b05      	cmp	r3, #5
 80098a0:	bfc4      	itt	gt
 80098a2:	3b04      	subgt	r3, #4
 80098a4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80098a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098a8:	f1a3 0302 	sub.w	r3, r3, #2
 80098ac:	bfcc      	ite	gt
 80098ae:	2400      	movgt	r4, #0
 80098b0:	2401      	movle	r4, #1
 80098b2:	2b03      	cmp	r3, #3
 80098b4:	d863      	bhi.n	800997e <_dtoa_r+0x296>
 80098b6:	e8df f003 	tbb	[pc, r3]
 80098ba:	372a      	.short	0x372a
 80098bc:	5535      	.short	0x5535
 80098be:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80098c2:	441e      	add	r6, r3
 80098c4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80098c8:	2b20      	cmp	r3, #32
 80098ca:	bfc1      	itttt	gt
 80098cc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80098d0:	409f      	lslgt	r7, r3
 80098d2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80098d6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80098da:	bfd6      	itet	le
 80098dc:	f1c3 0320 	rsble	r3, r3, #32
 80098e0:	ea47 0003 	orrgt.w	r0, r7, r3
 80098e4:	fa04 f003 	lslle.w	r0, r4, r3
 80098e8:	f7f6 fe34 	bl	8000554 <__aeabi_ui2d>
 80098ec:	2201      	movs	r2, #1
 80098ee:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80098f2:	3e01      	subs	r6, #1
 80098f4:	9214      	str	r2, [sp, #80]	@ 0x50
 80098f6:	e777      	b.n	80097e8 <_dtoa_r+0x100>
 80098f8:	2301      	movs	r3, #1
 80098fa:	e7b8      	b.n	800986e <_dtoa_r+0x186>
 80098fc:	9012      	str	r0, [sp, #72]	@ 0x48
 80098fe:	e7b7      	b.n	8009870 <_dtoa_r+0x188>
 8009900:	427b      	negs	r3, r7
 8009902:	930a      	str	r3, [sp, #40]	@ 0x28
 8009904:	2300      	movs	r3, #0
 8009906:	eba8 0807 	sub.w	r8, r8, r7
 800990a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800990c:	e7c4      	b.n	8009898 <_dtoa_r+0x1b0>
 800990e:	2300      	movs	r3, #0
 8009910:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009912:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009914:	2b00      	cmp	r3, #0
 8009916:	dc35      	bgt.n	8009984 <_dtoa_r+0x29c>
 8009918:	2301      	movs	r3, #1
 800991a:	9300      	str	r3, [sp, #0]
 800991c:	9307      	str	r3, [sp, #28]
 800991e:	461a      	mov	r2, r3
 8009920:	920e      	str	r2, [sp, #56]	@ 0x38
 8009922:	e00b      	b.n	800993c <_dtoa_r+0x254>
 8009924:	2301      	movs	r3, #1
 8009926:	e7f3      	b.n	8009910 <_dtoa_r+0x228>
 8009928:	2300      	movs	r3, #0
 800992a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800992c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800992e:	18fb      	adds	r3, r7, r3
 8009930:	9300      	str	r3, [sp, #0]
 8009932:	3301      	adds	r3, #1
 8009934:	2b01      	cmp	r3, #1
 8009936:	9307      	str	r3, [sp, #28]
 8009938:	bfb8      	it	lt
 800993a:	2301      	movlt	r3, #1
 800993c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009940:	2100      	movs	r1, #0
 8009942:	2204      	movs	r2, #4
 8009944:	f102 0514 	add.w	r5, r2, #20
 8009948:	429d      	cmp	r5, r3
 800994a:	d91f      	bls.n	800998c <_dtoa_r+0x2a4>
 800994c:	6041      	str	r1, [r0, #4]
 800994e:	4658      	mov	r0, fp
 8009950:	f000 fd8e 	bl	800a470 <_Balloc>
 8009954:	4682      	mov	sl, r0
 8009956:	2800      	cmp	r0, #0
 8009958:	d13c      	bne.n	80099d4 <_dtoa_r+0x2ec>
 800995a:	4b1b      	ldr	r3, [pc, #108]	@ (80099c8 <_dtoa_r+0x2e0>)
 800995c:	4602      	mov	r2, r0
 800995e:	f240 11af 	movw	r1, #431	@ 0x1af
 8009962:	e6d8      	b.n	8009716 <_dtoa_r+0x2e>
 8009964:	2301      	movs	r3, #1
 8009966:	e7e0      	b.n	800992a <_dtoa_r+0x242>
 8009968:	2401      	movs	r4, #1
 800996a:	2300      	movs	r3, #0
 800996c:	9309      	str	r3, [sp, #36]	@ 0x24
 800996e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009970:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009974:	9300      	str	r3, [sp, #0]
 8009976:	9307      	str	r3, [sp, #28]
 8009978:	2200      	movs	r2, #0
 800997a:	2312      	movs	r3, #18
 800997c:	e7d0      	b.n	8009920 <_dtoa_r+0x238>
 800997e:	2301      	movs	r3, #1
 8009980:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009982:	e7f5      	b.n	8009970 <_dtoa_r+0x288>
 8009984:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009986:	9300      	str	r3, [sp, #0]
 8009988:	9307      	str	r3, [sp, #28]
 800998a:	e7d7      	b.n	800993c <_dtoa_r+0x254>
 800998c:	3101      	adds	r1, #1
 800998e:	0052      	lsls	r2, r2, #1
 8009990:	e7d8      	b.n	8009944 <_dtoa_r+0x25c>
 8009992:	bf00      	nop
 8009994:	f3af 8000 	nop.w
 8009998:	636f4361 	.word	0x636f4361
 800999c:	3fd287a7 	.word	0x3fd287a7
 80099a0:	8b60c8b3 	.word	0x8b60c8b3
 80099a4:	3fc68a28 	.word	0x3fc68a28
 80099a8:	509f79fb 	.word	0x509f79fb
 80099ac:	3fd34413 	.word	0x3fd34413
 80099b0:	0800ccce 	.word	0x0800ccce
 80099b4:	0800cce5 	.word	0x0800cce5
 80099b8:	7ff00000 	.word	0x7ff00000
 80099bc:	0800cc99 	.word	0x0800cc99
 80099c0:	3ff80000 	.word	0x3ff80000
 80099c4:	0800cde0 	.word	0x0800cde0
 80099c8:	0800cd3d 	.word	0x0800cd3d
 80099cc:	0800ccca 	.word	0x0800ccca
 80099d0:	0800cc98 	.word	0x0800cc98
 80099d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80099d8:	6018      	str	r0, [r3, #0]
 80099da:	9b07      	ldr	r3, [sp, #28]
 80099dc:	2b0e      	cmp	r3, #14
 80099de:	f200 80a4 	bhi.w	8009b2a <_dtoa_r+0x442>
 80099e2:	2c00      	cmp	r4, #0
 80099e4:	f000 80a1 	beq.w	8009b2a <_dtoa_r+0x442>
 80099e8:	2f00      	cmp	r7, #0
 80099ea:	dd33      	ble.n	8009a54 <_dtoa_r+0x36c>
 80099ec:	4bad      	ldr	r3, [pc, #692]	@ (8009ca4 <_dtoa_r+0x5bc>)
 80099ee:	f007 020f 	and.w	r2, r7, #15
 80099f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80099f6:	ed93 7b00 	vldr	d7, [r3]
 80099fa:	05f8      	lsls	r0, r7, #23
 80099fc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009a00:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009a04:	d516      	bpl.n	8009a34 <_dtoa_r+0x34c>
 8009a06:	4ba8      	ldr	r3, [pc, #672]	@ (8009ca8 <_dtoa_r+0x5c0>)
 8009a08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a0c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009a10:	f7f6 ff44 	bl	800089c <__aeabi_ddiv>
 8009a14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a18:	f004 040f 	and.w	r4, r4, #15
 8009a1c:	2603      	movs	r6, #3
 8009a1e:	4da2      	ldr	r5, [pc, #648]	@ (8009ca8 <_dtoa_r+0x5c0>)
 8009a20:	b954      	cbnz	r4, 8009a38 <_dtoa_r+0x350>
 8009a22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a2a:	f7f6 ff37 	bl	800089c <__aeabi_ddiv>
 8009a2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a32:	e028      	b.n	8009a86 <_dtoa_r+0x39e>
 8009a34:	2602      	movs	r6, #2
 8009a36:	e7f2      	b.n	8009a1e <_dtoa_r+0x336>
 8009a38:	07e1      	lsls	r1, r4, #31
 8009a3a:	d508      	bpl.n	8009a4e <_dtoa_r+0x366>
 8009a3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a40:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009a44:	f7f6 fe00 	bl	8000648 <__aeabi_dmul>
 8009a48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009a4c:	3601      	adds	r6, #1
 8009a4e:	1064      	asrs	r4, r4, #1
 8009a50:	3508      	adds	r5, #8
 8009a52:	e7e5      	b.n	8009a20 <_dtoa_r+0x338>
 8009a54:	f000 80d2 	beq.w	8009bfc <_dtoa_r+0x514>
 8009a58:	427c      	negs	r4, r7
 8009a5a:	4b92      	ldr	r3, [pc, #584]	@ (8009ca4 <_dtoa_r+0x5bc>)
 8009a5c:	4d92      	ldr	r5, [pc, #584]	@ (8009ca8 <_dtoa_r+0x5c0>)
 8009a5e:	f004 020f 	and.w	r2, r4, #15
 8009a62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a6a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a6e:	f7f6 fdeb 	bl	8000648 <__aeabi_dmul>
 8009a72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a76:	1124      	asrs	r4, r4, #4
 8009a78:	2300      	movs	r3, #0
 8009a7a:	2602      	movs	r6, #2
 8009a7c:	2c00      	cmp	r4, #0
 8009a7e:	f040 80b2 	bne.w	8009be6 <_dtoa_r+0x4fe>
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d1d3      	bne.n	8009a2e <_dtoa_r+0x346>
 8009a86:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009a88:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	f000 80b7 	beq.w	8009c00 <_dtoa_r+0x518>
 8009a92:	4b86      	ldr	r3, [pc, #536]	@ (8009cac <_dtoa_r+0x5c4>)
 8009a94:	2200      	movs	r2, #0
 8009a96:	4620      	mov	r0, r4
 8009a98:	4629      	mov	r1, r5
 8009a9a:	f7f7 f847 	bl	8000b2c <__aeabi_dcmplt>
 8009a9e:	2800      	cmp	r0, #0
 8009aa0:	f000 80ae 	beq.w	8009c00 <_dtoa_r+0x518>
 8009aa4:	9b07      	ldr	r3, [sp, #28]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	f000 80aa 	beq.w	8009c00 <_dtoa_r+0x518>
 8009aac:	9b00      	ldr	r3, [sp, #0]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	dd37      	ble.n	8009b22 <_dtoa_r+0x43a>
 8009ab2:	1e7b      	subs	r3, r7, #1
 8009ab4:	9304      	str	r3, [sp, #16]
 8009ab6:	4620      	mov	r0, r4
 8009ab8:	4b7d      	ldr	r3, [pc, #500]	@ (8009cb0 <_dtoa_r+0x5c8>)
 8009aba:	2200      	movs	r2, #0
 8009abc:	4629      	mov	r1, r5
 8009abe:	f7f6 fdc3 	bl	8000648 <__aeabi_dmul>
 8009ac2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ac6:	9c00      	ldr	r4, [sp, #0]
 8009ac8:	3601      	adds	r6, #1
 8009aca:	4630      	mov	r0, r6
 8009acc:	f7f6 fd52 	bl	8000574 <__aeabi_i2d>
 8009ad0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ad4:	f7f6 fdb8 	bl	8000648 <__aeabi_dmul>
 8009ad8:	4b76      	ldr	r3, [pc, #472]	@ (8009cb4 <_dtoa_r+0x5cc>)
 8009ada:	2200      	movs	r2, #0
 8009adc:	f7f6 fbfe 	bl	80002dc <__adddf3>
 8009ae0:	4605      	mov	r5, r0
 8009ae2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009ae6:	2c00      	cmp	r4, #0
 8009ae8:	f040 808d 	bne.w	8009c06 <_dtoa_r+0x51e>
 8009aec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009af0:	4b71      	ldr	r3, [pc, #452]	@ (8009cb8 <_dtoa_r+0x5d0>)
 8009af2:	2200      	movs	r2, #0
 8009af4:	f7f6 fbf0 	bl	80002d8 <__aeabi_dsub>
 8009af8:	4602      	mov	r2, r0
 8009afa:	460b      	mov	r3, r1
 8009afc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009b00:	462a      	mov	r2, r5
 8009b02:	4633      	mov	r3, r6
 8009b04:	f7f7 f830 	bl	8000b68 <__aeabi_dcmpgt>
 8009b08:	2800      	cmp	r0, #0
 8009b0a:	f040 828b 	bne.w	800a024 <_dtoa_r+0x93c>
 8009b0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b12:	462a      	mov	r2, r5
 8009b14:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009b18:	f7f7 f808 	bl	8000b2c <__aeabi_dcmplt>
 8009b1c:	2800      	cmp	r0, #0
 8009b1e:	f040 8128 	bne.w	8009d72 <_dtoa_r+0x68a>
 8009b22:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009b26:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009b2a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	f2c0 815a 	blt.w	8009de6 <_dtoa_r+0x6fe>
 8009b32:	2f0e      	cmp	r7, #14
 8009b34:	f300 8157 	bgt.w	8009de6 <_dtoa_r+0x6fe>
 8009b38:	4b5a      	ldr	r3, [pc, #360]	@ (8009ca4 <_dtoa_r+0x5bc>)
 8009b3a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009b3e:	ed93 7b00 	vldr	d7, [r3]
 8009b42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	ed8d 7b00 	vstr	d7, [sp]
 8009b4a:	da03      	bge.n	8009b54 <_dtoa_r+0x46c>
 8009b4c:	9b07      	ldr	r3, [sp, #28]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	f340 8101 	ble.w	8009d56 <_dtoa_r+0x66e>
 8009b54:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009b58:	4656      	mov	r6, sl
 8009b5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b5e:	4620      	mov	r0, r4
 8009b60:	4629      	mov	r1, r5
 8009b62:	f7f6 fe9b 	bl	800089c <__aeabi_ddiv>
 8009b66:	f7f7 f81f 	bl	8000ba8 <__aeabi_d2iz>
 8009b6a:	4680      	mov	r8, r0
 8009b6c:	f7f6 fd02 	bl	8000574 <__aeabi_i2d>
 8009b70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b74:	f7f6 fd68 	bl	8000648 <__aeabi_dmul>
 8009b78:	4602      	mov	r2, r0
 8009b7a:	460b      	mov	r3, r1
 8009b7c:	4620      	mov	r0, r4
 8009b7e:	4629      	mov	r1, r5
 8009b80:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009b84:	f7f6 fba8 	bl	80002d8 <__aeabi_dsub>
 8009b88:	f806 4b01 	strb.w	r4, [r6], #1
 8009b8c:	9d07      	ldr	r5, [sp, #28]
 8009b8e:	eba6 040a 	sub.w	r4, r6, sl
 8009b92:	42a5      	cmp	r5, r4
 8009b94:	4602      	mov	r2, r0
 8009b96:	460b      	mov	r3, r1
 8009b98:	f040 8117 	bne.w	8009dca <_dtoa_r+0x6e2>
 8009b9c:	f7f6 fb9e 	bl	80002dc <__adddf3>
 8009ba0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ba4:	4604      	mov	r4, r0
 8009ba6:	460d      	mov	r5, r1
 8009ba8:	f7f6 ffde 	bl	8000b68 <__aeabi_dcmpgt>
 8009bac:	2800      	cmp	r0, #0
 8009bae:	f040 80f9 	bne.w	8009da4 <_dtoa_r+0x6bc>
 8009bb2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009bb6:	4620      	mov	r0, r4
 8009bb8:	4629      	mov	r1, r5
 8009bba:	f7f6 ffad 	bl	8000b18 <__aeabi_dcmpeq>
 8009bbe:	b118      	cbz	r0, 8009bc8 <_dtoa_r+0x4e0>
 8009bc0:	f018 0f01 	tst.w	r8, #1
 8009bc4:	f040 80ee 	bne.w	8009da4 <_dtoa_r+0x6bc>
 8009bc8:	4649      	mov	r1, r9
 8009bca:	4658      	mov	r0, fp
 8009bcc:	f000 fc90 	bl	800a4f0 <_Bfree>
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	7033      	strb	r3, [r6, #0]
 8009bd4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009bd6:	3701      	adds	r7, #1
 8009bd8:	601f      	str	r7, [r3, #0]
 8009bda:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	f000 831d 	beq.w	800a21c <_dtoa_r+0xb34>
 8009be2:	601e      	str	r6, [r3, #0]
 8009be4:	e31a      	b.n	800a21c <_dtoa_r+0xb34>
 8009be6:	07e2      	lsls	r2, r4, #31
 8009be8:	d505      	bpl.n	8009bf6 <_dtoa_r+0x50e>
 8009bea:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009bee:	f7f6 fd2b 	bl	8000648 <__aeabi_dmul>
 8009bf2:	3601      	adds	r6, #1
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	1064      	asrs	r4, r4, #1
 8009bf8:	3508      	adds	r5, #8
 8009bfa:	e73f      	b.n	8009a7c <_dtoa_r+0x394>
 8009bfc:	2602      	movs	r6, #2
 8009bfe:	e742      	b.n	8009a86 <_dtoa_r+0x39e>
 8009c00:	9c07      	ldr	r4, [sp, #28]
 8009c02:	9704      	str	r7, [sp, #16]
 8009c04:	e761      	b.n	8009aca <_dtoa_r+0x3e2>
 8009c06:	4b27      	ldr	r3, [pc, #156]	@ (8009ca4 <_dtoa_r+0x5bc>)
 8009c08:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009c0a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009c0e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009c12:	4454      	add	r4, sl
 8009c14:	2900      	cmp	r1, #0
 8009c16:	d053      	beq.n	8009cc0 <_dtoa_r+0x5d8>
 8009c18:	4928      	ldr	r1, [pc, #160]	@ (8009cbc <_dtoa_r+0x5d4>)
 8009c1a:	2000      	movs	r0, #0
 8009c1c:	f7f6 fe3e 	bl	800089c <__aeabi_ddiv>
 8009c20:	4633      	mov	r3, r6
 8009c22:	462a      	mov	r2, r5
 8009c24:	f7f6 fb58 	bl	80002d8 <__aeabi_dsub>
 8009c28:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009c2c:	4656      	mov	r6, sl
 8009c2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c32:	f7f6 ffb9 	bl	8000ba8 <__aeabi_d2iz>
 8009c36:	4605      	mov	r5, r0
 8009c38:	f7f6 fc9c 	bl	8000574 <__aeabi_i2d>
 8009c3c:	4602      	mov	r2, r0
 8009c3e:	460b      	mov	r3, r1
 8009c40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c44:	f7f6 fb48 	bl	80002d8 <__aeabi_dsub>
 8009c48:	3530      	adds	r5, #48	@ 0x30
 8009c4a:	4602      	mov	r2, r0
 8009c4c:	460b      	mov	r3, r1
 8009c4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009c52:	f806 5b01 	strb.w	r5, [r6], #1
 8009c56:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009c5a:	f7f6 ff67 	bl	8000b2c <__aeabi_dcmplt>
 8009c5e:	2800      	cmp	r0, #0
 8009c60:	d171      	bne.n	8009d46 <_dtoa_r+0x65e>
 8009c62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009c66:	4911      	ldr	r1, [pc, #68]	@ (8009cac <_dtoa_r+0x5c4>)
 8009c68:	2000      	movs	r0, #0
 8009c6a:	f7f6 fb35 	bl	80002d8 <__aeabi_dsub>
 8009c6e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009c72:	f7f6 ff5b 	bl	8000b2c <__aeabi_dcmplt>
 8009c76:	2800      	cmp	r0, #0
 8009c78:	f040 8095 	bne.w	8009da6 <_dtoa_r+0x6be>
 8009c7c:	42a6      	cmp	r6, r4
 8009c7e:	f43f af50 	beq.w	8009b22 <_dtoa_r+0x43a>
 8009c82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009c86:	4b0a      	ldr	r3, [pc, #40]	@ (8009cb0 <_dtoa_r+0x5c8>)
 8009c88:	2200      	movs	r2, #0
 8009c8a:	f7f6 fcdd 	bl	8000648 <__aeabi_dmul>
 8009c8e:	4b08      	ldr	r3, [pc, #32]	@ (8009cb0 <_dtoa_r+0x5c8>)
 8009c90:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009c94:	2200      	movs	r2, #0
 8009c96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c9a:	f7f6 fcd5 	bl	8000648 <__aeabi_dmul>
 8009c9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ca2:	e7c4      	b.n	8009c2e <_dtoa_r+0x546>
 8009ca4:	0800cde0 	.word	0x0800cde0
 8009ca8:	0800cdb8 	.word	0x0800cdb8
 8009cac:	3ff00000 	.word	0x3ff00000
 8009cb0:	40240000 	.word	0x40240000
 8009cb4:	401c0000 	.word	0x401c0000
 8009cb8:	40140000 	.word	0x40140000
 8009cbc:	3fe00000 	.word	0x3fe00000
 8009cc0:	4631      	mov	r1, r6
 8009cc2:	4628      	mov	r0, r5
 8009cc4:	f7f6 fcc0 	bl	8000648 <__aeabi_dmul>
 8009cc8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009ccc:	9415      	str	r4, [sp, #84]	@ 0x54
 8009cce:	4656      	mov	r6, sl
 8009cd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009cd4:	f7f6 ff68 	bl	8000ba8 <__aeabi_d2iz>
 8009cd8:	4605      	mov	r5, r0
 8009cda:	f7f6 fc4b 	bl	8000574 <__aeabi_i2d>
 8009cde:	4602      	mov	r2, r0
 8009ce0:	460b      	mov	r3, r1
 8009ce2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ce6:	f7f6 faf7 	bl	80002d8 <__aeabi_dsub>
 8009cea:	3530      	adds	r5, #48	@ 0x30
 8009cec:	f806 5b01 	strb.w	r5, [r6], #1
 8009cf0:	4602      	mov	r2, r0
 8009cf2:	460b      	mov	r3, r1
 8009cf4:	42a6      	cmp	r6, r4
 8009cf6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009cfa:	f04f 0200 	mov.w	r2, #0
 8009cfe:	d124      	bne.n	8009d4a <_dtoa_r+0x662>
 8009d00:	4bac      	ldr	r3, [pc, #688]	@ (8009fb4 <_dtoa_r+0x8cc>)
 8009d02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009d06:	f7f6 fae9 	bl	80002dc <__adddf3>
 8009d0a:	4602      	mov	r2, r0
 8009d0c:	460b      	mov	r3, r1
 8009d0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d12:	f7f6 ff29 	bl	8000b68 <__aeabi_dcmpgt>
 8009d16:	2800      	cmp	r0, #0
 8009d18:	d145      	bne.n	8009da6 <_dtoa_r+0x6be>
 8009d1a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009d1e:	49a5      	ldr	r1, [pc, #660]	@ (8009fb4 <_dtoa_r+0x8cc>)
 8009d20:	2000      	movs	r0, #0
 8009d22:	f7f6 fad9 	bl	80002d8 <__aeabi_dsub>
 8009d26:	4602      	mov	r2, r0
 8009d28:	460b      	mov	r3, r1
 8009d2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d2e:	f7f6 fefd 	bl	8000b2c <__aeabi_dcmplt>
 8009d32:	2800      	cmp	r0, #0
 8009d34:	f43f aef5 	beq.w	8009b22 <_dtoa_r+0x43a>
 8009d38:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009d3a:	1e73      	subs	r3, r6, #1
 8009d3c:	9315      	str	r3, [sp, #84]	@ 0x54
 8009d3e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009d42:	2b30      	cmp	r3, #48	@ 0x30
 8009d44:	d0f8      	beq.n	8009d38 <_dtoa_r+0x650>
 8009d46:	9f04      	ldr	r7, [sp, #16]
 8009d48:	e73e      	b.n	8009bc8 <_dtoa_r+0x4e0>
 8009d4a:	4b9b      	ldr	r3, [pc, #620]	@ (8009fb8 <_dtoa_r+0x8d0>)
 8009d4c:	f7f6 fc7c 	bl	8000648 <__aeabi_dmul>
 8009d50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d54:	e7bc      	b.n	8009cd0 <_dtoa_r+0x5e8>
 8009d56:	d10c      	bne.n	8009d72 <_dtoa_r+0x68a>
 8009d58:	4b98      	ldr	r3, [pc, #608]	@ (8009fbc <_dtoa_r+0x8d4>)
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d60:	f7f6 fc72 	bl	8000648 <__aeabi_dmul>
 8009d64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009d68:	f7f6 fef4 	bl	8000b54 <__aeabi_dcmpge>
 8009d6c:	2800      	cmp	r0, #0
 8009d6e:	f000 8157 	beq.w	800a020 <_dtoa_r+0x938>
 8009d72:	2400      	movs	r4, #0
 8009d74:	4625      	mov	r5, r4
 8009d76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d78:	43db      	mvns	r3, r3
 8009d7a:	9304      	str	r3, [sp, #16]
 8009d7c:	4656      	mov	r6, sl
 8009d7e:	2700      	movs	r7, #0
 8009d80:	4621      	mov	r1, r4
 8009d82:	4658      	mov	r0, fp
 8009d84:	f000 fbb4 	bl	800a4f0 <_Bfree>
 8009d88:	2d00      	cmp	r5, #0
 8009d8a:	d0dc      	beq.n	8009d46 <_dtoa_r+0x65e>
 8009d8c:	b12f      	cbz	r7, 8009d9a <_dtoa_r+0x6b2>
 8009d8e:	42af      	cmp	r7, r5
 8009d90:	d003      	beq.n	8009d9a <_dtoa_r+0x6b2>
 8009d92:	4639      	mov	r1, r7
 8009d94:	4658      	mov	r0, fp
 8009d96:	f000 fbab 	bl	800a4f0 <_Bfree>
 8009d9a:	4629      	mov	r1, r5
 8009d9c:	4658      	mov	r0, fp
 8009d9e:	f000 fba7 	bl	800a4f0 <_Bfree>
 8009da2:	e7d0      	b.n	8009d46 <_dtoa_r+0x65e>
 8009da4:	9704      	str	r7, [sp, #16]
 8009da6:	4633      	mov	r3, r6
 8009da8:	461e      	mov	r6, r3
 8009daa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009dae:	2a39      	cmp	r2, #57	@ 0x39
 8009db0:	d107      	bne.n	8009dc2 <_dtoa_r+0x6da>
 8009db2:	459a      	cmp	sl, r3
 8009db4:	d1f8      	bne.n	8009da8 <_dtoa_r+0x6c0>
 8009db6:	9a04      	ldr	r2, [sp, #16]
 8009db8:	3201      	adds	r2, #1
 8009dba:	9204      	str	r2, [sp, #16]
 8009dbc:	2230      	movs	r2, #48	@ 0x30
 8009dbe:	f88a 2000 	strb.w	r2, [sl]
 8009dc2:	781a      	ldrb	r2, [r3, #0]
 8009dc4:	3201      	adds	r2, #1
 8009dc6:	701a      	strb	r2, [r3, #0]
 8009dc8:	e7bd      	b.n	8009d46 <_dtoa_r+0x65e>
 8009dca:	4b7b      	ldr	r3, [pc, #492]	@ (8009fb8 <_dtoa_r+0x8d0>)
 8009dcc:	2200      	movs	r2, #0
 8009dce:	f7f6 fc3b 	bl	8000648 <__aeabi_dmul>
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	4604      	mov	r4, r0
 8009dd8:	460d      	mov	r5, r1
 8009dda:	f7f6 fe9d 	bl	8000b18 <__aeabi_dcmpeq>
 8009dde:	2800      	cmp	r0, #0
 8009de0:	f43f aebb 	beq.w	8009b5a <_dtoa_r+0x472>
 8009de4:	e6f0      	b.n	8009bc8 <_dtoa_r+0x4e0>
 8009de6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009de8:	2a00      	cmp	r2, #0
 8009dea:	f000 80db 	beq.w	8009fa4 <_dtoa_r+0x8bc>
 8009dee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009df0:	2a01      	cmp	r2, #1
 8009df2:	f300 80bf 	bgt.w	8009f74 <_dtoa_r+0x88c>
 8009df6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009df8:	2a00      	cmp	r2, #0
 8009dfa:	f000 80b7 	beq.w	8009f6c <_dtoa_r+0x884>
 8009dfe:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009e02:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009e04:	4646      	mov	r6, r8
 8009e06:	9a08      	ldr	r2, [sp, #32]
 8009e08:	2101      	movs	r1, #1
 8009e0a:	441a      	add	r2, r3
 8009e0c:	4658      	mov	r0, fp
 8009e0e:	4498      	add	r8, r3
 8009e10:	9208      	str	r2, [sp, #32]
 8009e12:	f000 fc6b 	bl	800a6ec <__i2b>
 8009e16:	4605      	mov	r5, r0
 8009e18:	b15e      	cbz	r6, 8009e32 <_dtoa_r+0x74a>
 8009e1a:	9b08      	ldr	r3, [sp, #32]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	dd08      	ble.n	8009e32 <_dtoa_r+0x74a>
 8009e20:	42b3      	cmp	r3, r6
 8009e22:	9a08      	ldr	r2, [sp, #32]
 8009e24:	bfa8      	it	ge
 8009e26:	4633      	movge	r3, r6
 8009e28:	eba8 0803 	sub.w	r8, r8, r3
 8009e2c:	1af6      	subs	r6, r6, r3
 8009e2e:	1ad3      	subs	r3, r2, r3
 8009e30:	9308      	str	r3, [sp, #32]
 8009e32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e34:	b1f3      	cbz	r3, 8009e74 <_dtoa_r+0x78c>
 8009e36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	f000 80b7 	beq.w	8009fac <_dtoa_r+0x8c4>
 8009e3e:	b18c      	cbz	r4, 8009e64 <_dtoa_r+0x77c>
 8009e40:	4629      	mov	r1, r5
 8009e42:	4622      	mov	r2, r4
 8009e44:	4658      	mov	r0, fp
 8009e46:	f000 fd11 	bl	800a86c <__pow5mult>
 8009e4a:	464a      	mov	r2, r9
 8009e4c:	4601      	mov	r1, r0
 8009e4e:	4605      	mov	r5, r0
 8009e50:	4658      	mov	r0, fp
 8009e52:	f000 fc61 	bl	800a718 <__multiply>
 8009e56:	4649      	mov	r1, r9
 8009e58:	9004      	str	r0, [sp, #16]
 8009e5a:	4658      	mov	r0, fp
 8009e5c:	f000 fb48 	bl	800a4f0 <_Bfree>
 8009e60:	9b04      	ldr	r3, [sp, #16]
 8009e62:	4699      	mov	r9, r3
 8009e64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e66:	1b1a      	subs	r2, r3, r4
 8009e68:	d004      	beq.n	8009e74 <_dtoa_r+0x78c>
 8009e6a:	4649      	mov	r1, r9
 8009e6c:	4658      	mov	r0, fp
 8009e6e:	f000 fcfd 	bl	800a86c <__pow5mult>
 8009e72:	4681      	mov	r9, r0
 8009e74:	2101      	movs	r1, #1
 8009e76:	4658      	mov	r0, fp
 8009e78:	f000 fc38 	bl	800a6ec <__i2b>
 8009e7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e7e:	4604      	mov	r4, r0
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	f000 81cf 	beq.w	800a224 <_dtoa_r+0xb3c>
 8009e86:	461a      	mov	r2, r3
 8009e88:	4601      	mov	r1, r0
 8009e8a:	4658      	mov	r0, fp
 8009e8c:	f000 fcee 	bl	800a86c <__pow5mult>
 8009e90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e92:	2b01      	cmp	r3, #1
 8009e94:	4604      	mov	r4, r0
 8009e96:	f300 8095 	bgt.w	8009fc4 <_dtoa_r+0x8dc>
 8009e9a:	9b02      	ldr	r3, [sp, #8]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	f040 8087 	bne.w	8009fb0 <_dtoa_r+0x8c8>
 8009ea2:	9b03      	ldr	r3, [sp, #12]
 8009ea4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	f040 8089 	bne.w	8009fc0 <_dtoa_r+0x8d8>
 8009eae:	9b03      	ldr	r3, [sp, #12]
 8009eb0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009eb4:	0d1b      	lsrs	r3, r3, #20
 8009eb6:	051b      	lsls	r3, r3, #20
 8009eb8:	b12b      	cbz	r3, 8009ec6 <_dtoa_r+0x7de>
 8009eba:	9b08      	ldr	r3, [sp, #32]
 8009ebc:	3301      	adds	r3, #1
 8009ebe:	9308      	str	r3, [sp, #32]
 8009ec0:	f108 0801 	add.w	r8, r8, #1
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ec8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	f000 81b0 	beq.w	800a230 <_dtoa_r+0xb48>
 8009ed0:	6923      	ldr	r3, [r4, #16]
 8009ed2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009ed6:	6918      	ldr	r0, [r3, #16]
 8009ed8:	f000 fbbc 	bl	800a654 <__hi0bits>
 8009edc:	f1c0 0020 	rsb	r0, r0, #32
 8009ee0:	9b08      	ldr	r3, [sp, #32]
 8009ee2:	4418      	add	r0, r3
 8009ee4:	f010 001f 	ands.w	r0, r0, #31
 8009ee8:	d077      	beq.n	8009fda <_dtoa_r+0x8f2>
 8009eea:	f1c0 0320 	rsb	r3, r0, #32
 8009eee:	2b04      	cmp	r3, #4
 8009ef0:	dd6b      	ble.n	8009fca <_dtoa_r+0x8e2>
 8009ef2:	9b08      	ldr	r3, [sp, #32]
 8009ef4:	f1c0 001c 	rsb	r0, r0, #28
 8009ef8:	4403      	add	r3, r0
 8009efa:	4480      	add	r8, r0
 8009efc:	4406      	add	r6, r0
 8009efe:	9308      	str	r3, [sp, #32]
 8009f00:	f1b8 0f00 	cmp.w	r8, #0
 8009f04:	dd05      	ble.n	8009f12 <_dtoa_r+0x82a>
 8009f06:	4649      	mov	r1, r9
 8009f08:	4642      	mov	r2, r8
 8009f0a:	4658      	mov	r0, fp
 8009f0c:	f000 fd08 	bl	800a920 <__lshift>
 8009f10:	4681      	mov	r9, r0
 8009f12:	9b08      	ldr	r3, [sp, #32]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	dd05      	ble.n	8009f24 <_dtoa_r+0x83c>
 8009f18:	4621      	mov	r1, r4
 8009f1a:	461a      	mov	r2, r3
 8009f1c:	4658      	mov	r0, fp
 8009f1e:	f000 fcff 	bl	800a920 <__lshift>
 8009f22:	4604      	mov	r4, r0
 8009f24:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d059      	beq.n	8009fde <_dtoa_r+0x8f6>
 8009f2a:	4621      	mov	r1, r4
 8009f2c:	4648      	mov	r0, r9
 8009f2e:	f000 fd63 	bl	800a9f8 <__mcmp>
 8009f32:	2800      	cmp	r0, #0
 8009f34:	da53      	bge.n	8009fde <_dtoa_r+0x8f6>
 8009f36:	1e7b      	subs	r3, r7, #1
 8009f38:	9304      	str	r3, [sp, #16]
 8009f3a:	4649      	mov	r1, r9
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	220a      	movs	r2, #10
 8009f40:	4658      	mov	r0, fp
 8009f42:	f000 faf7 	bl	800a534 <__multadd>
 8009f46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009f48:	4681      	mov	r9, r0
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	f000 8172 	beq.w	800a234 <_dtoa_r+0xb4c>
 8009f50:	2300      	movs	r3, #0
 8009f52:	4629      	mov	r1, r5
 8009f54:	220a      	movs	r2, #10
 8009f56:	4658      	mov	r0, fp
 8009f58:	f000 faec 	bl	800a534 <__multadd>
 8009f5c:	9b00      	ldr	r3, [sp, #0]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	4605      	mov	r5, r0
 8009f62:	dc67      	bgt.n	800a034 <_dtoa_r+0x94c>
 8009f64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f66:	2b02      	cmp	r3, #2
 8009f68:	dc41      	bgt.n	8009fee <_dtoa_r+0x906>
 8009f6a:	e063      	b.n	800a034 <_dtoa_r+0x94c>
 8009f6c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009f6e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009f72:	e746      	b.n	8009e02 <_dtoa_r+0x71a>
 8009f74:	9b07      	ldr	r3, [sp, #28]
 8009f76:	1e5c      	subs	r4, r3, #1
 8009f78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f7a:	42a3      	cmp	r3, r4
 8009f7c:	bfbf      	itttt	lt
 8009f7e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009f80:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009f82:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009f84:	1ae3      	sublt	r3, r4, r3
 8009f86:	bfb4      	ite	lt
 8009f88:	18d2      	addlt	r2, r2, r3
 8009f8a:	1b1c      	subge	r4, r3, r4
 8009f8c:	9b07      	ldr	r3, [sp, #28]
 8009f8e:	bfbc      	itt	lt
 8009f90:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009f92:	2400      	movlt	r4, #0
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	bfb5      	itete	lt
 8009f98:	eba8 0603 	sublt.w	r6, r8, r3
 8009f9c:	9b07      	ldrge	r3, [sp, #28]
 8009f9e:	2300      	movlt	r3, #0
 8009fa0:	4646      	movge	r6, r8
 8009fa2:	e730      	b.n	8009e06 <_dtoa_r+0x71e>
 8009fa4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009fa6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009fa8:	4646      	mov	r6, r8
 8009faa:	e735      	b.n	8009e18 <_dtoa_r+0x730>
 8009fac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009fae:	e75c      	b.n	8009e6a <_dtoa_r+0x782>
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	e788      	b.n	8009ec6 <_dtoa_r+0x7de>
 8009fb4:	3fe00000 	.word	0x3fe00000
 8009fb8:	40240000 	.word	0x40240000
 8009fbc:	40140000 	.word	0x40140000
 8009fc0:	9b02      	ldr	r3, [sp, #8]
 8009fc2:	e780      	b.n	8009ec6 <_dtoa_r+0x7de>
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	930a      	str	r3, [sp, #40]	@ 0x28
 8009fc8:	e782      	b.n	8009ed0 <_dtoa_r+0x7e8>
 8009fca:	d099      	beq.n	8009f00 <_dtoa_r+0x818>
 8009fcc:	9a08      	ldr	r2, [sp, #32]
 8009fce:	331c      	adds	r3, #28
 8009fd0:	441a      	add	r2, r3
 8009fd2:	4498      	add	r8, r3
 8009fd4:	441e      	add	r6, r3
 8009fd6:	9208      	str	r2, [sp, #32]
 8009fd8:	e792      	b.n	8009f00 <_dtoa_r+0x818>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	e7f6      	b.n	8009fcc <_dtoa_r+0x8e4>
 8009fde:	9b07      	ldr	r3, [sp, #28]
 8009fe0:	9704      	str	r7, [sp, #16]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	dc20      	bgt.n	800a028 <_dtoa_r+0x940>
 8009fe6:	9300      	str	r3, [sp, #0]
 8009fe8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fea:	2b02      	cmp	r3, #2
 8009fec:	dd1e      	ble.n	800a02c <_dtoa_r+0x944>
 8009fee:	9b00      	ldr	r3, [sp, #0]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	f47f aec0 	bne.w	8009d76 <_dtoa_r+0x68e>
 8009ff6:	4621      	mov	r1, r4
 8009ff8:	2205      	movs	r2, #5
 8009ffa:	4658      	mov	r0, fp
 8009ffc:	f000 fa9a 	bl	800a534 <__multadd>
 800a000:	4601      	mov	r1, r0
 800a002:	4604      	mov	r4, r0
 800a004:	4648      	mov	r0, r9
 800a006:	f000 fcf7 	bl	800a9f8 <__mcmp>
 800a00a:	2800      	cmp	r0, #0
 800a00c:	f77f aeb3 	ble.w	8009d76 <_dtoa_r+0x68e>
 800a010:	4656      	mov	r6, sl
 800a012:	2331      	movs	r3, #49	@ 0x31
 800a014:	f806 3b01 	strb.w	r3, [r6], #1
 800a018:	9b04      	ldr	r3, [sp, #16]
 800a01a:	3301      	adds	r3, #1
 800a01c:	9304      	str	r3, [sp, #16]
 800a01e:	e6ae      	b.n	8009d7e <_dtoa_r+0x696>
 800a020:	9c07      	ldr	r4, [sp, #28]
 800a022:	9704      	str	r7, [sp, #16]
 800a024:	4625      	mov	r5, r4
 800a026:	e7f3      	b.n	800a010 <_dtoa_r+0x928>
 800a028:	9b07      	ldr	r3, [sp, #28]
 800a02a:	9300      	str	r3, [sp, #0]
 800a02c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a02e:	2b00      	cmp	r3, #0
 800a030:	f000 8104 	beq.w	800a23c <_dtoa_r+0xb54>
 800a034:	2e00      	cmp	r6, #0
 800a036:	dd05      	ble.n	800a044 <_dtoa_r+0x95c>
 800a038:	4629      	mov	r1, r5
 800a03a:	4632      	mov	r2, r6
 800a03c:	4658      	mov	r0, fp
 800a03e:	f000 fc6f 	bl	800a920 <__lshift>
 800a042:	4605      	mov	r5, r0
 800a044:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a046:	2b00      	cmp	r3, #0
 800a048:	d05a      	beq.n	800a100 <_dtoa_r+0xa18>
 800a04a:	6869      	ldr	r1, [r5, #4]
 800a04c:	4658      	mov	r0, fp
 800a04e:	f000 fa0f 	bl	800a470 <_Balloc>
 800a052:	4606      	mov	r6, r0
 800a054:	b928      	cbnz	r0, 800a062 <_dtoa_r+0x97a>
 800a056:	4b84      	ldr	r3, [pc, #528]	@ (800a268 <_dtoa_r+0xb80>)
 800a058:	4602      	mov	r2, r0
 800a05a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a05e:	f7ff bb5a 	b.w	8009716 <_dtoa_r+0x2e>
 800a062:	692a      	ldr	r2, [r5, #16]
 800a064:	3202      	adds	r2, #2
 800a066:	0092      	lsls	r2, r2, #2
 800a068:	f105 010c 	add.w	r1, r5, #12
 800a06c:	300c      	adds	r0, #12
 800a06e:	f002 f93b 	bl	800c2e8 <memcpy>
 800a072:	2201      	movs	r2, #1
 800a074:	4631      	mov	r1, r6
 800a076:	4658      	mov	r0, fp
 800a078:	f000 fc52 	bl	800a920 <__lshift>
 800a07c:	f10a 0301 	add.w	r3, sl, #1
 800a080:	9307      	str	r3, [sp, #28]
 800a082:	9b00      	ldr	r3, [sp, #0]
 800a084:	4453      	add	r3, sl
 800a086:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a088:	9b02      	ldr	r3, [sp, #8]
 800a08a:	f003 0301 	and.w	r3, r3, #1
 800a08e:	462f      	mov	r7, r5
 800a090:	930a      	str	r3, [sp, #40]	@ 0x28
 800a092:	4605      	mov	r5, r0
 800a094:	9b07      	ldr	r3, [sp, #28]
 800a096:	4621      	mov	r1, r4
 800a098:	3b01      	subs	r3, #1
 800a09a:	4648      	mov	r0, r9
 800a09c:	9300      	str	r3, [sp, #0]
 800a09e:	f7ff fa9b 	bl	80095d8 <quorem>
 800a0a2:	4639      	mov	r1, r7
 800a0a4:	9002      	str	r0, [sp, #8]
 800a0a6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a0aa:	4648      	mov	r0, r9
 800a0ac:	f000 fca4 	bl	800a9f8 <__mcmp>
 800a0b0:	462a      	mov	r2, r5
 800a0b2:	9008      	str	r0, [sp, #32]
 800a0b4:	4621      	mov	r1, r4
 800a0b6:	4658      	mov	r0, fp
 800a0b8:	f000 fcba 	bl	800aa30 <__mdiff>
 800a0bc:	68c2      	ldr	r2, [r0, #12]
 800a0be:	4606      	mov	r6, r0
 800a0c0:	bb02      	cbnz	r2, 800a104 <_dtoa_r+0xa1c>
 800a0c2:	4601      	mov	r1, r0
 800a0c4:	4648      	mov	r0, r9
 800a0c6:	f000 fc97 	bl	800a9f8 <__mcmp>
 800a0ca:	4602      	mov	r2, r0
 800a0cc:	4631      	mov	r1, r6
 800a0ce:	4658      	mov	r0, fp
 800a0d0:	920e      	str	r2, [sp, #56]	@ 0x38
 800a0d2:	f000 fa0d 	bl	800a4f0 <_Bfree>
 800a0d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0d8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a0da:	9e07      	ldr	r6, [sp, #28]
 800a0dc:	ea43 0102 	orr.w	r1, r3, r2
 800a0e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a0e2:	4319      	orrs	r1, r3
 800a0e4:	d110      	bne.n	800a108 <_dtoa_r+0xa20>
 800a0e6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a0ea:	d029      	beq.n	800a140 <_dtoa_r+0xa58>
 800a0ec:	9b08      	ldr	r3, [sp, #32]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	dd02      	ble.n	800a0f8 <_dtoa_r+0xa10>
 800a0f2:	9b02      	ldr	r3, [sp, #8]
 800a0f4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a0f8:	9b00      	ldr	r3, [sp, #0]
 800a0fa:	f883 8000 	strb.w	r8, [r3]
 800a0fe:	e63f      	b.n	8009d80 <_dtoa_r+0x698>
 800a100:	4628      	mov	r0, r5
 800a102:	e7bb      	b.n	800a07c <_dtoa_r+0x994>
 800a104:	2201      	movs	r2, #1
 800a106:	e7e1      	b.n	800a0cc <_dtoa_r+0x9e4>
 800a108:	9b08      	ldr	r3, [sp, #32]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	db04      	blt.n	800a118 <_dtoa_r+0xa30>
 800a10e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a110:	430b      	orrs	r3, r1
 800a112:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a114:	430b      	orrs	r3, r1
 800a116:	d120      	bne.n	800a15a <_dtoa_r+0xa72>
 800a118:	2a00      	cmp	r2, #0
 800a11a:	dded      	ble.n	800a0f8 <_dtoa_r+0xa10>
 800a11c:	4649      	mov	r1, r9
 800a11e:	2201      	movs	r2, #1
 800a120:	4658      	mov	r0, fp
 800a122:	f000 fbfd 	bl	800a920 <__lshift>
 800a126:	4621      	mov	r1, r4
 800a128:	4681      	mov	r9, r0
 800a12a:	f000 fc65 	bl	800a9f8 <__mcmp>
 800a12e:	2800      	cmp	r0, #0
 800a130:	dc03      	bgt.n	800a13a <_dtoa_r+0xa52>
 800a132:	d1e1      	bne.n	800a0f8 <_dtoa_r+0xa10>
 800a134:	f018 0f01 	tst.w	r8, #1
 800a138:	d0de      	beq.n	800a0f8 <_dtoa_r+0xa10>
 800a13a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a13e:	d1d8      	bne.n	800a0f2 <_dtoa_r+0xa0a>
 800a140:	9a00      	ldr	r2, [sp, #0]
 800a142:	2339      	movs	r3, #57	@ 0x39
 800a144:	7013      	strb	r3, [r2, #0]
 800a146:	4633      	mov	r3, r6
 800a148:	461e      	mov	r6, r3
 800a14a:	3b01      	subs	r3, #1
 800a14c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a150:	2a39      	cmp	r2, #57	@ 0x39
 800a152:	d052      	beq.n	800a1fa <_dtoa_r+0xb12>
 800a154:	3201      	adds	r2, #1
 800a156:	701a      	strb	r2, [r3, #0]
 800a158:	e612      	b.n	8009d80 <_dtoa_r+0x698>
 800a15a:	2a00      	cmp	r2, #0
 800a15c:	dd07      	ble.n	800a16e <_dtoa_r+0xa86>
 800a15e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a162:	d0ed      	beq.n	800a140 <_dtoa_r+0xa58>
 800a164:	9a00      	ldr	r2, [sp, #0]
 800a166:	f108 0301 	add.w	r3, r8, #1
 800a16a:	7013      	strb	r3, [r2, #0]
 800a16c:	e608      	b.n	8009d80 <_dtoa_r+0x698>
 800a16e:	9b07      	ldr	r3, [sp, #28]
 800a170:	9a07      	ldr	r2, [sp, #28]
 800a172:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a176:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a178:	4293      	cmp	r3, r2
 800a17a:	d028      	beq.n	800a1ce <_dtoa_r+0xae6>
 800a17c:	4649      	mov	r1, r9
 800a17e:	2300      	movs	r3, #0
 800a180:	220a      	movs	r2, #10
 800a182:	4658      	mov	r0, fp
 800a184:	f000 f9d6 	bl	800a534 <__multadd>
 800a188:	42af      	cmp	r7, r5
 800a18a:	4681      	mov	r9, r0
 800a18c:	f04f 0300 	mov.w	r3, #0
 800a190:	f04f 020a 	mov.w	r2, #10
 800a194:	4639      	mov	r1, r7
 800a196:	4658      	mov	r0, fp
 800a198:	d107      	bne.n	800a1aa <_dtoa_r+0xac2>
 800a19a:	f000 f9cb 	bl	800a534 <__multadd>
 800a19e:	4607      	mov	r7, r0
 800a1a0:	4605      	mov	r5, r0
 800a1a2:	9b07      	ldr	r3, [sp, #28]
 800a1a4:	3301      	adds	r3, #1
 800a1a6:	9307      	str	r3, [sp, #28]
 800a1a8:	e774      	b.n	800a094 <_dtoa_r+0x9ac>
 800a1aa:	f000 f9c3 	bl	800a534 <__multadd>
 800a1ae:	4629      	mov	r1, r5
 800a1b0:	4607      	mov	r7, r0
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	220a      	movs	r2, #10
 800a1b6:	4658      	mov	r0, fp
 800a1b8:	f000 f9bc 	bl	800a534 <__multadd>
 800a1bc:	4605      	mov	r5, r0
 800a1be:	e7f0      	b.n	800a1a2 <_dtoa_r+0xaba>
 800a1c0:	9b00      	ldr	r3, [sp, #0]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	bfcc      	ite	gt
 800a1c6:	461e      	movgt	r6, r3
 800a1c8:	2601      	movle	r6, #1
 800a1ca:	4456      	add	r6, sl
 800a1cc:	2700      	movs	r7, #0
 800a1ce:	4649      	mov	r1, r9
 800a1d0:	2201      	movs	r2, #1
 800a1d2:	4658      	mov	r0, fp
 800a1d4:	f000 fba4 	bl	800a920 <__lshift>
 800a1d8:	4621      	mov	r1, r4
 800a1da:	4681      	mov	r9, r0
 800a1dc:	f000 fc0c 	bl	800a9f8 <__mcmp>
 800a1e0:	2800      	cmp	r0, #0
 800a1e2:	dcb0      	bgt.n	800a146 <_dtoa_r+0xa5e>
 800a1e4:	d102      	bne.n	800a1ec <_dtoa_r+0xb04>
 800a1e6:	f018 0f01 	tst.w	r8, #1
 800a1ea:	d1ac      	bne.n	800a146 <_dtoa_r+0xa5e>
 800a1ec:	4633      	mov	r3, r6
 800a1ee:	461e      	mov	r6, r3
 800a1f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a1f4:	2a30      	cmp	r2, #48	@ 0x30
 800a1f6:	d0fa      	beq.n	800a1ee <_dtoa_r+0xb06>
 800a1f8:	e5c2      	b.n	8009d80 <_dtoa_r+0x698>
 800a1fa:	459a      	cmp	sl, r3
 800a1fc:	d1a4      	bne.n	800a148 <_dtoa_r+0xa60>
 800a1fe:	9b04      	ldr	r3, [sp, #16]
 800a200:	3301      	adds	r3, #1
 800a202:	9304      	str	r3, [sp, #16]
 800a204:	2331      	movs	r3, #49	@ 0x31
 800a206:	f88a 3000 	strb.w	r3, [sl]
 800a20a:	e5b9      	b.n	8009d80 <_dtoa_r+0x698>
 800a20c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a20e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a26c <_dtoa_r+0xb84>
 800a212:	b11b      	cbz	r3, 800a21c <_dtoa_r+0xb34>
 800a214:	f10a 0308 	add.w	r3, sl, #8
 800a218:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a21a:	6013      	str	r3, [r2, #0]
 800a21c:	4650      	mov	r0, sl
 800a21e:	b019      	add	sp, #100	@ 0x64
 800a220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a224:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a226:	2b01      	cmp	r3, #1
 800a228:	f77f ae37 	ble.w	8009e9a <_dtoa_r+0x7b2>
 800a22c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a22e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a230:	2001      	movs	r0, #1
 800a232:	e655      	b.n	8009ee0 <_dtoa_r+0x7f8>
 800a234:	9b00      	ldr	r3, [sp, #0]
 800a236:	2b00      	cmp	r3, #0
 800a238:	f77f aed6 	ble.w	8009fe8 <_dtoa_r+0x900>
 800a23c:	4656      	mov	r6, sl
 800a23e:	4621      	mov	r1, r4
 800a240:	4648      	mov	r0, r9
 800a242:	f7ff f9c9 	bl	80095d8 <quorem>
 800a246:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a24a:	f806 8b01 	strb.w	r8, [r6], #1
 800a24e:	9b00      	ldr	r3, [sp, #0]
 800a250:	eba6 020a 	sub.w	r2, r6, sl
 800a254:	4293      	cmp	r3, r2
 800a256:	ddb3      	ble.n	800a1c0 <_dtoa_r+0xad8>
 800a258:	4649      	mov	r1, r9
 800a25a:	2300      	movs	r3, #0
 800a25c:	220a      	movs	r2, #10
 800a25e:	4658      	mov	r0, fp
 800a260:	f000 f968 	bl	800a534 <__multadd>
 800a264:	4681      	mov	r9, r0
 800a266:	e7ea      	b.n	800a23e <_dtoa_r+0xb56>
 800a268:	0800cd3d 	.word	0x0800cd3d
 800a26c:	0800ccc1 	.word	0x0800ccc1

0800a270 <_free_r>:
 800a270:	b538      	push	{r3, r4, r5, lr}
 800a272:	4605      	mov	r5, r0
 800a274:	2900      	cmp	r1, #0
 800a276:	d041      	beq.n	800a2fc <_free_r+0x8c>
 800a278:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a27c:	1f0c      	subs	r4, r1, #4
 800a27e:	2b00      	cmp	r3, #0
 800a280:	bfb8      	it	lt
 800a282:	18e4      	addlt	r4, r4, r3
 800a284:	f000 f8e8 	bl	800a458 <__malloc_lock>
 800a288:	4a1d      	ldr	r2, [pc, #116]	@ (800a300 <_free_r+0x90>)
 800a28a:	6813      	ldr	r3, [r2, #0]
 800a28c:	b933      	cbnz	r3, 800a29c <_free_r+0x2c>
 800a28e:	6063      	str	r3, [r4, #4]
 800a290:	6014      	str	r4, [r2, #0]
 800a292:	4628      	mov	r0, r5
 800a294:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a298:	f000 b8e4 	b.w	800a464 <__malloc_unlock>
 800a29c:	42a3      	cmp	r3, r4
 800a29e:	d908      	bls.n	800a2b2 <_free_r+0x42>
 800a2a0:	6820      	ldr	r0, [r4, #0]
 800a2a2:	1821      	adds	r1, r4, r0
 800a2a4:	428b      	cmp	r3, r1
 800a2a6:	bf01      	itttt	eq
 800a2a8:	6819      	ldreq	r1, [r3, #0]
 800a2aa:	685b      	ldreq	r3, [r3, #4]
 800a2ac:	1809      	addeq	r1, r1, r0
 800a2ae:	6021      	streq	r1, [r4, #0]
 800a2b0:	e7ed      	b.n	800a28e <_free_r+0x1e>
 800a2b2:	461a      	mov	r2, r3
 800a2b4:	685b      	ldr	r3, [r3, #4]
 800a2b6:	b10b      	cbz	r3, 800a2bc <_free_r+0x4c>
 800a2b8:	42a3      	cmp	r3, r4
 800a2ba:	d9fa      	bls.n	800a2b2 <_free_r+0x42>
 800a2bc:	6811      	ldr	r1, [r2, #0]
 800a2be:	1850      	adds	r0, r2, r1
 800a2c0:	42a0      	cmp	r0, r4
 800a2c2:	d10b      	bne.n	800a2dc <_free_r+0x6c>
 800a2c4:	6820      	ldr	r0, [r4, #0]
 800a2c6:	4401      	add	r1, r0
 800a2c8:	1850      	adds	r0, r2, r1
 800a2ca:	4283      	cmp	r3, r0
 800a2cc:	6011      	str	r1, [r2, #0]
 800a2ce:	d1e0      	bne.n	800a292 <_free_r+0x22>
 800a2d0:	6818      	ldr	r0, [r3, #0]
 800a2d2:	685b      	ldr	r3, [r3, #4]
 800a2d4:	6053      	str	r3, [r2, #4]
 800a2d6:	4408      	add	r0, r1
 800a2d8:	6010      	str	r0, [r2, #0]
 800a2da:	e7da      	b.n	800a292 <_free_r+0x22>
 800a2dc:	d902      	bls.n	800a2e4 <_free_r+0x74>
 800a2de:	230c      	movs	r3, #12
 800a2e0:	602b      	str	r3, [r5, #0]
 800a2e2:	e7d6      	b.n	800a292 <_free_r+0x22>
 800a2e4:	6820      	ldr	r0, [r4, #0]
 800a2e6:	1821      	adds	r1, r4, r0
 800a2e8:	428b      	cmp	r3, r1
 800a2ea:	bf04      	itt	eq
 800a2ec:	6819      	ldreq	r1, [r3, #0]
 800a2ee:	685b      	ldreq	r3, [r3, #4]
 800a2f0:	6063      	str	r3, [r4, #4]
 800a2f2:	bf04      	itt	eq
 800a2f4:	1809      	addeq	r1, r1, r0
 800a2f6:	6021      	streq	r1, [r4, #0]
 800a2f8:	6054      	str	r4, [r2, #4]
 800a2fa:	e7ca      	b.n	800a292 <_free_r+0x22>
 800a2fc:	bd38      	pop	{r3, r4, r5, pc}
 800a2fe:	bf00      	nop
 800a300:	20003170 	.word	0x20003170

0800a304 <malloc>:
 800a304:	4b02      	ldr	r3, [pc, #8]	@ (800a310 <malloc+0xc>)
 800a306:	4601      	mov	r1, r0
 800a308:	6818      	ldr	r0, [r3, #0]
 800a30a:	f000 b825 	b.w	800a358 <_malloc_r>
 800a30e:	bf00      	nop
 800a310:	20000f5c 	.word	0x20000f5c

0800a314 <sbrk_aligned>:
 800a314:	b570      	push	{r4, r5, r6, lr}
 800a316:	4e0f      	ldr	r6, [pc, #60]	@ (800a354 <sbrk_aligned+0x40>)
 800a318:	460c      	mov	r4, r1
 800a31a:	6831      	ldr	r1, [r6, #0]
 800a31c:	4605      	mov	r5, r0
 800a31e:	b911      	cbnz	r1, 800a326 <sbrk_aligned+0x12>
 800a320:	f001 ffd2 	bl	800c2c8 <_sbrk_r>
 800a324:	6030      	str	r0, [r6, #0]
 800a326:	4621      	mov	r1, r4
 800a328:	4628      	mov	r0, r5
 800a32a:	f001 ffcd 	bl	800c2c8 <_sbrk_r>
 800a32e:	1c43      	adds	r3, r0, #1
 800a330:	d103      	bne.n	800a33a <sbrk_aligned+0x26>
 800a332:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a336:	4620      	mov	r0, r4
 800a338:	bd70      	pop	{r4, r5, r6, pc}
 800a33a:	1cc4      	adds	r4, r0, #3
 800a33c:	f024 0403 	bic.w	r4, r4, #3
 800a340:	42a0      	cmp	r0, r4
 800a342:	d0f8      	beq.n	800a336 <sbrk_aligned+0x22>
 800a344:	1a21      	subs	r1, r4, r0
 800a346:	4628      	mov	r0, r5
 800a348:	f001 ffbe 	bl	800c2c8 <_sbrk_r>
 800a34c:	3001      	adds	r0, #1
 800a34e:	d1f2      	bne.n	800a336 <sbrk_aligned+0x22>
 800a350:	e7ef      	b.n	800a332 <sbrk_aligned+0x1e>
 800a352:	bf00      	nop
 800a354:	2000316c 	.word	0x2000316c

0800a358 <_malloc_r>:
 800a358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a35c:	1ccd      	adds	r5, r1, #3
 800a35e:	f025 0503 	bic.w	r5, r5, #3
 800a362:	3508      	adds	r5, #8
 800a364:	2d0c      	cmp	r5, #12
 800a366:	bf38      	it	cc
 800a368:	250c      	movcc	r5, #12
 800a36a:	2d00      	cmp	r5, #0
 800a36c:	4606      	mov	r6, r0
 800a36e:	db01      	blt.n	800a374 <_malloc_r+0x1c>
 800a370:	42a9      	cmp	r1, r5
 800a372:	d904      	bls.n	800a37e <_malloc_r+0x26>
 800a374:	230c      	movs	r3, #12
 800a376:	6033      	str	r3, [r6, #0]
 800a378:	2000      	movs	r0, #0
 800a37a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a37e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a454 <_malloc_r+0xfc>
 800a382:	f000 f869 	bl	800a458 <__malloc_lock>
 800a386:	f8d8 3000 	ldr.w	r3, [r8]
 800a38a:	461c      	mov	r4, r3
 800a38c:	bb44      	cbnz	r4, 800a3e0 <_malloc_r+0x88>
 800a38e:	4629      	mov	r1, r5
 800a390:	4630      	mov	r0, r6
 800a392:	f7ff ffbf 	bl	800a314 <sbrk_aligned>
 800a396:	1c43      	adds	r3, r0, #1
 800a398:	4604      	mov	r4, r0
 800a39a:	d158      	bne.n	800a44e <_malloc_r+0xf6>
 800a39c:	f8d8 4000 	ldr.w	r4, [r8]
 800a3a0:	4627      	mov	r7, r4
 800a3a2:	2f00      	cmp	r7, #0
 800a3a4:	d143      	bne.n	800a42e <_malloc_r+0xd6>
 800a3a6:	2c00      	cmp	r4, #0
 800a3a8:	d04b      	beq.n	800a442 <_malloc_r+0xea>
 800a3aa:	6823      	ldr	r3, [r4, #0]
 800a3ac:	4639      	mov	r1, r7
 800a3ae:	4630      	mov	r0, r6
 800a3b0:	eb04 0903 	add.w	r9, r4, r3
 800a3b4:	f001 ff88 	bl	800c2c8 <_sbrk_r>
 800a3b8:	4581      	cmp	r9, r0
 800a3ba:	d142      	bne.n	800a442 <_malloc_r+0xea>
 800a3bc:	6821      	ldr	r1, [r4, #0]
 800a3be:	1a6d      	subs	r5, r5, r1
 800a3c0:	4629      	mov	r1, r5
 800a3c2:	4630      	mov	r0, r6
 800a3c4:	f7ff ffa6 	bl	800a314 <sbrk_aligned>
 800a3c8:	3001      	adds	r0, #1
 800a3ca:	d03a      	beq.n	800a442 <_malloc_r+0xea>
 800a3cc:	6823      	ldr	r3, [r4, #0]
 800a3ce:	442b      	add	r3, r5
 800a3d0:	6023      	str	r3, [r4, #0]
 800a3d2:	f8d8 3000 	ldr.w	r3, [r8]
 800a3d6:	685a      	ldr	r2, [r3, #4]
 800a3d8:	bb62      	cbnz	r2, 800a434 <_malloc_r+0xdc>
 800a3da:	f8c8 7000 	str.w	r7, [r8]
 800a3de:	e00f      	b.n	800a400 <_malloc_r+0xa8>
 800a3e0:	6822      	ldr	r2, [r4, #0]
 800a3e2:	1b52      	subs	r2, r2, r5
 800a3e4:	d420      	bmi.n	800a428 <_malloc_r+0xd0>
 800a3e6:	2a0b      	cmp	r2, #11
 800a3e8:	d917      	bls.n	800a41a <_malloc_r+0xc2>
 800a3ea:	1961      	adds	r1, r4, r5
 800a3ec:	42a3      	cmp	r3, r4
 800a3ee:	6025      	str	r5, [r4, #0]
 800a3f0:	bf18      	it	ne
 800a3f2:	6059      	strne	r1, [r3, #4]
 800a3f4:	6863      	ldr	r3, [r4, #4]
 800a3f6:	bf08      	it	eq
 800a3f8:	f8c8 1000 	streq.w	r1, [r8]
 800a3fc:	5162      	str	r2, [r4, r5]
 800a3fe:	604b      	str	r3, [r1, #4]
 800a400:	4630      	mov	r0, r6
 800a402:	f000 f82f 	bl	800a464 <__malloc_unlock>
 800a406:	f104 000b 	add.w	r0, r4, #11
 800a40a:	1d23      	adds	r3, r4, #4
 800a40c:	f020 0007 	bic.w	r0, r0, #7
 800a410:	1ac2      	subs	r2, r0, r3
 800a412:	bf1c      	itt	ne
 800a414:	1a1b      	subne	r3, r3, r0
 800a416:	50a3      	strne	r3, [r4, r2]
 800a418:	e7af      	b.n	800a37a <_malloc_r+0x22>
 800a41a:	6862      	ldr	r2, [r4, #4]
 800a41c:	42a3      	cmp	r3, r4
 800a41e:	bf0c      	ite	eq
 800a420:	f8c8 2000 	streq.w	r2, [r8]
 800a424:	605a      	strne	r2, [r3, #4]
 800a426:	e7eb      	b.n	800a400 <_malloc_r+0xa8>
 800a428:	4623      	mov	r3, r4
 800a42a:	6864      	ldr	r4, [r4, #4]
 800a42c:	e7ae      	b.n	800a38c <_malloc_r+0x34>
 800a42e:	463c      	mov	r4, r7
 800a430:	687f      	ldr	r7, [r7, #4]
 800a432:	e7b6      	b.n	800a3a2 <_malloc_r+0x4a>
 800a434:	461a      	mov	r2, r3
 800a436:	685b      	ldr	r3, [r3, #4]
 800a438:	42a3      	cmp	r3, r4
 800a43a:	d1fb      	bne.n	800a434 <_malloc_r+0xdc>
 800a43c:	2300      	movs	r3, #0
 800a43e:	6053      	str	r3, [r2, #4]
 800a440:	e7de      	b.n	800a400 <_malloc_r+0xa8>
 800a442:	230c      	movs	r3, #12
 800a444:	6033      	str	r3, [r6, #0]
 800a446:	4630      	mov	r0, r6
 800a448:	f000 f80c 	bl	800a464 <__malloc_unlock>
 800a44c:	e794      	b.n	800a378 <_malloc_r+0x20>
 800a44e:	6005      	str	r5, [r0, #0]
 800a450:	e7d6      	b.n	800a400 <_malloc_r+0xa8>
 800a452:	bf00      	nop
 800a454:	20003170 	.word	0x20003170

0800a458 <__malloc_lock>:
 800a458:	4801      	ldr	r0, [pc, #4]	@ (800a460 <__malloc_lock+0x8>)
 800a45a:	f7ff b8b4 	b.w	80095c6 <__retarget_lock_acquire_recursive>
 800a45e:	bf00      	nop
 800a460:	20003168 	.word	0x20003168

0800a464 <__malloc_unlock>:
 800a464:	4801      	ldr	r0, [pc, #4]	@ (800a46c <__malloc_unlock+0x8>)
 800a466:	f7ff b8af 	b.w	80095c8 <__retarget_lock_release_recursive>
 800a46a:	bf00      	nop
 800a46c:	20003168 	.word	0x20003168

0800a470 <_Balloc>:
 800a470:	b570      	push	{r4, r5, r6, lr}
 800a472:	69c6      	ldr	r6, [r0, #28]
 800a474:	4604      	mov	r4, r0
 800a476:	460d      	mov	r5, r1
 800a478:	b976      	cbnz	r6, 800a498 <_Balloc+0x28>
 800a47a:	2010      	movs	r0, #16
 800a47c:	f7ff ff42 	bl	800a304 <malloc>
 800a480:	4602      	mov	r2, r0
 800a482:	61e0      	str	r0, [r4, #28]
 800a484:	b920      	cbnz	r0, 800a490 <_Balloc+0x20>
 800a486:	4b18      	ldr	r3, [pc, #96]	@ (800a4e8 <_Balloc+0x78>)
 800a488:	4818      	ldr	r0, [pc, #96]	@ (800a4ec <_Balloc+0x7c>)
 800a48a:	216b      	movs	r1, #107	@ 0x6b
 800a48c:	f001 ff44 	bl	800c318 <__assert_func>
 800a490:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a494:	6006      	str	r6, [r0, #0]
 800a496:	60c6      	str	r6, [r0, #12]
 800a498:	69e6      	ldr	r6, [r4, #28]
 800a49a:	68f3      	ldr	r3, [r6, #12]
 800a49c:	b183      	cbz	r3, 800a4c0 <_Balloc+0x50>
 800a49e:	69e3      	ldr	r3, [r4, #28]
 800a4a0:	68db      	ldr	r3, [r3, #12]
 800a4a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a4a6:	b9b8      	cbnz	r0, 800a4d8 <_Balloc+0x68>
 800a4a8:	2101      	movs	r1, #1
 800a4aa:	fa01 f605 	lsl.w	r6, r1, r5
 800a4ae:	1d72      	adds	r2, r6, #5
 800a4b0:	0092      	lsls	r2, r2, #2
 800a4b2:	4620      	mov	r0, r4
 800a4b4:	f001 ff4e 	bl	800c354 <_calloc_r>
 800a4b8:	b160      	cbz	r0, 800a4d4 <_Balloc+0x64>
 800a4ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a4be:	e00e      	b.n	800a4de <_Balloc+0x6e>
 800a4c0:	2221      	movs	r2, #33	@ 0x21
 800a4c2:	2104      	movs	r1, #4
 800a4c4:	4620      	mov	r0, r4
 800a4c6:	f001 ff45 	bl	800c354 <_calloc_r>
 800a4ca:	69e3      	ldr	r3, [r4, #28]
 800a4cc:	60f0      	str	r0, [r6, #12]
 800a4ce:	68db      	ldr	r3, [r3, #12]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d1e4      	bne.n	800a49e <_Balloc+0x2e>
 800a4d4:	2000      	movs	r0, #0
 800a4d6:	bd70      	pop	{r4, r5, r6, pc}
 800a4d8:	6802      	ldr	r2, [r0, #0]
 800a4da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a4de:	2300      	movs	r3, #0
 800a4e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a4e4:	e7f7      	b.n	800a4d6 <_Balloc+0x66>
 800a4e6:	bf00      	nop
 800a4e8:	0800ccce 	.word	0x0800ccce
 800a4ec:	0800cd4e 	.word	0x0800cd4e

0800a4f0 <_Bfree>:
 800a4f0:	b570      	push	{r4, r5, r6, lr}
 800a4f2:	69c6      	ldr	r6, [r0, #28]
 800a4f4:	4605      	mov	r5, r0
 800a4f6:	460c      	mov	r4, r1
 800a4f8:	b976      	cbnz	r6, 800a518 <_Bfree+0x28>
 800a4fa:	2010      	movs	r0, #16
 800a4fc:	f7ff ff02 	bl	800a304 <malloc>
 800a500:	4602      	mov	r2, r0
 800a502:	61e8      	str	r0, [r5, #28]
 800a504:	b920      	cbnz	r0, 800a510 <_Bfree+0x20>
 800a506:	4b09      	ldr	r3, [pc, #36]	@ (800a52c <_Bfree+0x3c>)
 800a508:	4809      	ldr	r0, [pc, #36]	@ (800a530 <_Bfree+0x40>)
 800a50a:	218f      	movs	r1, #143	@ 0x8f
 800a50c:	f001 ff04 	bl	800c318 <__assert_func>
 800a510:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a514:	6006      	str	r6, [r0, #0]
 800a516:	60c6      	str	r6, [r0, #12]
 800a518:	b13c      	cbz	r4, 800a52a <_Bfree+0x3a>
 800a51a:	69eb      	ldr	r3, [r5, #28]
 800a51c:	6862      	ldr	r2, [r4, #4]
 800a51e:	68db      	ldr	r3, [r3, #12]
 800a520:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a524:	6021      	str	r1, [r4, #0]
 800a526:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a52a:	bd70      	pop	{r4, r5, r6, pc}
 800a52c:	0800ccce 	.word	0x0800ccce
 800a530:	0800cd4e 	.word	0x0800cd4e

0800a534 <__multadd>:
 800a534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a538:	690d      	ldr	r5, [r1, #16]
 800a53a:	4607      	mov	r7, r0
 800a53c:	460c      	mov	r4, r1
 800a53e:	461e      	mov	r6, r3
 800a540:	f101 0c14 	add.w	ip, r1, #20
 800a544:	2000      	movs	r0, #0
 800a546:	f8dc 3000 	ldr.w	r3, [ip]
 800a54a:	b299      	uxth	r1, r3
 800a54c:	fb02 6101 	mla	r1, r2, r1, r6
 800a550:	0c1e      	lsrs	r6, r3, #16
 800a552:	0c0b      	lsrs	r3, r1, #16
 800a554:	fb02 3306 	mla	r3, r2, r6, r3
 800a558:	b289      	uxth	r1, r1
 800a55a:	3001      	adds	r0, #1
 800a55c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a560:	4285      	cmp	r5, r0
 800a562:	f84c 1b04 	str.w	r1, [ip], #4
 800a566:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a56a:	dcec      	bgt.n	800a546 <__multadd+0x12>
 800a56c:	b30e      	cbz	r6, 800a5b2 <__multadd+0x7e>
 800a56e:	68a3      	ldr	r3, [r4, #8]
 800a570:	42ab      	cmp	r3, r5
 800a572:	dc19      	bgt.n	800a5a8 <__multadd+0x74>
 800a574:	6861      	ldr	r1, [r4, #4]
 800a576:	4638      	mov	r0, r7
 800a578:	3101      	adds	r1, #1
 800a57a:	f7ff ff79 	bl	800a470 <_Balloc>
 800a57e:	4680      	mov	r8, r0
 800a580:	b928      	cbnz	r0, 800a58e <__multadd+0x5a>
 800a582:	4602      	mov	r2, r0
 800a584:	4b0c      	ldr	r3, [pc, #48]	@ (800a5b8 <__multadd+0x84>)
 800a586:	480d      	ldr	r0, [pc, #52]	@ (800a5bc <__multadd+0x88>)
 800a588:	21ba      	movs	r1, #186	@ 0xba
 800a58a:	f001 fec5 	bl	800c318 <__assert_func>
 800a58e:	6922      	ldr	r2, [r4, #16]
 800a590:	3202      	adds	r2, #2
 800a592:	f104 010c 	add.w	r1, r4, #12
 800a596:	0092      	lsls	r2, r2, #2
 800a598:	300c      	adds	r0, #12
 800a59a:	f001 fea5 	bl	800c2e8 <memcpy>
 800a59e:	4621      	mov	r1, r4
 800a5a0:	4638      	mov	r0, r7
 800a5a2:	f7ff ffa5 	bl	800a4f0 <_Bfree>
 800a5a6:	4644      	mov	r4, r8
 800a5a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a5ac:	3501      	adds	r5, #1
 800a5ae:	615e      	str	r6, [r3, #20]
 800a5b0:	6125      	str	r5, [r4, #16]
 800a5b2:	4620      	mov	r0, r4
 800a5b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5b8:	0800cd3d 	.word	0x0800cd3d
 800a5bc:	0800cd4e 	.word	0x0800cd4e

0800a5c0 <__s2b>:
 800a5c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5c4:	460c      	mov	r4, r1
 800a5c6:	4615      	mov	r5, r2
 800a5c8:	461f      	mov	r7, r3
 800a5ca:	2209      	movs	r2, #9
 800a5cc:	3308      	adds	r3, #8
 800a5ce:	4606      	mov	r6, r0
 800a5d0:	fb93 f3f2 	sdiv	r3, r3, r2
 800a5d4:	2100      	movs	r1, #0
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	429a      	cmp	r2, r3
 800a5da:	db09      	blt.n	800a5f0 <__s2b+0x30>
 800a5dc:	4630      	mov	r0, r6
 800a5de:	f7ff ff47 	bl	800a470 <_Balloc>
 800a5e2:	b940      	cbnz	r0, 800a5f6 <__s2b+0x36>
 800a5e4:	4602      	mov	r2, r0
 800a5e6:	4b19      	ldr	r3, [pc, #100]	@ (800a64c <__s2b+0x8c>)
 800a5e8:	4819      	ldr	r0, [pc, #100]	@ (800a650 <__s2b+0x90>)
 800a5ea:	21d3      	movs	r1, #211	@ 0xd3
 800a5ec:	f001 fe94 	bl	800c318 <__assert_func>
 800a5f0:	0052      	lsls	r2, r2, #1
 800a5f2:	3101      	adds	r1, #1
 800a5f4:	e7f0      	b.n	800a5d8 <__s2b+0x18>
 800a5f6:	9b08      	ldr	r3, [sp, #32]
 800a5f8:	6143      	str	r3, [r0, #20]
 800a5fa:	2d09      	cmp	r5, #9
 800a5fc:	f04f 0301 	mov.w	r3, #1
 800a600:	6103      	str	r3, [r0, #16]
 800a602:	dd16      	ble.n	800a632 <__s2b+0x72>
 800a604:	f104 0909 	add.w	r9, r4, #9
 800a608:	46c8      	mov	r8, r9
 800a60a:	442c      	add	r4, r5
 800a60c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a610:	4601      	mov	r1, r0
 800a612:	3b30      	subs	r3, #48	@ 0x30
 800a614:	220a      	movs	r2, #10
 800a616:	4630      	mov	r0, r6
 800a618:	f7ff ff8c 	bl	800a534 <__multadd>
 800a61c:	45a0      	cmp	r8, r4
 800a61e:	d1f5      	bne.n	800a60c <__s2b+0x4c>
 800a620:	f1a5 0408 	sub.w	r4, r5, #8
 800a624:	444c      	add	r4, r9
 800a626:	1b2d      	subs	r5, r5, r4
 800a628:	1963      	adds	r3, r4, r5
 800a62a:	42bb      	cmp	r3, r7
 800a62c:	db04      	blt.n	800a638 <__s2b+0x78>
 800a62e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a632:	340a      	adds	r4, #10
 800a634:	2509      	movs	r5, #9
 800a636:	e7f6      	b.n	800a626 <__s2b+0x66>
 800a638:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a63c:	4601      	mov	r1, r0
 800a63e:	3b30      	subs	r3, #48	@ 0x30
 800a640:	220a      	movs	r2, #10
 800a642:	4630      	mov	r0, r6
 800a644:	f7ff ff76 	bl	800a534 <__multadd>
 800a648:	e7ee      	b.n	800a628 <__s2b+0x68>
 800a64a:	bf00      	nop
 800a64c:	0800cd3d 	.word	0x0800cd3d
 800a650:	0800cd4e 	.word	0x0800cd4e

0800a654 <__hi0bits>:
 800a654:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a658:	4603      	mov	r3, r0
 800a65a:	bf36      	itet	cc
 800a65c:	0403      	lslcc	r3, r0, #16
 800a65e:	2000      	movcs	r0, #0
 800a660:	2010      	movcc	r0, #16
 800a662:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a666:	bf3c      	itt	cc
 800a668:	021b      	lslcc	r3, r3, #8
 800a66a:	3008      	addcc	r0, #8
 800a66c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a670:	bf3c      	itt	cc
 800a672:	011b      	lslcc	r3, r3, #4
 800a674:	3004      	addcc	r0, #4
 800a676:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a67a:	bf3c      	itt	cc
 800a67c:	009b      	lslcc	r3, r3, #2
 800a67e:	3002      	addcc	r0, #2
 800a680:	2b00      	cmp	r3, #0
 800a682:	db05      	blt.n	800a690 <__hi0bits+0x3c>
 800a684:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a688:	f100 0001 	add.w	r0, r0, #1
 800a68c:	bf08      	it	eq
 800a68e:	2020      	moveq	r0, #32
 800a690:	4770      	bx	lr

0800a692 <__lo0bits>:
 800a692:	6803      	ldr	r3, [r0, #0]
 800a694:	4602      	mov	r2, r0
 800a696:	f013 0007 	ands.w	r0, r3, #7
 800a69a:	d00b      	beq.n	800a6b4 <__lo0bits+0x22>
 800a69c:	07d9      	lsls	r1, r3, #31
 800a69e:	d421      	bmi.n	800a6e4 <__lo0bits+0x52>
 800a6a0:	0798      	lsls	r0, r3, #30
 800a6a2:	bf49      	itett	mi
 800a6a4:	085b      	lsrmi	r3, r3, #1
 800a6a6:	089b      	lsrpl	r3, r3, #2
 800a6a8:	2001      	movmi	r0, #1
 800a6aa:	6013      	strmi	r3, [r2, #0]
 800a6ac:	bf5c      	itt	pl
 800a6ae:	6013      	strpl	r3, [r2, #0]
 800a6b0:	2002      	movpl	r0, #2
 800a6b2:	4770      	bx	lr
 800a6b4:	b299      	uxth	r1, r3
 800a6b6:	b909      	cbnz	r1, 800a6bc <__lo0bits+0x2a>
 800a6b8:	0c1b      	lsrs	r3, r3, #16
 800a6ba:	2010      	movs	r0, #16
 800a6bc:	b2d9      	uxtb	r1, r3
 800a6be:	b909      	cbnz	r1, 800a6c4 <__lo0bits+0x32>
 800a6c0:	3008      	adds	r0, #8
 800a6c2:	0a1b      	lsrs	r3, r3, #8
 800a6c4:	0719      	lsls	r1, r3, #28
 800a6c6:	bf04      	itt	eq
 800a6c8:	091b      	lsreq	r3, r3, #4
 800a6ca:	3004      	addeq	r0, #4
 800a6cc:	0799      	lsls	r1, r3, #30
 800a6ce:	bf04      	itt	eq
 800a6d0:	089b      	lsreq	r3, r3, #2
 800a6d2:	3002      	addeq	r0, #2
 800a6d4:	07d9      	lsls	r1, r3, #31
 800a6d6:	d403      	bmi.n	800a6e0 <__lo0bits+0x4e>
 800a6d8:	085b      	lsrs	r3, r3, #1
 800a6da:	f100 0001 	add.w	r0, r0, #1
 800a6de:	d003      	beq.n	800a6e8 <__lo0bits+0x56>
 800a6e0:	6013      	str	r3, [r2, #0]
 800a6e2:	4770      	bx	lr
 800a6e4:	2000      	movs	r0, #0
 800a6e6:	4770      	bx	lr
 800a6e8:	2020      	movs	r0, #32
 800a6ea:	4770      	bx	lr

0800a6ec <__i2b>:
 800a6ec:	b510      	push	{r4, lr}
 800a6ee:	460c      	mov	r4, r1
 800a6f0:	2101      	movs	r1, #1
 800a6f2:	f7ff febd 	bl	800a470 <_Balloc>
 800a6f6:	4602      	mov	r2, r0
 800a6f8:	b928      	cbnz	r0, 800a706 <__i2b+0x1a>
 800a6fa:	4b05      	ldr	r3, [pc, #20]	@ (800a710 <__i2b+0x24>)
 800a6fc:	4805      	ldr	r0, [pc, #20]	@ (800a714 <__i2b+0x28>)
 800a6fe:	f240 1145 	movw	r1, #325	@ 0x145
 800a702:	f001 fe09 	bl	800c318 <__assert_func>
 800a706:	2301      	movs	r3, #1
 800a708:	6144      	str	r4, [r0, #20]
 800a70a:	6103      	str	r3, [r0, #16]
 800a70c:	bd10      	pop	{r4, pc}
 800a70e:	bf00      	nop
 800a710:	0800cd3d 	.word	0x0800cd3d
 800a714:	0800cd4e 	.word	0x0800cd4e

0800a718 <__multiply>:
 800a718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a71c:	4614      	mov	r4, r2
 800a71e:	690a      	ldr	r2, [r1, #16]
 800a720:	6923      	ldr	r3, [r4, #16]
 800a722:	429a      	cmp	r2, r3
 800a724:	bfa8      	it	ge
 800a726:	4623      	movge	r3, r4
 800a728:	460f      	mov	r7, r1
 800a72a:	bfa4      	itt	ge
 800a72c:	460c      	movge	r4, r1
 800a72e:	461f      	movge	r7, r3
 800a730:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a734:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a738:	68a3      	ldr	r3, [r4, #8]
 800a73a:	6861      	ldr	r1, [r4, #4]
 800a73c:	eb0a 0609 	add.w	r6, sl, r9
 800a740:	42b3      	cmp	r3, r6
 800a742:	b085      	sub	sp, #20
 800a744:	bfb8      	it	lt
 800a746:	3101      	addlt	r1, #1
 800a748:	f7ff fe92 	bl	800a470 <_Balloc>
 800a74c:	b930      	cbnz	r0, 800a75c <__multiply+0x44>
 800a74e:	4602      	mov	r2, r0
 800a750:	4b44      	ldr	r3, [pc, #272]	@ (800a864 <__multiply+0x14c>)
 800a752:	4845      	ldr	r0, [pc, #276]	@ (800a868 <__multiply+0x150>)
 800a754:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a758:	f001 fdde 	bl	800c318 <__assert_func>
 800a75c:	f100 0514 	add.w	r5, r0, #20
 800a760:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a764:	462b      	mov	r3, r5
 800a766:	2200      	movs	r2, #0
 800a768:	4543      	cmp	r3, r8
 800a76a:	d321      	bcc.n	800a7b0 <__multiply+0x98>
 800a76c:	f107 0114 	add.w	r1, r7, #20
 800a770:	f104 0214 	add.w	r2, r4, #20
 800a774:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a778:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a77c:	9302      	str	r3, [sp, #8]
 800a77e:	1b13      	subs	r3, r2, r4
 800a780:	3b15      	subs	r3, #21
 800a782:	f023 0303 	bic.w	r3, r3, #3
 800a786:	3304      	adds	r3, #4
 800a788:	f104 0715 	add.w	r7, r4, #21
 800a78c:	42ba      	cmp	r2, r7
 800a78e:	bf38      	it	cc
 800a790:	2304      	movcc	r3, #4
 800a792:	9301      	str	r3, [sp, #4]
 800a794:	9b02      	ldr	r3, [sp, #8]
 800a796:	9103      	str	r1, [sp, #12]
 800a798:	428b      	cmp	r3, r1
 800a79a:	d80c      	bhi.n	800a7b6 <__multiply+0x9e>
 800a79c:	2e00      	cmp	r6, #0
 800a79e:	dd03      	ble.n	800a7a8 <__multiply+0x90>
 800a7a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d05b      	beq.n	800a860 <__multiply+0x148>
 800a7a8:	6106      	str	r6, [r0, #16]
 800a7aa:	b005      	add	sp, #20
 800a7ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7b0:	f843 2b04 	str.w	r2, [r3], #4
 800a7b4:	e7d8      	b.n	800a768 <__multiply+0x50>
 800a7b6:	f8b1 a000 	ldrh.w	sl, [r1]
 800a7ba:	f1ba 0f00 	cmp.w	sl, #0
 800a7be:	d024      	beq.n	800a80a <__multiply+0xf2>
 800a7c0:	f104 0e14 	add.w	lr, r4, #20
 800a7c4:	46a9      	mov	r9, r5
 800a7c6:	f04f 0c00 	mov.w	ip, #0
 800a7ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a7ce:	f8d9 3000 	ldr.w	r3, [r9]
 800a7d2:	fa1f fb87 	uxth.w	fp, r7
 800a7d6:	b29b      	uxth	r3, r3
 800a7d8:	fb0a 330b 	mla	r3, sl, fp, r3
 800a7dc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a7e0:	f8d9 7000 	ldr.w	r7, [r9]
 800a7e4:	4463      	add	r3, ip
 800a7e6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a7ea:	fb0a c70b 	mla	r7, sl, fp, ip
 800a7ee:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a7f2:	b29b      	uxth	r3, r3
 800a7f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a7f8:	4572      	cmp	r2, lr
 800a7fa:	f849 3b04 	str.w	r3, [r9], #4
 800a7fe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a802:	d8e2      	bhi.n	800a7ca <__multiply+0xb2>
 800a804:	9b01      	ldr	r3, [sp, #4]
 800a806:	f845 c003 	str.w	ip, [r5, r3]
 800a80a:	9b03      	ldr	r3, [sp, #12]
 800a80c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a810:	3104      	adds	r1, #4
 800a812:	f1b9 0f00 	cmp.w	r9, #0
 800a816:	d021      	beq.n	800a85c <__multiply+0x144>
 800a818:	682b      	ldr	r3, [r5, #0]
 800a81a:	f104 0c14 	add.w	ip, r4, #20
 800a81e:	46ae      	mov	lr, r5
 800a820:	f04f 0a00 	mov.w	sl, #0
 800a824:	f8bc b000 	ldrh.w	fp, [ip]
 800a828:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a82c:	fb09 770b 	mla	r7, r9, fp, r7
 800a830:	4457      	add	r7, sl
 800a832:	b29b      	uxth	r3, r3
 800a834:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a838:	f84e 3b04 	str.w	r3, [lr], #4
 800a83c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a840:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a844:	f8be 3000 	ldrh.w	r3, [lr]
 800a848:	fb09 330a 	mla	r3, r9, sl, r3
 800a84c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a850:	4562      	cmp	r2, ip
 800a852:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a856:	d8e5      	bhi.n	800a824 <__multiply+0x10c>
 800a858:	9f01      	ldr	r7, [sp, #4]
 800a85a:	51eb      	str	r3, [r5, r7]
 800a85c:	3504      	adds	r5, #4
 800a85e:	e799      	b.n	800a794 <__multiply+0x7c>
 800a860:	3e01      	subs	r6, #1
 800a862:	e79b      	b.n	800a79c <__multiply+0x84>
 800a864:	0800cd3d 	.word	0x0800cd3d
 800a868:	0800cd4e 	.word	0x0800cd4e

0800a86c <__pow5mult>:
 800a86c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a870:	4615      	mov	r5, r2
 800a872:	f012 0203 	ands.w	r2, r2, #3
 800a876:	4607      	mov	r7, r0
 800a878:	460e      	mov	r6, r1
 800a87a:	d007      	beq.n	800a88c <__pow5mult+0x20>
 800a87c:	4c25      	ldr	r4, [pc, #148]	@ (800a914 <__pow5mult+0xa8>)
 800a87e:	3a01      	subs	r2, #1
 800a880:	2300      	movs	r3, #0
 800a882:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a886:	f7ff fe55 	bl	800a534 <__multadd>
 800a88a:	4606      	mov	r6, r0
 800a88c:	10ad      	asrs	r5, r5, #2
 800a88e:	d03d      	beq.n	800a90c <__pow5mult+0xa0>
 800a890:	69fc      	ldr	r4, [r7, #28]
 800a892:	b97c      	cbnz	r4, 800a8b4 <__pow5mult+0x48>
 800a894:	2010      	movs	r0, #16
 800a896:	f7ff fd35 	bl	800a304 <malloc>
 800a89a:	4602      	mov	r2, r0
 800a89c:	61f8      	str	r0, [r7, #28]
 800a89e:	b928      	cbnz	r0, 800a8ac <__pow5mult+0x40>
 800a8a0:	4b1d      	ldr	r3, [pc, #116]	@ (800a918 <__pow5mult+0xac>)
 800a8a2:	481e      	ldr	r0, [pc, #120]	@ (800a91c <__pow5mult+0xb0>)
 800a8a4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a8a8:	f001 fd36 	bl	800c318 <__assert_func>
 800a8ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a8b0:	6004      	str	r4, [r0, #0]
 800a8b2:	60c4      	str	r4, [r0, #12]
 800a8b4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a8b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a8bc:	b94c      	cbnz	r4, 800a8d2 <__pow5mult+0x66>
 800a8be:	f240 2171 	movw	r1, #625	@ 0x271
 800a8c2:	4638      	mov	r0, r7
 800a8c4:	f7ff ff12 	bl	800a6ec <__i2b>
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	f8c8 0008 	str.w	r0, [r8, #8]
 800a8ce:	4604      	mov	r4, r0
 800a8d0:	6003      	str	r3, [r0, #0]
 800a8d2:	f04f 0900 	mov.w	r9, #0
 800a8d6:	07eb      	lsls	r3, r5, #31
 800a8d8:	d50a      	bpl.n	800a8f0 <__pow5mult+0x84>
 800a8da:	4631      	mov	r1, r6
 800a8dc:	4622      	mov	r2, r4
 800a8de:	4638      	mov	r0, r7
 800a8e0:	f7ff ff1a 	bl	800a718 <__multiply>
 800a8e4:	4631      	mov	r1, r6
 800a8e6:	4680      	mov	r8, r0
 800a8e8:	4638      	mov	r0, r7
 800a8ea:	f7ff fe01 	bl	800a4f0 <_Bfree>
 800a8ee:	4646      	mov	r6, r8
 800a8f0:	106d      	asrs	r5, r5, #1
 800a8f2:	d00b      	beq.n	800a90c <__pow5mult+0xa0>
 800a8f4:	6820      	ldr	r0, [r4, #0]
 800a8f6:	b938      	cbnz	r0, 800a908 <__pow5mult+0x9c>
 800a8f8:	4622      	mov	r2, r4
 800a8fa:	4621      	mov	r1, r4
 800a8fc:	4638      	mov	r0, r7
 800a8fe:	f7ff ff0b 	bl	800a718 <__multiply>
 800a902:	6020      	str	r0, [r4, #0]
 800a904:	f8c0 9000 	str.w	r9, [r0]
 800a908:	4604      	mov	r4, r0
 800a90a:	e7e4      	b.n	800a8d6 <__pow5mult+0x6a>
 800a90c:	4630      	mov	r0, r6
 800a90e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a912:	bf00      	nop
 800a914:	0800cda8 	.word	0x0800cda8
 800a918:	0800ccce 	.word	0x0800ccce
 800a91c:	0800cd4e 	.word	0x0800cd4e

0800a920 <__lshift>:
 800a920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a924:	460c      	mov	r4, r1
 800a926:	6849      	ldr	r1, [r1, #4]
 800a928:	6923      	ldr	r3, [r4, #16]
 800a92a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a92e:	68a3      	ldr	r3, [r4, #8]
 800a930:	4607      	mov	r7, r0
 800a932:	4691      	mov	r9, r2
 800a934:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a938:	f108 0601 	add.w	r6, r8, #1
 800a93c:	42b3      	cmp	r3, r6
 800a93e:	db0b      	blt.n	800a958 <__lshift+0x38>
 800a940:	4638      	mov	r0, r7
 800a942:	f7ff fd95 	bl	800a470 <_Balloc>
 800a946:	4605      	mov	r5, r0
 800a948:	b948      	cbnz	r0, 800a95e <__lshift+0x3e>
 800a94a:	4602      	mov	r2, r0
 800a94c:	4b28      	ldr	r3, [pc, #160]	@ (800a9f0 <__lshift+0xd0>)
 800a94e:	4829      	ldr	r0, [pc, #164]	@ (800a9f4 <__lshift+0xd4>)
 800a950:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a954:	f001 fce0 	bl	800c318 <__assert_func>
 800a958:	3101      	adds	r1, #1
 800a95a:	005b      	lsls	r3, r3, #1
 800a95c:	e7ee      	b.n	800a93c <__lshift+0x1c>
 800a95e:	2300      	movs	r3, #0
 800a960:	f100 0114 	add.w	r1, r0, #20
 800a964:	f100 0210 	add.w	r2, r0, #16
 800a968:	4618      	mov	r0, r3
 800a96a:	4553      	cmp	r3, sl
 800a96c:	db33      	blt.n	800a9d6 <__lshift+0xb6>
 800a96e:	6920      	ldr	r0, [r4, #16]
 800a970:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a974:	f104 0314 	add.w	r3, r4, #20
 800a978:	f019 091f 	ands.w	r9, r9, #31
 800a97c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a980:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a984:	d02b      	beq.n	800a9de <__lshift+0xbe>
 800a986:	f1c9 0e20 	rsb	lr, r9, #32
 800a98a:	468a      	mov	sl, r1
 800a98c:	2200      	movs	r2, #0
 800a98e:	6818      	ldr	r0, [r3, #0]
 800a990:	fa00 f009 	lsl.w	r0, r0, r9
 800a994:	4310      	orrs	r0, r2
 800a996:	f84a 0b04 	str.w	r0, [sl], #4
 800a99a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a99e:	459c      	cmp	ip, r3
 800a9a0:	fa22 f20e 	lsr.w	r2, r2, lr
 800a9a4:	d8f3      	bhi.n	800a98e <__lshift+0x6e>
 800a9a6:	ebac 0304 	sub.w	r3, ip, r4
 800a9aa:	3b15      	subs	r3, #21
 800a9ac:	f023 0303 	bic.w	r3, r3, #3
 800a9b0:	3304      	adds	r3, #4
 800a9b2:	f104 0015 	add.w	r0, r4, #21
 800a9b6:	4584      	cmp	ip, r0
 800a9b8:	bf38      	it	cc
 800a9ba:	2304      	movcc	r3, #4
 800a9bc:	50ca      	str	r2, [r1, r3]
 800a9be:	b10a      	cbz	r2, 800a9c4 <__lshift+0xa4>
 800a9c0:	f108 0602 	add.w	r6, r8, #2
 800a9c4:	3e01      	subs	r6, #1
 800a9c6:	4638      	mov	r0, r7
 800a9c8:	612e      	str	r6, [r5, #16]
 800a9ca:	4621      	mov	r1, r4
 800a9cc:	f7ff fd90 	bl	800a4f0 <_Bfree>
 800a9d0:	4628      	mov	r0, r5
 800a9d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9d6:	f842 0f04 	str.w	r0, [r2, #4]!
 800a9da:	3301      	adds	r3, #1
 800a9dc:	e7c5      	b.n	800a96a <__lshift+0x4a>
 800a9de:	3904      	subs	r1, #4
 800a9e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9e4:	f841 2f04 	str.w	r2, [r1, #4]!
 800a9e8:	459c      	cmp	ip, r3
 800a9ea:	d8f9      	bhi.n	800a9e0 <__lshift+0xc0>
 800a9ec:	e7ea      	b.n	800a9c4 <__lshift+0xa4>
 800a9ee:	bf00      	nop
 800a9f0:	0800cd3d 	.word	0x0800cd3d
 800a9f4:	0800cd4e 	.word	0x0800cd4e

0800a9f8 <__mcmp>:
 800a9f8:	690a      	ldr	r2, [r1, #16]
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	6900      	ldr	r0, [r0, #16]
 800a9fe:	1a80      	subs	r0, r0, r2
 800aa00:	b530      	push	{r4, r5, lr}
 800aa02:	d10e      	bne.n	800aa22 <__mcmp+0x2a>
 800aa04:	3314      	adds	r3, #20
 800aa06:	3114      	adds	r1, #20
 800aa08:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800aa0c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800aa10:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800aa14:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800aa18:	4295      	cmp	r5, r2
 800aa1a:	d003      	beq.n	800aa24 <__mcmp+0x2c>
 800aa1c:	d205      	bcs.n	800aa2a <__mcmp+0x32>
 800aa1e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aa22:	bd30      	pop	{r4, r5, pc}
 800aa24:	42a3      	cmp	r3, r4
 800aa26:	d3f3      	bcc.n	800aa10 <__mcmp+0x18>
 800aa28:	e7fb      	b.n	800aa22 <__mcmp+0x2a>
 800aa2a:	2001      	movs	r0, #1
 800aa2c:	e7f9      	b.n	800aa22 <__mcmp+0x2a>
	...

0800aa30 <__mdiff>:
 800aa30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa34:	4689      	mov	r9, r1
 800aa36:	4606      	mov	r6, r0
 800aa38:	4611      	mov	r1, r2
 800aa3a:	4648      	mov	r0, r9
 800aa3c:	4614      	mov	r4, r2
 800aa3e:	f7ff ffdb 	bl	800a9f8 <__mcmp>
 800aa42:	1e05      	subs	r5, r0, #0
 800aa44:	d112      	bne.n	800aa6c <__mdiff+0x3c>
 800aa46:	4629      	mov	r1, r5
 800aa48:	4630      	mov	r0, r6
 800aa4a:	f7ff fd11 	bl	800a470 <_Balloc>
 800aa4e:	4602      	mov	r2, r0
 800aa50:	b928      	cbnz	r0, 800aa5e <__mdiff+0x2e>
 800aa52:	4b3f      	ldr	r3, [pc, #252]	@ (800ab50 <__mdiff+0x120>)
 800aa54:	f240 2137 	movw	r1, #567	@ 0x237
 800aa58:	483e      	ldr	r0, [pc, #248]	@ (800ab54 <__mdiff+0x124>)
 800aa5a:	f001 fc5d 	bl	800c318 <__assert_func>
 800aa5e:	2301      	movs	r3, #1
 800aa60:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aa64:	4610      	mov	r0, r2
 800aa66:	b003      	add	sp, #12
 800aa68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa6c:	bfbc      	itt	lt
 800aa6e:	464b      	movlt	r3, r9
 800aa70:	46a1      	movlt	r9, r4
 800aa72:	4630      	mov	r0, r6
 800aa74:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800aa78:	bfba      	itte	lt
 800aa7a:	461c      	movlt	r4, r3
 800aa7c:	2501      	movlt	r5, #1
 800aa7e:	2500      	movge	r5, #0
 800aa80:	f7ff fcf6 	bl	800a470 <_Balloc>
 800aa84:	4602      	mov	r2, r0
 800aa86:	b918      	cbnz	r0, 800aa90 <__mdiff+0x60>
 800aa88:	4b31      	ldr	r3, [pc, #196]	@ (800ab50 <__mdiff+0x120>)
 800aa8a:	f240 2145 	movw	r1, #581	@ 0x245
 800aa8e:	e7e3      	b.n	800aa58 <__mdiff+0x28>
 800aa90:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800aa94:	6926      	ldr	r6, [r4, #16]
 800aa96:	60c5      	str	r5, [r0, #12]
 800aa98:	f109 0310 	add.w	r3, r9, #16
 800aa9c:	f109 0514 	add.w	r5, r9, #20
 800aaa0:	f104 0e14 	add.w	lr, r4, #20
 800aaa4:	f100 0b14 	add.w	fp, r0, #20
 800aaa8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800aaac:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800aab0:	9301      	str	r3, [sp, #4]
 800aab2:	46d9      	mov	r9, fp
 800aab4:	f04f 0c00 	mov.w	ip, #0
 800aab8:	9b01      	ldr	r3, [sp, #4]
 800aaba:	f85e 0b04 	ldr.w	r0, [lr], #4
 800aabe:	f853 af04 	ldr.w	sl, [r3, #4]!
 800aac2:	9301      	str	r3, [sp, #4]
 800aac4:	fa1f f38a 	uxth.w	r3, sl
 800aac8:	4619      	mov	r1, r3
 800aaca:	b283      	uxth	r3, r0
 800aacc:	1acb      	subs	r3, r1, r3
 800aace:	0c00      	lsrs	r0, r0, #16
 800aad0:	4463      	add	r3, ip
 800aad2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800aad6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800aada:	b29b      	uxth	r3, r3
 800aadc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800aae0:	4576      	cmp	r6, lr
 800aae2:	f849 3b04 	str.w	r3, [r9], #4
 800aae6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aaea:	d8e5      	bhi.n	800aab8 <__mdiff+0x88>
 800aaec:	1b33      	subs	r3, r6, r4
 800aaee:	3b15      	subs	r3, #21
 800aaf0:	f023 0303 	bic.w	r3, r3, #3
 800aaf4:	3415      	adds	r4, #21
 800aaf6:	3304      	adds	r3, #4
 800aaf8:	42a6      	cmp	r6, r4
 800aafa:	bf38      	it	cc
 800aafc:	2304      	movcc	r3, #4
 800aafe:	441d      	add	r5, r3
 800ab00:	445b      	add	r3, fp
 800ab02:	461e      	mov	r6, r3
 800ab04:	462c      	mov	r4, r5
 800ab06:	4544      	cmp	r4, r8
 800ab08:	d30e      	bcc.n	800ab28 <__mdiff+0xf8>
 800ab0a:	f108 0103 	add.w	r1, r8, #3
 800ab0e:	1b49      	subs	r1, r1, r5
 800ab10:	f021 0103 	bic.w	r1, r1, #3
 800ab14:	3d03      	subs	r5, #3
 800ab16:	45a8      	cmp	r8, r5
 800ab18:	bf38      	it	cc
 800ab1a:	2100      	movcc	r1, #0
 800ab1c:	440b      	add	r3, r1
 800ab1e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ab22:	b191      	cbz	r1, 800ab4a <__mdiff+0x11a>
 800ab24:	6117      	str	r7, [r2, #16]
 800ab26:	e79d      	b.n	800aa64 <__mdiff+0x34>
 800ab28:	f854 1b04 	ldr.w	r1, [r4], #4
 800ab2c:	46e6      	mov	lr, ip
 800ab2e:	0c08      	lsrs	r0, r1, #16
 800ab30:	fa1c fc81 	uxtah	ip, ip, r1
 800ab34:	4471      	add	r1, lr
 800ab36:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ab3a:	b289      	uxth	r1, r1
 800ab3c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ab40:	f846 1b04 	str.w	r1, [r6], #4
 800ab44:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ab48:	e7dd      	b.n	800ab06 <__mdiff+0xd6>
 800ab4a:	3f01      	subs	r7, #1
 800ab4c:	e7e7      	b.n	800ab1e <__mdiff+0xee>
 800ab4e:	bf00      	nop
 800ab50:	0800cd3d 	.word	0x0800cd3d
 800ab54:	0800cd4e 	.word	0x0800cd4e

0800ab58 <__ulp>:
 800ab58:	b082      	sub	sp, #8
 800ab5a:	ed8d 0b00 	vstr	d0, [sp]
 800ab5e:	9a01      	ldr	r2, [sp, #4]
 800ab60:	4b0f      	ldr	r3, [pc, #60]	@ (800aba0 <__ulp+0x48>)
 800ab62:	4013      	ands	r3, r2
 800ab64:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	dc08      	bgt.n	800ab7e <__ulp+0x26>
 800ab6c:	425b      	negs	r3, r3
 800ab6e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800ab72:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ab76:	da04      	bge.n	800ab82 <__ulp+0x2a>
 800ab78:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ab7c:	4113      	asrs	r3, r2
 800ab7e:	2200      	movs	r2, #0
 800ab80:	e008      	b.n	800ab94 <__ulp+0x3c>
 800ab82:	f1a2 0314 	sub.w	r3, r2, #20
 800ab86:	2b1e      	cmp	r3, #30
 800ab88:	bfda      	itte	le
 800ab8a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800ab8e:	40da      	lsrle	r2, r3
 800ab90:	2201      	movgt	r2, #1
 800ab92:	2300      	movs	r3, #0
 800ab94:	4619      	mov	r1, r3
 800ab96:	4610      	mov	r0, r2
 800ab98:	ec41 0b10 	vmov	d0, r0, r1
 800ab9c:	b002      	add	sp, #8
 800ab9e:	4770      	bx	lr
 800aba0:	7ff00000 	.word	0x7ff00000

0800aba4 <__b2d>:
 800aba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aba8:	6906      	ldr	r6, [r0, #16]
 800abaa:	f100 0814 	add.w	r8, r0, #20
 800abae:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800abb2:	1f37      	subs	r7, r6, #4
 800abb4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800abb8:	4610      	mov	r0, r2
 800abba:	f7ff fd4b 	bl	800a654 <__hi0bits>
 800abbe:	f1c0 0320 	rsb	r3, r0, #32
 800abc2:	280a      	cmp	r0, #10
 800abc4:	600b      	str	r3, [r1, #0]
 800abc6:	491b      	ldr	r1, [pc, #108]	@ (800ac34 <__b2d+0x90>)
 800abc8:	dc15      	bgt.n	800abf6 <__b2d+0x52>
 800abca:	f1c0 0c0b 	rsb	ip, r0, #11
 800abce:	fa22 f30c 	lsr.w	r3, r2, ip
 800abd2:	45b8      	cmp	r8, r7
 800abd4:	ea43 0501 	orr.w	r5, r3, r1
 800abd8:	bf34      	ite	cc
 800abda:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800abde:	2300      	movcs	r3, #0
 800abe0:	3015      	adds	r0, #21
 800abe2:	fa02 f000 	lsl.w	r0, r2, r0
 800abe6:	fa23 f30c 	lsr.w	r3, r3, ip
 800abea:	4303      	orrs	r3, r0
 800abec:	461c      	mov	r4, r3
 800abee:	ec45 4b10 	vmov	d0, r4, r5
 800abf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abf6:	45b8      	cmp	r8, r7
 800abf8:	bf3a      	itte	cc
 800abfa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800abfe:	f1a6 0708 	subcc.w	r7, r6, #8
 800ac02:	2300      	movcs	r3, #0
 800ac04:	380b      	subs	r0, #11
 800ac06:	d012      	beq.n	800ac2e <__b2d+0x8a>
 800ac08:	f1c0 0120 	rsb	r1, r0, #32
 800ac0c:	fa23 f401 	lsr.w	r4, r3, r1
 800ac10:	4082      	lsls	r2, r0
 800ac12:	4322      	orrs	r2, r4
 800ac14:	4547      	cmp	r7, r8
 800ac16:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800ac1a:	bf8c      	ite	hi
 800ac1c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ac20:	2200      	movls	r2, #0
 800ac22:	4083      	lsls	r3, r0
 800ac24:	40ca      	lsrs	r2, r1
 800ac26:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ac2a:	4313      	orrs	r3, r2
 800ac2c:	e7de      	b.n	800abec <__b2d+0x48>
 800ac2e:	ea42 0501 	orr.w	r5, r2, r1
 800ac32:	e7db      	b.n	800abec <__b2d+0x48>
 800ac34:	3ff00000 	.word	0x3ff00000

0800ac38 <__d2b>:
 800ac38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ac3c:	460f      	mov	r7, r1
 800ac3e:	2101      	movs	r1, #1
 800ac40:	ec59 8b10 	vmov	r8, r9, d0
 800ac44:	4616      	mov	r6, r2
 800ac46:	f7ff fc13 	bl	800a470 <_Balloc>
 800ac4a:	4604      	mov	r4, r0
 800ac4c:	b930      	cbnz	r0, 800ac5c <__d2b+0x24>
 800ac4e:	4602      	mov	r2, r0
 800ac50:	4b23      	ldr	r3, [pc, #140]	@ (800ace0 <__d2b+0xa8>)
 800ac52:	4824      	ldr	r0, [pc, #144]	@ (800ace4 <__d2b+0xac>)
 800ac54:	f240 310f 	movw	r1, #783	@ 0x30f
 800ac58:	f001 fb5e 	bl	800c318 <__assert_func>
 800ac5c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ac60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ac64:	b10d      	cbz	r5, 800ac6a <__d2b+0x32>
 800ac66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ac6a:	9301      	str	r3, [sp, #4]
 800ac6c:	f1b8 0300 	subs.w	r3, r8, #0
 800ac70:	d023      	beq.n	800acba <__d2b+0x82>
 800ac72:	4668      	mov	r0, sp
 800ac74:	9300      	str	r3, [sp, #0]
 800ac76:	f7ff fd0c 	bl	800a692 <__lo0bits>
 800ac7a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ac7e:	b1d0      	cbz	r0, 800acb6 <__d2b+0x7e>
 800ac80:	f1c0 0320 	rsb	r3, r0, #32
 800ac84:	fa02 f303 	lsl.w	r3, r2, r3
 800ac88:	430b      	orrs	r3, r1
 800ac8a:	40c2      	lsrs	r2, r0
 800ac8c:	6163      	str	r3, [r4, #20]
 800ac8e:	9201      	str	r2, [sp, #4]
 800ac90:	9b01      	ldr	r3, [sp, #4]
 800ac92:	61a3      	str	r3, [r4, #24]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	bf0c      	ite	eq
 800ac98:	2201      	moveq	r2, #1
 800ac9a:	2202      	movne	r2, #2
 800ac9c:	6122      	str	r2, [r4, #16]
 800ac9e:	b1a5      	cbz	r5, 800acca <__d2b+0x92>
 800aca0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800aca4:	4405      	add	r5, r0
 800aca6:	603d      	str	r5, [r7, #0]
 800aca8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800acac:	6030      	str	r0, [r6, #0]
 800acae:	4620      	mov	r0, r4
 800acb0:	b003      	add	sp, #12
 800acb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800acb6:	6161      	str	r1, [r4, #20]
 800acb8:	e7ea      	b.n	800ac90 <__d2b+0x58>
 800acba:	a801      	add	r0, sp, #4
 800acbc:	f7ff fce9 	bl	800a692 <__lo0bits>
 800acc0:	9b01      	ldr	r3, [sp, #4]
 800acc2:	6163      	str	r3, [r4, #20]
 800acc4:	3020      	adds	r0, #32
 800acc6:	2201      	movs	r2, #1
 800acc8:	e7e8      	b.n	800ac9c <__d2b+0x64>
 800acca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800acce:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800acd2:	6038      	str	r0, [r7, #0]
 800acd4:	6918      	ldr	r0, [r3, #16]
 800acd6:	f7ff fcbd 	bl	800a654 <__hi0bits>
 800acda:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800acde:	e7e5      	b.n	800acac <__d2b+0x74>
 800ace0:	0800cd3d 	.word	0x0800cd3d
 800ace4:	0800cd4e 	.word	0x0800cd4e

0800ace8 <__ratio>:
 800ace8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acec:	b085      	sub	sp, #20
 800acee:	e9cd 1000 	strd	r1, r0, [sp]
 800acf2:	a902      	add	r1, sp, #8
 800acf4:	f7ff ff56 	bl	800aba4 <__b2d>
 800acf8:	9800      	ldr	r0, [sp, #0]
 800acfa:	a903      	add	r1, sp, #12
 800acfc:	ec55 4b10 	vmov	r4, r5, d0
 800ad00:	f7ff ff50 	bl	800aba4 <__b2d>
 800ad04:	9b01      	ldr	r3, [sp, #4]
 800ad06:	6919      	ldr	r1, [r3, #16]
 800ad08:	9b00      	ldr	r3, [sp, #0]
 800ad0a:	691b      	ldr	r3, [r3, #16]
 800ad0c:	1ac9      	subs	r1, r1, r3
 800ad0e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ad12:	1a9b      	subs	r3, r3, r2
 800ad14:	ec5b ab10 	vmov	sl, fp, d0
 800ad18:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	bfce      	itee	gt
 800ad20:	462a      	movgt	r2, r5
 800ad22:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ad26:	465a      	movle	r2, fp
 800ad28:	462f      	mov	r7, r5
 800ad2a:	46d9      	mov	r9, fp
 800ad2c:	bfcc      	ite	gt
 800ad2e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ad32:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800ad36:	464b      	mov	r3, r9
 800ad38:	4652      	mov	r2, sl
 800ad3a:	4620      	mov	r0, r4
 800ad3c:	4639      	mov	r1, r7
 800ad3e:	f7f5 fdad 	bl	800089c <__aeabi_ddiv>
 800ad42:	ec41 0b10 	vmov	d0, r0, r1
 800ad46:	b005      	add	sp, #20
 800ad48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ad4c <__copybits>:
 800ad4c:	3901      	subs	r1, #1
 800ad4e:	b570      	push	{r4, r5, r6, lr}
 800ad50:	1149      	asrs	r1, r1, #5
 800ad52:	6914      	ldr	r4, [r2, #16]
 800ad54:	3101      	adds	r1, #1
 800ad56:	f102 0314 	add.w	r3, r2, #20
 800ad5a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ad5e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ad62:	1f05      	subs	r5, r0, #4
 800ad64:	42a3      	cmp	r3, r4
 800ad66:	d30c      	bcc.n	800ad82 <__copybits+0x36>
 800ad68:	1aa3      	subs	r3, r4, r2
 800ad6a:	3b11      	subs	r3, #17
 800ad6c:	f023 0303 	bic.w	r3, r3, #3
 800ad70:	3211      	adds	r2, #17
 800ad72:	42a2      	cmp	r2, r4
 800ad74:	bf88      	it	hi
 800ad76:	2300      	movhi	r3, #0
 800ad78:	4418      	add	r0, r3
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	4288      	cmp	r0, r1
 800ad7e:	d305      	bcc.n	800ad8c <__copybits+0x40>
 800ad80:	bd70      	pop	{r4, r5, r6, pc}
 800ad82:	f853 6b04 	ldr.w	r6, [r3], #4
 800ad86:	f845 6f04 	str.w	r6, [r5, #4]!
 800ad8a:	e7eb      	b.n	800ad64 <__copybits+0x18>
 800ad8c:	f840 3b04 	str.w	r3, [r0], #4
 800ad90:	e7f4      	b.n	800ad7c <__copybits+0x30>

0800ad92 <__any_on>:
 800ad92:	f100 0214 	add.w	r2, r0, #20
 800ad96:	6900      	ldr	r0, [r0, #16]
 800ad98:	114b      	asrs	r3, r1, #5
 800ad9a:	4298      	cmp	r0, r3
 800ad9c:	b510      	push	{r4, lr}
 800ad9e:	db11      	blt.n	800adc4 <__any_on+0x32>
 800ada0:	dd0a      	ble.n	800adb8 <__any_on+0x26>
 800ada2:	f011 011f 	ands.w	r1, r1, #31
 800ada6:	d007      	beq.n	800adb8 <__any_on+0x26>
 800ada8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800adac:	fa24 f001 	lsr.w	r0, r4, r1
 800adb0:	fa00 f101 	lsl.w	r1, r0, r1
 800adb4:	428c      	cmp	r4, r1
 800adb6:	d10b      	bne.n	800add0 <__any_on+0x3e>
 800adb8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800adbc:	4293      	cmp	r3, r2
 800adbe:	d803      	bhi.n	800adc8 <__any_on+0x36>
 800adc0:	2000      	movs	r0, #0
 800adc2:	bd10      	pop	{r4, pc}
 800adc4:	4603      	mov	r3, r0
 800adc6:	e7f7      	b.n	800adb8 <__any_on+0x26>
 800adc8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800adcc:	2900      	cmp	r1, #0
 800adce:	d0f5      	beq.n	800adbc <__any_on+0x2a>
 800add0:	2001      	movs	r0, #1
 800add2:	e7f6      	b.n	800adc2 <__any_on+0x30>

0800add4 <sulp>:
 800add4:	b570      	push	{r4, r5, r6, lr}
 800add6:	4604      	mov	r4, r0
 800add8:	460d      	mov	r5, r1
 800adda:	ec45 4b10 	vmov	d0, r4, r5
 800adde:	4616      	mov	r6, r2
 800ade0:	f7ff feba 	bl	800ab58 <__ulp>
 800ade4:	ec51 0b10 	vmov	r0, r1, d0
 800ade8:	b17e      	cbz	r6, 800ae0a <sulp+0x36>
 800adea:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800adee:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	dd09      	ble.n	800ae0a <sulp+0x36>
 800adf6:	051b      	lsls	r3, r3, #20
 800adf8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800adfc:	2400      	movs	r4, #0
 800adfe:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800ae02:	4622      	mov	r2, r4
 800ae04:	462b      	mov	r3, r5
 800ae06:	f7f5 fc1f 	bl	8000648 <__aeabi_dmul>
 800ae0a:	ec41 0b10 	vmov	d0, r0, r1
 800ae0e:	bd70      	pop	{r4, r5, r6, pc}

0800ae10 <_strtod_l>:
 800ae10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae14:	b09f      	sub	sp, #124	@ 0x7c
 800ae16:	460c      	mov	r4, r1
 800ae18:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	921a      	str	r2, [sp, #104]	@ 0x68
 800ae1e:	9005      	str	r0, [sp, #20]
 800ae20:	f04f 0a00 	mov.w	sl, #0
 800ae24:	f04f 0b00 	mov.w	fp, #0
 800ae28:	460a      	mov	r2, r1
 800ae2a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ae2c:	7811      	ldrb	r1, [r2, #0]
 800ae2e:	292b      	cmp	r1, #43	@ 0x2b
 800ae30:	d04a      	beq.n	800aec8 <_strtod_l+0xb8>
 800ae32:	d838      	bhi.n	800aea6 <_strtod_l+0x96>
 800ae34:	290d      	cmp	r1, #13
 800ae36:	d832      	bhi.n	800ae9e <_strtod_l+0x8e>
 800ae38:	2908      	cmp	r1, #8
 800ae3a:	d832      	bhi.n	800aea2 <_strtod_l+0x92>
 800ae3c:	2900      	cmp	r1, #0
 800ae3e:	d03b      	beq.n	800aeb8 <_strtod_l+0xa8>
 800ae40:	2200      	movs	r2, #0
 800ae42:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ae44:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800ae46:	782a      	ldrb	r2, [r5, #0]
 800ae48:	2a30      	cmp	r2, #48	@ 0x30
 800ae4a:	f040 80b3 	bne.w	800afb4 <_strtod_l+0x1a4>
 800ae4e:	786a      	ldrb	r2, [r5, #1]
 800ae50:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ae54:	2a58      	cmp	r2, #88	@ 0x58
 800ae56:	d16e      	bne.n	800af36 <_strtod_l+0x126>
 800ae58:	9302      	str	r3, [sp, #8]
 800ae5a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ae5c:	9301      	str	r3, [sp, #4]
 800ae5e:	ab1a      	add	r3, sp, #104	@ 0x68
 800ae60:	9300      	str	r3, [sp, #0]
 800ae62:	4a8e      	ldr	r2, [pc, #568]	@ (800b09c <_strtod_l+0x28c>)
 800ae64:	9805      	ldr	r0, [sp, #20]
 800ae66:	ab1b      	add	r3, sp, #108	@ 0x6c
 800ae68:	a919      	add	r1, sp, #100	@ 0x64
 800ae6a:	f001 faef 	bl	800c44c <__gethex>
 800ae6e:	f010 060f 	ands.w	r6, r0, #15
 800ae72:	4604      	mov	r4, r0
 800ae74:	d005      	beq.n	800ae82 <_strtod_l+0x72>
 800ae76:	2e06      	cmp	r6, #6
 800ae78:	d128      	bne.n	800aecc <_strtod_l+0xbc>
 800ae7a:	3501      	adds	r5, #1
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	9519      	str	r5, [sp, #100]	@ 0x64
 800ae80:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ae82:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	f040 858e 	bne.w	800b9a6 <_strtod_l+0xb96>
 800ae8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ae8c:	b1cb      	cbz	r3, 800aec2 <_strtod_l+0xb2>
 800ae8e:	4652      	mov	r2, sl
 800ae90:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800ae94:	ec43 2b10 	vmov	d0, r2, r3
 800ae98:	b01f      	add	sp, #124	@ 0x7c
 800ae9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae9e:	2920      	cmp	r1, #32
 800aea0:	d1ce      	bne.n	800ae40 <_strtod_l+0x30>
 800aea2:	3201      	adds	r2, #1
 800aea4:	e7c1      	b.n	800ae2a <_strtod_l+0x1a>
 800aea6:	292d      	cmp	r1, #45	@ 0x2d
 800aea8:	d1ca      	bne.n	800ae40 <_strtod_l+0x30>
 800aeaa:	2101      	movs	r1, #1
 800aeac:	910b      	str	r1, [sp, #44]	@ 0x2c
 800aeae:	1c51      	adds	r1, r2, #1
 800aeb0:	9119      	str	r1, [sp, #100]	@ 0x64
 800aeb2:	7852      	ldrb	r2, [r2, #1]
 800aeb4:	2a00      	cmp	r2, #0
 800aeb6:	d1c5      	bne.n	800ae44 <_strtod_l+0x34>
 800aeb8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800aeba:	9419      	str	r4, [sp, #100]	@ 0x64
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	f040 8570 	bne.w	800b9a2 <_strtod_l+0xb92>
 800aec2:	4652      	mov	r2, sl
 800aec4:	465b      	mov	r3, fp
 800aec6:	e7e5      	b.n	800ae94 <_strtod_l+0x84>
 800aec8:	2100      	movs	r1, #0
 800aeca:	e7ef      	b.n	800aeac <_strtod_l+0x9c>
 800aecc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800aece:	b13a      	cbz	r2, 800aee0 <_strtod_l+0xd0>
 800aed0:	2135      	movs	r1, #53	@ 0x35
 800aed2:	a81c      	add	r0, sp, #112	@ 0x70
 800aed4:	f7ff ff3a 	bl	800ad4c <__copybits>
 800aed8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aeda:	9805      	ldr	r0, [sp, #20]
 800aedc:	f7ff fb08 	bl	800a4f0 <_Bfree>
 800aee0:	3e01      	subs	r6, #1
 800aee2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800aee4:	2e04      	cmp	r6, #4
 800aee6:	d806      	bhi.n	800aef6 <_strtod_l+0xe6>
 800aee8:	e8df f006 	tbb	[pc, r6]
 800aeec:	201d0314 	.word	0x201d0314
 800aef0:	14          	.byte	0x14
 800aef1:	00          	.byte	0x00
 800aef2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800aef6:	05e1      	lsls	r1, r4, #23
 800aef8:	bf48      	it	mi
 800aefa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800aefe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800af02:	0d1b      	lsrs	r3, r3, #20
 800af04:	051b      	lsls	r3, r3, #20
 800af06:	2b00      	cmp	r3, #0
 800af08:	d1bb      	bne.n	800ae82 <_strtod_l+0x72>
 800af0a:	f7fe fb31 	bl	8009570 <__errno>
 800af0e:	2322      	movs	r3, #34	@ 0x22
 800af10:	6003      	str	r3, [r0, #0]
 800af12:	e7b6      	b.n	800ae82 <_strtod_l+0x72>
 800af14:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800af18:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800af1c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800af20:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800af24:	e7e7      	b.n	800aef6 <_strtod_l+0xe6>
 800af26:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800b0a4 <_strtod_l+0x294>
 800af2a:	e7e4      	b.n	800aef6 <_strtod_l+0xe6>
 800af2c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800af30:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800af34:	e7df      	b.n	800aef6 <_strtod_l+0xe6>
 800af36:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800af38:	1c5a      	adds	r2, r3, #1
 800af3a:	9219      	str	r2, [sp, #100]	@ 0x64
 800af3c:	785b      	ldrb	r3, [r3, #1]
 800af3e:	2b30      	cmp	r3, #48	@ 0x30
 800af40:	d0f9      	beq.n	800af36 <_strtod_l+0x126>
 800af42:	2b00      	cmp	r3, #0
 800af44:	d09d      	beq.n	800ae82 <_strtod_l+0x72>
 800af46:	2301      	movs	r3, #1
 800af48:	9309      	str	r3, [sp, #36]	@ 0x24
 800af4a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800af4c:	930c      	str	r3, [sp, #48]	@ 0x30
 800af4e:	2300      	movs	r3, #0
 800af50:	9308      	str	r3, [sp, #32]
 800af52:	930a      	str	r3, [sp, #40]	@ 0x28
 800af54:	461f      	mov	r7, r3
 800af56:	220a      	movs	r2, #10
 800af58:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800af5a:	7805      	ldrb	r5, [r0, #0]
 800af5c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800af60:	b2d9      	uxtb	r1, r3
 800af62:	2909      	cmp	r1, #9
 800af64:	d928      	bls.n	800afb8 <_strtod_l+0x1a8>
 800af66:	494e      	ldr	r1, [pc, #312]	@ (800b0a0 <_strtod_l+0x290>)
 800af68:	2201      	movs	r2, #1
 800af6a:	f001 f979 	bl	800c260 <strncmp>
 800af6e:	2800      	cmp	r0, #0
 800af70:	d032      	beq.n	800afd8 <_strtod_l+0x1c8>
 800af72:	2000      	movs	r0, #0
 800af74:	462a      	mov	r2, r5
 800af76:	4681      	mov	r9, r0
 800af78:	463d      	mov	r5, r7
 800af7a:	4603      	mov	r3, r0
 800af7c:	2a65      	cmp	r2, #101	@ 0x65
 800af7e:	d001      	beq.n	800af84 <_strtod_l+0x174>
 800af80:	2a45      	cmp	r2, #69	@ 0x45
 800af82:	d114      	bne.n	800afae <_strtod_l+0x19e>
 800af84:	b91d      	cbnz	r5, 800af8e <_strtod_l+0x17e>
 800af86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af88:	4302      	orrs	r2, r0
 800af8a:	d095      	beq.n	800aeb8 <_strtod_l+0xa8>
 800af8c:	2500      	movs	r5, #0
 800af8e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800af90:	1c62      	adds	r2, r4, #1
 800af92:	9219      	str	r2, [sp, #100]	@ 0x64
 800af94:	7862      	ldrb	r2, [r4, #1]
 800af96:	2a2b      	cmp	r2, #43	@ 0x2b
 800af98:	d077      	beq.n	800b08a <_strtod_l+0x27a>
 800af9a:	2a2d      	cmp	r2, #45	@ 0x2d
 800af9c:	d07b      	beq.n	800b096 <_strtod_l+0x286>
 800af9e:	f04f 0c00 	mov.w	ip, #0
 800afa2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800afa6:	2909      	cmp	r1, #9
 800afa8:	f240 8082 	bls.w	800b0b0 <_strtod_l+0x2a0>
 800afac:	9419      	str	r4, [sp, #100]	@ 0x64
 800afae:	f04f 0800 	mov.w	r8, #0
 800afb2:	e0a2      	b.n	800b0fa <_strtod_l+0x2ea>
 800afb4:	2300      	movs	r3, #0
 800afb6:	e7c7      	b.n	800af48 <_strtod_l+0x138>
 800afb8:	2f08      	cmp	r7, #8
 800afba:	bfd5      	itete	le
 800afbc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800afbe:	9908      	ldrgt	r1, [sp, #32]
 800afc0:	fb02 3301 	mlale	r3, r2, r1, r3
 800afc4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800afc8:	f100 0001 	add.w	r0, r0, #1
 800afcc:	bfd4      	ite	le
 800afce:	930a      	strle	r3, [sp, #40]	@ 0x28
 800afd0:	9308      	strgt	r3, [sp, #32]
 800afd2:	3701      	adds	r7, #1
 800afd4:	9019      	str	r0, [sp, #100]	@ 0x64
 800afd6:	e7bf      	b.n	800af58 <_strtod_l+0x148>
 800afd8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800afda:	1c5a      	adds	r2, r3, #1
 800afdc:	9219      	str	r2, [sp, #100]	@ 0x64
 800afde:	785a      	ldrb	r2, [r3, #1]
 800afe0:	b37f      	cbz	r7, 800b042 <_strtod_l+0x232>
 800afe2:	4681      	mov	r9, r0
 800afe4:	463d      	mov	r5, r7
 800afe6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800afea:	2b09      	cmp	r3, #9
 800afec:	d912      	bls.n	800b014 <_strtod_l+0x204>
 800afee:	2301      	movs	r3, #1
 800aff0:	e7c4      	b.n	800af7c <_strtod_l+0x16c>
 800aff2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aff4:	1c5a      	adds	r2, r3, #1
 800aff6:	9219      	str	r2, [sp, #100]	@ 0x64
 800aff8:	785a      	ldrb	r2, [r3, #1]
 800affa:	3001      	adds	r0, #1
 800affc:	2a30      	cmp	r2, #48	@ 0x30
 800affe:	d0f8      	beq.n	800aff2 <_strtod_l+0x1e2>
 800b000:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b004:	2b08      	cmp	r3, #8
 800b006:	f200 84d3 	bhi.w	800b9b0 <_strtod_l+0xba0>
 800b00a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b00c:	930c      	str	r3, [sp, #48]	@ 0x30
 800b00e:	4681      	mov	r9, r0
 800b010:	2000      	movs	r0, #0
 800b012:	4605      	mov	r5, r0
 800b014:	3a30      	subs	r2, #48	@ 0x30
 800b016:	f100 0301 	add.w	r3, r0, #1
 800b01a:	d02a      	beq.n	800b072 <_strtod_l+0x262>
 800b01c:	4499      	add	r9, r3
 800b01e:	eb00 0c05 	add.w	ip, r0, r5
 800b022:	462b      	mov	r3, r5
 800b024:	210a      	movs	r1, #10
 800b026:	4563      	cmp	r3, ip
 800b028:	d10d      	bne.n	800b046 <_strtod_l+0x236>
 800b02a:	1c69      	adds	r1, r5, #1
 800b02c:	4401      	add	r1, r0
 800b02e:	4428      	add	r0, r5
 800b030:	2808      	cmp	r0, #8
 800b032:	dc16      	bgt.n	800b062 <_strtod_l+0x252>
 800b034:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b036:	230a      	movs	r3, #10
 800b038:	fb03 2300 	mla	r3, r3, r0, r2
 800b03c:	930a      	str	r3, [sp, #40]	@ 0x28
 800b03e:	2300      	movs	r3, #0
 800b040:	e018      	b.n	800b074 <_strtod_l+0x264>
 800b042:	4638      	mov	r0, r7
 800b044:	e7da      	b.n	800affc <_strtod_l+0x1ec>
 800b046:	2b08      	cmp	r3, #8
 800b048:	f103 0301 	add.w	r3, r3, #1
 800b04c:	dc03      	bgt.n	800b056 <_strtod_l+0x246>
 800b04e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b050:	434e      	muls	r6, r1
 800b052:	960a      	str	r6, [sp, #40]	@ 0x28
 800b054:	e7e7      	b.n	800b026 <_strtod_l+0x216>
 800b056:	2b10      	cmp	r3, #16
 800b058:	bfde      	ittt	le
 800b05a:	9e08      	ldrle	r6, [sp, #32]
 800b05c:	434e      	mulle	r6, r1
 800b05e:	9608      	strle	r6, [sp, #32]
 800b060:	e7e1      	b.n	800b026 <_strtod_l+0x216>
 800b062:	280f      	cmp	r0, #15
 800b064:	dceb      	bgt.n	800b03e <_strtod_l+0x22e>
 800b066:	9808      	ldr	r0, [sp, #32]
 800b068:	230a      	movs	r3, #10
 800b06a:	fb03 2300 	mla	r3, r3, r0, r2
 800b06e:	9308      	str	r3, [sp, #32]
 800b070:	e7e5      	b.n	800b03e <_strtod_l+0x22e>
 800b072:	4629      	mov	r1, r5
 800b074:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b076:	1c50      	adds	r0, r2, #1
 800b078:	9019      	str	r0, [sp, #100]	@ 0x64
 800b07a:	7852      	ldrb	r2, [r2, #1]
 800b07c:	4618      	mov	r0, r3
 800b07e:	460d      	mov	r5, r1
 800b080:	e7b1      	b.n	800afe6 <_strtod_l+0x1d6>
 800b082:	f04f 0900 	mov.w	r9, #0
 800b086:	2301      	movs	r3, #1
 800b088:	e77d      	b.n	800af86 <_strtod_l+0x176>
 800b08a:	f04f 0c00 	mov.w	ip, #0
 800b08e:	1ca2      	adds	r2, r4, #2
 800b090:	9219      	str	r2, [sp, #100]	@ 0x64
 800b092:	78a2      	ldrb	r2, [r4, #2]
 800b094:	e785      	b.n	800afa2 <_strtod_l+0x192>
 800b096:	f04f 0c01 	mov.w	ip, #1
 800b09a:	e7f8      	b.n	800b08e <_strtod_l+0x27e>
 800b09c:	0800cec0 	.word	0x0800cec0
 800b0a0:	0800cea8 	.word	0x0800cea8
 800b0a4:	7ff00000 	.word	0x7ff00000
 800b0a8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b0aa:	1c51      	adds	r1, r2, #1
 800b0ac:	9119      	str	r1, [sp, #100]	@ 0x64
 800b0ae:	7852      	ldrb	r2, [r2, #1]
 800b0b0:	2a30      	cmp	r2, #48	@ 0x30
 800b0b2:	d0f9      	beq.n	800b0a8 <_strtod_l+0x298>
 800b0b4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b0b8:	2908      	cmp	r1, #8
 800b0ba:	f63f af78 	bhi.w	800afae <_strtod_l+0x19e>
 800b0be:	3a30      	subs	r2, #48	@ 0x30
 800b0c0:	920e      	str	r2, [sp, #56]	@ 0x38
 800b0c2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b0c4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b0c6:	f04f 080a 	mov.w	r8, #10
 800b0ca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b0cc:	1c56      	adds	r6, r2, #1
 800b0ce:	9619      	str	r6, [sp, #100]	@ 0x64
 800b0d0:	7852      	ldrb	r2, [r2, #1]
 800b0d2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b0d6:	f1be 0f09 	cmp.w	lr, #9
 800b0da:	d939      	bls.n	800b150 <_strtod_l+0x340>
 800b0dc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b0de:	1a76      	subs	r6, r6, r1
 800b0e0:	2e08      	cmp	r6, #8
 800b0e2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b0e6:	dc03      	bgt.n	800b0f0 <_strtod_l+0x2e0>
 800b0e8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b0ea:	4588      	cmp	r8, r1
 800b0ec:	bfa8      	it	ge
 800b0ee:	4688      	movge	r8, r1
 800b0f0:	f1bc 0f00 	cmp.w	ip, #0
 800b0f4:	d001      	beq.n	800b0fa <_strtod_l+0x2ea>
 800b0f6:	f1c8 0800 	rsb	r8, r8, #0
 800b0fa:	2d00      	cmp	r5, #0
 800b0fc:	d14e      	bne.n	800b19c <_strtod_l+0x38c>
 800b0fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b100:	4308      	orrs	r0, r1
 800b102:	f47f aebe 	bne.w	800ae82 <_strtod_l+0x72>
 800b106:	2b00      	cmp	r3, #0
 800b108:	f47f aed6 	bne.w	800aeb8 <_strtod_l+0xa8>
 800b10c:	2a69      	cmp	r2, #105	@ 0x69
 800b10e:	d028      	beq.n	800b162 <_strtod_l+0x352>
 800b110:	dc25      	bgt.n	800b15e <_strtod_l+0x34e>
 800b112:	2a49      	cmp	r2, #73	@ 0x49
 800b114:	d025      	beq.n	800b162 <_strtod_l+0x352>
 800b116:	2a4e      	cmp	r2, #78	@ 0x4e
 800b118:	f47f aece 	bne.w	800aeb8 <_strtod_l+0xa8>
 800b11c:	499b      	ldr	r1, [pc, #620]	@ (800b38c <_strtod_l+0x57c>)
 800b11e:	a819      	add	r0, sp, #100	@ 0x64
 800b120:	f001 fbb6 	bl	800c890 <__match>
 800b124:	2800      	cmp	r0, #0
 800b126:	f43f aec7 	beq.w	800aeb8 <_strtod_l+0xa8>
 800b12a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b12c:	781b      	ldrb	r3, [r3, #0]
 800b12e:	2b28      	cmp	r3, #40	@ 0x28
 800b130:	d12e      	bne.n	800b190 <_strtod_l+0x380>
 800b132:	4997      	ldr	r1, [pc, #604]	@ (800b390 <_strtod_l+0x580>)
 800b134:	aa1c      	add	r2, sp, #112	@ 0x70
 800b136:	a819      	add	r0, sp, #100	@ 0x64
 800b138:	f001 fbbe 	bl	800c8b8 <__hexnan>
 800b13c:	2805      	cmp	r0, #5
 800b13e:	d127      	bne.n	800b190 <_strtod_l+0x380>
 800b140:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b142:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b146:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b14a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b14e:	e698      	b.n	800ae82 <_strtod_l+0x72>
 800b150:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b152:	fb08 2101 	mla	r1, r8, r1, r2
 800b156:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b15a:	920e      	str	r2, [sp, #56]	@ 0x38
 800b15c:	e7b5      	b.n	800b0ca <_strtod_l+0x2ba>
 800b15e:	2a6e      	cmp	r2, #110	@ 0x6e
 800b160:	e7da      	b.n	800b118 <_strtod_l+0x308>
 800b162:	498c      	ldr	r1, [pc, #560]	@ (800b394 <_strtod_l+0x584>)
 800b164:	a819      	add	r0, sp, #100	@ 0x64
 800b166:	f001 fb93 	bl	800c890 <__match>
 800b16a:	2800      	cmp	r0, #0
 800b16c:	f43f aea4 	beq.w	800aeb8 <_strtod_l+0xa8>
 800b170:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b172:	4989      	ldr	r1, [pc, #548]	@ (800b398 <_strtod_l+0x588>)
 800b174:	3b01      	subs	r3, #1
 800b176:	a819      	add	r0, sp, #100	@ 0x64
 800b178:	9319      	str	r3, [sp, #100]	@ 0x64
 800b17a:	f001 fb89 	bl	800c890 <__match>
 800b17e:	b910      	cbnz	r0, 800b186 <_strtod_l+0x376>
 800b180:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b182:	3301      	adds	r3, #1
 800b184:	9319      	str	r3, [sp, #100]	@ 0x64
 800b186:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800b3a8 <_strtod_l+0x598>
 800b18a:	f04f 0a00 	mov.w	sl, #0
 800b18e:	e678      	b.n	800ae82 <_strtod_l+0x72>
 800b190:	4882      	ldr	r0, [pc, #520]	@ (800b39c <_strtod_l+0x58c>)
 800b192:	f001 f8b9 	bl	800c308 <nan>
 800b196:	ec5b ab10 	vmov	sl, fp, d0
 800b19a:	e672      	b.n	800ae82 <_strtod_l+0x72>
 800b19c:	eba8 0309 	sub.w	r3, r8, r9
 800b1a0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b1a2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1a4:	2f00      	cmp	r7, #0
 800b1a6:	bf08      	it	eq
 800b1a8:	462f      	moveq	r7, r5
 800b1aa:	2d10      	cmp	r5, #16
 800b1ac:	462c      	mov	r4, r5
 800b1ae:	bfa8      	it	ge
 800b1b0:	2410      	movge	r4, #16
 800b1b2:	f7f5 f9cf 	bl	8000554 <__aeabi_ui2d>
 800b1b6:	2d09      	cmp	r5, #9
 800b1b8:	4682      	mov	sl, r0
 800b1ba:	468b      	mov	fp, r1
 800b1bc:	dc13      	bgt.n	800b1e6 <_strtod_l+0x3d6>
 800b1be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	f43f ae5e 	beq.w	800ae82 <_strtod_l+0x72>
 800b1c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1c8:	dd78      	ble.n	800b2bc <_strtod_l+0x4ac>
 800b1ca:	2b16      	cmp	r3, #22
 800b1cc:	dc5f      	bgt.n	800b28e <_strtod_l+0x47e>
 800b1ce:	4974      	ldr	r1, [pc, #464]	@ (800b3a0 <_strtod_l+0x590>)
 800b1d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b1d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b1d8:	4652      	mov	r2, sl
 800b1da:	465b      	mov	r3, fp
 800b1dc:	f7f5 fa34 	bl	8000648 <__aeabi_dmul>
 800b1e0:	4682      	mov	sl, r0
 800b1e2:	468b      	mov	fp, r1
 800b1e4:	e64d      	b.n	800ae82 <_strtod_l+0x72>
 800b1e6:	4b6e      	ldr	r3, [pc, #440]	@ (800b3a0 <_strtod_l+0x590>)
 800b1e8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b1ec:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b1f0:	f7f5 fa2a 	bl	8000648 <__aeabi_dmul>
 800b1f4:	4682      	mov	sl, r0
 800b1f6:	9808      	ldr	r0, [sp, #32]
 800b1f8:	468b      	mov	fp, r1
 800b1fa:	f7f5 f9ab 	bl	8000554 <__aeabi_ui2d>
 800b1fe:	4602      	mov	r2, r0
 800b200:	460b      	mov	r3, r1
 800b202:	4650      	mov	r0, sl
 800b204:	4659      	mov	r1, fp
 800b206:	f7f5 f869 	bl	80002dc <__adddf3>
 800b20a:	2d0f      	cmp	r5, #15
 800b20c:	4682      	mov	sl, r0
 800b20e:	468b      	mov	fp, r1
 800b210:	ddd5      	ble.n	800b1be <_strtod_l+0x3ae>
 800b212:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b214:	1b2c      	subs	r4, r5, r4
 800b216:	441c      	add	r4, r3
 800b218:	2c00      	cmp	r4, #0
 800b21a:	f340 8096 	ble.w	800b34a <_strtod_l+0x53a>
 800b21e:	f014 030f 	ands.w	r3, r4, #15
 800b222:	d00a      	beq.n	800b23a <_strtod_l+0x42a>
 800b224:	495e      	ldr	r1, [pc, #376]	@ (800b3a0 <_strtod_l+0x590>)
 800b226:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b22a:	4652      	mov	r2, sl
 800b22c:	465b      	mov	r3, fp
 800b22e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b232:	f7f5 fa09 	bl	8000648 <__aeabi_dmul>
 800b236:	4682      	mov	sl, r0
 800b238:	468b      	mov	fp, r1
 800b23a:	f034 040f 	bics.w	r4, r4, #15
 800b23e:	d073      	beq.n	800b328 <_strtod_l+0x518>
 800b240:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b244:	dd48      	ble.n	800b2d8 <_strtod_l+0x4c8>
 800b246:	2400      	movs	r4, #0
 800b248:	46a0      	mov	r8, r4
 800b24a:	940a      	str	r4, [sp, #40]	@ 0x28
 800b24c:	46a1      	mov	r9, r4
 800b24e:	9a05      	ldr	r2, [sp, #20]
 800b250:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800b3a8 <_strtod_l+0x598>
 800b254:	2322      	movs	r3, #34	@ 0x22
 800b256:	6013      	str	r3, [r2, #0]
 800b258:	f04f 0a00 	mov.w	sl, #0
 800b25c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b25e:	2b00      	cmp	r3, #0
 800b260:	f43f ae0f 	beq.w	800ae82 <_strtod_l+0x72>
 800b264:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b266:	9805      	ldr	r0, [sp, #20]
 800b268:	f7ff f942 	bl	800a4f0 <_Bfree>
 800b26c:	9805      	ldr	r0, [sp, #20]
 800b26e:	4649      	mov	r1, r9
 800b270:	f7ff f93e 	bl	800a4f0 <_Bfree>
 800b274:	9805      	ldr	r0, [sp, #20]
 800b276:	4641      	mov	r1, r8
 800b278:	f7ff f93a 	bl	800a4f0 <_Bfree>
 800b27c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b27e:	9805      	ldr	r0, [sp, #20]
 800b280:	f7ff f936 	bl	800a4f0 <_Bfree>
 800b284:	9805      	ldr	r0, [sp, #20]
 800b286:	4621      	mov	r1, r4
 800b288:	f7ff f932 	bl	800a4f0 <_Bfree>
 800b28c:	e5f9      	b.n	800ae82 <_strtod_l+0x72>
 800b28e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b290:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b294:	4293      	cmp	r3, r2
 800b296:	dbbc      	blt.n	800b212 <_strtod_l+0x402>
 800b298:	4c41      	ldr	r4, [pc, #260]	@ (800b3a0 <_strtod_l+0x590>)
 800b29a:	f1c5 050f 	rsb	r5, r5, #15
 800b29e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b2a2:	4652      	mov	r2, sl
 800b2a4:	465b      	mov	r3, fp
 800b2a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2aa:	f7f5 f9cd 	bl	8000648 <__aeabi_dmul>
 800b2ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2b0:	1b5d      	subs	r5, r3, r5
 800b2b2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b2b6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b2ba:	e78f      	b.n	800b1dc <_strtod_l+0x3cc>
 800b2bc:	3316      	adds	r3, #22
 800b2be:	dba8      	blt.n	800b212 <_strtod_l+0x402>
 800b2c0:	4b37      	ldr	r3, [pc, #220]	@ (800b3a0 <_strtod_l+0x590>)
 800b2c2:	eba9 0808 	sub.w	r8, r9, r8
 800b2c6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b2ca:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b2ce:	4650      	mov	r0, sl
 800b2d0:	4659      	mov	r1, fp
 800b2d2:	f7f5 fae3 	bl	800089c <__aeabi_ddiv>
 800b2d6:	e783      	b.n	800b1e0 <_strtod_l+0x3d0>
 800b2d8:	4b32      	ldr	r3, [pc, #200]	@ (800b3a4 <_strtod_l+0x594>)
 800b2da:	9308      	str	r3, [sp, #32]
 800b2dc:	2300      	movs	r3, #0
 800b2de:	1124      	asrs	r4, r4, #4
 800b2e0:	4650      	mov	r0, sl
 800b2e2:	4659      	mov	r1, fp
 800b2e4:	461e      	mov	r6, r3
 800b2e6:	2c01      	cmp	r4, #1
 800b2e8:	dc21      	bgt.n	800b32e <_strtod_l+0x51e>
 800b2ea:	b10b      	cbz	r3, 800b2f0 <_strtod_l+0x4e0>
 800b2ec:	4682      	mov	sl, r0
 800b2ee:	468b      	mov	fp, r1
 800b2f0:	492c      	ldr	r1, [pc, #176]	@ (800b3a4 <_strtod_l+0x594>)
 800b2f2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b2f6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b2fa:	4652      	mov	r2, sl
 800b2fc:	465b      	mov	r3, fp
 800b2fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b302:	f7f5 f9a1 	bl	8000648 <__aeabi_dmul>
 800b306:	4b28      	ldr	r3, [pc, #160]	@ (800b3a8 <_strtod_l+0x598>)
 800b308:	460a      	mov	r2, r1
 800b30a:	400b      	ands	r3, r1
 800b30c:	4927      	ldr	r1, [pc, #156]	@ (800b3ac <_strtod_l+0x59c>)
 800b30e:	428b      	cmp	r3, r1
 800b310:	4682      	mov	sl, r0
 800b312:	d898      	bhi.n	800b246 <_strtod_l+0x436>
 800b314:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b318:	428b      	cmp	r3, r1
 800b31a:	bf86      	itte	hi
 800b31c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800b3b0 <_strtod_l+0x5a0>
 800b320:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800b324:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b328:	2300      	movs	r3, #0
 800b32a:	9308      	str	r3, [sp, #32]
 800b32c:	e07a      	b.n	800b424 <_strtod_l+0x614>
 800b32e:	07e2      	lsls	r2, r4, #31
 800b330:	d505      	bpl.n	800b33e <_strtod_l+0x52e>
 800b332:	9b08      	ldr	r3, [sp, #32]
 800b334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b338:	f7f5 f986 	bl	8000648 <__aeabi_dmul>
 800b33c:	2301      	movs	r3, #1
 800b33e:	9a08      	ldr	r2, [sp, #32]
 800b340:	3208      	adds	r2, #8
 800b342:	3601      	adds	r6, #1
 800b344:	1064      	asrs	r4, r4, #1
 800b346:	9208      	str	r2, [sp, #32]
 800b348:	e7cd      	b.n	800b2e6 <_strtod_l+0x4d6>
 800b34a:	d0ed      	beq.n	800b328 <_strtod_l+0x518>
 800b34c:	4264      	negs	r4, r4
 800b34e:	f014 020f 	ands.w	r2, r4, #15
 800b352:	d00a      	beq.n	800b36a <_strtod_l+0x55a>
 800b354:	4b12      	ldr	r3, [pc, #72]	@ (800b3a0 <_strtod_l+0x590>)
 800b356:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b35a:	4650      	mov	r0, sl
 800b35c:	4659      	mov	r1, fp
 800b35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b362:	f7f5 fa9b 	bl	800089c <__aeabi_ddiv>
 800b366:	4682      	mov	sl, r0
 800b368:	468b      	mov	fp, r1
 800b36a:	1124      	asrs	r4, r4, #4
 800b36c:	d0dc      	beq.n	800b328 <_strtod_l+0x518>
 800b36e:	2c1f      	cmp	r4, #31
 800b370:	dd20      	ble.n	800b3b4 <_strtod_l+0x5a4>
 800b372:	2400      	movs	r4, #0
 800b374:	46a0      	mov	r8, r4
 800b376:	940a      	str	r4, [sp, #40]	@ 0x28
 800b378:	46a1      	mov	r9, r4
 800b37a:	9a05      	ldr	r2, [sp, #20]
 800b37c:	2322      	movs	r3, #34	@ 0x22
 800b37e:	f04f 0a00 	mov.w	sl, #0
 800b382:	f04f 0b00 	mov.w	fp, #0
 800b386:	6013      	str	r3, [r2, #0]
 800b388:	e768      	b.n	800b25c <_strtod_l+0x44c>
 800b38a:	bf00      	nop
 800b38c:	0800cc95 	.word	0x0800cc95
 800b390:	0800ceac 	.word	0x0800ceac
 800b394:	0800cc8d 	.word	0x0800cc8d
 800b398:	0800ccc4 	.word	0x0800ccc4
 800b39c:	0800d055 	.word	0x0800d055
 800b3a0:	0800cde0 	.word	0x0800cde0
 800b3a4:	0800cdb8 	.word	0x0800cdb8
 800b3a8:	7ff00000 	.word	0x7ff00000
 800b3ac:	7ca00000 	.word	0x7ca00000
 800b3b0:	7fefffff 	.word	0x7fefffff
 800b3b4:	f014 0310 	ands.w	r3, r4, #16
 800b3b8:	bf18      	it	ne
 800b3ba:	236a      	movne	r3, #106	@ 0x6a
 800b3bc:	4ea9      	ldr	r6, [pc, #676]	@ (800b664 <_strtod_l+0x854>)
 800b3be:	9308      	str	r3, [sp, #32]
 800b3c0:	4650      	mov	r0, sl
 800b3c2:	4659      	mov	r1, fp
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	07e2      	lsls	r2, r4, #31
 800b3c8:	d504      	bpl.n	800b3d4 <_strtod_l+0x5c4>
 800b3ca:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b3ce:	f7f5 f93b 	bl	8000648 <__aeabi_dmul>
 800b3d2:	2301      	movs	r3, #1
 800b3d4:	1064      	asrs	r4, r4, #1
 800b3d6:	f106 0608 	add.w	r6, r6, #8
 800b3da:	d1f4      	bne.n	800b3c6 <_strtod_l+0x5b6>
 800b3dc:	b10b      	cbz	r3, 800b3e2 <_strtod_l+0x5d2>
 800b3de:	4682      	mov	sl, r0
 800b3e0:	468b      	mov	fp, r1
 800b3e2:	9b08      	ldr	r3, [sp, #32]
 800b3e4:	b1b3      	cbz	r3, 800b414 <_strtod_l+0x604>
 800b3e6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b3ea:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	4659      	mov	r1, fp
 800b3f2:	dd0f      	ble.n	800b414 <_strtod_l+0x604>
 800b3f4:	2b1f      	cmp	r3, #31
 800b3f6:	dd55      	ble.n	800b4a4 <_strtod_l+0x694>
 800b3f8:	2b34      	cmp	r3, #52	@ 0x34
 800b3fa:	bfde      	ittt	le
 800b3fc:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800b400:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b404:	4093      	lslle	r3, r2
 800b406:	f04f 0a00 	mov.w	sl, #0
 800b40a:	bfcc      	ite	gt
 800b40c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b410:	ea03 0b01 	andle.w	fp, r3, r1
 800b414:	2200      	movs	r2, #0
 800b416:	2300      	movs	r3, #0
 800b418:	4650      	mov	r0, sl
 800b41a:	4659      	mov	r1, fp
 800b41c:	f7f5 fb7c 	bl	8000b18 <__aeabi_dcmpeq>
 800b420:	2800      	cmp	r0, #0
 800b422:	d1a6      	bne.n	800b372 <_strtod_l+0x562>
 800b424:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b426:	9300      	str	r3, [sp, #0]
 800b428:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b42a:	9805      	ldr	r0, [sp, #20]
 800b42c:	462b      	mov	r3, r5
 800b42e:	463a      	mov	r2, r7
 800b430:	f7ff f8c6 	bl	800a5c0 <__s2b>
 800b434:	900a      	str	r0, [sp, #40]	@ 0x28
 800b436:	2800      	cmp	r0, #0
 800b438:	f43f af05 	beq.w	800b246 <_strtod_l+0x436>
 800b43c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b43e:	2a00      	cmp	r2, #0
 800b440:	eba9 0308 	sub.w	r3, r9, r8
 800b444:	bfa8      	it	ge
 800b446:	2300      	movge	r3, #0
 800b448:	9312      	str	r3, [sp, #72]	@ 0x48
 800b44a:	2400      	movs	r4, #0
 800b44c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b450:	9316      	str	r3, [sp, #88]	@ 0x58
 800b452:	46a0      	mov	r8, r4
 800b454:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b456:	9805      	ldr	r0, [sp, #20]
 800b458:	6859      	ldr	r1, [r3, #4]
 800b45a:	f7ff f809 	bl	800a470 <_Balloc>
 800b45e:	4681      	mov	r9, r0
 800b460:	2800      	cmp	r0, #0
 800b462:	f43f aef4 	beq.w	800b24e <_strtod_l+0x43e>
 800b466:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b468:	691a      	ldr	r2, [r3, #16]
 800b46a:	3202      	adds	r2, #2
 800b46c:	f103 010c 	add.w	r1, r3, #12
 800b470:	0092      	lsls	r2, r2, #2
 800b472:	300c      	adds	r0, #12
 800b474:	f000 ff38 	bl	800c2e8 <memcpy>
 800b478:	ec4b ab10 	vmov	d0, sl, fp
 800b47c:	9805      	ldr	r0, [sp, #20]
 800b47e:	aa1c      	add	r2, sp, #112	@ 0x70
 800b480:	a91b      	add	r1, sp, #108	@ 0x6c
 800b482:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b486:	f7ff fbd7 	bl	800ac38 <__d2b>
 800b48a:	901a      	str	r0, [sp, #104]	@ 0x68
 800b48c:	2800      	cmp	r0, #0
 800b48e:	f43f aede 	beq.w	800b24e <_strtod_l+0x43e>
 800b492:	9805      	ldr	r0, [sp, #20]
 800b494:	2101      	movs	r1, #1
 800b496:	f7ff f929 	bl	800a6ec <__i2b>
 800b49a:	4680      	mov	r8, r0
 800b49c:	b948      	cbnz	r0, 800b4b2 <_strtod_l+0x6a2>
 800b49e:	f04f 0800 	mov.w	r8, #0
 800b4a2:	e6d4      	b.n	800b24e <_strtod_l+0x43e>
 800b4a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b4a8:	fa02 f303 	lsl.w	r3, r2, r3
 800b4ac:	ea03 0a0a 	and.w	sl, r3, sl
 800b4b0:	e7b0      	b.n	800b414 <_strtod_l+0x604>
 800b4b2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b4b4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b4b6:	2d00      	cmp	r5, #0
 800b4b8:	bfab      	itete	ge
 800b4ba:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b4bc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b4be:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b4c0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b4c2:	bfac      	ite	ge
 800b4c4:	18ef      	addge	r7, r5, r3
 800b4c6:	1b5e      	sublt	r6, r3, r5
 800b4c8:	9b08      	ldr	r3, [sp, #32]
 800b4ca:	1aed      	subs	r5, r5, r3
 800b4cc:	4415      	add	r5, r2
 800b4ce:	4b66      	ldr	r3, [pc, #408]	@ (800b668 <_strtod_l+0x858>)
 800b4d0:	3d01      	subs	r5, #1
 800b4d2:	429d      	cmp	r5, r3
 800b4d4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b4d8:	da50      	bge.n	800b57c <_strtod_l+0x76c>
 800b4da:	1b5b      	subs	r3, r3, r5
 800b4dc:	2b1f      	cmp	r3, #31
 800b4de:	eba2 0203 	sub.w	r2, r2, r3
 800b4e2:	f04f 0101 	mov.w	r1, #1
 800b4e6:	dc3d      	bgt.n	800b564 <_strtod_l+0x754>
 800b4e8:	fa01 f303 	lsl.w	r3, r1, r3
 800b4ec:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	9310      	str	r3, [sp, #64]	@ 0x40
 800b4f2:	18bd      	adds	r5, r7, r2
 800b4f4:	9b08      	ldr	r3, [sp, #32]
 800b4f6:	42af      	cmp	r7, r5
 800b4f8:	4416      	add	r6, r2
 800b4fa:	441e      	add	r6, r3
 800b4fc:	463b      	mov	r3, r7
 800b4fe:	bfa8      	it	ge
 800b500:	462b      	movge	r3, r5
 800b502:	42b3      	cmp	r3, r6
 800b504:	bfa8      	it	ge
 800b506:	4633      	movge	r3, r6
 800b508:	2b00      	cmp	r3, #0
 800b50a:	bfc2      	ittt	gt
 800b50c:	1aed      	subgt	r5, r5, r3
 800b50e:	1af6      	subgt	r6, r6, r3
 800b510:	1aff      	subgt	r7, r7, r3
 800b512:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b514:	2b00      	cmp	r3, #0
 800b516:	dd16      	ble.n	800b546 <_strtod_l+0x736>
 800b518:	4641      	mov	r1, r8
 800b51a:	9805      	ldr	r0, [sp, #20]
 800b51c:	461a      	mov	r2, r3
 800b51e:	f7ff f9a5 	bl	800a86c <__pow5mult>
 800b522:	4680      	mov	r8, r0
 800b524:	2800      	cmp	r0, #0
 800b526:	d0ba      	beq.n	800b49e <_strtod_l+0x68e>
 800b528:	4601      	mov	r1, r0
 800b52a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b52c:	9805      	ldr	r0, [sp, #20]
 800b52e:	f7ff f8f3 	bl	800a718 <__multiply>
 800b532:	900e      	str	r0, [sp, #56]	@ 0x38
 800b534:	2800      	cmp	r0, #0
 800b536:	f43f ae8a 	beq.w	800b24e <_strtod_l+0x43e>
 800b53a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b53c:	9805      	ldr	r0, [sp, #20]
 800b53e:	f7fe ffd7 	bl	800a4f0 <_Bfree>
 800b542:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b544:	931a      	str	r3, [sp, #104]	@ 0x68
 800b546:	2d00      	cmp	r5, #0
 800b548:	dc1d      	bgt.n	800b586 <_strtod_l+0x776>
 800b54a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	dd23      	ble.n	800b598 <_strtod_l+0x788>
 800b550:	4649      	mov	r1, r9
 800b552:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b554:	9805      	ldr	r0, [sp, #20]
 800b556:	f7ff f989 	bl	800a86c <__pow5mult>
 800b55a:	4681      	mov	r9, r0
 800b55c:	b9e0      	cbnz	r0, 800b598 <_strtod_l+0x788>
 800b55e:	f04f 0900 	mov.w	r9, #0
 800b562:	e674      	b.n	800b24e <_strtod_l+0x43e>
 800b564:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b568:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b56c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b570:	35e2      	adds	r5, #226	@ 0xe2
 800b572:	fa01 f305 	lsl.w	r3, r1, r5
 800b576:	9310      	str	r3, [sp, #64]	@ 0x40
 800b578:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b57a:	e7ba      	b.n	800b4f2 <_strtod_l+0x6e2>
 800b57c:	2300      	movs	r3, #0
 800b57e:	9310      	str	r3, [sp, #64]	@ 0x40
 800b580:	2301      	movs	r3, #1
 800b582:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b584:	e7b5      	b.n	800b4f2 <_strtod_l+0x6e2>
 800b586:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b588:	9805      	ldr	r0, [sp, #20]
 800b58a:	462a      	mov	r2, r5
 800b58c:	f7ff f9c8 	bl	800a920 <__lshift>
 800b590:	901a      	str	r0, [sp, #104]	@ 0x68
 800b592:	2800      	cmp	r0, #0
 800b594:	d1d9      	bne.n	800b54a <_strtod_l+0x73a>
 800b596:	e65a      	b.n	800b24e <_strtod_l+0x43e>
 800b598:	2e00      	cmp	r6, #0
 800b59a:	dd07      	ble.n	800b5ac <_strtod_l+0x79c>
 800b59c:	4649      	mov	r1, r9
 800b59e:	9805      	ldr	r0, [sp, #20]
 800b5a0:	4632      	mov	r2, r6
 800b5a2:	f7ff f9bd 	bl	800a920 <__lshift>
 800b5a6:	4681      	mov	r9, r0
 800b5a8:	2800      	cmp	r0, #0
 800b5aa:	d0d8      	beq.n	800b55e <_strtod_l+0x74e>
 800b5ac:	2f00      	cmp	r7, #0
 800b5ae:	dd08      	ble.n	800b5c2 <_strtod_l+0x7b2>
 800b5b0:	4641      	mov	r1, r8
 800b5b2:	9805      	ldr	r0, [sp, #20]
 800b5b4:	463a      	mov	r2, r7
 800b5b6:	f7ff f9b3 	bl	800a920 <__lshift>
 800b5ba:	4680      	mov	r8, r0
 800b5bc:	2800      	cmp	r0, #0
 800b5be:	f43f ae46 	beq.w	800b24e <_strtod_l+0x43e>
 800b5c2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b5c4:	9805      	ldr	r0, [sp, #20]
 800b5c6:	464a      	mov	r2, r9
 800b5c8:	f7ff fa32 	bl	800aa30 <__mdiff>
 800b5cc:	4604      	mov	r4, r0
 800b5ce:	2800      	cmp	r0, #0
 800b5d0:	f43f ae3d 	beq.w	800b24e <_strtod_l+0x43e>
 800b5d4:	68c3      	ldr	r3, [r0, #12]
 800b5d6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b5d8:	2300      	movs	r3, #0
 800b5da:	60c3      	str	r3, [r0, #12]
 800b5dc:	4641      	mov	r1, r8
 800b5de:	f7ff fa0b 	bl	800a9f8 <__mcmp>
 800b5e2:	2800      	cmp	r0, #0
 800b5e4:	da46      	bge.n	800b674 <_strtod_l+0x864>
 800b5e6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b5e8:	ea53 030a 	orrs.w	r3, r3, sl
 800b5ec:	d16c      	bne.n	800b6c8 <_strtod_l+0x8b8>
 800b5ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d168      	bne.n	800b6c8 <_strtod_l+0x8b8>
 800b5f6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b5fa:	0d1b      	lsrs	r3, r3, #20
 800b5fc:	051b      	lsls	r3, r3, #20
 800b5fe:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b602:	d961      	bls.n	800b6c8 <_strtod_l+0x8b8>
 800b604:	6963      	ldr	r3, [r4, #20]
 800b606:	b913      	cbnz	r3, 800b60e <_strtod_l+0x7fe>
 800b608:	6923      	ldr	r3, [r4, #16]
 800b60a:	2b01      	cmp	r3, #1
 800b60c:	dd5c      	ble.n	800b6c8 <_strtod_l+0x8b8>
 800b60e:	4621      	mov	r1, r4
 800b610:	2201      	movs	r2, #1
 800b612:	9805      	ldr	r0, [sp, #20]
 800b614:	f7ff f984 	bl	800a920 <__lshift>
 800b618:	4641      	mov	r1, r8
 800b61a:	4604      	mov	r4, r0
 800b61c:	f7ff f9ec 	bl	800a9f8 <__mcmp>
 800b620:	2800      	cmp	r0, #0
 800b622:	dd51      	ble.n	800b6c8 <_strtod_l+0x8b8>
 800b624:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b628:	9a08      	ldr	r2, [sp, #32]
 800b62a:	0d1b      	lsrs	r3, r3, #20
 800b62c:	051b      	lsls	r3, r3, #20
 800b62e:	2a00      	cmp	r2, #0
 800b630:	d06b      	beq.n	800b70a <_strtod_l+0x8fa>
 800b632:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b636:	d868      	bhi.n	800b70a <_strtod_l+0x8fa>
 800b638:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b63c:	f67f ae9d 	bls.w	800b37a <_strtod_l+0x56a>
 800b640:	4b0a      	ldr	r3, [pc, #40]	@ (800b66c <_strtod_l+0x85c>)
 800b642:	4650      	mov	r0, sl
 800b644:	4659      	mov	r1, fp
 800b646:	2200      	movs	r2, #0
 800b648:	f7f4 fffe 	bl	8000648 <__aeabi_dmul>
 800b64c:	4b08      	ldr	r3, [pc, #32]	@ (800b670 <_strtod_l+0x860>)
 800b64e:	400b      	ands	r3, r1
 800b650:	4682      	mov	sl, r0
 800b652:	468b      	mov	fp, r1
 800b654:	2b00      	cmp	r3, #0
 800b656:	f47f ae05 	bne.w	800b264 <_strtod_l+0x454>
 800b65a:	9a05      	ldr	r2, [sp, #20]
 800b65c:	2322      	movs	r3, #34	@ 0x22
 800b65e:	6013      	str	r3, [r2, #0]
 800b660:	e600      	b.n	800b264 <_strtod_l+0x454>
 800b662:	bf00      	nop
 800b664:	0800ced8 	.word	0x0800ced8
 800b668:	fffffc02 	.word	0xfffffc02
 800b66c:	39500000 	.word	0x39500000
 800b670:	7ff00000 	.word	0x7ff00000
 800b674:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b678:	d165      	bne.n	800b746 <_strtod_l+0x936>
 800b67a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b67c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b680:	b35a      	cbz	r2, 800b6da <_strtod_l+0x8ca>
 800b682:	4a9f      	ldr	r2, [pc, #636]	@ (800b900 <_strtod_l+0xaf0>)
 800b684:	4293      	cmp	r3, r2
 800b686:	d12b      	bne.n	800b6e0 <_strtod_l+0x8d0>
 800b688:	9b08      	ldr	r3, [sp, #32]
 800b68a:	4651      	mov	r1, sl
 800b68c:	b303      	cbz	r3, 800b6d0 <_strtod_l+0x8c0>
 800b68e:	4b9d      	ldr	r3, [pc, #628]	@ (800b904 <_strtod_l+0xaf4>)
 800b690:	465a      	mov	r2, fp
 800b692:	4013      	ands	r3, r2
 800b694:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b698:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b69c:	d81b      	bhi.n	800b6d6 <_strtod_l+0x8c6>
 800b69e:	0d1b      	lsrs	r3, r3, #20
 800b6a0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b6a4:	fa02 f303 	lsl.w	r3, r2, r3
 800b6a8:	4299      	cmp	r1, r3
 800b6aa:	d119      	bne.n	800b6e0 <_strtod_l+0x8d0>
 800b6ac:	4b96      	ldr	r3, [pc, #600]	@ (800b908 <_strtod_l+0xaf8>)
 800b6ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b6b0:	429a      	cmp	r2, r3
 800b6b2:	d102      	bne.n	800b6ba <_strtod_l+0x8aa>
 800b6b4:	3101      	adds	r1, #1
 800b6b6:	f43f adca 	beq.w	800b24e <_strtod_l+0x43e>
 800b6ba:	4b92      	ldr	r3, [pc, #584]	@ (800b904 <_strtod_l+0xaf4>)
 800b6bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b6be:	401a      	ands	r2, r3
 800b6c0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b6c4:	f04f 0a00 	mov.w	sl, #0
 800b6c8:	9b08      	ldr	r3, [sp, #32]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d1b8      	bne.n	800b640 <_strtod_l+0x830>
 800b6ce:	e5c9      	b.n	800b264 <_strtod_l+0x454>
 800b6d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b6d4:	e7e8      	b.n	800b6a8 <_strtod_l+0x898>
 800b6d6:	4613      	mov	r3, r2
 800b6d8:	e7e6      	b.n	800b6a8 <_strtod_l+0x898>
 800b6da:	ea53 030a 	orrs.w	r3, r3, sl
 800b6de:	d0a1      	beq.n	800b624 <_strtod_l+0x814>
 800b6e0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b6e2:	b1db      	cbz	r3, 800b71c <_strtod_l+0x90c>
 800b6e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b6e6:	4213      	tst	r3, r2
 800b6e8:	d0ee      	beq.n	800b6c8 <_strtod_l+0x8b8>
 800b6ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b6ec:	9a08      	ldr	r2, [sp, #32]
 800b6ee:	4650      	mov	r0, sl
 800b6f0:	4659      	mov	r1, fp
 800b6f2:	b1bb      	cbz	r3, 800b724 <_strtod_l+0x914>
 800b6f4:	f7ff fb6e 	bl	800add4 <sulp>
 800b6f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b6fc:	ec53 2b10 	vmov	r2, r3, d0
 800b700:	f7f4 fdec 	bl	80002dc <__adddf3>
 800b704:	4682      	mov	sl, r0
 800b706:	468b      	mov	fp, r1
 800b708:	e7de      	b.n	800b6c8 <_strtod_l+0x8b8>
 800b70a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b70e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b712:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b716:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800b71a:	e7d5      	b.n	800b6c8 <_strtod_l+0x8b8>
 800b71c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b71e:	ea13 0f0a 	tst.w	r3, sl
 800b722:	e7e1      	b.n	800b6e8 <_strtod_l+0x8d8>
 800b724:	f7ff fb56 	bl	800add4 <sulp>
 800b728:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b72c:	ec53 2b10 	vmov	r2, r3, d0
 800b730:	f7f4 fdd2 	bl	80002d8 <__aeabi_dsub>
 800b734:	2200      	movs	r2, #0
 800b736:	2300      	movs	r3, #0
 800b738:	4682      	mov	sl, r0
 800b73a:	468b      	mov	fp, r1
 800b73c:	f7f5 f9ec 	bl	8000b18 <__aeabi_dcmpeq>
 800b740:	2800      	cmp	r0, #0
 800b742:	d0c1      	beq.n	800b6c8 <_strtod_l+0x8b8>
 800b744:	e619      	b.n	800b37a <_strtod_l+0x56a>
 800b746:	4641      	mov	r1, r8
 800b748:	4620      	mov	r0, r4
 800b74a:	f7ff facd 	bl	800ace8 <__ratio>
 800b74e:	ec57 6b10 	vmov	r6, r7, d0
 800b752:	2200      	movs	r2, #0
 800b754:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b758:	4630      	mov	r0, r6
 800b75a:	4639      	mov	r1, r7
 800b75c:	f7f5 f9f0 	bl	8000b40 <__aeabi_dcmple>
 800b760:	2800      	cmp	r0, #0
 800b762:	d06f      	beq.n	800b844 <_strtod_l+0xa34>
 800b764:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b766:	2b00      	cmp	r3, #0
 800b768:	d17a      	bne.n	800b860 <_strtod_l+0xa50>
 800b76a:	f1ba 0f00 	cmp.w	sl, #0
 800b76e:	d158      	bne.n	800b822 <_strtod_l+0xa12>
 800b770:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b772:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b776:	2b00      	cmp	r3, #0
 800b778:	d15a      	bne.n	800b830 <_strtod_l+0xa20>
 800b77a:	4b64      	ldr	r3, [pc, #400]	@ (800b90c <_strtod_l+0xafc>)
 800b77c:	2200      	movs	r2, #0
 800b77e:	4630      	mov	r0, r6
 800b780:	4639      	mov	r1, r7
 800b782:	f7f5 f9d3 	bl	8000b2c <__aeabi_dcmplt>
 800b786:	2800      	cmp	r0, #0
 800b788:	d159      	bne.n	800b83e <_strtod_l+0xa2e>
 800b78a:	4630      	mov	r0, r6
 800b78c:	4639      	mov	r1, r7
 800b78e:	4b60      	ldr	r3, [pc, #384]	@ (800b910 <_strtod_l+0xb00>)
 800b790:	2200      	movs	r2, #0
 800b792:	f7f4 ff59 	bl	8000648 <__aeabi_dmul>
 800b796:	4606      	mov	r6, r0
 800b798:	460f      	mov	r7, r1
 800b79a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b79e:	9606      	str	r6, [sp, #24]
 800b7a0:	9307      	str	r3, [sp, #28]
 800b7a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b7a6:	4d57      	ldr	r5, [pc, #348]	@ (800b904 <_strtod_l+0xaf4>)
 800b7a8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b7ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b7ae:	401d      	ands	r5, r3
 800b7b0:	4b58      	ldr	r3, [pc, #352]	@ (800b914 <_strtod_l+0xb04>)
 800b7b2:	429d      	cmp	r5, r3
 800b7b4:	f040 80b2 	bne.w	800b91c <_strtod_l+0xb0c>
 800b7b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b7ba:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b7be:	ec4b ab10 	vmov	d0, sl, fp
 800b7c2:	f7ff f9c9 	bl	800ab58 <__ulp>
 800b7c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b7ca:	ec51 0b10 	vmov	r0, r1, d0
 800b7ce:	f7f4 ff3b 	bl	8000648 <__aeabi_dmul>
 800b7d2:	4652      	mov	r2, sl
 800b7d4:	465b      	mov	r3, fp
 800b7d6:	f7f4 fd81 	bl	80002dc <__adddf3>
 800b7da:	460b      	mov	r3, r1
 800b7dc:	4949      	ldr	r1, [pc, #292]	@ (800b904 <_strtod_l+0xaf4>)
 800b7de:	4a4e      	ldr	r2, [pc, #312]	@ (800b918 <_strtod_l+0xb08>)
 800b7e0:	4019      	ands	r1, r3
 800b7e2:	4291      	cmp	r1, r2
 800b7e4:	4682      	mov	sl, r0
 800b7e6:	d942      	bls.n	800b86e <_strtod_l+0xa5e>
 800b7e8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b7ea:	4b47      	ldr	r3, [pc, #284]	@ (800b908 <_strtod_l+0xaf8>)
 800b7ec:	429a      	cmp	r2, r3
 800b7ee:	d103      	bne.n	800b7f8 <_strtod_l+0x9e8>
 800b7f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b7f2:	3301      	adds	r3, #1
 800b7f4:	f43f ad2b 	beq.w	800b24e <_strtod_l+0x43e>
 800b7f8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b908 <_strtod_l+0xaf8>
 800b7fc:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800b800:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b802:	9805      	ldr	r0, [sp, #20]
 800b804:	f7fe fe74 	bl	800a4f0 <_Bfree>
 800b808:	9805      	ldr	r0, [sp, #20]
 800b80a:	4649      	mov	r1, r9
 800b80c:	f7fe fe70 	bl	800a4f0 <_Bfree>
 800b810:	9805      	ldr	r0, [sp, #20]
 800b812:	4641      	mov	r1, r8
 800b814:	f7fe fe6c 	bl	800a4f0 <_Bfree>
 800b818:	9805      	ldr	r0, [sp, #20]
 800b81a:	4621      	mov	r1, r4
 800b81c:	f7fe fe68 	bl	800a4f0 <_Bfree>
 800b820:	e618      	b.n	800b454 <_strtod_l+0x644>
 800b822:	f1ba 0f01 	cmp.w	sl, #1
 800b826:	d103      	bne.n	800b830 <_strtod_l+0xa20>
 800b828:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	f43f ada5 	beq.w	800b37a <_strtod_l+0x56a>
 800b830:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b8e0 <_strtod_l+0xad0>
 800b834:	4f35      	ldr	r7, [pc, #212]	@ (800b90c <_strtod_l+0xafc>)
 800b836:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b83a:	2600      	movs	r6, #0
 800b83c:	e7b1      	b.n	800b7a2 <_strtod_l+0x992>
 800b83e:	4f34      	ldr	r7, [pc, #208]	@ (800b910 <_strtod_l+0xb00>)
 800b840:	2600      	movs	r6, #0
 800b842:	e7aa      	b.n	800b79a <_strtod_l+0x98a>
 800b844:	4b32      	ldr	r3, [pc, #200]	@ (800b910 <_strtod_l+0xb00>)
 800b846:	4630      	mov	r0, r6
 800b848:	4639      	mov	r1, r7
 800b84a:	2200      	movs	r2, #0
 800b84c:	f7f4 fefc 	bl	8000648 <__aeabi_dmul>
 800b850:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b852:	4606      	mov	r6, r0
 800b854:	460f      	mov	r7, r1
 800b856:	2b00      	cmp	r3, #0
 800b858:	d09f      	beq.n	800b79a <_strtod_l+0x98a>
 800b85a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b85e:	e7a0      	b.n	800b7a2 <_strtod_l+0x992>
 800b860:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b8e8 <_strtod_l+0xad8>
 800b864:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b868:	ec57 6b17 	vmov	r6, r7, d7
 800b86c:	e799      	b.n	800b7a2 <_strtod_l+0x992>
 800b86e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b872:	9b08      	ldr	r3, [sp, #32]
 800b874:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d1c1      	bne.n	800b800 <_strtod_l+0x9f0>
 800b87c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b880:	0d1b      	lsrs	r3, r3, #20
 800b882:	051b      	lsls	r3, r3, #20
 800b884:	429d      	cmp	r5, r3
 800b886:	d1bb      	bne.n	800b800 <_strtod_l+0x9f0>
 800b888:	4630      	mov	r0, r6
 800b88a:	4639      	mov	r1, r7
 800b88c:	f7f5 fa3c 	bl	8000d08 <__aeabi_d2lz>
 800b890:	f7f4 feac 	bl	80005ec <__aeabi_l2d>
 800b894:	4602      	mov	r2, r0
 800b896:	460b      	mov	r3, r1
 800b898:	4630      	mov	r0, r6
 800b89a:	4639      	mov	r1, r7
 800b89c:	f7f4 fd1c 	bl	80002d8 <__aeabi_dsub>
 800b8a0:	460b      	mov	r3, r1
 800b8a2:	4602      	mov	r2, r0
 800b8a4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b8a8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b8ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b8ae:	ea46 060a 	orr.w	r6, r6, sl
 800b8b2:	431e      	orrs	r6, r3
 800b8b4:	d06f      	beq.n	800b996 <_strtod_l+0xb86>
 800b8b6:	a30e      	add	r3, pc, #56	@ (adr r3, 800b8f0 <_strtod_l+0xae0>)
 800b8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8bc:	f7f5 f936 	bl	8000b2c <__aeabi_dcmplt>
 800b8c0:	2800      	cmp	r0, #0
 800b8c2:	f47f accf 	bne.w	800b264 <_strtod_l+0x454>
 800b8c6:	a30c      	add	r3, pc, #48	@ (adr r3, 800b8f8 <_strtod_l+0xae8>)
 800b8c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b8d0:	f7f5 f94a 	bl	8000b68 <__aeabi_dcmpgt>
 800b8d4:	2800      	cmp	r0, #0
 800b8d6:	d093      	beq.n	800b800 <_strtod_l+0x9f0>
 800b8d8:	e4c4      	b.n	800b264 <_strtod_l+0x454>
 800b8da:	bf00      	nop
 800b8dc:	f3af 8000 	nop.w
 800b8e0:	00000000 	.word	0x00000000
 800b8e4:	bff00000 	.word	0xbff00000
 800b8e8:	00000000 	.word	0x00000000
 800b8ec:	3ff00000 	.word	0x3ff00000
 800b8f0:	94a03595 	.word	0x94a03595
 800b8f4:	3fdfffff 	.word	0x3fdfffff
 800b8f8:	35afe535 	.word	0x35afe535
 800b8fc:	3fe00000 	.word	0x3fe00000
 800b900:	000fffff 	.word	0x000fffff
 800b904:	7ff00000 	.word	0x7ff00000
 800b908:	7fefffff 	.word	0x7fefffff
 800b90c:	3ff00000 	.word	0x3ff00000
 800b910:	3fe00000 	.word	0x3fe00000
 800b914:	7fe00000 	.word	0x7fe00000
 800b918:	7c9fffff 	.word	0x7c9fffff
 800b91c:	9b08      	ldr	r3, [sp, #32]
 800b91e:	b323      	cbz	r3, 800b96a <_strtod_l+0xb5a>
 800b920:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b924:	d821      	bhi.n	800b96a <_strtod_l+0xb5a>
 800b926:	a328      	add	r3, pc, #160	@ (adr r3, 800b9c8 <_strtod_l+0xbb8>)
 800b928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b92c:	4630      	mov	r0, r6
 800b92e:	4639      	mov	r1, r7
 800b930:	f7f5 f906 	bl	8000b40 <__aeabi_dcmple>
 800b934:	b1a0      	cbz	r0, 800b960 <_strtod_l+0xb50>
 800b936:	4639      	mov	r1, r7
 800b938:	4630      	mov	r0, r6
 800b93a:	f7f5 f95d 	bl	8000bf8 <__aeabi_d2uiz>
 800b93e:	2801      	cmp	r0, #1
 800b940:	bf38      	it	cc
 800b942:	2001      	movcc	r0, #1
 800b944:	f7f4 fe06 	bl	8000554 <__aeabi_ui2d>
 800b948:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b94a:	4606      	mov	r6, r0
 800b94c:	460f      	mov	r7, r1
 800b94e:	b9fb      	cbnz	r3, 800b990 <_strtod_l+0xb80>
 800b950:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b954:	9014      	str	r0, [sp, #80]	@ 0x50
 800b956:	9315      	str	r3, [sp, #84]	@ 0x54
 800b958:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b95c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b960:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b962:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b966:	1b5b      	subs	r3, r3, r5
 800b968:	9311      	str	r3, [sp, #68]	@ 0x44
 800b96a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b96e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b972:	f7ff f8f1 	bl	800ab58 <__ulp>
 800b976:	4650      	mov	r0, sl
 800b978:	ec53 2b10 	vmov	r2, r3, d0
 800b97c:	4659      	mov	r1, fp
 800b97e:	f7f4 fe63 	bl	8000648 <__aeabi_dmul>
 800b982:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b986:	f7f4 fca9 	bl	80002dc <__adddf3>
 800b98a:	4682      	mov	sl, r0
 800b98c:	468b      	mov	fp, r1
 800b98e:	e770      	b.n	800b872 <_strtod_l+0xa62>
 800b990:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b994:	e7e0      	b.n	800b958 <_strtod_l+0xb48>
 800b996:	a30e      	add	r3, pc, #56	@ (adr r3, 800b9d0 <_strtod_l+0xbc0>)
 800b998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b99c:	f7f5 f8c6 	bl	8000b2c <__aeabi_dcmplt>
 800b9a0:	e798      	b.n	800b8d4 <_strtod_l+0xac4>
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b9a6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b9a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b9aa:	6013      	str	r3, [r2, #0]
 800b9ac:	f7ff ba6d 	b.w	800ae8a <_strtod_l+0x7a>
 800b9b0:	2a65      	cmp	r2, #101	@ 0x65
 800b9b2:	f43f ab66 	beq.w	800b082 <_strtod_l+0x272>
 800b9b6:	2a45      	cmp	r2, #69	@ 0x45
 800b9b8:	f43f ab63 	beq.w	800b082 <_strtod_l+0x272>
 800b9bc:	2301      	movs	r3, #1
 800b9be:	f7ff bb9e 	b.w	800b0fe <_strtod_l+0x2ee>
 800b9c2:	bf00      	nop
 800b9c4:	f3af 8000 	nop.w
 800b9c8:	ffc00000 	.word	0xffc00000
 800b9cc:	41dfffff 	.word	0x41dfffff
 800b9d0:	94a03595 	.word	0x94a03595
 800b9d4:	3fcfffff 	.word	0x3fcfffff

0800b9d8 <_strtod_r>:
 800b9d8:	4b01      	ldr	r3, [pc, #4]	@ (800b9e0 <_strtod_r+0x8>)
 800b9da:	f7ff ba19 	b.w	800ae10 <_strtod_l>
 800b9de:	bf00      	nop
 800b9e0:	20000fac 	.word	0x20000fac

0800b9e4 <_strtol_l.constprop.0>:
 800b9e4:	2b24      	cmp	r3, #36	@ 0x24
 800b9e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9ea:	4686      	mov	lr, r0
 800b9ec:	4690      	mov	r8, r2
 800b9ee:	d801      	bhi.n	800b9f4 <_strtol_l.constprop.0+0x10>
 800b9f0:	2b01      	cmp	r3, #1
 800b9f2:	d106      	bne.n	800ba02 <_strtol_l.constprop.0+0x1e>
 800b9f4:	f7fd fdbc 	bl	8009570 <__errno>
 800b9f8:	2316      	movs	r3, #22
 800b9fa:	6003      	str	r3, [r0, #0]
 800b9fc:	2000      	movs	r0, #0
 800b9fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba02:	4834      	ldr	r0, [pc, #208]	@ (800bad4 <_strtol_l.constprop.0+0xf0>)
 800ba04:	460d      	mov	r5, r1
 800ba06:	462a      	mov	r2, r5
 800ba08:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ba0c:	5d06      	ldrb	r6, [r0, r4]
 800ba0e:	f016 0608 	ands.w	r6, r6, #8
 800ba12:	d1f8      	bne.n	800ba06 <_strtol_l.constprop.0+0x22>
 800ba14:	2c2d      	cmp	r4, #45	@ 0x2d
 800ba16:	d12d      	bne.n	800ba74 <_strtol_l.constprop.0+0x90>
 800ba18:	782c      	ldrb	r4, [r5, #0]
 800ba1a:	2601      	movs	r6, #1
 800ba1c:	1c95      	adds	r5, r2, #2
 800ba1e:	f033 0210 	bics.w	r2, r3, #16
 800ba22:	d109      	bne.n	800ba38 <_strtol_l.constprop.0+0x54>
 800ba24:	2c30      	cmp	r4, #48	@ 0x30
 800ba26:	d12a      	bne.n	800ba7e <_strtol_l.constprop.0+0x9a>
 800ba28:	782a      	ldrb	r2, [r5, #0]
 800ba2a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ba2e:	2a58      	cmp	r2, #88	@ 0x58
 800ba30:	d125      	bne.n	800ba7e <_strtol_l.constprop.0+0x9a>
 800ba32:	786c      	ldrb	r4, [r5, #1]
 800ba34:	2310      	movs	r3, #16
 800ba36:	3502      	adds	r5, #2
 800ba38:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ba3c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800ba40:	2200      	movs	r2, #0
 800ba42:	fbbc f9f3 	udiv	r9, ip, r3
 800ba46:	4610      	mov	r0, r2
 800ba48:	fb03 ca19 	mls	sl, r3, r9, ip
 800ba4c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ba50:	2f09      	cmp	r7, #9
 800ba52:	d81b      	bhi.n	800ba8c <_strtol_l.constprop.0+0xa8>
 800ba54:	463c      	mov	r4, r7
 800ba56:	42a3      	cmp	r3, r4
 800ba58:	dd27      	ble.n	800baaa <_strtol_l.constprop.0+0xc6>
 800ba5a:	1c57      	adds	r7, r2, #1
 800ba5c:	d007      	beq.n	800ba6e <_strtol_l.constprop.0+0x8a>
 800ba5e:	4581      	cmp	r9, r0
 800ba60:	d320      	bcc.n	800baa4 <_strtol_l.constprop.0+0xc0>
 800ba62:	d101      	bne.n	800ba68 <_strtol_l.constprop.0+0x84>
 800ba64:	45a2      	cmp	sl, r4
 800ba66:	db1d      	blt.n	800baa4 <_strtol_l.constprop.0+0xc0>
 800ba68:	fb00 4003 	mla	r0, r0, r3, r4
 800ba6c:	2201      	movs	r2, #1
 800ba6e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ba72:	e7eb      	b.n	800ba4c <_strtol_l.constprop.0+0x68>
 800ba74:	2c2b      	cmp	r4, #43	@ 0x2b
 800ba76:	bf04      	itt	eq
 800ba78:	782c      	ldrbeq	r4, [r5, #0]
 800ba7a:	1c95      	addeq	r5, r2, #2
 800ba7c:	e7cf      	b.n	800ba1e <_strtol_l.constprop.0+0x3a>
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d1da      	bne.n	800ba38 <_strtol_l.constprop.0+0x54>
 800ba82:	2c30      	cmp	r4, #48	@ 0x30
 800ba84:	bf0c      	ite	eq
 800ba86:	2308      	moveq	r3, #8
 800ba88:	230a      	movne	r3, #10
 800ba8a:	e7d5      	b.n	800ba38 <_strtol_l.constprop.0+0x54>
 800ba8c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ba90:	2f19      	cmp	r7, #25
 800ba92:	d801      	bhi.n	800ba98 <_strtol_l.constprop.0+0xb4>
 800ba94:	3c37      	subs	r4, #55	@ 0x37
 800ba96:	e7de      	b.n	800ba56 <_strtol_l.constprop.0+0x72>
 800ba98:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ba9c:	2f19      	cmp	r7, #25
 800ba9e:	d804      	bhi.n	800baaa <_strtol_l.constprop.0+0xc6>
 800baa0:	3c57      	subs	r4, #87	@ 0x57
 800baa2:	e7d8      	b.n	800ba56 <_strtol_l.constprop.0+0x72>
 800baa4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800baa8:	e7e1      	b.n	800ba6e <_strtol_l.constprop.0+0x8a>
 800baaa:	1c53      	adds	r3, r2, #1
 800baac:	d108      	bne.n	800bac0 <_strtol_l.constprop.0+0xdc>
 800baae:	2322      	movs	r3, #34	@ 0x22
 800bab0:	f8ce 3000 	str.w	r3, [lr]
 800bab4:	4660      	mov	r0, ip
 800bab6:	f1b8 0f00 	cmp.w	r8, #0
 800baba:	d0a0      	beq.n	800b9fe <_strtol_l.constprop.0+0x1a>
 800babc:	1e69      	subs	r1, r5, #1
 800babe:	e006      	b.n	800bace <_strtol_l.constprop.0+0xea>
 800bac0:	b106      	cbz	r6, 800bac4 <_strtol_l.constprop.0+0xe0>
 800bac2:	4240      	negs	r0, r0
 800bac4:	f1b8 0f00 	cmp.w	r8, #0
 800bac8:	d099      	beq.n	800b9fe <_strtol_l.constprop.0+0x1a>
 800baca:	2a00      	cmp	r2, #0
 800bacc:	d1f6      	bne.n	800babc <_strtol_l.constprop.0+0xd8>
 800bace:	f8c8 1000 	str.w	r1, [r8]
 800bad2:	e794      	b.n	800b9fe <_strtol_l.constprop.0+0x1a>
 800bad4:	0800cf01 	.word	0x0800cf01

0800bad8 <_strtol_r>:
 800bad8:	f7ff bf84 	b.w	800b9e4 <_strtol_l.constprop.0>

0800badc <__ssputs_r>:
 800badc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bae0:	688e      	ldr	r6, [r1, #8]
 800bae2:	461f      	mov	r7, r3
 800bae4:	42be      	cmp	r6, r7
 800bae6:	680b      	ldr	r3, [r1, #0]
 800bae8:	4682      	mov	sl, r0
 800baea:	460c      	mov	r4, r1
 800baec:	4690      	mov	r8, r2
 800baee:	d82d      	bhi.n	800bb4c <__ssputs_r+0x70>
 800baf0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800baf4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800baf8:	d026      	beq.n	800bb48 <__ssputs_r+0x6c>
 800bafa:	6965      	ldr	r5, [r4, #20]
 800bafc:	6909      	ldr	r1, [r1, #16]
 800bafe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bb02:	eba3 0901 	sub.w	r9, r3, r1
 800bb06:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bb0a:	1c7b      	adds	r3, r7, #1
 800bb0c:	444b      	add	r3, r9
 800bb0e:	106d      	asrs	r5, r5, #1
 800bb10:	429d      	cmp	r5, r3
 800bb12:	bf38      	it	cc
 800bb14:	461d      	movcc	r5, r3
 800bb16:	0553      	lsls	r3, r2, #21
 800bb18:	d527      	bpl.n	800bb6a <__ssputs_r+0x8e>
 800bb1a:	4629      	mov	r1, r5
 800bb1c:	f7fe fc1c 	bl	800a358 <_malloc_r>
 800bb20:	4606      	mov	r6, r0
 800bb22:	b360      	cbz	r0, 800bb7e <__ssputs_r+0xa2>
 800bb24:	6921      	ldr	r1, [r4, #16]
 800bb26:	464a      	mov	r2, r9
 800bb28:	f000 fbde 	bl	800c2e8 <memcpy>
 800bb2c:	89a3      	ldrh	r3, [r4, #12]
 800bb2e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bb32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb36:	81a3      	strh	r3, [r4, #12]
 800bb38:	6126      	str	r6, [r4, #16]
 800bb3a:	6165      	str	r5, [r4, #20]
 800bb3c:	444e      	add	r6, r9
 800bb3e:	eba5 0509 	sub.w	r5, r5, r9
 800bb42:	6026      	str	r6, [r4, #0]
 800bb44:	60a5      	str	r5, [r4, #8]
 800bb46:	463e      	mov	r6, r7
 800bb48:	42be      	cmp	r6, r7
 800bb4a:	d900      	bls.n	800bb4e <__ssputs_r+0x72>
 800bb4c:	463e      	mov	r6, r7
 800bb4e:	6820      	ldr	r0, [r4, #0]
 800bb50:	4632      	mov	r2, r6
 800bb52:	4641      	mov	r1, r8
 800bb54:	f000 fb6a 	bl	800c22c <memmove>
 800bb58:	68a3      	ldr	r3, [r4, #8]
 800bb5a:	1b9b      	subs	r3, r3, r6
 800bb5c:	60a3      	str	r3, [r4, #8]
 800bb5e:	6823      	ldr	r3, [r4, #0]
 800bb60:	4433      	add	r3, r6
 800bb62:	6023      	str	r3, [r4, #0]
 800bb64:	2000      	movs	r0, #0
 800bb66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb6a:	462a      	mov	r2, r5
 800bb6c:	f000 ff51 	bl	800ca12 <_realloc_r>
 800bb70:	4606      	mov	r6, r0
 800bb72:	2800      	cmp	r0, #0
 800bb74:	d1e0      	bne.n	800bb38 <__ssputs_r+0x5c>
 800bb76:	6921      	ldr	r1, [r4, #16]
 800bb78:	4650      	mov	r0, sl
 800bb7a:	f7fe fb79 	bl	800a270 <_free_r>
 800bb7e:	230c      	movs	r3, #12
 800bb80:	f8ca 3000 	str.w	r3, [sl]
 800bb84:	89a3      	ldrh	r3, [r4, #12]
 800bb86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb8a:	81a3      	strh	r3, [r4, #12]
 800bb8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bb90:	e7e9      	b.n	800bb66 <__ssputs_r+0x8a>
	...

0800bb94 <_svfiprintf_r>:
 800bb94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb98:	4698      	mov	r8, r3
 800bb9a:	898b      	ldrh	r3, [r1, #12]
 800bb9c:	061b      	lsls	r3, r3, #24
 800bb9e:	b09d      	sub	sp, #116	@ 0x74
 800bba0:	4607      	mov	r7, r0
 800bba2:	460d      	mov	r5, r1
 800bba4:	4614      	mov	r4, r2
 800bba6:	d510      	bpl.n	800bbca <_svfiprintf_r+0x36>
 800bba8:	690b      	ldr	r3, [r1, #16]
 800bbaa:	b973      	cbnz	r3, 800bbca <_svfiprintf_r+0x36>
 800bbac:	2140      	movs	r1, #64	@ 0x40
 800bbae:	f7fe fbd3 	bl	800a358 <_malloc_r>
 800bbb2:	6028      	str	r0, [r5, #0]
 800bbb4:	6128      	str	r0, [r5, #16]
 800bbb6:	b930      	cbnz	r0, 800bbc6 <_svfiprintf_r+0x32>
 800bbb8:	230c      	movs	r3, #12
 800bbba:	603b      	str	r3, [r7, #0]
 800bbbc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bbc0:	b01d      	add	sp, #116	@ 0x74
 800bbc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbc6:	2340      	movs	r3, #64	@ 0x40
 800bbc8:	616b      	str	r3, [r5, #20]
 800bbca:	2300      	movs	r3, #0
 800bbcc:	9309      	str	r3, [sp, #36]	@ 0x24
 800bbce:	2320      	movs	r3, #32
 800bbd0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bbd4:	f8cd 800c 	str.w	r8, [sp, #12]
 800bbd8:	2330      	movs	r3, #48	@ 0x30
 800bbda:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bd78 <_svfiprintf_r+0x1e4>
 800bbde:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bbe2:	f04f 0901 	mov.w	r9, #1
 800bbe6:	4623      	mov	r3, r4
 800bbe8:	469a      	mov	sl, r3
 800bbea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bbee:	b10a      	cbz	r2, 800bbf4 <_svfiprintf_r+0x60>
 800bbf0:	2a25      	cmp	r2, #37	@ 0x25
 800bbf2:	d1f9      	bne.n	800bbe8 <_svfiprintf_r+0x54>
 800bbf4:	ebba 0b04 	subs.w	fp, sl, r4
 800bbf8:	d00b      	beq.n	800bc12 <_svfiprintf_r+0x7e>
 800bbfa:	465b      	mov	r3, fp
 800bbfc:	4622      	mov	r2, r4
 800bbfe:	4629      	mov	r1, r5
 800bc00:	4638      	mov	r0, r7
 800bc02:	f7ff ff6b 	bl	800badc <__ssputs_r>
 800bc06:	3001      	adds	r0, #1
 800bc08:	f000 80a7 	beq.w	800bd5a <_svfiprintf_r+0x1c6>
 800bc0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bc0e:	445a      	add	r2, fp
 800bc10:	9209      	str	r2, [sp, #36]	@ 0x24
 800bc12:	f89a 3000 	ldrb.w	r3, [sl]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	f000 809f 	beq.w	800bd5a <_svfiprintf_r+0x1c6>
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bc22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc26:	f10a 0a01 	add.w	sl, sl, #1
 800bc2a:	9304      	str	r3, [sp, #16]
 800bc2c:	9307      	str	r3, [sp, #28]
 800bc2e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bc32:	931a      	str	r3, [sp, #104]	@ 0x68
 800bc34:	4654      	mov	r4, sl
 800bc36:	2205      	movs	r2, #5
 800bc38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc3c:	484e      	ldr	r0, [pc, #312]	@ (800bd78 <_svfiprintf_r+0x1e4>)
 800bc3e:	f7f4 faef 	bl	8000220 <memchr>
 800bc42:	9a04      	ldr	r2, [sp, #16]
 800bc44:	b9d8      	cbnz	r0, 800bc7e <_svfiprintf_r+0xea>
 800bc46:	06d0      	lsls	r0, r2, #27
 800bc48:	bf44      	itt	mi
 800bc4a:	2320      	movmi	r3, #32
 800bc4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc50:	0711      	lsls	r1, r2, #28
 800bc52:	bf44      	itt	mi
 800bc54:	232b      	movmi	r3, #43	@ 0x2b
 800bc56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc5a:	f89a 3000 	ldrb.w	r3, [sl]
 800bc5e:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc60:	d015      	beq.n	800bc8e <_svfiprintf_r+0xfa>
 800bc62:	9a07      	ldr	r2, [sp, #28]
 800bc64:	4654      	mov	r4, sl
 800bc66:	2000      	movs	r0, #0
 800bc68:	f04f 0c0a 	mov.w	ip, #10
 800bc6c:	4621      	mov	r1, r4
 800bc6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc72:	3b30      	subs	r3, #48	@ 0x30
 800bc74:	2b09      	cmp	r3, #9
 800bc76:	d94b      	bls.n	800bd10 <_svfiprintf_r+0x17c>
 800bc78:	b1b0      	cbz	r0, 800bca8 <_svfiprintf_r+0x114>
 800bc7a:	9207      	str	r2, [sp, #28]
 800bc7c:	e014      	b.n	800bca8 <_svfiprintf_r+0x114>
 800bc7e:	eba0 0308 	sub.w	r3, r0, r8
 800bc82:	fa09 f303 	lsl.w	r3, r9, r3
 800bc86:	4313      	orrs	r3, r2
 800bc88:	9304      	str	r3, [sp, #16]
 800bc8a:	46a2      	mov	sl, r4
 800bc8c:	e7d2      	b.n	800bc34 <_svfiprintf_r+0xa0>
 800bc8e:	9b03      	ldr	r3, [sp, #12]
 800bc90:	1d19      	adds	r1, r3, #4
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	9103      	str	r1, [sp, #12]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	bfbb      	ittet	lt
 800bc9a:	425b      	neglt	r3, r3
 800bc9c:	f042 0202 	orrlt.w	r2, r2, #2
 800bca0:	9307      	strge	r3, [sp, #28]
 800bca2:	9307      	strlt	r3, [sp, #28]
 800bca4:	bfb8      	it	lt
 800bca6:	9204      	strlt	r2, [sp, #16]
 800bca8:	7823      	ldrb	r3, [r4, #0]
 800bcaa:	2b2e      	cmp	r3, #46	@ 0x2e
 800bcac:	d10a      	bne.n	800bcc4 <_svfiprintf_r+0x130>
 800bcae:	7863      	ldrb	r3, [r4, #1]
 800bcb0:	2b2a      	cmp	r3, #42	@ 0x2a
 800bcb2:	d132      	bne.n	800bd1a <_svfiprintf_r+0x186>
 800bcb4:	9b03      	ldr	r3, [sp, #12]
 800bcb6:	1d1a      	adds	r2, r3, #4
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	9203      	str	r2, [sp, #12]
 800bcbc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bcc0:	3402      	adds	r4, #2
 800bcc2:	9305      	str	r3, [sp, #20]
 800bcc4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bd88 <_svfiprintf_r+0x1f4>
 800bcc8:	7821      	ldrb	r1, [r4, #0]
 800bcca:	2203      	movs	r2, #3
 800bccc:	4650      	mov	r0, sl
 800bcce:	f7f4 faa7 	bl	8000220 <memchr>
 800bcd2:	b138      	cbz	r0, 800bce4 <_svfiprintf_r+0x150>
 800bcd4:	9b04      	ldr	r3, [sp, #16]
 800bcd6:	eba0 000a 	sub.w	r0, r0, sl
 800bcda:	2240      	movs	r2, #64	@ 0x40
 800bcdc:	4082      	lsls	r2, r0
 800bcde:	4313      	orrs	r3, r2
 800bce0:	3401      	adds	r4, #1
 800bce2:	9304      	str	r3, [sp, #16]
 800bce4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bce8:	4824      	ldr	r0, [pc, #144]	@ (800bd7c <_svfiprintf_r+0x1e8>)
 800bcea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bcee:	2206      	movs	r2, #6
 800bcf0:	f7f4 fa96 	bl	8000220 <memchr>
 800bcf4:	2800      	cmp	r0, #0
 800bcf6:	d036      	beq.n	800bd66 <_svfiprintf_r+0x1d2>
 800bcf8:	4b21      	ldr	r3, [pc, #132]	@ (800bd80 <_svfiprintf_r+0x1ec>)
 800bcfa:	bb1b      	cbnz	r3, 800bd44 <_svfiprintf_r+0x1b0>
 800bcfc:	9b03      	ldr	r3, [sp, #12]
 800bcfe:	3307      	adds	r3, #7
 800bd00:	f023 0307 	bic.w	r3, r3, #7
 800bd04:	3308      	adds	r3, #8
 800bd06:	9303      	str	r3, [sp, #12]
 800bd08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd0a:	4433      	add	r3, r6
 800bd0c:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd0e:	e76a      	b.n	800bbe6 <_svfiprintf_r+0x52>
 800bd10:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd14:	460c      	mov	r4, r1
 800bd16:	2001      	movs	r0, #1
 800bd18:	e7a8      	b.n	800bc6c <_svfiprintf_r+0xd8>
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	3401      	adds	r4, #1
 800bd1e:	9305      	str	r3, [sp, #20]
 800bd20:	4619      	mov	r1, r3
 800bd22:	f04f 0c0a 	mov.w	ip, #10
 800bd26:	4620      	mov	r0, r4
 800bd28:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd2c:	3a30      	subs	r2, #48	@ 0x30
 800bd2e:	2a09      	cmp	r2, #9
 800bd30:	d903      	bls.n	800bd3a <_svfiprintf_r+0x1a6>
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d0c6      	beq.n	800bcc4 <_svfiprintf_r+0x130>
 800bd36:	9105      	str	r1, [sp, #20]
 800bd38:	e7c4      	b.n	800bcc4 <_svfiprintf_r+0x130>
 800bd3a:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd3e:	4604      	mov	r4, r0
 800bd40:	2301      	movs	r3, #1
 800bd42:	e7f0      	b.n	800bd26 <_svfiprintf_r+0x192>
 800bd44:	ab03      	add	r3, sp, #12
 800bd46:	9300      	str	r3, [sp, #0]
 800bd48:	462a      	mov	r2, r5
 800bd4a:	4b0e      	ldr	r3, [pc, #56]	@ (800bd84 <_svfiprintf_r+0x1f0>)
 800bd4c:	a904      	add	r1, sp, #16
 800bd4e:	4638      	mov	r0, r7
 800bd50:	f7fc fbc6 	bl	80084e0 <_printf_float>
 800bd54:	1c42      	adds	r2, r0, #1
 800bd56:	4606      	mov	r6, r0
 800bd58:	d1d6      	bne.n	800bd08 <_svfiprintf_r+0x174>
 800bd5a:	89ab      	ldrh	r3, [r5, #12]
 800bd5c:	065b      	lsls	r3, r3, #25
 800bd5e:	f53f af2d 	bmi.w	800bbbc <_svfiprintf_r+0x28>
 800bd62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bd64:	e72c      	b.n	800bbc0 <_svfiprintf_r+0x2c>
 800bd66:	ab03      	add	r3, sp, #12
 800bd68:	9300      	str	r3, [sp, #0]
 800bd6a:	462a      	mov	r2, r5
 800bd6c:	4b05      	ldr	r3, [pc, #20]	@ (800bd84 <_svfiprintf_r+0x1f0>)
 800bd6e:	a904      	add	r1, sp, #16
 800bd70:	4638      	mov	r0, r7
 800bd72:	f7fc fe4d 	bl	8008a10 <_printf_i>
 800bd76:	e7ed      	b.n	800bd54 <_svfiprintf_r+0x1c0>
 800bd78:	0800d001 	.word	0x0800d001
 800bd7c:	0800d00b 	.word	0x0800d00b
 800bd80:	080084e1 	.word	0x080084e1
 800bd84:	0800badd 	.word	0x0800badd
 800bd88:	0800d007 	.word	0x0800d007

0800bd8c <__sfputc_r>:
 800bd8c:	6893      	ldr	r3, [r2, #8]
 800bd8e:	3b01      	subs	r3, #1
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	b410      	push	{r4}
 800bd94:	6093      	str	r3, [r2, #8]
 800bd96:	da08      	bge.n	800bdaa <__sfputc_r+0x1e>
 800bd98:	6994      	ldr	r4, [r2, #24]
 800bd9a:	42a3      	cmp	r3, r4
 800bd9c:	db01      	blt.n	800bda2 <__sfputc_r+0x16>
 800bd9e:	290a      	cmp	r1, #10
 800bda0:	d103      	bne.n	800bdaa <__sfputc_r+0x1e>
 800bda2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bda6:	f7fd bafc 	b.w	80093a2 <__swbuf_r>
 800bdaa:	6813      	ldr	r3, [r2, #0]
 800bdac:	1c58      	adds	r0, r3, #1
 800bdae:	6010      	str	r0, [r2, #0]
 800bdb0:	7019      	strb	r1, [r3, #0]
 800bdb2:	4608      	mov	r0, r1
 800bdb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bdb8:	4770      	bx	lr

0800bdba <__sfputs_r>:
 800bdba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdbc:	4606      	mov	r6, r0
 800bdbe:	460f      	mov	r7, r1
 800bdc0:	4614      	mov	r4, r2
 800bdc2:	18d5      	adds	r5, r2, r3
 800bdc4:	42ac      	cmp	r4, r5
 800bdc6:	d101      	bne.n	800bdcc <__sfputs_r+0x12>
 800bdc8:	2000      	movs	r0, #0
 800bdca:	e007      	b.n	800bddc <__sfputs_r+0x22>
 800bdcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdd0:	463a      	mov	r2, r7
 800bdd2:	4630      	mov	r0, r6
 800bdd4:	f7ff ffda 	bl	800bd8c <__sfputc_r>
 800bdd8:	1c43      	adds	r3, r0, #1
 800bdda:	d1f3      	bne.n	800bdc4 <__sfputs_r+0xa>
 800bddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bde0 <_vfiprintf_r>:
 800bde0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bde4:	460d      	mov	r5, r1
 800bde6:	b09d      	sub	sp, #116	@ 0x74
 800bde8:	4614      	mov	r4, r2
 800bdea:	4698      	mov	r8, r3
 800bdec:	4606      	mov	r6, r0
 800bdee:	b118      	cbz	r0, 800bdf8 <_vfiprintf_r+0x18>
 800bdf0:	6a03      	ldr	r3, [r0, #32]
 800bdf2:	b90b      	cbnz	r3, 800bdf8 <_vfiprintf_r+0x18>
 800bdf4:	f7fd f9cc 	bl	8009190 <__sinit>
 800bdf8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bdfa:	07d9      	lsls	r1, r3, #31
 800bdfc:	d405      	bmi.n	800be0a <_vfiprintf_r+0x2a>
 800bdfe:	89ab      	ldrh	r3, [r5, #12]
 800be00:	059a      	lsls	r2, r3, #22
 800be02:	d402      	bmi.n	800be0a <_vfiprintf_r+0x2a>
 800be04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800be06:	f7fd fbde 	bl	80095c6 <__retarget_lock_acquire_recursive>
 800be0a:	89ab      	ldrh	r3, [r5, #12]
 800be0c:	071b      	lsls	r3, r3, #28
 800be0e:	d501      	bpl.n	800be14 <_vfiprintf_r+0x34>
 800be10:	692b      	ldr	r3, [r5, #16]
 800be12:	b99b      	cbnz	r3, 800be3c <_vfiprintf_r+0x5c>
 800be14:	4629      	mov	r1, r5
 800be16:	4630      	mov	r0, r6
 800be18:	f7fd fb02 	bl	8009420 <__swsetup_r>
 800be1c:	b170      	cbz	r0, 800be3c <_vfiprintf_r+0x5c>
 800be1e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800be20:	07dc      	lsls	r4, r3, #31
 800be22:	d504      	bpl.n	800be2e <_vfiprintf_r+0x4e>
 800be24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800be28:	b01d      	add	sp, #116	@ 0x74
 800be2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be2e:	89ab      	ldrh	r3, [r5, #12]
 800be30:	0598      	lsls	r0, r3, #22
 800be32:	d4f7      	bmi.n	800be24 <_vfiprintf_r+0x44>
 800be34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800be36:	f7fd fbc7 	bl	80095c8 <__retarget_lock_release_recursive>
 800be3a:	e7f3      	b.n	800be24 <_vfiprintf_r+0x44>
 800be3c:	2300      	movs	r3, #0
 800be3e:	9309      	str	r3, [sp, #36]	@ 0x24
 800be40:	2320      	movs	r3, #32
 800be42:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800be46:	f8cd 800c 	str.w	r8, [sp, #12]
 800be4a:	2330      	movs	r3, #48	@ 0x30
 800be4c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bffc <_vfiprintf_r+0x21c>
 800be50:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800be54:	f04f 0901 	mov.w	r9, #1
 800be58:	4623      	mov	r3, r4
 800be5a:	469a      	mov	sl, r3
 800be5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be60:	b10a      	cbz	r2, 800be66 <_vfiprintf_r+0x86>
 800be62:	2a25      	cmp	r2, #37	@ 0x25
 800be64:	d1f9      	bne.n	800be5a <_vfiprintf_r+0x7a>
 800be66:	ebba 0b04 	subs.w	fp, sl, r4
 800be6a:	d00b      	beq.n	800be84 <_vfiprintf_r+0xa4>
 800be6c:	465b      	mov	r3, fp
 800be6e:	4622      	mov	r2, r4
 800be70:	4629      	mov	r1, r5
 800be72:	4630      	mov	r0, r6
 800be74:	f7ff ffa1 	bl	800bdba <__sfputs_r>
 800be78:	3001      	adds	r0, #1
 800be7a:	f000 80a7 	beq.w	800bfcc <_vfiprintf_r+0x1ec>
 800be7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800be80:	445a      	add	r2, fp
 800be82:	9209      	str	r2, [sp, #36]	@ 0x24
 800be84:	f89a 3000 	ldrb.w	r3, [sl]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	f000 809f 	beq.w	800bfcc <_vfiprintf_r+0x1ec>
 800be8e:	2300      	movs	r3, #0
 800be90:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800be94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be98:	f10a 0a01 	add.w	sl, sl, #1
 800be9c:	9304      	str	r3, [sp, #16]
 800be9e:	9307      	str	r3, [sp, #28]
 800bea0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bea4:	931a      	str	r3, [sp, #104]	@ 0x68
 800bea6:	4654      	mov	r4, sl
 800bea8:	2205      	movs	r2, #5
 800beaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800beae:	4853      	ldr	r0, [pc, #332]	@ (800bffc <_vfiprintf_r+0x21c>)
 800beb0:	f7f4 f9b6 	bl	8000220 <memchr>
 800beb4:	9a04      	ldr	r2, [sp, #16]
 800beb6:	b9d8      	cbnz	r0, 800bef0 <_vfiprintf_r+0x110>
 800beb8:	06d1      	lsls	r1, r2, #27
 800beba:	bf44      	itt	mi
 800bebc:	2320      	movmi	r3, #32
 800bebe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bec2:	0713      	lsls	r3, r2, #28
 800bec4:	bf44      	itt	mi
 800bec6:	232b      	movmi	r3, #43	@ 0x2b
 800bec8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800becc:	f89a 3000 	ldrb.w	r3, [sl]
 800bed0:	2b2a      	cmp	r3, #42	@ 0x2a
 800bed2:	d015      	beq.n	800bf00 <_vfiprintf_r+0x120>
 800bed4:	9a07      	ldr	r2, [sp, #28]
 800bed6:	4654      	mov	r4, sl
 800bed8:	2000      	movs	r0, #0
 800beda:	f04f 0c0a 	mov.w	ip, #10
 800bede:	4621      	mov	r1, r4
 800bee0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bee4:	3b30      	subs	r3, #48	@ 0x30
 800bee6:	2b09      	cmp	r3, #9
 800bee8:	d94b      	bls.n	800bf82 <_vfiprintf_r+0x1a2>
 800beea:	b1b0      	cbz	r0, 800bf1a <_vfiprintf_r+0x13a>
 800beec:	9207      	str	r2, [sp, #28]
 800beee:	e014      	b.n	800bf1a <_vfiprintf_r+0x13a>
 800bef0:	eba0 0308 	sub.w	r3, r0, r8
 800bef4:	fa09 f303 	lsl.w	r3, r9, r3
 800bef8:	4313      	orrs	r3, r2
 800befa:	9304      	str	r3, [sp, #16]
 800befc:	46a2      	mov	sl, r4
 800befe:	e7d2      	b.n	800bea6 <_vfiprintf_r+0xc6>
 800bf00:	9b03      	ldr	r3, [sp, #12]
 800bf02:	1d19      	adds	r1, r3, #4
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	9103      	str	r1, [sp, #12]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	bfbb      	ittet	lt
 800bf0c:	425b      	neglt	r3, r3
 800bf0e:	f042 0202 	orrlt.w	r2, r2, #2
 800bf12:	9307      	strge	r3, [sp, #28]
 800bf14:	9307      	strlt	r3, [sp, #28]
 800bf16:	bfb8      	it	lt
 800bf18:	9204      	strlt	r2, [sp, #16]
 800bf1a:	7823      	ldrb	r3, [r4, #0]
 800bf1c:	2b2e      	cmp	r3, #46	@ 0x2e
 800bf1e:	d10a      	bne.n	800bf36 <_vfiprintf_r+0x156>
 800bf20:	7863      	ldrb	r3, [r4, #1]
 800bf22:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf24:	d132      	bne.n	800bf8c <_vfiprintf_r+0x1ac>
 800bf26:	9b03      	ldr	r3, [sp, #12]
 800bf28:	1d1a      	adds	r2, r3, #4
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	9203      	str	r2, [sp, #12]
 800bf2e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bf32:	3402      	adds	r4, #2
 800bf34:	9305      	str	r3, [sp, #20]
 800bf36:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c00c <_vfiprintf_r+0x22c>
 800bf3a:	7821      	ldrb	r1, [r4, #0]
 800bf3c:	2203      	movs	r2, #3
 800bf3e:	4650      	mov	r0, sl
 800bf40:	f7f4 f96e 	bl	8000220 <memchr>
 800bf44:	b138      	cbz	r0, 800bf56 <_vfiprintf_r+0x176>
 800bf46:	9b04      	ldr	r3, [sp, #16]
 800bf48:	eba0 000a 	sub.w	r0, r0, sl
 800bf4c:	2240      	movs	r2, #64	@ 0x40
 800bf4e:	4082      	lsls	r2, r0
 800bf50:	4313      	orrs	r3, r2
 800bf52:	3401      	adds	r4, #1
 800bf54:	9304      	str	r3, [sp, #16]
 800bf56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf5a:	4829      	ldr	r0, [pc, #164]	@ (800c000 <_vfiprintf_r+0x220>)
 800bf5c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bf60:	2206      	movs	r2, #6
 800bf62:	f7f4 f95d 	bl	8000220 <memchr>
 800bf66:	2800      	cmp	r0, #0
 800bf68:	d03f      	beq.n	800bfea <_vfiprintf_r+0x20a>
 800bf6a:	4b26      	ldr	r3, [pc, #152]	@ (800c004 <_vfiprintf_r+0x224>)
 800bf6c:	bb1b      	cbnz	r3, 800bfb6 <_vfiprintf_r+0x1d6>
 800bf6e:	9b03      	ldr	r3, [sp, #12]
 800bf70:	3307      	adds	r3, #7
 800bf72:	f023 0307 	bic.w	r3, r3, #7
 800bf76:	3308      	adds	r3, #8
 800bf78:	9303      	str	r3, [sp, #12]
 800bf7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf7c:	443b      	add	r3, r7
 800bf7e:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf80:	e76a      	b.n	800be58 <_vfiprintf_r+0x78>
 800bf82:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf86:	460c      	mov	r4, r1
 800bf88:	2001      	movs	r0, #1
 800bf8a:	e7a8      	b.n	800bede <_vfiprintf_r+0xfe>
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	3401      	adds	r4, #1
 800bf90:	9305      	str	r3, [sp, #20]
 800bf92:	4619      	mov	r1, r3
 800bf94:	f04f 0c0a 	mov.w	ip, #10
 800bf98:	4620      	mov	r0, r4
 800bf9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf9e:	3a30      	subs	r2, #48	@ 0x30
 800bfa0:	2a09      	cmp	r2, #9
 800bfa2:	d903      	bls.n	800bfac <_vfiprintf_r+0x1cc>
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d0c6      	beq.n	800bf36 <_vfiprintf_r+0x156>
 800bfa8:	9105      	str	r1, [sp, #20]
 800bfaa:	e7c4      	b.n	800bf36 <_vfiprintf_r+0x156>
 800bfac:	fb0c 2101 	mla	r1, ip, r1, r2
 800bfb0:	4604      	mov	r4, r0
 800bfb2:	2301      	movs	r3, #1
 800bfb4:	e7f0      	b.n	800bf98 <_vfiprintf_r+0x1b8>
 800bfb6:	ab03      	add	r3, sp, #12
 800bfb8:	9300      	str	r3, [sp, #0]
 800bfba:	462a      	mov	r2, r5
 800bfbc:	4b12      	ldr	r3, [pc, #72]	@ (800c008 <_vfiprintf_r+0x228>)
 800bfbe:	a904      	add	r1, sp, #16
 800bfc0:	4630      	mov	r0, r6
 800bfc2:	f7fc fa8d 	bl	80084e0 <_printf_float>
 800bfc6:	4607      	mov	r7, r0
 800bfc8:	1c78      	adds	r0, r7, #1
 800bfca:	d1d6      	bne.n	800bf7a <_vfiprintf_r+0x19a>
 800bfcc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bfce:	07d9      	lsls	r1, r3, #31
 800bfd0:	d405      	bmi.n	800bfde <_vfiprintf_r+0x1fe>
 800bfd2:	89ab      	ldrh	r3, [r5, #12]
 800bfd4:	059a      	lsls	r2, r3, #22
 800bfd6:	d402      	bmi.n	800bfde <_vfiprintf_r+0x1fe>
 800bfd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bfda:	f7fd faf5 	bl	80095c8 <__retarget_lock_release_recursive>
 800bfde:	89ab      	ldrh	r3, [r5, #12]
 800bfe0:	065b      	lsls	r3, r3, #25
 800bfe2:	f53f af1f 	bmi.w	800be24 <_vfiprintf_r+0x44>
 800bfe6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bfe8:	e71e      	b.n	800be28 <_vfiprintf_r+0x48>
 800bfea:	ab03      	add	r3, sp, #12
 800bfec:	9300      	str	r3, [sp, #0]
 800bfee:	462a      	mov	r2, r5
 800bff0:	4b05      	ldr	r3, [pc, #20]	@ (800c008 <_vfiprintf_r+0x228>)
 800bff2:	a904      	add	r1, sp, #16
 800bff4:	4630      	mov	r0, r6
 800bff6:	f7fc fd0b 	bl	8008a10 <_printf_i>
 800bffa:	e7e4      	b.n	800bfc6 <_vfiprintf_r+0x1e6>
 800bffc:	0800d001 	.word	0x0800d001
 800c000:	0800d00b 	.word	0x0800d00b
 800c004:	080084e1 	.word	0x080084e1
 800c008:	0800bdbb 	.word	0x0800bdbb
 800c00c:	0800d007 	.word	0x0800d007

0800c010 <__sflush_r>:
 800c010:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c018:	0716      	lsls	r6, r2, #28
 800c01a:	4605      	mov	r5, r0
 800c01c:	460c      	mov	r4, r1
 800c01e:	d454      	bmi.n	800c0ca <__sflush_r+0xba>
 800c020:	684b      	ldr	r3, [r1, #4]
 800c022:	2b00      	cmp	r3, #0
 800c024:	dc02      	bgt.n	800c02c <__sflush_r+0x1c>
 800c026:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c028:	2b00      	cmp	r3, #0
 800c02a:	dd48      	ble.n	800c0be <__sflush_r+0xae>
 800c02c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c02e:	2e00      	cmp	r6, #0
 800c030:	d045      	beq.n	800c0be <__sflush_r+0xae>
 800c032:	2300      	movs	r3, #0
 800c034:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c038:	682f      	ldr	r7, [r5, #0]
 800c03a:	6a21      	ldr	r1, [r4, #32]
 800c03c:	602b      	str	r3, [r5, #0]
 800c03e:	d030      	beq.n	800c0a2 <__sflush_r+0x92>
 800c040:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c042:	89a3      	ldrh	r3, [r4, #12]
 800c044:	0759      	lsls	r1, r3, #29
 800c046:	d505      	bpl.n	800c054 <__sflush_r+0x44>
 800c048:	6863      	ldr	r3, [r4, #4]
 800c04a:	1ad2      	subs	r2, r2, r3
 800c04c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c04e:	b10b      	cbz	r3, 800c054 <__sflush_r+0x44>
 800c050:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c052:	1ad2      	subs	r2, r2, r3
 800c054:	2300      	movs	r3, #0
 800c056:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c058:	6a21      	ldr	r1, [r4, #32]
 800c05a:	4628      	mov	r0, r5
 800c05c:	47b0      	blx	r6
 800c05e:	1c43      	adds	r3, r0, #1
 800c060:	89a3      	ldrh	r3, [r4, #12]
 800c062:	d106      	bne.n	800c072 <__sflush_r+0x62>
 800c064:	6829      	ldr	r1, [r5, #0]
 800c066:	291d      	cmp	r1, #29
 800c068:	d82b      	bhi.n	800c0c2 <__sflush_r+0xb2>
 800c06a:	4a2a      	ldr	r2, [pc, #168]	@ (800c114 <__sflush_r+0x104>)
 800c06c:	410a      	asrs	r2, r1
 800c06e:	07d6      	lsls	r6, r2, #31
 800c070:	d427      	bmi.n	800c0c2 <__sflush_r+0xb2>
 800c072:	2200      	movs	r2, #0
 800c074:	6062      	str	r2, [r4, #4]
 800c076:	04d9      	lsls	r1, r3, #19
 800c078:	6922      	ldr	r2, [r4, #16]
 800c07a:	6022      	str	r2, [r4, #0]
 800c07c:	d504      	bpl.n	800c088 <__sflush_r+0x78>
 800c07e:	1c42      	adds	r2, r0, #1
 800c080:	d101      	bne.n	800c086 <__sflush_r+0x76>
 800c082:	682b      	ldr	r3, [r5, #0]
 800c084:	b903      	cbnz	r3, 800c088 <__sflush_r+0x78>
 800c086:	6560      	str	r0, [r4, #84]	@ 0x54
 800c088:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c08a:	602f      	str	r7, [r5, #0]
 800c08c:	b1b9      	cbz	r1, 800c0be <__sflush_r+0xae>
 800c08e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c092:	4299      	cmp	r1, r3
 800c094:	d002      	beq.n	800c09c <__sflush_r+0x8c>
 800c096:	4628      	mov	r0, r5
 800c098:	f7fe f8ea 	bl	800a270 <_free_r>
 800c09c:	2300      	movs	r3, #0
 800c09e:	6363      	str	r3, [r4, #52]	@ 0x34
 800c0a0:	e00d      	b.n	800c0be <__sflush_r+0xae>
 800c0a2:	2301      	movs	r3, #1
 800c0a4:	4628      	mov	r0, r5
 800c0a6:	47b0      	blx	r6
 800c0a8:	4602      	mov	r2, r0
 800c0aa:	1c50      	adds	r0, r2, #1
 800c0ac:	d1c9      	bne.n	800c042 <__sflush_r+0x32>
 800c0ae:	682b      	ldr	r3, [r5, #0]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d0c6      	beq.n	800c042 <__sflush_r+0x32>
 800c0b4:	2b1d      	cmp	r3, #29
 800c0b6:	d001      	beq.n	800c0bc <__sflush_r+0xac>
 800c0b8:	2b16      	cmp	r3, #22
 800c0ba:	d11e      	bne.n	800c0fa <__sflush_r+0xea>
 800c0bc:	602f      	str	r7, [r5, #0]
 800c0be:	2000      	movs	r0, #0
 800c0c0:	e022      	b.n	800c108 <__sflush_r+0xf8>
 800c0c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c0c6:	b21b      	sxth	r3, r3
 800c0c8:	e01b      	b.n	800c102 <__sflush_r+0xf2>
 800c0ca:	690f      	ldr	r7, [r1, #16]
 800c0cc:	2f00      	cmp	r7, #0
 800c0ce:	d0f6      	beq.n	800c0be <__sflush_r+0xae>
 800c0d0:	0793      	lsls	r3, r2, #30
 800c0d2:	680e      	ldr	r6, [r1, #0]
 800c0d4:	bf08      	it	eq
 800c0d6:	694b      	ldreq	r3, [r1, #20]
 800c0d8:	600f      	str	r7, [r1, #0]
 800c0da:	bf18      	it	ne
 800c0dc:	2300      	movne	r3, #0
 800c0de:	eba6 0807 	sub.w	r8, r6, r7
 800c0e2:	608b      	str	r3, [r1, #8]
 800c0e4:	f1b8 0f00 	cmp.w	r8, #0
 800c0e8:	dde9      	ble.n	800c0be <__sflush_r+0xae>
 800c0ea:	6a21      	ldr	r1, [r4, #32]
 800c0ec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c0ee:	4643      	mov	r3, r8
 800c0f0:	463a      	mov	r2, r7
 800c0f2:	4628      	mov	r0, r5
 800c0f4:	47b0      	blx	r6
 800c0f6:	2800      	cmp	r0, #0
 800c0f8:	dc08      	bgt.n	800c10c <__sflush_r+0xfc>
 800c0fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c102:	81a3      	strh	r3, [r4, #12]
 800c104:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c10c:	4407      	add	r7, r0
 800c10e:	eba8 0800 	sub.w	r8, r8, r0
 800c112:	e7e7      	b.n	800c0e4 <__sflush_r+0xd4>
 800c114:	dfbffffe 	.word	0xdfbffffe

0800c118 <_fflush_r>:
 800c118:	b538      	push	{r3, r4, r5, lr}
 800c11a:	690b      	ldr	r3, [r1, #16]
 800c11c:	4605      	mov	r5, r0
 800c11e:	460c      	mov	r4, r1
 800c120:	b913      	cbnz	r3, 800c128 <_fflush_r+0x10>
 800c122:	2500      	movs	r5, #0
 800c124:	4628      	mov	r0, r5
 800c126:	bd38      	pop	{r3, r4, r5, pc}
 800c128:	b118      	cbz	r0, 800c132 <_fflush_r+0x1a>
 800c12a:	6a03      	ldr	r3, [r0, #32]
 800c12c:	b90b      	cbnz	r3, 800c132 <_fflush_r+0x1a>
 800c12e:	f7fd f82f 	bl	8009190 <__sinit>
 800c132:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d0f3      	beq.n	800c122 <_fflush_r+0xa>
 800c13a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c13c:	07d0      	lsls	r0, r2, #31
 800c13e:	d404      	bmi.n	800c14a <_fflush_r+0x32>
 800c140:	0599      	lsls	r1, r3, #22
 800c142:	d402      	bmi.n	800c14a <_fflush_r+0x32>
 800c144:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c146:	f7fd fa3e 	bl	80095c6 <__retarget_lock_acquire_recursive>
 800c14a:	4628      	mov	r0, r5
 800c14c:	4621      	mov	r1, r4
 800c14e:	f7ff ff5f 	bl	800c010 <__sflush_r>
 800c152:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c154:	07da      	lsls	r2, r3, #31
 800c156:	4605      	mov	r5, r0
 800c158:	d4e4      	bmi.n	800c124 <_fflush_r+0xc>
 800c15a:	89a3      	ldrh	r3, [r4, #12]
 800c15c:	059b      	lsls	r3, r3, #22
 800c15e:	d4e1      	bmi.n	800c124 <_fflush_r+0xc>
 800c160:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c162:	f7fd fa31 	bl	80095c8 <__retarget_lock_release_recursive>
 800c166:	e7dd      	b.n	800c124 <_fflush_r+0xc>

0800c168 <__swhatbuf_r>:
 800c168:	b570      	push	{r4, r5, r6, lr}
 800c16a:	460c      	mov	r4, r1
 800c16c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c170:	2900      	cmp	r1, #0
 800c172:	b096      	sub	sp, #88	@ 0x58
 800c174:	4615      	mov	r5, r2
 800c176:	461e      	mov	r6, r3
 800c178:	da0d      	bge.n	800c196 <__swhatbuf_r+0x2e>
 800c17a:	89a3      	ldrh	r3, [r4, #12]
 800c17c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c180:	f04f 0100 	mov.w	r1, #0
 800c184:	bf14      	ite	ne
 800c186:	2340      	movne	r3, #64	@ 0x40
 800c188:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c18c:	2000      	movs	r0, #0
 800c18e:	6031      	str	r1, [r6, #0]
 800c190:	602b      	str	r3, [r5, #0]
 800c192:	b016      	add	sp, #88	@ 0x58
 800c194:	bd70      	pop	{r4, r5, r6, pc}
 800c196:	466a      	mov	r2, sp
 800c198:	f000 f874 	bl	800c284 <_fstat_r>
 800c19c:	2800      	cmp	r0, #0
 800c19e:	dbec      	blt.n	800c17a <__swhatbuf_r+0x12>
 800c1a0:	9901      	ldr	r1, [sp, #4]
 800c1a2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c1a6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c1aa:	4259      	negs	r1, r3
 800c1ac:	4159      	adcs	r1, r3
 800c1ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c1b2:	e7eb      	b.n	800c18c <__swhatbuf_r+0x24>

0800c1b4 <__smakebuf_r>:
 800c1b4:	898b      	ldrh	r3, [r1, #12]
 800c1b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c1b8:	079d      	lsls	r5, r3, #30
 800c1ba:	4606      	mov	r6, r0
 800c1bc:	460c      	mov	r4, r1
 800c1be:	d507      	bpl.n	800c1d0 <__smakebuf_r+0x1c>
 800c1c0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c1c4:	6023      	str	r3, [r4, #0]
 800c1c6:	6123      	str	r3, [r4, #16]
 800c1c8:	2301      	movs	r3, #1
 800c1ca:	6163      	str	r3, [r4, #20]
 800c1cc:	b003      	add	sp, #12
 800c1ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1d0:	ab01      	add	r3, sp, #4
 800c1d2:	466a      	mov	r2, sp
 800c1d4:	f7ff ffc8 	bl	800c168 <__swhatbuf_r>
 800c1d8:	9f00      	ldr	r7, [sp, #0]
 800c1da:	4605      	mov	r5, r0
 800c1dc:	4639      	mov	r1, r7
 800c1de:	4630      	mov	r0, r6
 800c1e0:	f7fe f8ba 	bl	800a358 <_malloc_r>
 800c1e4:	b948      	cbnz	r0, 800c1fa <__smakebuf_r+0x46>
 800c1e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1ea:	059a      	lsls	r2, r3, #22
 800c1ec:	d4ee      	bmi.n	800c1cc <__smakebuf_r+0x18>
 800c1ee:	f023 0303 	bic.w	r3, r3, #3
 800c1f2:	f043 0302 	orr.w	r3, r3, #2
 800c1f6:	81a3      	strh	r3, [r4, #12]
 800c1f8:	e7e2      	b.n	800c1c0 <__smakebuf_r+0xc>
 800c1fa:	89a3      	ldrh	r3, [r4, #12]
 800c1fc:	6020      	str	r0, [r4, #0]
 800c1fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c202:	81a3      	strh	r3, [r4, #12]
 800c204:	9b01      	ldr	r3, [sp, #4]
 800c206:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c20a:	b15b      	cbz	r3, 800c224 <__smakebuf_r+0x70>
 800c20c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c210:	4630      	mov	r0, r6
 800c212:	f000 f849 	bl	800c2a8 <_isatty_r>
 800c216:	b128      	cbz	r0, 800c224 <__smakebuf_r+0x70>
 800c218:	89a3      	ldrh	r3, [r4, #12]
 800c21a:	f023 0303 	bic.w	r3, r3, #3
 800c21e:	f043 0301 	orr.w	r3, r3, #1
 800c222:	81a3      	strh	r3, [r4, #12]
 800c224:	89a3      	ldrh	r3, [r4, #12]
 800c226:	431d      	orrs	r5, r3
 800c228:	81a5      	strh	r5, [r4, #12]
 800c22a:	e7cf      	b.n	800c1cc <__smakebuf_r+0x18>

0800c22c <memmove>:
 800c22c:	4288      	cmp	r0, r1
 800c22e:	b510      	push	{r4, lr}
 800c230:	eb01 0402 	add.w	r4, r1, r2
 800c234:	d902      	bls.n	800c23c <memmove+0x10>
 800c236:	4284      	cmp	r4, r0
 800c238:	4623      	mov	r3, r4
 800c23a:	d807      	bhi.n	800c24c <memmove+0x20>
 800c23c:	1e43      	subs	r3, r0, #1
 800c23e:	42a1      	cmp	r1, r4
 800c240:	d008      	beq.n	800c254 <memmove+0x28>
 800c242:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c246:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c24a:	e7f8      	b.n	800c23e <memmove+0x12>
 800c24c:	4402      	add	r2, r0
 800c24e:	4601      	mov	r1, r0
 800c250:	428a      	cmp	r2, r1
 800c252:	d100      	bne.n	800c256 <memmove+0x2a>
 800c254:	bd10      	pop	{r4, pc}
 800c256:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c25a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c25e:	e7f7      	b.n	800c250 <memmove+0x24>

0800c260 <strncmp>:
 800c260:	b510      	push	{r4, lr}
 800c262:	b16a      	cbz	r2, 800c280 <strncmp+0x20>
 800c264:	3901      	subs	r1, #1
 800c266:	1884      	adds	r4, r0, r2
 800c268:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c26c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c270:	429a      	cmp	r2, r3
 800c272:	d103      	bne.n	800c27c <strncmp+0x1c>
 800c274:	42a0      	cmp	r0, r4
 800c276:	d001      	beq.n	800c27c <strncmp+0x1c>
 800c278:	2a00      	cmp	r2, #0
 800c27a:	d1f5      	bne.n	800c268 <strncmp+0x8>
 800c27c:	1ad0      	subs	r0, r2, r3
 800c27e:	bd10      	pop	{r4, pc}
 800c280:	4610      	mov	r0, r2
 800c282:	e7fc      	b.n	800c27e <strncmp+0x1e>

0800c284 <_fstat_r>:
 800c284:	b538      	push	{r3, r4, r5, lr}
 800c286:	4d07      	ldr	r5, [pc, #28]	@ (800c2a4 <_fstat_r+0x20>)
 800c288:	2300      	movs	r3, #0
 800c28a:	4604      	mov	r4, r0
 800c28c:	4608      	mov	r0, r1
 800c28e:	4611      	mov	r1, r2
 800c290:	602b      	str	r3, [r5, #0]
 800c292:	f7f5 fb49 	bl	8001928 <_fstat>
 800c296:	1c43      	adds	r3, r0, #1
 800c298:	d102      	bne.n	800c2a0 <_fstat_r+0x1c>
 800c29a:	682b      	ldr	r3, [r5, #0]
 800c29c:	b103      	cbz	r3, 800c2a0 <_fstat_r+0x1c>
 800c29e:	6023      	str	r3, [r4, #0]
 800c2a0:	bd38      	pop	{r3, r4, r5, pc}
 800c2a2:	bf00      	nop
 800c2a4:	20003164 	.word	0x20003164

0800c2a8 <_isatty_r>:
 800c2a8:	b538      	push	{r3, r4, r5, lr}
 800c2aa:	4d06      	ldr	r5, [pc, #24]	@ (800c2c4 <_isatty_r+0x1c>)
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	4604      	mov	r4, r0
 800c2b0:	4608      	mov	r0, r1
 800c2b2:	602b      	str	r3, [r5, #0]
 800c2b4:	f7f5 fb48 	bl	8001948 <_isatty>
 800c2b8:	1c43      	adds	r3, r0, #1
 800c2ba:	d102      	bne.n	800c2c2 <_isatty_r+0x1a>
 800c2bc:	682b      	ldr	r3, [r5, #0]
 800c2be:	b103      	cbz	r3, 800c2c2 <_isatty_r+0x1a>
 800c2c0:	6023      	str	r3, [r4, #0]
 800c2c2:	bd38      	pop	{r3, r4, r5, pc}
 800c2c4:	20003164 	.word	0x20003164

0800c2c8 <_sbrk_r>:
 800c2c8:	b538      	push	{r3, r4, r5, lr}
 800c2ca:	4d06      	ldr	r5, [pc, #24]	@ (800c2e4 <_sbrk_r+0x1c>)
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	4604      	mov	r4, r0
 800c2d0:	4608      	mov	r0, r1
 800c2d2:	602b      	str	r3, [r5, #0]
 800c2d4:	f7f5 fb50 	bl	8001978 <_sbrk>
 800c2d8:	1c43      	adds	r3, r0, #1
 800c2da:	d102      	bne.n	800c2e2 <_sbrk_r+0x1a>
 800c2dc:	682b      	ldr	r3, [r5, #0]
 800c2de:	b103      	cbz	r3, 800c2e2 <_sbrk_r+0x1a>
 800c2e0:	6023      	str	r3, [r4, #0]
 800c2e2:	bd38      	pop	{r3, r4, r5, pc}
 800c2e4:	20003164 	.word	0x20003164

0800c2e8 <memcpy>:
 800c2e8:	440a      	add	r2, r1
 800c2ea:	4291      	cmp	r1, r2
 800c2ec:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800c2f0:	d100      	bne.n	800c2f4 <memcpy+0xc>
 800c2f2:	4770      	bx	lr
 800c2f4:	b510      	push	{r4, lr}
 800c2f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c2fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c2fe:	4291      	cmp	r1, r2
 800c300:	d1f9      	bne.n	800c2f6 <memcpy+0xe>
 800c302:	bd10      	pop	{r4, pc}
 800c304:	0000      	movs	r0, r0
	...

0800c308 <nan>:
 800c308:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c310 <nan+0x8>
 800c30c:	4770      	bx	lr
 800c30e:	bf00      	nop
 800c310:	00000000 	.word	0x00000000
 800c314:	7ff80000 	.word	0x7ff80000

0800c318 <__assert_func>:
 800c318:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c31a:	4614      	mov	r4, r2
 800c31c:	461a      	mov	r2, r3
 800c31e:	4b09      	ldr	r3, [pc, #36]	@ (800c344 <__assert_func+0x2c>)
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	4605      	mov	r5, r0
 800c324:	68d8      	ldr	r0, [r3, #12]
 800c326:	b954      	cbnz	r4, 800c33e <__assert_func+0x26>
 800c328:	4b07      	ldr	r3, [pc, #28]	@ (800c348 <__assert_func+0x30>)
 800c32a:	461c      	mov	r4, r3
 800c32c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c330:	9100      	str	r1, [sp, #0]
 800c332:	462b      	mov	r3, r5
 800c334:	4905      	ldr	r1, [pc, #20]	@ (800c34c <__assert_func+0x34>)
 800c336:	f000 fba7 	bl	800ca88 <fiprintf>
 800c33a:	f000 fbb7 	bl	800caac <abort>
 800c33e:	4b04      	ldr	r3, [pc, #16]	@ (800c350 <__assert_func+0x38>)
 800c340:	e7f4      	b.n	800c32c <__assert_func+0x14>
 800c342:	bf00      	nop
 800c344:	20000f5c 	.word	0x20000f5c
 800c348:	0800d055 	.word	0x0800d055
 800c34c:	0800d027 	.word	0x0800d027
 800c350:	0800d01a 	.word	0x0800d01a

0800c354 <_calloc_r>:
 800c354:	b570      	push	{r4, r5, r6, lr}
 800c356:	fba1 5402 	umull	r5, r4, r1, r2
 800c35a:	b93c      	cbnz	r4, 800c36c <_calloc_r+0x18>
 800c35c:	4629      	mov	r1, r5
 800c35e:	f7fd fffb 	bl	800a358 <_malloc_r>
 800c362:	4606      	mov	r6, r0
 800c364:	b928      	cbnz	r0, 800c372 <_calloc_r+0x1e>
 800c366:	2600      	movs	r6, #0
 800c368:	4630      	mov	r0, r6
 800c36a:	bd70      	pop	{r4, r5, r6, pc}
 800c36c:	220c      	movs	r2, #12
 800c36e:	6002      	str	r2, [r0, #0]
 800c370:	e7f9      	b.n	800c366 <_calloc_r+0x12>
 800c372:	462a      	mov	r2, r5
 800c374:	4621      	mov	r1, r4
 800c376:	f7fd f8a9 	bl	80094cc <memset>
 800c37a:	e7f5      	b.n	800c368 <_calloc_r+0x14>

0800c37c <rshift>:
 800c37c:	6903      	ldr	r3, [r0, #16]
 800c37e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c382:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c386:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c38a:	f100 0414 	add.w	r4, r0, #20
 800c38e:	dd45      	ble.n	800c41c <rshift+0xa0>
 800c390:	f011 011f 	ands.w	r1, r1, #31
 800c394:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c398:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c39c:	d10c      	bne.n	800c3b8 <rshift+0x3c>
 800c39e:	f100 0710 	add.w	r7, r0, #16
 800c3a2:	4629      	mov	r1, r5
 800c3a4:	42b1      	cmp	r1, r6
 800c3a6:	d334      	bcc.n	800c412 <rshift+0x96>
 800c3a8:	1a9b      	subs	r3, r3, r2
 800c3aa:	009b      	lsls	r3, r3, #2
 800c3ac:	1eea      	subs	r2, r5, #3
 800c3ae:	4296      	cmp	r6, r2
 800c3b0:	bf38      	it	cc
 800c3b2:	2300      	movcc	r3, #0
 800c3b4:	4423      	add	r3, r4
 800c3b6:	e015      	b.n	800c3e4 <rshift+0x68>
 800c3b8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c3bc:	f1c1 0820 	rsb	r8, r1, #32
 800c3c0:	40cf      	lsrs	r7, r1
 800c3c2:	f105 0e04 	add.w	lr, r5, #4
 800c3c6:	46a1      	mov	r9, r4
 800c3c8:	4576      	cmp	r6, lr
 800c3ca:	46f4      	mov	ip, lr
 800c3cc:	d815      	bhi.n	800c3fa <rshift+0x7e>
 800c3ce:	1a9a      	subs	r2, r3, r2
 800c3d0:	0092      	lsls	r2, r2, #2
 800c3d2:	3a04      	subs	r2, #4
 800c3d4:	3501      	adds	r5, #1
 800c3d6:	42ae      	cmp	r6, r5
 800c3d8:	bf38      	it	cc
 800c3da:	2200      	movcc	r2, #0
 800c3dc:	18a3      	adds	r3, r4, r2
 800c3de:	50a7      	str	r7, [r4, r2]
 800c3e0:	b107      	cbz	r7, 800c3e4 <rshift+0x68>
 800c3e2:	3304      	adds	r3, #4
 800c3e4:	1b1a      	subs	r2, r3, r4
 800c3e6:	42a3      	cmp	r3, r4
 800c3e8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c3ec:	bf08      	it	eq
 800c3ee:	2300      	moveq	r3, #0
 800c3f0:	6102      	str	r2, [r0, #16]
 800c3f2:	bf08      	it	eq
 800c3f4:	6143      	streq	r3, [r0, #20]
 800c3f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c3fa:	f8dc c000 	ldr.w	ip, [ip]
 800c3fe:	fa0c fc08 	lsl.w	ip, ip, r8
 800c402:	ea4c 0707 	orr.w	r7, ip, r7
 800c406:	f849 7b04 	str.w	r7, [r9], #4
 800c40a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c40e:	40cf      	lsrs	r7, r1
 800c410:	e7da      	b.n	800c3c8 <rshift+0x4c>
 800c412:	f851 cb04 	ldr.w	ip, [r1], #4
 800c416:	f847 cf04 	str.w	ip, [r7, #4]!
 800c41a:	e7c3      	b.n	800c3a4 <rshift+0x28>
 800c41c:	4623      	mov	r3, r4
 800c41e:	e7e1      	b.n	800c3e4 <rshift+0x68>

0800c420 <__hexdig_fun>:
 800c420:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c424:	2b09      	cmp	r3, #9
 800c426:	d802      	bhi.n	800c42e <__hexdig_fun+0xe>
 800c428:	3820      	subs	r0, #32
 800c42a:	b2c0      	uxtb	r0, r0
 800c42c:	4770      	bx	lr
 800c42e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c432:	2b05      	cmp	r3, #5
 800c434:	d801      	bhi.n	800c43a <__hexdig_fun+0x1a>
 800c436:	3847      	subs	r0, #71	@ 0x47
 800c438:	e7f7      	b.n	800c42a <__hexdig_fun+0xa>
 800c43a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c43e:	2b05      	cmp	r3, #5
 800c440:	d801      	bhi.n	800c446 <__hexdig_fun+0x26>
 800c442:	3827      	subs	r0, #39	@ 0x27
 800c444:	e7f1      	b.n	800c42a <__hexdig_fun+0xa>
 800c446:	2000      	movs	r0, #0
 800c448:	4770      	bx	lr
	...

0800c44c <__gethex>:
 800c44c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c450:	b085      	sub	sp, #20
 800c452:	468a      	mov	sl, r1
 800c454:	9302      	str	r3, [sp, #8]
 800c456:	680b      	ldr	r3, [r1, #0]
 800c458:	9001      	str	r0, [sp, #4]
 800c45a:	4690      	mov	r8, r2
 800c45c:	1c9c      	adds	r4, r3, #2
 800c45e:	46a1      	mov	r9, r4
 800c460:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c464:	2830      	cmp	r0, #48	@ 0x30
 800c466:	d0fa      	beq.n	800c45e <__gethex+0x12>
 800c468:	eba9 0303 	sub.w	r3, r9, r3
 800c46c:	f1a3 0b02 	sub.w	fp, r3, #2
 800c470:	f7ff ffd6 	bl	800c420 <__hexdig_fun>
 800c474:	4605      	mov	r5, r0
 800c476:	2800      	cmp	r0, #0
 800c478:	d168      	bne.n	800c54c <__gethex+0x100>
 800c47a:	49a0      	ldr	r1, [pc, #640]	@ (800c6fc <__gethex+0x2b0>)
 800c47c:	2201      	movs	r2, #1
 800c47e:	4648      	mov	r0, r9
 800c480:	f7ff feee 	bl	800c260 <strncmp>
 800c484:	4607      	mov	r7, r0
 800c486:	2800      	cmp	r0, #0
 800c488:	d167      	bne.n	800c55a <__gethex+0x10e>
 800c48a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c48e:	4626      	mov	r6, r4
 800c490:	f7ff ffc6 	bl	800c420 <__hexdig_fun>
 800c494:	2800      	cmp	r0, #0
 800c496:	d062      	beq.n	800c55e <__gethex+0x112>
 800c498:	4623      	mov	r3, r4
 800c49a:	7818      	ldrb	r0, [r3, #0]
 800c49c:	2830      	cmp	r0, #48	@ 0x30
 800c49e:	4699      	mov	r9, r3
 800c4a0:	f103 0301 	add.w	r3, r3, #1
 800c4a4:	d0f9      	beq.n	800c49a <__gethex+0x4e>
 800c4a6:	f7ff ffbb 	bl	800c420 <__hexdig_fun>
 800c4aa:	fab0 f580 	clz	r5, r0
 800c4ae:	096d      	lsrs	r5, r5, #5
 800c4b0:	f04f 0b01 	mov.w	fp, #1
 800c4b4:	464a      	mov	r2, r9
 800c4b6:	4616      	mov	r6, r2
 800c4b8:	3201      	adds	r2, #1
 800c4ba:	7830      	ldrb	r0, [r6, #0]
 800c4bc:	f7ff ffb0 	bl	800c420 <__hexdig_fun>
 800c4c0:	2800      	cmp	r0, #0
 800c4c2:	d1f8      	bne.n	800c4b6 <__gethex+0x6a>
 800c4c4:	498d      	ldr	r1, [pc, #564]	@ (800c6fc <__gethex+0x2b0>)
 800c4c6:	2201      	movs	r2, #1
 800c4c8:	4630      	mov	r0, r6
 800c4ca:	f7ff fec9 	bl	800c260 <strncmp>
 800c4ce:	2800      	cmp	r0, #0
 800c4d0:	d13f      	bne.n	800c552 <__gethex+0x106>
 800c4d2:	b944      	cbnz	r4, 800c4e6 <__gethex+0x9a>
 800c4d4:	1c74      	adds	r4, r6, #1
 800c4d6:	4622      	mov	r2, r4
 800c4d8:	4616      	mov	r6, r2
 800c4da:	3201      	adds	r2, #1
 800c4dc:	7830      	ldrb	r0, [r6, #0]
 800c4de:	f7ff ff9f 	bl	800c420 <__hexdig_fun>
 800c4e2:	2800      	cmp	r0, #0
 800c4e4:	d1f8      	bne.n	800c4d8 <__gethex+0x8c>
 800c4e6:	1ba4      	subs	r4, r4, r6
 800c4e8:	00a7      	lsls	r7, r4, #2
 800c4ea:	7833      	ldrb	r3, [r6, #0]
 800c4ec:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c4f0:	2b50      	cmp	r3, #80	@ 0x50
 800c4f2:	d13e      	bne.n	800c572 <__gethex+0x126>
 800c4f4:	7873      	ldrb	r3, [r6, #1]
 800c4f6:	2b2b      	cmp	r3, #43	@ 0x2b
 800c4f8:	d033      	beq.n	800c562 <__gethex+0x116>
 800c4fa:	2b2d      	cmp	r3, #45	@ 0x2d
 800c4fc:	d034      	beq.n	800c568 <__gethex+0x11c>
 800c4fe:	1c71      	adds	r1, r6, #1
 800c500:	2400      	movs	r4, #0
 800c502:	7808      	ldrb	r0, [r1, #0]
 800c504:	f7ff ff8c 	bl	800c420 <__hexdig_fun>
 800c508:	1e43      	subs	r3, r0, #1
 800c50a:	b2db      	uxtb	r3, r3
 800c50c:	2b18      	cmp	r3, #24
 800c50e:	d830      	bhi.n	800c572 <__gethex+0x126>
 800c510:	f1a0 0210 	sub.w	r2, r0, #16
 800c514:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c518:	f7ff ff82 	bl	800c420 <__hexdig_fun>
 800c51c:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800c520:	fa5f fc8c 	uxtb.w	ip, ip
 800c524:	f1bc 0f18 	cmp.w	ip, #24
 800c528:	f04f 030a 	mov.w	r3, #10
 800c52c:	d91e      	bls.n	800c56c <__gethex+0x120>
 800c52e:	b104      	cbz	r4, 800c532 <__gethex+0xe6>
 800c530:	4252      	negs	r2, r2
 800c532:	4417      	add	r7, r2
 800c534:	f8ca 1000 	str.w	r1, [sl]
 800c538:	b1ed      	cbz	r5, 800c576 <__gethex+0x12a>
 800c53a:	f1bb 0f00 	cmp.w	fp, #0
 800c53e:	bf0c      	ite	eq
 800c540:	2506      	moveq	r5, #6
 800c542:	2500      	movne	r5, #0
 800c544:	4628      	mov	r0, r5
 800c546:	b005      	add	sp, #20
 800c548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c54c:	2500      	movs	r5, #0
 800c54e:	462c      	mov	r4, r5
 800c550:	e7b0      	b.n	800c4b4 <__gethex+0x68>
 800c552:	2c00      	cmp	r4, #0
 800c554:	d1c7      	bne.n	800c4e6 <__gethex+0x9a>
 800c556:	4627      	mov	r7, r4
 800c558:	e7c7      	b.n	800c4ea <__gethex+0x9e>
 800c55a:	464e      	mov	r6, r9
 800c55c:	462f      	mov	r7, r5
 800c55e:	2501      	movs	r5, #1
 800c560:	e7c3      	b.n	800c4ea <__gethex+0x9e>
 800c562:	2400      	movs	r4, #0
 800c564:	1cb1      	adds	r1, r6, #2
 800c566:	e7cc      	b.n	800c502 <__gethex+0xb6>
 800c568:	2401      	movs	r4, #1
 800c56a:	e7fb      	b.n	800c564 <__gethex+0x118>
 800c56c:	fb03 0002 	mla	r0, r3, r2, r0
 800c570:	e7ce      	b.n	800c510 <__gethex+0xc4>
 800c572:	4631      	mov	r1, r6
 800c574:	e7de      	b.n	800c534 <__gethex+0xe8>
 800c576:	eba6 0309 	sub.w	r3, r6, r9
 800c57a:	3b01      	subs	r3, #1
 800c57c:	4629      	mov	r1, r5
 800c57e:	2b07      	cmp	r3, #7
 800c580:	dc0a      	bgt.n	800c598 <__gethex+0x14c>
 800c582:	9801      	ldr	r0, [sp, #4]
 800c584:	f7fd ff74 	bl	800a470 <_Balloc>
 800c588:	4604      	mov	r4, r0
 800c58a:	b940      	cbnz	r0, 800c59e <__gethex+0x152>
 800c58c:	4b5c      	ldr	r3, [pc, #368]	@ (800c700 <__gethex+0x2b4>)
 800c58e:	4602      	mov	r2, r0
 800c590:	21e4      	movs	r1, #228	@ 0xe4
 800c592:	485c      	ldr	r0, [pc, #368]	@ (800c704 <__gethex+0x2b8>)
 800c594:	f7ff fec0 	bl	800c318 <__assert_func>
 800c598:	3101      	adds	r1, #1
 800c59a:	105b      	asrs	r3, r3, #1
 800c59c:	e7ef      	b.n	800c57e <__gethex+0x132>
 800c59e:	f100 0a14 	add.w	sl, r0, #20
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	4655      	mov	r5, sl
 800c5a6:	469b      	mov	fp, r3
 800c5a8:	45b1      	cmp	r9, r6
 800c5aa:	d337      	bcc.n	800c61c <__gethex+0x1d0>
 800c5ac:	f845 bb04 	str.w	fp, [r5], #4
 800c5b0:	eba5 050a 	sub.w	r5, r5, sl
 800c5b4:	10ad      	asrs	r5, r5, #2
 800c5b6:	6125      	str	r5, [r4, #16]
 800c5b8:	4658      	mov	r0, fp
 800c5ba:	f7fe f84b 	bl	800a654 <__hi0bits>
 800c5be:	016d      	lsls	r5, r5, #5
 800c5c0:	f8d8 6000 	ldr.w	r6, [r8]
 800c5c4:	1a2d      	subs	r5, r5, r0
 800c5c6:	42b5      	cmp	r5, r6
 800c5c8:	dd54      	ble.n	800c674 <__gethex+0x228>
 800c5ca:	1bad      	subs	r5, r5, r6
 800c5cc:	4629      	mov	r1, r5
 800c5ce:	4620      	mov	r0, r4
 800c5d0:	f7fe fbdf 	bl	800ad92 <__any_on>
 800c5d4:	4681      	mov	r9, r0
 800c5d6:	b178      	cbz	r0, 800c5f8 <__gethex+0x1ac>
 800c5d8:	1e6b      	subs	r3, r5, #1
 800c5da:	1159      	asrs	r1, r3, #5
 800c5dc:	f003 021f 	and.w	r2, r3, #31
 800c5e0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c5e4:	f04f 0901 	mov.w	r9, #1
 800c5e8:	fa09 f202 	lsl.w	r2, r9, r2
 800c5ec:	420a      	tst	r2, r1
 800c5ee:	d003      	beq.n	800c5f8 <__gethex+0x1ac>
 800c5f0:	454b      	cmp	r3, r9
 800c5f2:	dc36      	bgt.n	800c662 <__gethex+0x216>
 800c5f4:	f04f 0902 	mov.w	r9, #2
 800c5f8:	4629      	mov	r1, r5
 800c5fa:	4620      	mov	r0, r4
 800c5fc:	f7ff febe 	bl	800c37c <rshift>
 800c600:	442f      	add	r7, r5
 800c602:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c606:	42bb      	cmp	r3, r7
 800c608:	da42      	bge.n	800c690 <__gethex+0x244>
 800c60a:	9801      	ldr	r0, [sp, #4]
 800c60c:	4621      	mov	r1, r4
 800c60e:	f7fd ff6f 	bl	800a4f0 <_Bfree>
 800c612:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c614:	2300      	movs	r3, #0
 800c616:	6013      	str	r3, [r2, #0]
 800c618:	25a3      	movs	r5, #163	@ 0xa3
 800c61a:	e793      	b.n	800c544 <__gethex+0xf8>
 800c61c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c620:	2a2e      	cmp	r2, #46	@ 0x2e
 800c622:	d012      	beq.n	800c64a <__gethex+0x1fe>
 800c624:	2b20      	cmp	r3, #32
 800c626:	d104      	bne.n	800c632 <__gethex+0x1e6>
 800c628:	f845 bb04 	str.w	fp, [r5], #4
 800c62c:	f04f 0b00 	mov.w	fp, #0
 800c630:	465b      	mov	r3, fp
 800c632:	7830      	ldrb	r0, [r6, #0]
 800c634:	9303      	str	r3, [sp, #12]
 800c636:	f7ff fef3 	bl	800c420 <__hexdig_fun>
 800c63a:	9b03      	ldr	r3, [sp, #12]
 800c63c:	f000 000f 	and.w	r0, r0, #15
 800c640:	4098      	lsls	r0, r3
 800c642:	ea4b 0b00 	orr.w	fp, fp, r0
 800c646:	3304      	adds	r3, #4
 800c648:	e7ae      	b.n	800c5a8 <__gethex+0x15c>
 800c64a:	45b1      	cmp	r9, r6
 800c64c:	d8ea      	bhi.n	800c624 <__gethex+0x1d8>
 800c64e:	492b      	ldr	r1, [pc, #172]	@ (800c6fc <__gethex+0x2b0>)
 800c650:	9303      	str	r3, [sp, #12]
 800c652:	2201      	movs	r2, #1
 800c654:	4630      	mov	r0, r6
 800c656:	f7ff fe03 	bl	800c260 <strncmp>
 800c65a:	9b03      	ldr	r3, [sp, #12]
 800c65c:	2800      	cmp	r0, #0
 800c65e:	d1e1      	bne.n	800c624 <__gethex+0x1d8>
 800c660:	e7a2      	b.n	800c5a8 <__gethex+0x15c>
 800c662:	1ea9      	subs	r1, r5, #2
 800c664:	4620      	mov	r0, r4
 800c666:	f7fe fb94 	bl	800ad92 <__any_on>
 800c66a:	2800      	cmp	r0, #0
 800c66c:	d0c2      	beq.n	800c5f4 <__gethex+0x1a8>
 800c66e:	f04f 0903 	mov.w	r9, #3
 800c672:	e7c1      	b.n	800c5f8 <__gethex+0x1ac>
 800c674:	da09      	bge.n	800c68a <__gethex+0x23e>
 800c676:	1b75      	subs	r5, r6, r5
 800c678:	4621      	mov	r1, r4
 800c67a:	9801      	ldr	r0, [sp, #4]
 800c67c:	462a      	mov	r2, r5
 800c67e:	f7fe f94f 	bl	800a920 <__lshift>
 800c682:	1b7f      	subs	r7, r7, r5
 800c684:	4604      	mov	r4, r0
 800c686:	f100 0a14 	add.w	sl, r0, #20
 800c68a:	f04f 0900 	mov.w	r9, #0
 800c68e:	e7b8      	b.n	800c602 <__gethex+0x1b6>
 800c690:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c694:	42bd      	cmp	r5, r7
 800c696:	dd6f      	ble.n	800c778 <__gethex+0x32c>
 800c698:	1bed      	subs	r5, r5, r7
 800c69a:	42ae      	cmp	r6, r5
 800c69c:	dc34      	bgt.n	800c708 <__gethex+0x2bc>
 800c69e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c6a2:	2b02      	cmp	r3, #2
 800c6a4:	d022      	beq.n	800c6ec <__gethex+0x2a0>
 800c6a6:	2b03      	cmp	r3, #3
 800c6a8:	d024      	beq.n	800c6f4 <__gethex+0x2a8>
 800c6aa:	2b01      	cmp	r3, #1
 800c6ac:	d115      	bne.n	800c6da <__gethex+0x28e>
 800c6ae:	42ae      	cmp	r6, r5
 800c6b0:	d113      	bne.n	800c6da <__gethex+0x28e>
 800c6b2:	2e01      	cmp	r6, #1
 800c6b4:	d10b      	bne.n	800c6ce <__gethex+0x282>
 800c6b6:	9a02      	ldr	r2, [sp, #8]
 800c6b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c6bc:	6013      	str	r3, [r2, #0]
 800c6be:	2301      	movs	r3, #1
 800c6c0:	6123      	str	r3, [r4, #16]
 800c6c2:	f8ca 3000 	str.w	r3, [sl]
 800c6c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c6c8:	2562      	movs	r5, #98	@ 0x62
 800c6ca:	601c      	str	r4, [r3, #0]
 800c6cc:	e73a      	b.n	800c544 <__gethex+0xf8>
 800c6ce:	1e71      	subs	r1, r6, #1
 800c6d0:	4620      	mov	r0, r4
 800c6d2:	f7fe fb5e 	bl	800ad92 <__any_on>
 800c6d6:	2800      	cmp	r0, #0
 800c6d8:	d1ed      	bne.n	800c6b6 <__gethex+0x26a>
 800c6da:	9801      	ldr	r0, [sp, #4]
 800c6dc:	4621      	mov	r1, r4
 800c6de:	f7fd ff07 	bl	800a4f0 <_Bfree>
 800c6e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	6013      	str	r3, [r2, #0]
 800c6e8:	2550      	movs	r5, #80	@ 0x50
 800c6ea:	e72b      	b.n	800c544 <__gethex+0xf8>
 800c6ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d1f3      	bne.n	800c6da <__gethex+0x28e>
 800c6f2:	e7e0      	b.n	800c6b6 <__gethex+0x26a>
 800c6f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d1dd      	bne.n	800c6b6 <__gethex+0x26a>
 800c6fa:	e7ee      	b.n	800c6da <__gethex+0x28e>
 800c6fc:	0800cea8 	.word	0x0800cea8
 800c700:	0800cd3d 	.word	0x0800cd3d
 800c704:	0800d056 	.word	0x0800d056
 800c708:	1e6f      	subs	r7, r5, #1
 800c70a:	f1b9 0f00 	cmp.w	r9, #0
 800c70e:	d130      	bne.n	800c772 <__gethex+0x326>
 800c710:	b127      	cbz	r7, 800c71c <__gethex+0x2d0>
 800c712:	4639      	mov	r1, r7
 800c714:	4620      	mov	r0, r4
 800c716:	f7fe fb3c 	bl	800ad92 <__any_on>
 800c71a:	4681      	mov	r9, r0
 800c71c:	117a      	asrs	r2, r7, #5
 800c71e:	2301      	movs	r3, #1
 800c720:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c724:	f007 071f 	and.w	r7, r7, #31
 800c728:	40bb      	lsls	r3, r7
 800c72a:	4213      	tst	r3, r2
 800c72c:	4629      	mov	r1, r5
 800c72e:	4620      	mov	r0, r4
 800c730:	bf18      	it	ne
 800c732:	f049 0902 	orrne.w	r9, r9, #2
 800c736:	f7ff fe21 	bl	800c37c <rshift>
 800c73a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c73e:	1b76      	subs	r6, r6, r5
 800c740:	2502      	movs	r5, #2
 800c742:	f1b9 0f00 	cmp.w	r9, #0
 800c746:	d047      	beq.n	800c7d8 <__gethex+0x38c>
 800c748:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c74c:	2b02      	cmp	r3, #2
 800c74e:	d015      	beq.n	800c77c <__gethex+0x330>
 800c750:	2b03      	cmp	r3, #3
 800c752:	d017      	beq.n	800c784 <__gethex+0x338>
 800c754:	2b01      	cmp	r3, #1
 800c756:	d109      	bne.n	800c76c <__gethex+0x320>
 800c758:	f019 0f02 	tst.w	r9, #2
 800c75c:	d006      	beq.n	800c76c <__gethex+0x320>
 800c75e:	f8da 3000 	ldr.w	r3, [sl]
 800c762:	ea49 0903 	orr.w	r9, r9, r3
 800c766:	f019 0f01 	tst.w	r9, #1
 800c76a:	d10e      	bne.n	800c78a <__gethex+0x33e>
 800c76c:	f045 0510 	orr.w	r5, r5, #16
 800c770:	e032      	b.n	800c7d8 <__gethex+0x38c>
 800c772:	f04f 0901 	mov.w	r9, #1
 800c776:	e7d1      	b.n	800c71c <__gethex+0x2d0>
 800c778:	2501      	movs	r5, #1
 800c77a:	e7e2      	b.n	800c742 <__gethex+0x2f6>
 800c77c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c77e:	f1c3 0301 	rsb	r3, r3, #1
 800c782:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c784:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c786:	2b00      	cmp	r3, #0
 800c788:	d0f0      	beq.n	800c76c <__gethex+0x320>
 800c78a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c78e:	f104 0314 	add.w	r3, r4, #20
 800c792:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c796:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c79a:	f04f 0c00 	mov.w	ip, #0
 800c79e:	4618      	mov	r0, r3
 800c7a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7a4:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800c7a8:	d01b      	beq.n	800c7e2 <__gethex+0x396>
 800c7aa:	3201      	adds	r2, #1
 800c7ac:	6002      	str	r2, [r0, #0]
 800c7ae:	2d02      	cmp	r5, #2
 800c7b0:	f104 0314 	add.w	r3, r4, #20
 800c7b4:	d13c      	bne.n	800c830 <__gethex+0x3e4>
 800c7b6:	f8d8 2000 	ldr.w	r2, [r8]
 800c7ba:	3a01      	subs	r2, #1
 800c7bc:	42b2      	cmp	r2, r6
 800c7be:	d109      	bne.n	800c7d4 <__gethex+0x388>
 800c7c0:	1171      	asrs	r1, r6, #5
 800c7c2:	2201      	movs	r2, #1
 800c7c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c7c8:	f006 061f 	and.w	r6, r6, #31
 800c7cc:	fa02 f606 	lsl.w	r6, r2, r6
 800c7d0:	421e      	tst	r6, r3
 800c7d2:	d13a      	bne.n	800c84a <__gethex+0x3fe>
 800c7d4:	f045 0520 	orr.w	r5, r5, #32
 800c7d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c7da:	601c      	str	r4, [r3, #0]
 800c7dc:	9b02      	ldr	r3, [sp, #8]
 800c7de:	601f      	str	r7, [r3, #0]
 800c7e0:	e6b0      	b.n	800c544 <__gethex+0xf8>
 800c7e2:	4299      	cmp	r1, r3
 800c7e4:	f843 cc04 	str.w	ip, [r3, #-4]
 800c7e8:	d8d9      	bhi.n	800c79e <__gethex+0x352>
 800c7ea:	68a3      	ldr	r3, [r4, #8]
 800c7ec:	459b      	cmp	fp, r3
 800c7ee:	db17      	blt.n	800c820 <__gethex+0x3d4>
 800c7f0:	6861      	ldr	r1, [r4, #4]
 800c7f2:	9801      	ldr	r0, [sp, #4]
 800c7f4:	3101      	adds	r1, #1
 800c7f6:	f7fd fe3b 	bl	800a470 <_Balloc>
 800c7fa:	4681      	mov	r9, r0
 800c7fc:	b918      	cbnz	r0, 800c806 <__gethex+0x3ba>
 800c7fe:	4b1a      	ldr	r3, [pc, #104]	@ (800c868 <__gethex+0x41c>)
 800c800:	4602      	mov	r2, r0
 800c802:	2184      	movs	r1, #132	@ 0x84
 800c804:	e6c5      	b.n	800c592 <__gethex+0x146>
 800c806:	6922      	ldr	r2, [r4, #16]
 800c808:	3202      	adds	r2, #2
 800c80a:	f104 010c 	add.w	r1, r4, #12
 800c80e:	0092      	lsls	r2, r2, #2
 800c810:	300c      	adds	r0, #12
 800c812:	f7ff fd69 	bl	800c2e8 <memcpy>
 800c816:	4621      	mov	r1, r4
 800c818:	9801      	ldr	r0, [sp, #4]
 800c81a:	f7fd fe69 	bl	800a4f0 <_Bfree>
 800c81e:	464c      	mov	r4, r9
 800c820:	6923      	ldr	r3, [r4, #16]
 800c822:	1c5a      	adds	r2, r3, #1
 800c824:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c828:	6122      	str	r2, [r4, #16]
 800c82a:	2201      	movs	r2, #1
 800c82c:	615a      	str	r2, [r3, #20]
 800c82e:	e7be      	b.n	800c7ae <__gethex+0x362>
 800c830:	6922      	ldr	r2, [r4, #16]
 800c832:	455a      	cmp	r2, fp
 800c834:	dd0b      	ble.n	800c84e <__gethex+0x402>
 800c836:	2101      	movs	r1, #1
 800c838:	4620      	mov	r0, r4
 800c83a:	f7ff fd9f 	bl	800c37c <rshift>
 800c83e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c842:	3701      	adds	r7, #1
 800c844:	42bb      	cmp	r3, r7
 800c846:	f6ff aee0 	blt.w	800c60a <__gethex+0x1be>
 800c84a:	2501      	movs	r5, #1
 800c84c:	e7c2      	b.n	800c7d4 <__gethex+0x388>
 800c84e:	f016 061f 	ands.w	r6, r6, #31
 800c852:	d0fa      	beq.n	800c84a <__gethex+0x3fe>
 800c854:	4453      	add	r3, sl
 800c856:	f1c6 0620 	rsb	r6, r6, #32
 800c85a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c85e:	f7fd fef9 	bl	800a654 <__hi0bits>
 800c862:	42b0      	cmp	r0, r6
 800c864:	dbe7      	blt.n	800c836 <__gethex+0x3ea>
 800c866:	e7f0      	b.n	800c84a <__gethex+0x3fe>
 800c868:	0800cd3d 	.word	0x0800cd3d

0800c86c <L_shift>:
 800c86c:	f1c2 0208 	rsb	r2, r2, #8
 800c870:	0092      	lsls	r2, r2, #2
 800c872:	b570      	push	{r4, r5, r6, lr}
 800c874:	f1c2 0620 	rsb	r6, r2, #32
 800c878:	6843      	ldr	r3, [r0, #4]
 800c87a:	6804      	ldr	r4, [r0, #0]
 800c87c:	fa03 f506 	lsl.w	r5, r3, r6
 800c880:	432c      	orrs	r4, r5
 800c882:	40d3      	lsrs	r3, r2
 800c884:	6004      	str	r4, [r0, #0]
 800c886:	f840 3f04 	str.w	r3, [r0, #4]!
 800c88a:	4288      	cmp	r0, r1
 800c88c:	d3f4      	bcc.n	800c878 <L_shift+0xc>
 800c88e:	bd70      	pop	{r4, r5, r6, pc}

0800c890 <__match>:
 800c890:	b530      	push	{r4, r5, lr}
 800c892:	6803      	ldr	r3, [r0, #0]
 800c894:	3301      	adds	r3, #1
 800c896:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c89a:	b914      	cbnz	r4, 800c8a2 <__match+0x12>
 800c89c:	6003      	str	r3, [r0, #0]
 800c89e:	2001      	movs	r0, #1
 800c8a0:	bd30      	pop	{r4, r5, pc}
 800c8a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c8a6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c8aa:	2d19      	cmp	r5, #25
 800c8ac:	bf98      	it	ls
 800c8ae:	3220      	addls	r2, #32
 800c8b0:	42a2      	cmp	r2, r4
 800c8b2:	d0f0      	beq.n	800c896 <__match+0x6>
 800c8b4:	2000      	movs	r0, #0
 800c8b6:	e7f3      	b.n	800c8a0 <__match+0x10>

0800c8b8 <__hexnan>:
 800c8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8bc:	680b      	ldr	r3, [r1, #0]
 800c8be:	6801      	ldr	r1, [r0, #0]
 800c8c0:	115e      	asrs	r6, r3, #5
 800c8c2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c8c6:	f013 031f 	ands.w	r3, r3, #31
 800c8ca:	b087      	sub	sp, #28
 800c8cc:	bf18      	it	ne
 800c8ce:	3604      	addne	r6, #4
 800c8d0:	2500      	movs	r5, #0
 800c8d2:	1f37      	subs	r7, r6, #4
 800c8d4:	4682      	mov	sl, r0
 800c8d6:	4690      	mov	r8, r2
 800c8d8:	9301      	str	r3, [sp, #4]
 800c8da:	f846 5c04 	str.w	r5, [r6, #-4]
 800c8de:	46b9      	mov	r9, r7
 800c8e0:	463c      	mov	r4, r7
 800c8e2:	9502      	str	r5, [sp, #8]
 800c8e4:	46ab      	mov	fp, r5
 800c8e6:	784a      	ldrb	r2, [r1, #1]
 800c8e8:	1c4b      	adds	r3, r1, #1
 800c8ea:	9303      	str	r3, [sp, #12]
 800c8ec:	b342      	cbz	r2, 800c940 <__hexnan+0x88>
 800c8ee:	4610      	mov	r0, r2
 800c8f0:	9105      	str	r1, [sp, #20]
 800c8f2:	9204      	str	r2, [sp, #16]
 800c8f4:	f7ff fd94 	bl	800c420 <__hexdig_fun>
 800c8f8:	2800      	cmp	r0, #0
 800c8fa:	d151      	bne.n	800c9a0 <__hexnan+0xe8>
 800c8fc:	9a04      	ldr	r2, [sp, #16]
 800c8fe:	9905      	ldr	r1, [sp, #20]
 800c900:	2a20      	cmp	r2, #32
 800c902:	d818      	bhi.n	800c936 <__hexnan+0x7e>
 800c904:	9b02      	ldr	r3, [sp, #8]
 800c906:	459b      	cmp	fp, r3
 800c908:	dd13      	ble.n	800c932 <__hexnan+0x7a>
 800c90a:	454c      	cmp	r4, r9
 800c90c:	d206      	bcs.n	800c91c <__hexnan+0x64>
 800c90e:	2d07      	cmp	r5, #7
 800c910:	dc04      	bgt.n	800c91c <__hexnan+0x64>
 800c912:	462a      	mov	r2, r5
 800c914:	4649      	mov	r1, r9
 800c916:	4620      	mov	r0, r4
 800c918:	f7ff ffa8 	bl	800c86c <L_shift>
 800c91c:	4544      	cmp	r4, r8
 800c91e:	d952      	bls.n	800c9c6 <__hexnan+0x10e>
 800c920:	2300      	movs	r3, #0
 800c922:	f1a4 0904 	sub.w	r9, r4, #4
 800c926:	f844 3c04 	str.w	r3, [r4, #-4]
 800c92a:	f8cd b008 	str.w	fp, [sp, #8]
 800c92e:	464c      	mov	r4, r9
 800c930:	461d      	mov	r5, r3
 800c932:	9903      	ldr	r1, [sp, #12]
 800c934:	e7d7      	b.n	800c8e6 <__hexnan+0x2e>
 800c936:	2a29      	cmp	r2, #41	@ 0x29
 800c938:	d157      	bne.n	800c9ea <__hexnan+0x132>
 800c93a:	3102      	adds	r1, #2
 800c93c:	f8ca 1000 	str.w	r1, [sl]
 800c940:	f1bb 0f00 	cmp.w	fp, #0
 800c944:	d051      	beq.n	800c9ea <__hexnan+0x132>
 800c946:	454c      	cmp	r4, r9
 800c948:	d206      	bcs.n	800c958 <__hexnan+0xa0>
 800c94a:	2d07      	cmp	r5, #7
 800c94c:	dc04      	bgt.n	800c958 <__hexnan+0xa0>
 800c94e:	462a      	mov	r2, r5
 800c950:	4649      	mov	r1, r9
 800c952:	4620      	mov	r0, r4
 800c954:	f7ff ff8a 	bl	800c86c <L_shift>
 800c958:	4544      	cmp	r4, r8
 800c95a:	d936      	bls.n	800c9ca <__hexnan+0x112>
 800c95c:	f1a8 0204 	sub.w	r2, r8, #4
 800c960:	4623      	mov	r3, r4
 800c962:	f853 1b04 	ldr.w	r1, [r3], #4
 800c966:	f842 1f04 	str.w	r1, [r2, #4]!
 800c96a:	429f      	cmp	r7, r3
 800c96c:	d2f9      	bcs.n	800c962 <__hexnan+0xaa>
 800c96e:	1b3b      	subs	r3, r7, r4
 800c970:	f023 0303 	bic.w	r3, r3, #3
 800c974:	3304      	adds	r3, #4
 800c976:	3401      	adds	r4, #1
 800c978:	3e03      	subs	r6, #3
 800c97a:	42b4      	cmp	r4, r6
 800c97c:	bf88      	it	hi
 800c97e:	2304      	movhi	r3, #4
 800c980:	4443      	add	r3, r8
 800c982:	2200      	movs	r2, #0
 800c984:	f843 2b04 	str.w	r2, [r3], #4
 800c988:	429f      	cmp	r7, r3
 800c98a:	d2fb      	bcs.n	800c984 <__hexnan+0xcc>
 800c98c:	683b      	ldr	r3, [r7, #0]
 800c98e:	b91b      	cbnz	r3, 800c998 <__hexnan+0xe0>
 800c990:	4547      	cmp	r7, r8
 800c992:	d128      	bne.n	800c9e6 <__hexnan+0x12e>
 800c994:	2301      	movs	r3, #1
 800c996:	603b      	str	r3, [r7, #0]
 800c998:	2005      	movs	r0, #5
 800c99a:	b007      	add	sp, #28
 800c99c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9a0:	3501      	adds	r5, #1
 800c9a2:	2d08      	cmp	r5, #8
 800c9a4:	f10b 0b01 	add.w	fp, fp, #1
 800c9a8:	dd06      	ble.n	800c9b8 <__hexnan+0x100>
 800c9aa:	4544      	cmp	r4, r8
 800c9ac:	d9c1      	bls.n	800c932 <__hexnan+0x7a>
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	f844 3c04 	str.w	r3, [r4, #-4]
 800c9b4:	2501      	movs	r5, #1
 800c9b6:	3c04      	subs	r4, #4
 800c9b8:	6822      	ldr	r2, [r4, #0]
 800c9ba:	f000 000f 	and.w	r0, r0, #15
 800c9be:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c9c2:	6020      	str	r0, [r4, #0]
 800c9c4:	e7b5      	b.n	800c932 <__hexnan+0x7a>
 800c9c6:	2508      	movs	r5, #8
 800c9c8:	e7b3      	b.n	800c932 <__hexnan+0x7a>
 800c9ca:	9b01      	ldr	r3, [sp, #4]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d0dd      	beq.n	800c98c <__hexnan+0xd4>
 800c9d0:	f1c3 0320 	rsb	r3, r3, #32
 800c9d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c9d8:	40da      	lsrs	r2, r3
 800c9da:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c9de:	4013      	ands	r3, r2
 800c9e0:	f846 3c04 	str.w	r3, [r6, #-4]
 800c9e4:	e7d2      	b.n	800c98c <__hexnan+0xd4>
 800c9e6:	3f04      	subs	r7, #4
 800c9e8:	e7d0      	b.n	800c98c <__hexnan+0xd4>
 800c9ea:	2004      	movs	r0, #4
 800c9ec:	e7d5      	b.n	800c99a <__hexnan+0xe2>

0800c9ee <__ascii_mbtowc>:
 800c9ee:	b082      	sub	sp, #8
 800c9f0:	b901      	cbnz	r1, 800c9f4 <__ascii_mbtowc+0x6>
 800c9f2:	a901      	add	r1, sp, #4
 800c9f4:	b142      	cbz	r2, 800ca08 <__ascii_mbtowc+0x1a>
 800c9f6:	b14b      	cbz	r3, 800ca0c <__ascii_mbtowc+0x1e>
 800c9f8:	7813      	ldrb	r3, [r2, #0]
 800c9fa:	600b      	str	r3, [r1, #0]
 800c9fc:	7812      	ldrb	r2, [r2, #0]
 800c9fe:	1e10      	subs	r0, r2, #0
 800ca00:	bf18      	it	ne
 800ca02:	2001      	movne	r0, #1
 800ca04:	b002      	add	sp, #8
 800ca06:	4770      	bx	lr
 800ca08:	4610      	mov	r0, r2
 800ca0a:	e7fb      	b.n	800ca04 <__ascii_mbtowc+0x16>
 800ca0c:	f06f 0001 	mvn.w	r0, #1
 800ca10:	e7f8      	b.n	800ca04 <__ascii_mbtowc+0x16>

0800ca12 <_realloc_r>:
 800ca12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca16:	4680      	mov	r8, r0
 800ca18:	4615      	mov	r5, r2
 800ca1a:	460c      	mov	r4, r1
 800ca1c:	b921      	cbnz	r1, 800ca28 <_realloc_r+0x16>
 800ca1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca22:	4611      	mov	r1, r2
 800ca24:	f7fd bc98 	b.w	800a358 <_malloc_r>
 800ca28:	b92a      	cbnz	r2, 800ca36 <_realloc_r+0x24>
 800ca2a:	f7fd fc21 	bl	800a270 <_free_r>
 800ca2e:	2400      	movs	r4, #0
 800ca30:	4620      	mov	r0, r4
 800ca32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca36:	f000 f840 	bl	800caba <_malloc_usable_size_r>
 800ca3a:	4285      	cmp	r5, r0
 800ca3c:	4606      	mov	r6, r0
 800ca3e:	d802      	bhi.n	800ca46 <_realloc_r+0x34>
 800ca40:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ca44:	d8f4      	bhi.n	800ca30 <_realloc_r+0x1e>
 800ca46:	4629      	mov	r1, r5
 800ca48:	4640      	mov	r0, r8
 800ca4a:	f7fd fc85 	bl	800a358 <_malloc_r>
 800ca4e:	4607      	mov	r7, r0
 800ca50:	2800      	cmp	r0, #0
 800ca52:	d0ec      	beq.n	800ca2e <_realloc_r+0x1c>
 800ca54:	42b5      	cmp	r5, r6
 800ca56:	462a      	mov	r2, r5
 800ca58:	4621      	mov	r1, r4
 800ca5a:	bf28      	it	cs
 800ca5c:	4632      	movcs	r2, r6
 800ca5e:	f7ff fc43 	bl	800c2e8 <memcpy>
 800ca62:	4621      	mov	r1, r4
 800ca64:	4640      	mov	r0, r8
 800ca66:	f7fd fc03 	bl	800a270 <_free_r>
 800ca6a:	463c      	mov	r4, r7
 800ca6c:	e7e0      	b.n	800ca30 <_realloc_r+0x1e>

0800ca6e <__ascii_wctomb>:
 800ca6e:	4603      	mov	r3, r0
 800ca70:	4608      	mov	r0, r1
 800ca72:	b141      	cbz	r1, 800ca86 <__ascii_wctomb+0x18>
 800ca74:	2aff      	cmp	r2, #255	@ 0xff
 800ca76:	d904      	bls.n	800ca82 <__ascii_wctomb+0x14>
 800ca78:	228a      	movs	r2, #138	@ 0x8a
 800ca7a:	601a      	str	r2, [r3, #0]
 800ca7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ca80:	4770      	bx	lr
 800ca82:	700a      	strb	r2, [r1, #0]
 800ca84:	2001      	movs	r0, #1
 800ca86:	4770      	bx	lr

0800ca88 <fiprintf>:
 800ca88:	b40e      	push	{r1, r2, r3}
 800ca8a:	b503      	push	{r0, r1, lr}
 800ca8c:	4601      	mov	r1, r0
 800ca8e:	ab03      	add	r3, sp, #12
 800ca90:	4805      	ldr	r0, [pc, #20]	@ (800caa8 <fiprintf+0x20>)
 800ca92:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca96:	6800      	ldr	r0, [r0, #0]
 800ca98:	9301      	str	r3, [sp, #4]
 800ca9a:	f7ff f9a1 	bl	800bde0 <_vfiprintf_r>
 800ca9e:	b002      	add	sp, #8
 800caa0:	f85d eb04 	ldr.w	lr, [sp], #4
 800caa4:	b003      	add	sp, #12
 800caa6:	4770      	bx	lr
 800caa8:	20000f5c 	.word	0x20000f5c

0800caac <abort>:
 800caac:	b508      	push	{r3, lr}
 800caae:	2006      	movs	r0, #6
 800cab0:	f000 f834 	bl	800cb1c <raise>
 800cab4:	2001      	movs	r0, #1
 800cab6:	f7f4 fee7 	bl	8001888 <_exit>

0800caba <_malloc_usable_size_r>:
 800caba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cabe:	1f18      	subs	r0, r3, #4
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	bfbc      	itt	lt
 800cac4:	580b      	ldrlt	r3, [r1, r0]
 800cac6:	18c0      	addlt	r0, r0, r3
 800cac8:	4770      	bx	lr

0800caca <_raise_r>:
 800caca:	291f      	cmp	r1, #31
 800cacc:	b538      	push	{r3, r4, r5, lr}
 800cace:	4605      	mov	r5, r0
 800cad0:	460c      	mov	r4, r1
 800cad2:	d904      	bls.n	800cade <_raise_r+0x14>
 800cad4:	2316      	movs	r3, #22
 800cad6:	6003      	str	r3, [r0, #0]
 800cad8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cadc:	bd38      	pop	{r3, r4, r5, pc}
 800cade:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cae0:	b112      	cbz	r2, 800cae8 <_raise_r+0x1e>
 800cae2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cae6:	b94b      	cbnz	r3, 800cafc <_raise_r+0x32>
 800cae8:	4628      	mov	r0, r5
 800caea:	f000 f831 	bl	800cb50 <_getpid_r>
 800caee:	4622      	mov	r2, r4
 800caf0:	4601      	mov	r1, r0
 800caf2:	4628      	mov	r0, r5
 800caf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800caf8:	f000 b818 	b.w	800cb2c <_kill_r>
 800cafc:	2b01      	cmp	r3, #1
 800cafe:	d00a      	beq.n	800cb16 <_raise_r+0x4c>
 800cb00:	1c59      	adds	r1, r3, #1
 800cb02:	d103      	bne.n	800cb0c <_raise_r+0x42>
 800cb04:	2316      	movs	r3, #22
 800cb06:	6003      	str	r3, [r0, #0]
 800cb08:	2001      	movs	r0, #1
 800cb0a:	e7e7      	b.n	800cadc <_raise_r+0x12>
 800cb0c:	2100      	movs	r1, #0
 800cb0e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cb12:	4620      	mov	r0, r4
 800cb14:	4798      	blx	r3
 800cb16:	2000      	movs	r0, #0
 800cb18:	e7e0      	b.n	800cadc <_raise_r+0x12>
	...

0800cb1c <raise>:
 800cb1c:	4b02      	ldr	r3, [pc, #8]	@ (800cb28 <raise+0xc>)
 800cb1e:	4601      	mov	r1, r0
 800cb20:	6818      	ldr	r0, [r3, #0]
 800cb22:	f7ff bfd2 	b.w	800caca <_raise_r>
 800cb26:	bf00      	nop
 800cb28:	20000f5c 	.word	0x20000f5c

0800cb2c <_kill_r>:
 800cb2c:	b538      	push	{r3, r4, r5, lr}
 800cb2e:	4d07      	ldr	r5, [pc, #28]	@ (800cb4c <_kill_r+0x20>)
 800cb30:	2300      	movs	r3, #0
 800cb32:	4604      	mov	r4, r0
 800cb34:	4608      	mov	r0, r1
 800cb36:	4611      	mov	r1, r2
 800cb38:	602b      	str	r3, [r5, #0]
 800cb3a:	f7f4 fe95 	bl	8001868 <_kill>
 800cb3e:	1c43      	adds	r3, r0, #1
 800cb40:	d102      	bne.n	800cb48 <_kill_r+0x1c>
 800cb42:	682b      	ldr	r3, [r5, #0]
 800cb44:	b103      	cbz	r3, 800cb48 <_kill_r+0x1c>
 800cb46:	6023      	str	r3, [r4, #0]
 800cb48:	bd38      	pop	{r3, r4, r5, pc}
 800cb4a:	bf00      	nop
 800cb4c:	20003164 	.word	0x20003164

0800cb50 <_getpid_r>:
 800cb50:	f7f4 be82 	b.w	8001858 <_getpid>

0800cb54 <_init>:
 800cb54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb56:	bf00      	nop
 800cb58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb5a:	bc08      	pop	{r3}
 800cb5c:	469e      	mov	lr, r3
 800cb5e:	4770      	bx	lr

0800cb60 <_fini>:
 800cb60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb62:	bf00      	nop
 800cb64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb66:	bc08      	pop	{r3}
 800cb68:	469e      	mov	lr, r3
 800cb6a:	4770      	bx	lr
