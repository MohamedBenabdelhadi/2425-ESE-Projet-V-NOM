
test_YLIDAR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e68  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000668  0800a048  0800a048  0000b048  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a6b0  0800a6b0  0000c1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a6b0  0800a6b0  0000b6b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a6b8  0800a6b8  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a6b8  0800a6b8  0000b6b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a6bc  0800a6bc  0000b6bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800a6c0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a9c  200001d4  0800a894  0000c1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c70  0800a894  0000cc70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000db53  00000000  00000000  0000c204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002289  00000000  00000000  00019d57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b18  00000000  00000000  0001bfe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000872  00000000  00000000  0001caf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e2d3  00000000  00000000  0001d36a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000df8f  00000000  00000000  0003b63d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b9295  00000000  00000000  000495cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00102861  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000421c  00000000  00000000  001028a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00106ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a030 	.word	0x0800a030

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	0800a030 	.word	0x0800a030

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <MX_GPIO_Init>:
        * EXTI
     PA9   ------> USART1_TX
     PA10   ------> USART1_RX
*/
void MX_GPIO_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08a      	sub	sp, #40	@ 0x28
 8001038:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103a:	f107 0314 	add.w	r3, r7, #20
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
 8001046:	60da      	str	r2, [r3, #12]
 8001048:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800104a:	4b34      	ldr	r3, [pc, #208]	@ (800111c <MX_GPIO_Init+0xe8>)
 800104c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800104e:	4a33      	ldr	r2, [pc, #204]	@ (800111c <MX_GPIO_Init+0xe8>)
 8001050:	f043 0304 	orr.w	r3, r3, #4
 8001054:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001056:	4b31      	ldr	r3, [pc, #196]	@ (800111c <MX_GPIO_Init+0xe8>)
 8001058:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800105a:	f003 0304 	and.w	r3, r3, #4
 800105e:	613b      	str	r3, [r7, #16]
 8001060:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001062:	4b2e      	ldr	r3, [pc, #184]	@ (800111c <MX_GPIO_Init+0xe8>)
 8001064:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001066:	4a2d      	ldr	r2, [pc, #180]	@ (800111c <MX_GPIO_Init+0xe8>)
 8001068:	f043 0320 	orr.w	r3, r3, #32
 800106c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800106e:	4b2b      	ldr	r3, [pc, #172]	@ (800111c <MX_GPIO_Init+0xe8>)
 8001070:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001072:	f003 0320 	and.w	r3, r3, #32
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800107a:	4b28      	ldr	r3, [pc, #160]	@ (800111c <MX_GPIO_Init+0xe8>)
 800107c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800107e:	4a27      	ldr	r2, [pc, #156]	@ (800111c <MX_GPIO_Init+0xe8>)
 8001080:	f043 0301 	orr.w	r3, r3, #1
 8001084:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001086:	4b25      	ldr	r3, [pc, #148]	@ (800111c <MX_GPIO_Init+0xe8>)
 8001088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	60bb      	str	r3, [r7, #8]
 8001090:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001092:	4b22      	ldr	r3, [pc, #136]	@ (800111c <MX_GPIO_Init+0xe8>)
 8001094:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001096:	4a21      	ldr	r2, [pc, #132]	@ (800111c <MX_GPIO_Init+0xe8>)
 8001098:	f043 0302 	orr.w	r3, r3, #2
 800109c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800109e:	4b1f      	ldr	r3, [pc, #124]	@ (800111c <MX_GPIO_Init+0xe8>)
 80010a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010a2:	f003 0302 	and.w	r3, r3, #2
 80010a6:	607b      	str	r3, [r7, #4]
 80010a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010aa:	2200      	movs	r2, #0
 80010ac:	2120      	movs	r1, #32
 80010ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010b2:	f001 f95f 	bl	8002374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010bc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80010c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010c6:	f107 0314 	add.w	r3, r7, #20
 80010ca:	4619      	mov	r1, r3
 80010cc:	4814      	ldr	r0, [pc, #80]	@ (8001120 <MX_GPIO_Init+0xec>)
 80010ce:	f000 ffcf 	bl	8002070 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80010d2:	2320      	movs	r3, #32
 80010d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d6:	2301      	movs	r3, #1
 80010d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010de:	2300      	movs	r3, #0
 80010e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010e2:	f107 0314 	add.w	r3, r7, #20
 80010e6:	4619      	mov	r1, r3
 80010e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010ec:	f000 ffc0 	bl	8002070 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80010f0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80010f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f6:	2302      	movs	r3, #2
 80010f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fe:	2300      	movs	r3, #0
 8001100:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001102:	2307      	movs	r3, #7
 8001104:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001106:	f107 0314 	add.w	r3, r7, #20
 800110a:	4619      	mov	r1, r3
 800110c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001110:	f000 ffae 	bl	8002070 <HAL_GPIO_Init>

}
 8001114:	bf00      	nop
 8001116:	3728      	adds	r7, #40	@ 0x28
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40021000 	.word	0x40021000
 8001120:	48000800 	.word	0x48000800

08001124 <__io_putchar>:
 * @brief Transmit a character over UART.
 * @param ch: Character to transmit.
 * @retval int: The transmitted character.
 */
int __io_putchar(int ch)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800112c:	1d39      	adds	r1, r7, #4
 800112e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001132:	2201      	movs	r2, #1
 8001134:	4803      	ldr	r0, [pc, #12]	@ (8001144 <__io_putchar+0x20>)
 8001136:	f002 f957 	bl	80033e8 <HAL_UART_Transmit>

	return ch;
 800113a:	687b      	ldr	r3, [r7, #4]
}
 800113c:	4618      	mov	r0, r3
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	200009f8 	.word	0x200009f8

08001148 <parseYLIDARData>:
 * @brief Parse and print YDLIDAR X2 scan data.
 * @param data: Pointer to the received data buffer.
 * @retval None
 */
void parseYLIDARData(uint8_t *data)
{
 8001148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800114a:	b093      	sub	sp, #76	@ 0x4c
 800114c:	af02      	add	r7, sp, #8
 800114e:	6078      	str	r0, [r7, #4]
    if (data[0] == YLIDAR_START_BYTE2 && data[1] == YLIDAR_START_BYTE1)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2baa      	cmp	r3, #170	@ 0xaa
 8001156:	f040 8169 	bne.w	800142c <parseYLIDARData+0x2e4>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	3301      	adds	r3, #1
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	2b55      	cmp	r3, #85	@ 0x55
 8001162:	f040 8163 	bne.w	800142c <parseYLIDARData+0x2e4>
    {
        printf("Started parsing\r\n");
 8001166:	48b6      	ldr	r0, [pc, #728]	@ (8001440 <parseYLIDARData+0x2f8>)
 8001168:	f005 f9a2 	bl	80064b0 <puts>

        // Extract fields in little-endian mode
        uint16_t packetHeader = (data[1] << 8) | data[0];
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	3301      	adds	r3, #1
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	021b      	lsls	r3, r3, #8
 8001174:	b21a      	sxth	r2, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	b21b      	sxth	r3, r3
 800117c:	4313      	orrs	r3, r2
 800117e:	b21b      	sxth	r3, r3
 8001180:	85fb      	strh	r3, [r7, #46]	@ 0x2e
        uint8_t packageType = data[2] & 0x1;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	3302      	adds	r3, #2
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	f003 0301 	and.w	r3, r3, #1
 800118c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
        uint8_t scan_frequency = (data[1] >> 1)/10;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3301      	adds	r3, #1
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	085b      	lsrs	r3, r3, #1
 8001198:	b2db      	uxtb	r3, r3
 800119a:	4aaa      	ldr	r2, [pc, #680]	@ (8001444 <parseYLIDARData+0x2fc>)
 800119c:	fba2 2303 	umull	r2, r3, r2, r3
 80011a0:	08db      	lsrs	r3, r3, #3
 80011a2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
        uint8_t sampleQuantity = data[3];
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	78db      	ldrb	r3, [r3, #3]
 80011aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        uint16_t startAngleRaw = data[4] | (data[5] << 8);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	3304      	adds	r3, #4
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	b21a      	sxth	r2, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	3305      	adds	r3, #5
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	021b      	lsls	r3, r3, #8
 80011be:	b21b      	sxth	r3, r3
 80011c0:	4313      	orrs	r3, r2
 80011c2:	b21b      	sxth	r3, r3
 80011c4:	853b      	strh	r3, [r7, #40]	@ 0x28
		uint16_t endAngleRaw = data[6] | (data[7] << 8);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	3306      	adds	r3, #6
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	b21a      	sxth	r2, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	3307      	adds	r3, #7
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	021b      	lsls	r3, r3, #8
 80011d6:	b21b      	sxth	r3, r3
 80011d8:	4313      	orrs	r3, r2
 80011da:	b21b      	sxth	r3, r3
 80011dc:	84fb      	strh	r3, [r7, #38]	@ 0x26
		uint16_t checksum = data[8] | (data[9] << 8);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	3308      	adds	r3, #8
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	b21a      	sxth	r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	3309      	adds	r3, #9
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	021b      	lsls	r3, r3, #8
 80011ee:	b21b      	sxth	r3, r3
 80011f0:	4313      	orrs	r3, r2
 80011f2:	b21b      	sxth	r3, r3
 80011f4:	84bb      	strh	r3, [r7, #36]	@ 0x24

        printf("Packet Header: 0x%X\r\n", packetHeader);
 80011f6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80011f8:	4619      	mov	r1, r3
 80011fa:	4893      	ldr	r0, [pc, #588]	@ (8001448 <parseYLIDARData+0x300>)
 80011fc:	f005 f8f0 	bl	80063e0 <iprintf>
		printf("Package Type: %d\r\n", packageType);
 8001200:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001204:	4619      	mov	r1, r3
 8001206:	4891      	ldr	r0, [pc, #580]	@ (800144c <parseYLIDARData+0x304>)
 8001208:	f005 f8ea 	bl	80063e0 <iprintf>
		printf("Scan frequency: %d\r\n", scan_frequency);
 800120c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001210:	4619      	mov	r1, r3
 8001212:	488f      	ldr	r0, [pc, #572]	@ (8001450 <parseYLIDARData+0x308>)
 8001214:	f005 f8e4 	bl	80063e0 <iprintf>
		printf("Sample Quantity: %d\r\n", sampleQuantity);
 8001218:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800121c:	4619      	mov	r1, r3
 800121e:	488d      	ldr	r0, [pc, #564]	@ (8001454 <parseYLIDARData+0x30c>)
 8001220:	f005 f8de 	bl	80063e0 <iprintf>

        // Calculate starting and ending angles
		float Angle_FSA = (startAngleRaw >> 1) / 64.0f; // Formula: Rshiftbit(FSA) / 64
 8001224:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001226:	085b      	lsrs	r3, r3, #1
 8001228:	b29b      	uxth	r3, r3
 800122a:	ee07 3a90 	vmov	s15, r3
 800122e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001232:	eddf 6a89 	vldr	s13, [pc, #548]	@ 8001458 <parseYLIDARData+0x310>
 8001236:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800123a:	edc7 7a08 	vstr	s15, [r7, #32]
		float Angle_LSA = (endAngleRaw >> 1) / 64.0f;   // Formula: Rshiftbit(LSA) / 64
 800123e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001240:	085b      	lsrs	r3, r3, #1
 8001242:	b29b      	uxth	r3, r3
 8001244:	ee07 3a90 	vmov	s15, r3
 8001248:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800124c:	eddf 6a82 	vldr	s13, [pc, #520]	@ 8001458 <parseYLIDARData+0x310>
 8001250:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001254:	edc7 7a07 	vstr	s15, [r7, #28]
		printf("Start Angle: %.2f°, End Angle: %.2f°\r\n", Angle_FSA, Angle_LSA);
 8001258:	6a38      	ldr	r0, [r7, #32]
 800125a:	f7ff f99d 	bl	8000598 <__aeabi_f2d>
 800125e:	4604      	mov	r4, r0
 8001260:	460d      	mov	r5, r1
 8001262:	69f8      	ldr	r0, [r7, #28]
 8001264:	f7ff f998 	bl	8000598 <__aeabi_f2d>
 8001268:	4602      	mov	r2, r0
 800126a:	460b      	mov	r3, r1
 800126c:	e9cd 2300 	strd	r2, r3, [sp]
 8001270:	4622      	mov	r2, r4
 8001272:	462b      	mov	r3, r5
 8001274:	4879      	ldr	r0, [pc, #484]	@ (800145c <parseYLIDARData+0x314>)
 8001276:	f005 f8b3 	bl	80063e0 <iprintf>

		// Calculate the angle difference
		float diffAngle = (Angle_LSA > Angle_FSA) ? (Angle_LSA - Angle_FSA) : (360.0f + Angle_LSA - Angle_FSA);
 800127a:	ed97 7a07 	vldr	s14, [r7, #28]
 800127e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001282:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128a:	dd06      	ble.n	800129a <parseYLIDARData+0x152>
 800128c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001290:	edd7 7a08 	vldr	s15, [r7, #32]
 8001294:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001298:	e009      	b.n	80012ae <parseYLIDARData+0x166>
 800129a:	edd7 7a07 	vldr	s15, [r7, #28]
 800129e:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 8001460 <parseYLIDARData+0x318>
 80012a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80012a6:	edd7 7a08 	vldr	s15, [r7, #32]
 80012aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012ae:	edc7 7a06 	vstr	s15, [r7, #24]

		// Verify checksum
		uint16_t calculatedChecksum = 0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
		for (int i = 0; i <= YLIDAR_SAMPLE_BYTE_OFFSET; i+=2)
 80012b6:	2300      	movs	r3, #0
 80012b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80012ba:	e015      	b.n	80012e8 <parseYLIDARData+0x1a0>
		{
			calculatedChecksum ^= data[i] | (data[i+1] << 8);
 80012bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	4413      	add	r3, r2
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	b21a      	sxth	r2, r3
 80012c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012c8:	3301      	adds	r3, #1
 80012ca:	6879      	ldr	r1, [r7, #4]
 80012cc:	440b      	add	r3, r1
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	021b      	lsls	r3, r3, #8
 80012d2:	b21b      	sxth	r3, r3
 80012d4:	4313      	orrs	r3, r2
 80012d6:	b21a      	sxth	r2, r3
 80012d8:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 80012dc:	4053      	eors	r3, r2
 80012de:	b21b      	sxth	r3, r3
 80012e0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
		for (int i = 0; i <= YLIDAR_SAMPLE_BYTE_OFFSET; i+=2)
 80012e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012e4:	3302      	adds	r3, #2
 80012e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80012e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012ea:	2b0a      	cmp	r3, #10
 80012ec:	dde6      	ble.n	80012bc <parseYLIDARData+0x174>
		}
		if (calculatedChecksum != checksum)
 80012ee:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80012f0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d006      	beq.n	8001304 <parseYLIDARData+0x1bc>
		{
			printf("Checksum mismatch! Calculated: 0x%X, Received: 0x%X\r\n", calculatedChecksum, checksum);
 80012f6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80012f8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80012fa:	4619      	mov	r1, r3
 80012fc:	4859      	ldr	r0, [pc, #356]	@ (8001464 <parseYLIDARData+0x31c>)
 80012fe:	f005 f86f 	bl	80063e0 <iprintf>
			return;
 8001302:	e096      	b.n	8001432 <parseYLIDARData+0x2ea>
		}

		// Process sample data
		printf("Sample Data:\r\n");
 8001304:	4858      	ldr	r0, [pc, #352]	@ (8001468 <parseYLIDARData+0x320>)
 8001306:	f005 f8d3 	bl	80064b0 <puts>
		for (int i = 0; i < sampleQuantity; i++)
 800130a:	2300      	movs	r3, #0
 800130c:	637b      	str	r3, [r7, #52]	@ 0x34
 800130e:	e086      	b.n	800141e <parseYLIDARData+0x2d6>
		{
			uint16_t sample = data[10 + (i * 2)] | (data[11 + (i * 2)] << 8);
 8001310:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001312:	3305      	adds	r3, #5
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	461a      	mov	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4413      	add	r3, r2
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	b21a      	sxth	r2, r3
 8001320:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	330b      	adds	r3, #11
 8001326:	4619      	mov	r1, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	440b      	add	r3, r1
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	021b      	lsls	r3, r3, #8
 8001330:	b21b      	sxth	r3, r3
 8001332:	4313      	orrs	r3, r2
 8001334:	b21b      	sxth	r3, r3
 8001336:	82fb      	strh	r3, [r7, #22]
			uint16_t distance = sample & 0xFFF; // Distance is lower 12 bits
 8001338:	8afb      	ldrh	r3, [r7, #22]
 800133a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800133e:	82bb      	strh	r3, [r7, #20]
			uint8_t interferenceFlag = (sample >> 12) & 0xF; // Upper 4 bits
 8001340:	8afb      	ldrh	r3, [r7, #22]
 8001342:	0b1b      	lsrs	r3, r3, #12
 8001344:	b29b      	uxth	r3, r3
 8001346:	b2db      	uxtb	r3, r3
 8001348:	f003 030f 	and.w	r3, r3, #15
 800134c:	74fb      	strb	r3, [r7, #19]

			// Compute the intermediate angle
			float Angle_i = diffAngle * (i / (float)(sampleQuantity - 1)) + Angle_FSA;
 800134e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001350:	ee07 3a90 	vmov	s15, r3
 8001354:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001358:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800135c:	3b01      	subs	r3, #1
 800135e:	ee07 3a90 	vmov	s15, r3
 8001362:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001366:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800136a:	edd7 7a06 	vldr	s15, [r7, #24]
 800136e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001372:	ed97 7a08 	vldr	s14, [r7, #32]
 8001376:	ee77 7a27 	vadd.f32	s15, s14, s15
 800137a:	edc7 7a03 	vstr	s15, [r7, #12]

			// Compute angle correction
			float AngCorrect = 0.0f;
 800137e:	f04f 0300 	mov.w	r3, #0
 8001382:	633b      	str	r3, [r7, #48]	@ 0x30
			if (distance > 0)
 8001384:	8abb      	ldrh	r3, [r7, #20]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d02d      	beq.n	80013e6 <parseYLIDARData+0x29e>
			{
				AngCorrect = atan2f(21.8f * (155.3f - distance), 155.3f * distance) * (180.0f / PI);
 800138a:	8abb      	ldrh	r3, [r7, #20]
 800138c:	ee07 3a90 	vmov	s15, r3
 8001390:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001394:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 800146c <parseYLIDARData+0x324>
 8001398:	ee77 7a67 	vsub.f32	s15, s14, s15
 800139c:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8001470 <parseYLIDARData+0x328>
 80013a0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013a4:	8abb      	ldrh	r3, [r7, #20]
 80013a6:	ee07 3a90 	vmov	s15, r3
 80013aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013ae:	eddf 6a2f 	vldr	s13, [pc, #188]	@ 800146c <parseYLIDARData+0x324>
 80013b2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80013b6:	eef0 0a67 	vmov.f32	s1, s15
 80013ba:	eeb0 0a47 	vmov.f32	s0, s14
 80013be:	f008 fcb9 	bl	8009d34 <atan2f>
 80013c2:	ee10 3a10 	vmov	r3, s0
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff f8e6 	bl	8000598 <__aeabi_f2d>
 80013cc:	a31a      	add	r3, pc, #104	@ (adr r3, 8001438 <parseYLIDARData+0x2f0>)
 80013ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d2:	f7ff f939 	bl	8000648 <__aeabi_dmul>
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	4610      	mov	r0, r2
 80013dc:	4619      	mov	r1, r3
 80013de:	f7ff fc2b 	bl	8000c38 <__aeabi_d2f>
 80013e2:	4603      	mov	r3, r0
 80013e4:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			float Corrected_Angle = Angle_i + AngCorrect;
 80013e6:	ed97 7a03 	vldr	s14, [r7, #12]
 80013ea:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80013ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013f2:	edc7 7a02 	vstr	s15, [r7, #8]

			printf("Sample %d: Distance = %d mm, Interference = %d, Corrected Angle = %.2f°\r\n",
 80013f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013f8:	1c5c      	adds	r4, r3, #1
 80013fa:	8abd      	ldrh	r5, [r7, #20]
 80013fc:	7cfe      	ldrb	r6, [r7, #19]
 80013fe:	68b8      	ldr	r0, [r7, #8]
 8001400:	f7ff f8ca 	bl	8000598 <__aeabi_f2d>
 8001404:	4602      	mov	r2, r0
 8001406:	460b      	mov	r3, r1
 8001408:	e9cd 2300 	strd	r2, r3, [sp]
 800140c:	4633      	mov	r3, r6
 800140e:	462a      	mov	r2, r5
 8001410:	4621      	mov	r1, r4
 8001412:	4818      	ldr	r0, [pc, #96]	@ (8001474 <parseYLIDARData+0x32c>)
 8001414:	f004 ffe4 	bl	80063e0 <iprintf>
		for (int i = 0; i < sampleQuantity; i++)
 8001418:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800141a:	3301      	adds	r3, #1
 800141c:	637b      	str	r3, [r7, #52]	@ 0x34
 800141e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001422:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001424:	429a      	cmp	r2, r3
 8001426:	f6ff af73 	blt.w	8001310 <parseYLIDARData+0x1c8>
    {
 800142a:	e002      	b.n	8001432 <parseYLIDARData+0x2ea>
				   i + 1, distance, interferenceFlag, Corrected_Angle);
		}
    }
    else
    {
        printf("Invalid start bytes!\r\n");
 800142c:	4812      	ldr	r0, [pc, #72]	@ (8001478 <parseYLIDARData+0x330>)
 800142e:	f005 f83f 	bl	80064b0 <puts>
    }
}
 8001432:	3744      	adds	r7, #68	@ 0x44
 8001434:	46bd      	mov	sp, r7
 8001436:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001438:	1a63bfe5 	.word	0x1a63bfe5
 800143c:	404ca5dc 	.word	0x404ca5dc
 8001440:	0800a048 	.word	0x0800a048
 8001444:	cccccccd 	.word	0xcccccccd
 8001448:	0800a05c 	.word	0x0800a05c
 800144c:	0800a074 	.word	0x0800a074
 8001450:	0800a088 	.word	0x0800a088
 8001454:	0800a0a0 	.word	0x0800a0a0
 8001458:	42800000 	.word	0x42800000
 800145c:	0800a0b8 	.word	0x0800a0b8
 8001460:	43b40000 	.word	0x43b40000
 8001464:	0800a0e4 	.word	0x0800a0e4
 8001468:	0800a11c 	.word	0x0800a11c
 800146c:	431b4ccd 	.word	0x431b4ccd
 8001470:	41ae6666 	.word	0x41ae6666
 8001474:	0800a12c 	.word	0x0800a12c
 8001478:	0800a178 	.word	0x0800a178

0800147c <HAL_UART_RxCpltCallback>:
 * @brief UART receive complete callback.
 * @param huart: Pointer to the UART handle
 * @retval None
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a29      	ldr	r2, [pc, #164]	@ (8001530 <HAL_UART_RxCpltCallback+0xb4>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d14c      	bne.n	8001528 <HAL_UART_RxCpltCallback+0xac>
	{
		uartBuffer[bufferIndex++] = rxByte;
 800148e:	4b29      	ldr	r3, [pc, #164]	@ (8001534 <HAL_UART_RxCpltCallback+0xb8>)
 8001490:	881b      	ldrh	r3, [r3, #0]
 8001492:	1c5a      	adds	r2, r3, #1
 8001494:	b291      	uxth	r1, r2
 8001496:	4a27      	ldr	r2, [pc, #156]	@ (8001534 <HAL_UART_RxCpltCallback+0xb8>)
 8001498:	8011      	strh	r1, [r2, #0]
 800149a:	461a      	mov	r2, r3
 800149c:	4b26      	ldr	r3, [pc, #152]	@ (8001538 <HAL_UART_RxCpltCallback+0xbc>)
 800149e:	7819      	ldrb	r1, [r3, #0]
 80014a0:	4b26      	ldr	r3, [pc, #152]	@ (800153c <HAL_UART_RxCpltCallback+0xc0>)
 80014a2:	5499      	strb	r1, [r3, r2]
		printf("Received byte: 0x%X\r\n", rxByte);
 80014a4:	4b24      	ldr	r3, [pc, #144]	@ (8001538 <HAL_UART_RxCpltCallback+0xbc>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	4619      	mov	r1, r3
 80014aa:	4825      	ldr	r0, [pc, #148]	@ (8001540 <HAL_UART_RxCpltCallback+0xc4>)
 80014ac:	f004 ff98 	bl	80063e0 <iprintf>

		// Synchronize to start bytes (0x55 0xAA)
		if (bufferIndex >= 2 &&
 80014b0:	4b20      	ldr	r3, [pc, #128]	@ (8001534 <HAL_UART_RxCpltCallback+0xb8>)
 80014b2:	881b      	ldrh	r3, [r3, #0]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d914      	bls.n	80014e2 <HAL_UART_RxCpltCallback+0x66>
			uartBuffer[0] != YLIDAR_START_BYTE2 &&
 80014b8:	4b20      	ldr	r3, [pc, #128]	@ (800153c <HAL_UART_RxCpltCallback+0xc0>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
		if (bufferIndex >= 2 &&
 80014bc:	2baa      	cmp	r3, #170	@ 0xaa
 80014be:	d010      	beq.n	80014e2 <HAL_UART_RxCpltCallback+0x66>
			uartBuffer[1] != YLIDAR_START_BYTE1)
 80014c0:	4b1e      	ldr	r3, [pc, #120]	@ (800153c <HAL_UART_RxCpltCallback+0xc0>)
 80014c2:	785b      	ldrb	r3, [r3, #1]
			uartBuffer[0] != YLIDAR_START_BYTE2 &&
 80014c4:	2b55      	cmp	r3, #85	@ 0x55
 80014c6:	d00c      	beq.n	80014e2 <HAL_UART_RxCpltCallback+0x66>
		{
			// Shift buffer to discard invalid start bytes
			memmove(uartBuffer, uartBuffer + 1, --bufferIndex);
 80014c8:	491e      	ldr	r1, [pc, #120]	@ (8001544 <HAL_UART_RxCpltCallback+0xc8>)
 80014ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001534 <HAL_UART_RxCpltCallback+0xb8>)
 80014cc:	881b      	ldrh	r3, [r3, #0]
 80014ce:	3b01      	subs	r3, #1
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	4b18      	ldr	r3, [pc, #96]	@ (8001534 <HAL_UART_RxCpltCallback+0xb8>)
 80014d4:	801a      	strh	r2, [r3, #0]
 80014d6:	4b17      	ldr	r3, [pc, #92]	@ (8001534 <HAL_UART_RxCpltCallback+0xb8>)
 80014d8:	881b      	ldrh	r3, [r3, #0]
 80014da:	461a      	mov	r2, r3
 80014dc:	4817      	ldr	r0, [pc, #92]	@ (800153c <HAL_UART_RxCpltCallback+0xc0>)
 80014de:	f005 f8e7 	bl	80066b0 <memmove>
		}

		// Process message if start bytes + full response (26 bytes) received
		if (bufferIndex >= 26 &&
 80014e2:	4b14      	ldr	r3, [pc, #80]	@ (8001534 <HAL_UART_RxCpltCallback+0xb8>)
 80014e4:	881b      	ldrh	r3, [r3, #0]
 80014e6:	2b19      	cmp	r3, #25
 80014e8:	d919      	bls.n	800151e <HAL_UART_RxCpltCallback+0xa2>
			uartBuffer[bufferIndex-1] != YLIDAR_START_BYTE2 &&
 80014ea:	4b12      	ldr	r3, [pc, #72]	@ (8001534 <HAL_UART_RxCpltCallback+0xb8>)
 80014ec:	881b      	ldrh	r3, [r3, #0]
 80014ee:	3b01      	subs	r3, #1
 80014f0:	4a12      	ldr	r2, [pc, #72]	@ (800153c <HAL_UART_RxCpltCallback+0xc0>)
 80014f2:	5cd3      	ldrb	r3, [r2, r3]
		if (bufferIndex >= 26 &&
 80014f4:	2baa      	cmp	r3, #170	@ 0xaa
 80014f6:	d012      	beq.n	800151e <HAL_UART_RxCpltCallback+0xa2>
			uartBuffer[bufferIndex] != YLIDAR_START_BYTE1)
 80014f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001534 <HAL_UART_RxCpltCallback+0xb8>)
 80014fa:	881b      	ldrh	r3, [r3, #0]
 80014fc:	461a      	mov	r2, r3
 80014fe:	4b0f      	ldr	r3, [pc, #60]	@ (800153c <HAL_UART_RxCpltCallback+0xc0>)
 8001500:	5c9b      	ldrb	r3, [r3, r2]
			uartBuffer[bufferIndex-1] != YLIDAR_START_BYTE2 &&
 8001502:	2b55      	cmp	r3, #85	@ 0x55
 8001504:	d00b      	beq.n	800151e <HAL_UART_RxCpltCallback+0xa2>
		{
			parseYLIDARData(uartBuffer);
 8001506:	480d      	ldr	r0, [pc, #52]	@ (800153c <HAL_UART_RxCpltCallback+0xc0>)
 8001508:	f7ff fe1e 	bl	8001148 <parseYLIDARData>

			// Reset the buffer for the next frame
			bufferIndex = 0;
 800150c:	4b09      	ldr	r3, [pc, #36]	@ (8001534 <HAL_UART_RxCpltCallback+0xb8>)
 800150e:	2200      	movs	r2, #0
 8001510:	801a      	strh	r2, [r3, #0]
			memset(uartBuffer, 0, sizeof(uartBuffer));
 8001512:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001516:	2100      	movs	r1, #0
 8001518:	4808      	ldr	r0, [pc, #32]	@ (800153c <HAL_UART_RxCpltCallback+0xc0>)
 800151a:	f005 f8e3 	bl	80066e4 <memset>
		}

		// Restart reception for the next byte
		HAL_UART_Receive_IT(&huart3, &rxByte, 1);
 800151e:	2201      	movs	r2, #1
 8001520:	4905      	ldr	r1, [pc, #20]	@ (8001538 <HAL_UART_RxCpltCallback+0xbc>)
 8001522:	4809      	ldr	r0, [pc, #36]	@ (8001548 <HAL_UART_RxCpltCallback+0xcc>)
 8001524:	f001 ffee 	bl	8003504 <HAL_UART_Receive_IT>
	}
}
 8001528:	bf00      	nop
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40004800 	.word	0x40004800
 8001534:	200009f2 	.word	0x200009f2
 8001538:	200009f0 	.word	0x200009f0
 800153c:	200001f0 	.word	0x200001f0
 8001540:	0800a190 	.word	0x0800a190
 8001544:	200001f1 	.word	0x200001f1
 8001548:	20000a8c 	.word	0x20000a8c

0800154c <HAL_UART_ErrorCallback>:
 * @brief UART error callback.
 * @param huart: Pointer to the UART handle
 * @retval None
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a1b      	ldr	r2, [pc, #108]	@ (80015c8 <HAL_UART_ErrorCallback+0x7c>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d130      	bne.n	80015c0 <HAL_UART_ErrorCallback+0x74>
	{
		if (HAL_UART_GetError(huart) & HAL_UART_ERROR_PE)
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f002 fb74 	bl	8003c4c <HAL_UART_GetError>
 8001564:	4603      	mov	r3, r0
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	2b00      	cmp	r3, #0
 800156c:	d002      	beq.n	8001574 <HAL_UART_ErrorCallback+0x28>
			printf("Parity Error!\r\n");
 800156e:	4817      	ldr	r0, [pc, #92]	@ (80015cc <HAL_UART_ErrorCallback+0x80>)
 8001570:	f004 ff9e 	bl	80064b0 <puts>
		if (HAL_UART_GetError(huart) & HAL_UART_ERROR_NE)
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f002 fb69 	bl	8003c4c <HAL_UART_GetError>
 800157a:	4603      	mov	r3, r0
 800157c:	f003 0302 	and.w	r3, r3, #2
 8001580:	2b00      	cmp	r3, #0
 8001582:	d002      	beq.n	800158a <HAL_UART_ErrorCallback+0x3e>
			printf("Noise Error!\r\n");
 8001584:	4812      	ldr	r0, [pc, #72]	@ (80015d0 <HAL_UART_ErrorCallback+0x84>)
 8001586:	f004 ff93 	bl	80064b0 <puts>
		if (HAL_UART_GetError(huart) & HAL_UART_ERROR_FE)
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f002 fb5e 	bl	8003c4c <HAL_UART_GetError>
 8001590:	4603      	mov	r3, r0
 8001592:	f003 0304 	and.w	r3, r3, #4
 8001596:	2b00      	cmp	r3, #0
 8001598:	d002      	beq.n	80015a0 <HAL_UART_ErrorCallback+0x54>
			printf("Framing Error!\r\n");
 800159a:	480e      	ldr	r0, [pc, #56]	@ (80015d4 <HAL_UART_ErrorCallback+0x88>)
 800159c:	f004 ff88 	bl	80064b0 <puts>
		if (HAL_UART_GetError(huart) & HAL_UART_ERROR_ORE)
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f002 fb53 	bl	8003c4c <HAL_UART_GetError>
 80015a6:	4603      	mov	r3, r0
 80015a8:	f003 0308 	and.w	r3, r3, #8
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d002      	beq.n	80015b6 <HAL_UART_ErrorCallback+0x6a>
			printf("Overrun Error!\r\n");
 80015b0:	4809      	ldr	r0, [pc, #36]	@ (80015d8 <HAL_UART_ErrorCallback+0x8c>)
 80015b2:	f004 ff7d 	bl	80064b0 <puts>

		// Restart UART reception after error
		HAL_UART_Receive_IT(&huart3, &rxByte, 1);
 80015b6:	2201      	movs	r2, #1
 80015b8:	4908      	ldr	r1, [pc, #32]	@ (80015dc <HAL_UART_ErrorCallback+0x90>)
 80015ba:	4809      	ldr	r0, [pc, #36]	@ (80015e0 <HAL_UART_ErrorCallback+0x94>)
 80015bc:	f001 ffa2 	bl	8003504 <HAL_UART_Receive_IT>
	}
}
 80015c0:	bf00      	nop
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40004800 	.word	0x40004800
 80015cc:	0800a1a8 	.word	0x0800a1a8
 80015d0:	0800a1b8 	.word	0x0800a1b8
 80015d4:	0800a1c8 	.word	0x0800a1c8
 80015d8:	0800a1d8 	.word	0x0800a1d8
 80015dc:	200009f0 	.word	0x200009f0
 80015e0:	20000a8c 	.word	0x20000a8c

080015e4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80015e8:	f000 fb01 	bl	8001bee <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80015ec:	f000 f816 	bl	800161c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80015f0:	f7ff fd20 	bl	8001034 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80015f4:	f000 f99a 	bl	800192c <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 80015f8:	f000 f9e4 	bl	80019c4 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	printf("\r\n***** TEST YLIDAR X2 *****\r\n");
 80015fc:	4804      	ldr	r0, [pc, #16]	@ (8001610 <main+0x2c>)
 80015fe:	f004 ff57 	bl	80064b0 <puts>

	/* Clear the UART buffer to avoid receiving residual data */
	//HAL_UART_Abort(&huart1);

	// Start UART reception in interrupt mode (1 byte at a time)
	HAL_UART_Receive_IT(&huart3, &rxByte, 1);
 8001602:	2201      	movs	r2, #1
 8001604:	4903      	ldr	r1, [pc, #12]	@ (8001614 <main+0x30>)
 8001606:	4804      	ldr	r0, [pc, #16]	@ (8001618 <main+0x34>)
 8001608:	f001 ff7c 	bl	8003504 <HAL_UART_Receive_IT>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 800160c:	bf00      	nop
 800160e:	e7fd      	b.n	800160c <main+0x28>
 8001610:	0800a1e8 	.word	0x0800a1e8
 8001614:	200009f0 	.word	0x200009f0
 8001618:	20000a8c 	.word	0x20000a8c

0800161c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b094      	sub	sp, #80	@ 0x50
 8001620:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001622:	f107 0318 	add.w	r3, r7, #24
 8001626:	2238      	movs	r2, #56	@ 0x38
 8001628:	2100      	movs	r1, #0
 800162a:	4618      	mov	r0, r3
 800162c:	f005 f85a 	bl	80066e4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001630:	1d3b      	adds	r3, r7, #4
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	605a      	str	r2, [r3, #4]
 8001638:	609a      	str	r2, [r3, #8]
 800163a:	60da      	str	r2, [r3, #12]
 800163c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800163e:	2000      	movs	r0, #0
 8001640:	f000 feb0 	bl	80023a4 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001644:	2302      	movs	r3, #2
 8001646:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001648:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800164c:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800164e:	2340      	movs	r3, #64	@ 0x40
 8001650:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001652:	2302      	movs	r3, #2
 8001654:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001656:	2302      	movs	r3, #2
 8001658:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800165a:	2304      	movs	r3, #4
 800165c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 800165e:	2355      	movs	r3, #85	@ 0x55
 8001660:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001662:	2302      	movs	r3, #2
 8001664:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001666:	2302      	movs	r3, #2
 8001668:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800166a:	2302      	movs	r3, #2
 800166c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800166e:	f107 0318 	add.w	r3, r7, #24
 8001672:	4618      	mov	r0, r3
 8001674:	f000 ff4a 	bl	800250c <HAL_RCC_OscConfig>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <SystemClock_Config+0x66>
	{
		Error_Handler();
 800167e:	f000 f818 	bl	80016b2 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001682:	230f      	movs	r3, #15
 8001684:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001686:	2303      	movs	r3, #3
 8001688:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800168a:	2300      	movs	r3, #0
 800168c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800168e:	2300      	movs	r3, #0
 8001690:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001692:	2300      	movs	r3, #0
 8001694:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001696:	1d3b      	adds	r3, r7, #4
 8001698:	2104      	movs	r1, #4
 800169a:	4618      	mov	r0, r3
 800169c:	f001 fa48 	bl	8002b30 <HAL_RCC_ClockConfig>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <SystemClock_Config+0x8e>
	{
		Error_Handler();
 80016a6:	f000 f804 	bl	80016b2 <Error_Handler>
	}
}
 80016aa:	bf00      	nop
 80016ac:	3750      	adds	r7, #80	@ 0x50
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016b6:	b672      	cpsid	i
}
 80016b8:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80016ba:	bf00      	nop
 80016bc:	e7fd      	b.n	80016ba <Error_Handler+0x8>
	...

080016c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001704 <HAL_MspInit+0x44>)
 80016c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016ca:	4a0e      	ldr	r2, [pc, #56]	@ (8001704 <HAL_MspInit+0x44>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80016d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001704 <HAL_MspInit+0x44>)
 80016d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	607b      	str	r3, [r7, #4]
 80016dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016de:	4b09      	ldr	r3, [pc, #36]	@ (8001704 <HAL_MspInit+0x44>)
 80016e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016e2:	4a08      	ldr	r2, [pc, #32]	@ (8001704 <HAL_MspInit+0x44>)
 80016e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80016ea:	4b06      	ldr	r3, [pc, #24]	@ (8001704 <HAL_MspInit+0x44>)
 80016ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016f2:	603b      	str	r3, [r7, #0]
 80016f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80016f6:	f000 fef9 	bl	80024ec <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40021000 	.word	0x40021000

08001708 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800170c:	bf00      	nop
 800170e:	e7fd      	b.n	800170c <NMI_Handler+0x4>

08001710 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001714:	bf00      	nop
 8001716:	e7fd      	b.n	8001714 <HardFault_Handler+0x4>

08001718 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800171c:	bf00      	nop
 800171e:	e7fd      	b.n	800171c <MemManage_Handler+0x4>

08001720 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001724:	bf00      	nop
 8001726:	e7fd      	b.n	8001724 <BusFault_Handler+0x4>

08001728 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800172c:	bf00      	nop
 800172e:	e7fd      	b.n	800172c <UsageFault_Handler+0x4>

08001730 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr

0800175a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800175e:	f000 fa99 	bl	8001c94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
	...

08001768 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800176c:	4802      	ldr	r0, [pc, #8]	@ (8001778 <USART3_IRQHandler+0x10>)
 800176e:	f001 ff15 	bl	800359c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20000a8c 	.word	0x20000a8c

0800177c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  return 1;
 8001780:	2301      	movs	r3, #1
}
 8001782:	4618      	mov	r0, r3
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <_kill>:

int _kill(int pid, int sig)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001796:	f004 fff7 	bl	8006788 <__errno>
 800179a:	4603      	mov	r3, r0
 800179c:	2216      	movs	r2, #22
 800179e:	601a      	str	r2, [r3, #0]
  return -1;
 80017a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <_exit>:

void _exit (int status)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017b4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f7ff ffe7 	bl	800178c <_kill>
  while (1) {}    /* Make sure we hang here */
 80017be:	bf00      	nop
 80017c0:	e7fd      	b.n	80017be <_exit+0x12>

080017c2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b086      	sub	sp, #24
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	60f8      	str	r0, [r7, #12]
 80017ca:	60b9      	str	r1, [r7, #8]
 80017cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ce:	2300      	movs	r3, #0
 80017d0:	617b      	str	r3, [r7, #20]
 80017d2:	e00a      	b.n	80017ea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017d4:	f3af 8000 	nop.w
 80017d8:	4601      	mov	r1, r0
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	1c5a      	adds	r2, r3, #1
 80017de:	60ba      	str	r2, [r7, #8]
 80017e0:	b2ca      	uxtb	r2, r1
 80017e2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	3301      	adds	r3, #1
 80017e8:	617b      	str	r3, [r7, #20]
 80017ea:	697a      	ldr	r2, [r7, #20]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	dbf0      	blt.n	80017d4 <_read+0x12>
  }

  return len;
 80017f2:	687b      	ldr	r3, [r7, #4]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3718      	adds	r7, #24
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]
 800180c:	e009      	b.n	8001822 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	1c5a      	adds	r2, r3, #1
 8001812:	60ba      	str	r2, [r7, #8]
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff fc84 	bl	8001124 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	3301      	adds	r3, #1
 8001820:	617b      	str	r3, [r7, #20]
 8001822:	697a      	ldr	r2, [r7, #20]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	429a      	cmp	r2, r3
 8001828:	dbf1      	blt.n	800180e <_write+0x12>
  }
  return len;
 800182a:	687b      	ldr	r3, [r7, #4]
}
 800182c:	4618      	mov	r0, r3
 800182e:	3718      	adds	r7, #24
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <_close>:

int _close(int file)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800183c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001840:	4618      	mov	r0, r3
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800185c:	605a      	str	r2, [r3, #4]
  return 0;
 800185e:	2300      	movs	r3, #0
}
 8001860:	4618      	mov	r0, r3
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <_isatty>:

int _isatty(int file)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001874:	2301      	movs	r3, #1
}
 8001876:	4618      	mov	r0, r3
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001882:	b480      	push	{r7}
 8001884:	b085      	sub	sp, #20
 8001886:	af00      	add	r7, sp, #0
 8001888:	60f8      	str	r0, [r7, #12]
 800188a:	60b9      	str	r1, [r7, #8]
 800188c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800188e:	2300      	movs	r3, #0
}
 8001890:	4618      	mov	r0, r3
 8001892:	3714      	adds	r7, #20
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018a4:	4a14      	ldr	r2, [pc, #80]	@ (80018f8 <_sbrk+0x5c>)
 80018a6:	4b15      	ldr	r3, [pc, #84]	@ (80018fc <_sbrk+0x60>)
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018b0:	4b13      	ldr	r3, [pc, #76]	@ (8001900 <_sbrk+0x64>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d102      	bne.n	80018be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018b8:	4b11      	ldr	r3, [pc, #68]	@ (8001900 <_sbrk+0x64>)
 80018ba:	4a12      	ldr	r2, [pc, #72]	@ (8001904 <_sbrk+0x68>)
 80018bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018be:	4b10      	ldr	r3, [pc, #64]	@ (8001900 <_sbrk+0x64>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4413      	add	r3, r2
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d207      	bcs.n	80018dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018cc:	f004 ff5c 	bl	8006788 <__errno>
 80018d0:	4603      	mov	r3, r0
 80018d2:	220c      	movs	r2, #12
 80018d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018da:	e009      	b.n	80018f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018dc:	4b08      	ldr	r3, [pc, #32]	@ (8001900 <_sbrk+0x64>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018e2:	4b07      	ldr	r3, [pc, #28]	@ (8001900 <_sbrk+0x64>)
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4413      	add	r3, r2
 80018ea:	4a05      	ldr	r2, [pc, #20]	@ (8001900 <_sbrk+0x64>)
 80018ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ee:	68fb      	ldr	r3, [r7, #12]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3718      	adds	r7, #24
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	20008000 	.word	0x20008000
 80018fc:	00000400 	.word	0x00000400
 8001900:	200009f4 	.word	0x200009f4
 8001904:	20000c70 	.word	0x20000c70

08001908 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800190c:	4b06      	ldr	r3, [pc, #24]	@ (8001928 <SystemInit+0x20>)
 800190e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001912:	4a05      	ldr	r2, [pc, #20]	@ (8001928 <SystemInit+0x20>)
 8001914:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001918:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001930:	4b22      	ldr	r3, [pc, #136]	@ (80019bc <MX_USART2_UART_Init+0x90>)
 8001932:	4a23      	ldr	r2, [pc, #140]	@ (80019c0 <MX_USART2_UART_Init+0x94>)
 8001934:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001936:	4b21      	ldr	r3, [pc, #132]	@ (80019bc <MX_USART2_UART_Init+0x90>)
 8001938:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800193c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800193e:	4b1f      	ldr	r3, [pc, #124]	@ (80019bc <MX_USART2_UART_Init+0x90>)
 8001940:	2200      	movs	r2, #0
 8001942:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001944:	4b1d      	ldr	r3, [pc, #116]	@ (80019bc <MX_USART2_UART_Init+0x90>)
 8001946:	2200      	movs	r2, #0
 8001948:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800194a:	4b1c      	ldr	r3, [pc, #112]	@ (80019bc <MX_USART2_UART_Init+0x90>)
 800194c:	2200      	movs	r2, #0
 800194e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001950:	4b1a      	ldr	r3, [pc, #104]	@ (80019bc <MX_USART2_UART_Init+0x90>)
 8001952:	220c      	movs	r2, #12
 8001954:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001956:	4b19      	ldr	r3, [pc, #100]	@ (80019bc <MX_USART2_UART_Init+0x90>)
 8001958:	2200      	movs	r2, #0
 800195a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800195c:	4b17      	ldr	r3, [pc, #92]	@ (80019bc <MX_USART2_UART_Init+0x90>)
 800195e:	2200      	movs	r2, #0
 8001960:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001962:	4b16      	ldr	r3, [pc, #88]	@ (80019bc <MX_USART2_UART_Init+0x90>)
 8001964:	2200      	movs	r2, #0
 8001966:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001968:	4b14      	ldr	r3, [pc, #80]	@ (80019bc <MX_USART2_UART_Init+0x90>)
 800196a:	2200      	movs	r2, #0
 800196c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800196e:	4b13      	ldr	r3, [pc, #76]	@ (80019bc <MX_USART2_UART_Init+0x90>)
 8001970:	2200      	movs	r2, #0
 8001972:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001974:	4811      	ldr	r0, [pc, #68]	@ (80019bc <MX_USART2_UART_Init+0x90>)
 8001976:	f001 fce7 	bl	8003348 <HAL_UART_Init>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001980:	f7ff fe97 	bl	80016b2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001984:	2100      	movs	r1, #0
 8001986:	480d      	ldr	r0, [pc, #52]	@ (80019bc <MX_USART2_UART_Init+0x90>)
 8001988:	f003 fd31 	bl	80053ee <HAL_UARTEx_SetTxFifoThreshold>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001992:	f7ff fe8e 	bl	80016b2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001996:	2100      	movs	r1, #0
 8001998:	4808      	ldr	r0, [pc, #32]	@ (80019bc <MX_USART2_UART_Init+0x90>)
 800199a:	f003 fd66 	bl	800546a <HAL_UARTEx_SetRxFifoThreshold>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80019a4:	f7ff fe85 	bl	80016b2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80019a8:	4804      	ldr	r0, [pc, #16]	@ (80019bc <MX_USART2_UART_Init+0x90>)
 80019aa:	f003 fce7 	bl	800537c <HAL_UARTEx_DisableFifoMode>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80019b4:	f7ff fe7d 	bl	80016b2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019b8:	bf00      	nop
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	200009f8 	.word	0x200009f8
 80019c0:	40004400 	.word	0x40004400

080019c4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80019c8:	4b22      	ldr	r3, [pc, #136]	@ (8001a54 <MX_USART3_UART_Init+0x90>)
 80019ca:	4a23      	ldr	r2, [pc, #140]	@ (8001a58 <MX_USART3_UART_Init+0x94>)
 80019cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80019ce:	4b21      	ldr	r3, [pc, #132]	@ (8001a54 <MX_USART3_UART_Init+0x90>)
 80019d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80019d6:	4b1f      	ldr	r3, [pc, #124]	@ (8001a54 <MX_USART3_UART_Init+0x90>)
 80019d8:	2200      	movs	r2, #0
 80019da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80019dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001a54 <MX_USART3_UART_Init+0x90>)
 80019de:	2200      	movs	r2, #0
 80019e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80019e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001a54 <MX_USART3_UART_Init+0x90>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80019e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001a54 <MX_USART3_UART_Init+0x90>)
 80019ea:	220c      	movs	r2, #12
 80019ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ee:	4b19      	ldr	r3, [pc, #100]	@ (8001a54 <MX_USART3_UART_Init+0x90>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80019f4:	4b17      	ldr	r3, [pc, #92]	@ (8001a54 <MX_USART3_UART_Init+0x90>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019fa:	4b16      	ldr	r3, [pc, #88]	@ (8001a54 <MX_USART3_UART_Init+0x90>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a00:	4b14      	ldr	r3, [pc, #80]	@ (8001a54 <MX_USART3_UART_Init+0x90>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a06:	4b13      	ldr	r3, [pc, #76]	@ (8001a54 <MX_USART3_UART_Init+0x90>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a0c:	4811      	ldr	r0, [pc, #68]	@ (8001a54 <MX_USART3_UART_Init+0x90>)
 8001a0e:	f001 fc9b 	bl	8003348 <HAL_UART_Init>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001a18:	f7ff fe4b 	bl	80016b2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	480d      	ldr	r0, [pc, #52]	@ (8001a54 <MX_USART3_UART_Init+0x90>)
 8001a20:	f003 fce5 	bl	80053ee <HAL_UARTEx_SetTxFifoThreshold>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001a2a:	f7ff fe42 	bl	80016b2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a2e:	2100      	movs	r1, #0
 8001a30:	4808      	ldr	r0, [pc, #32]	@ (8001a54 <MX_USART3_UART_Init+0x90>)
 8001a32:	f003 fd1a 	bl	800546a <HAL_UARTEx_SetRxFifoThreshold>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001a3c:	f7ff fe39 	bl	80016b2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001a40:	4804      	ldr	r0, [pc, #16]	@ (8001a54 <MX_USART3_UART_Init+0x90>)
 8001a42:	f003 fc9b 	bl	800537c <HAL_UARTEx_DisableFifoMode>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001a4c:	f7ff fe31 	bl	80016b2 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a50:	bf00      	nop
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	20000a8c 	.word	0x20000a8c
 8001a58:	40004800 	.word	0x40004800

08001a5c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b09c      	sub	sp, #112	@ 0x70
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a64:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	605a      	str	r2, [r3, #4]
 8001a6e:	609a      	str	r2, [r3, #8]
 8001a70:	60da      	str	r2, [r3, #12]
 8001a72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a74:	f107 0318 	add.w	r3, r7, #24
 8001a78:	2244      	movs	r2, #68	@ 0x44
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f004 fe31 	bl	80066e4 <memset>
  if(uartHandle->Instance==USART2)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a41      	ldr	r2, [pc, #260]	@ (8001b8c <HAL_UART_MspInit+0x130>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d137      	bne.n	8001afc <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a90:	2300      	movs	r3, #0
 8001a92:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a94:	f107 0318 	add.w	r3, r7, #24
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f001 fa65 	bl	8002f68 <HAL_RCCEx_PeriphCLKConfig>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001aa4:	f7ff fe05 	bl	80016b2 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001aa8:	4b39      	ldr	r3, [pc, #228]	@ (8001b90 <HAL_UART_MspInit+0x134>)
 8001aaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aac:	4a38      	ldr	r2, [pc, #224]	@ (8001b90 <HAL_UART_MspInit+0x134>)
 8001aae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ab2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ab4:	4b36      	ldr	r3, [pc, #216]	@ (8001b90 <HAL_UART_MspInit+0x134>)
 8001ab6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ab8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001abc:	617b      	str	r3, [r7, #20]
 8001abe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac0:	4b33      	ldr	r3, [pc, #204]	@ (8001b90 <HAL_UART_MspInit+0x134>)
 8001ac2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ac4:	4a32      	ldr	r2, [pc, #200]	@ (8001b90 <HAL_UART_MspInit+0x134>)
 8001ac6:	f043 0301 	orr.w	r3, r3, #1
 8001aca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001acc:	4b30      	ldr	r3, [pc, #192]	@ (8001b90 <HAL_UART_MspInit+0x134>)
 8001ace:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ad0:	f003 0301 	and.w	r3, r3, #1
 8001ad4:	613b      	str	r3, [r7, #16]
 8001ad6:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ad8:	230c      	movs	r3, #12
 8001ada:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001adc:	2302      	movs	r3, #2
 8001ade:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ae8:	2307      	movs	r3, #7
 8001aea:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aec:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001af0:	4619      	mov	r1, r3
 8001af2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001af6:	f000 fabb 	bl	8002070 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001afa:	e043      	b.n	8001b84 <HAL_UART_MspInit+0x128>
  else if(uartHandle->Instance==USART3)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a24      	ldr	r2, [pc, #144]	@ (8001b94 <HAL_UART_MspInit+0x138>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d13e      	bne.n	8001b84 <HAL_UART_MspInit+0x128>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001b06:	2304      	movs	r3, #4
 8001b08:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b0e:	f107 0318 	add.w	r3, r7, #24
 8001b12:	4618      	mov	r0, r3
 8001b14:	f001 fa28 	bl	8002f68 <HAL_RCCEx_PeriphCLKConfig>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8001b1e:	f7ff fdc8 	bl	80016b2 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b22:	4b1b      	ldr	r3, [pc, #108]	@ (8001b90 <HAL_UART_MspInit+0x134>)
 8001b24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b26:	4a1a      	ldr	r2, [pc, #104]	@ (8001b90 <HAL_UART_MspInit+0x134>)
 8001b28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b2e:	4b18      	ldr	r3, [pc, #96]	@ (8001b90 <HAL_UART_MspInit+0x134>)
 8001b30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b32:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b3a:	4b15      	ldr	r3, [pc, #84]	@ (8001b90 <HAL_UART_MspInit+0x134>)
 8001b3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b3e:	4a14      	ldr	r2, [pc, #80]	@ (8001b90 <HAL_UART_MspInit+0x134>)
 8001b40:	f043 0302 	orr.w	r3, r3, #2
 8001b44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b46:	4b12      	ldr	r3, [pc, #72]	@ (8001b90 <HAL_UART_MspInit+0x134>)
 8001b48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	60bb      	str	r3, [r7, #8]
 8001b50:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001b52:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001b56:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b60:	2300      	movs	r3, #0
 8001b62:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b64:	2307      	movs	r3, #7
 8001b66:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b68:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	480a      	ldr	r0, [pc, #40]	@ (8001b98 <HAL_UART_MspInit+0x13c>)
 8001b70:	f000 fa7e 	bl	8002070 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001b74:	2200      	movs	r2, #0
 8001b76:	2100      	movs	r1, #0
 8001b78:	2027      	movs	r0, #39	@ 0x27
 8001b7a:	f000 f984 	bl	8001e86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001b7e:	2027      	movs	r0, #39	@ 0x27
 8001b80:	f000 f99b 	bl	8001eba <HAL_NVIC_EnableIRQ>
}
 8001b84:	bf00      	nop
 8001b86:	3770      	adds	r7, #112	@ 0x70
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40004400 	.word	0x40004400
 8001b90:	40021000 	.word	0x40021000
 8001b94:	40004800 	.word	0x40004800
 8001b98:	48000400 	.word	0x48000400

08001b9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b9c:	480d      	ldr	r0, [pc, #52]	@ (8001bd4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b9e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ba0:	f7ff feb2 	bl	8001908 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ba4:	480c      	ldr	r0, [pc, #48]	@ (8001bd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ba6:	490d      	ldr	r1, [pc, #52]	@ (8001bdc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ba8:	4a0d      	ldr	r2, [pc, #52]	@ (8001be0 <LoopForever+0xe>)
  movs r3, #0
 8001baa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001bac:	e002      	b.n	8001bb4 <LoopCopyDataInit>

08001bae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bb2:	3304      	adds	r3, #4

08001bb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bb8:	d3f9      	bcc.n	8001bae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bba:	4a0a      	ldr	r2, [pc, #40]	@ (8001be4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bbc:	4c0a      	ldr	r4, [pc, #40]	@ (8001be8 <LoopForever+0x16>)
  movs r3, #0
 8001bbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bc0:	e001      	b.n	8001bc6 <LoopFillZerobss>

08001bc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bc4:	3204      	adds	r2, #4

08001bc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bc8:	d3fb      	bcc.n	8001bc2 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001bca:	f004 fde3 	bl	8006794 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bce:	f7ff fd09 	bl	80015e4 <main>

08001bd2 <LoopForever>:

LoopForever:
    b LoopForever
 8001bd2:	e7fe      	b.n	8001bd2 <LoopForever>
  ldr   r0, =_estack
 8001bd4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001bd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bdc:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001be0:	0800a6c0 	.word	0x0800a6c0
  ldr r2, =_sbss
 8001be4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001be8:	20000c70 	.word	0x20000c70

08001bec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bec:	e7fe      	b.n	8001bec <ADC1_2_IRQHandler>

08001bee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b082      	sub	sp, #8
 8001bf2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bf8:	2003      	movs	r0, #3
 8001bfa:	f000 f939 	bl	8001e70 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bfe:	2000      	movs	r0, #0
 8001c00:	f000 f80e 	bl	8001c20 <HAL_InitTick>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d002      	beq.n	8001c10 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	71fb      	strb	r3, [r7, #7]
 8001c0e:	e001      	b.n	8001c14 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c10:	f7ff fd56 	bl	80016c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c14:	79fb      	ldrb	r3, [r7, #7]

}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
	...

08001c20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001c2c:	4b16      	ldr	r3, [pc, #88]	@ (8001c88 <HAL_InitTick+0x68>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d022      	beq.n	8001c7a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001c34:	4b15      	ldr	r3, [pc, #84]	@ (8001c8c <HAL_InitTick+0x6c>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	4b13      	ldr	r3, [pc, #76]	@ (8001c88 <HAL_InitTick+0x68>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001c40:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f000 f944 	bl	8001ed6 <HAL_SYSTICK_Config>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d10f      	bne.n	8001c74 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2b0f      	cmp	r3, #15
 8001c58:	d809      	bhi.n	8001c6e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	6879      	ldr	r1, [r7, #4]
 8001c5e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001c62:	f000 f910 	bl	8001e86 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c66:	4a0a      	ldr	r2, [pc, #40]	@ (8001c90 <HAL_InitTick+0x70>)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6013      	str	r3, [r2, #0]
 8001c6c:	e007      	b.n	8001c7e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	73fb      	strb	r3, [r7, #15]
 8001c72:	e004      	b.n	8001c7e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	73fb      	strb	r3, [r7, #15]
 8001c78:	e001      	b.n	8001c7e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20000008 	.word	0x20000008
 8001c8c:	20000000 	.word	0x20000000
 8001c90:	20000004 	.word	0x20000004

08001c94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c98:	4b05      	ldr	r3, [pc, #20]	@ (8001cb0 <HAL_IncTick+0x1c>)
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	4b05      	ldr	r3, [pc, #20]	@ (8001cb4 <HAL_IncTick+0x20>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	4a03      	ldr	r2, [pc, #12]	@ (8001cb0 <HAL_IncTick+0x1c>)
 8001ca4:	6013      	str	r3, [r2, #0]
}
 8001ca6:	bf00      	nop
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	20000b20 	.word	0x20000b20
 8001cb4:	20000008 	.word	0x20000008

08001cb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  return uwTick;
 8001cbc:	4b03      	ldr	r3, [pc, #12]	@ (8001ccc <HAL_GetTick+0x14>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	20000b20 	.word	0x20000b20

08001cd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8001d14 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ce6:	68ba      	ldr	r2, [r7, #8]
 8001ce8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cec:	4013      	ands	r3, r2
 8001cee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cf8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d02:	4a04      	ldr	r2, [pc, #16]	@ (8001d14 <__NVIC_SetPriorityGrouping+0x44>)
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	60d3      	str	r3, [r2, #12]
}
 8001d08:	bf00      	nop
 8001d0a:	3714      	adds	r7, #20
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	e000ed00 	.word	0xe000ed00

08001d18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d1c:	4b04      	ldr	r3, [pc, #16]	@ (8001d30 <__NVIC_GetPriorityGrouping+0x18>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	0a1b      	lsrs	r3, r3, #8
 8001d22:	f003 0307 	and.w	r3, r3, #7
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	db0b      	blt.n	8001d5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d46:	79fb      	ldrb	r3, [r7, #7]
 8001d48:	f003 021f 	and.w	r2, r3, #31
 8001d4c:	4907      	ldr	r1, [pc, #28]	@ (8001d6c <__NVIC_EnableIRQ+0x38>)
 8001d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d52:	095b      	lsrs	r3, r3, #5
 8001d54:	2001      	movs	r0, #1
 8001d56:	fa00 f202 	lsl.w	r2, r0, r2
 8001d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	e000e100 	.word	0xe000e100

08001d70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	6039      	str	r1, [r7, #0]
 8001d7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	db0a      	blt.n	8001d9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	b2da      	uxtb	r2, r3
 8001d88:	490c      	ldr	r1, [pc, #48]	@ (8001dbc <__NVIC_SetPriority+0x4c>)
 8001d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8e:	0112      	lsls	r2, r2, #4
 8001d90:	b2d2      	uxtb	r2, r2
 8001d92:	440b      	add	r3, r1
 8001d94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d98:	e00a      	b.n	8001db0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	b2da      	uxtb	r2, r3
 8001d9e:	4908      	ldr	r1, [pc, #32]	@ (8001dc0 <__NVIC_SetPriority+0x50>)
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	f003 030f 	and.w	r3, r3, #15
 8001da6:	3b04      	subs	r3, #4
 8001da8:	0112      	lsls	r2, r2, #4
 8001daa:	b2d2      	uxtb	r2, r2
 8001dac:	440b      	add	r3, r1
 8001dae:	761a      	strb	r2, [r3, #24]
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	e000e100 	.word	0xe000e100
 8001dc0:	e000ed00 	.word	0xe000ed00

08001dc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b089      	sub	sp, #36	@ 0x24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	f1c3 0307 	rsb	r3, r3, #7
 8001dde:	2b04      	cmp	r3, #4
 8001de0:	bf28      	it	cs
 8001de2:	2304      	movcs	r3, #4
 8001de4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	3304      	adds	r3, #4
 8001dea:	2b06      	cmp	r3, #6
 8001dec:	d902      	bls.n	8001df4 <NVIC_EncodePriority+0x30>
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	3b03      	subs	r3, #3
 8001df2:	e000      	b.n	8001df6 <NVIC_EncodePriority+0x32>
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	43da      	mvns	r2, r3
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	401a      	ands	r2, r3
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e0c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	fa01 f303 	lsl.w	r3, r1, r3
 8001e16:	43d9      	mvns	r1, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e1c:	4313      	orrs	r3, r2
         );
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3724      	adds	r7, #36	@ 0x24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
	...

08001e2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3b01      	subs	r3, #1
 8001e38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e3c:	d301      	bcc.n	8001e42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e00f      	b.n	8001e62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e42:	4a0a      	ldr	r2, [pc, #40]	@ (8001e6c <SysTick_Config+0x40>)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3b01      	subs	r3, #1
 8001e48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e4a:	210f      	movs	r1, #15
 8001e4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e50:	f7ff ff8e 	bl	8001d70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e54:	4b05      	ldr	r3, [pc, #20]	@ (8001e6c <SysTick_Config+0x40>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e5a:	4b04      	ldr	r3, [pc, #16]	@ (8001e6c <SysTick_Config+0x40>)
 8001e5c:	2207      	movs	r2, #7
 8001e5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	e000e010 	.word	0xe000e010

08001e70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f7ff ff29 	bl	8001cd0 <__NVIC_SetPriorityGrouping>
}
 8001e7e:	bf00      	nop
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b086      	sub	sp, #24
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	60b9      	str	r1, [r7, #8]
 8001e90:	607a      	str	r2, [r7, #4]
 8001e92:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e94:	f7ff ff40 	bl	8001d18 <__NVIC_GetPriorityGrouping>
 8001e98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	68b9      	ldr	r1, [r7, #8]
 8001e9e:	6978      	ldr	r0, [r7, #20]
 8001ea0:	f7ff ff90 	bl	8001dc4 <NVIC_EncodePriority>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eaa:	4611      	mov	r1, r2
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff ff5f 	bl	8001d70 <__NVIC_SetPriority>
}
 8001eb2:	bf00      	nop
 8001eb4:	3718      	adds	r7, #24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b082      	sub	sp, #8
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff ff33 	bl	8001d34 <__NVIC_EnableIRQ>
}
 8001ece:	bf00      	nop
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b082      	sub	sp, #8
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f7ff ffa4 	bl	8001e2c <SysTick_Config>
 8001ee4:	4603      	mov	r3, r0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	b085      	sub	sp, #20
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d005      	beq.n	8001f12 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2204      	movs	r2, #4
 8001f0a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	73fb      	strb	r3, [r7, #15]
 8001f10:	e037      	b.n	8001f82 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f022 020e 	bic.w	r2, r2, #14
 8001f20:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f2c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f30:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f022 0201 	bic.w	r2, r2, #1
 8001f40:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f46:	f003 021f 	and.w	r2, r3, #31
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4e:	2101      	movs	r1, #1
 8001f50:	fa01 f202 	lsl.w	r2, r1, r2
 8001f54:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001f5e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d00c      	beq.n	8001f82 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f72:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f76:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001f80:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2201      	movs	r2, #1
 8001f86:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3714      	adds	r7, #20
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d00d      	beq.n	8001fd4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2204      	movs	r2, #4
 8001fbc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	73fb      	strb	r3, [r7, #15]
 8001fd2:	e047      	b.n	8002064 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f022 020e 	bic.w	r2, r2, #14
 8001fe2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f022 0201 	bic.w	r2, r2, #1
 8001ff2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ffe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002002:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002008:	f003 021f 	and.w	r2, r3, #31
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002010:	2101      	movs	r1, #1
 8002012:	fa01 f202 	lsl.w	r2, r1, r2
 8002016:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002020:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002026:	2b00      	cmp	r3, #0
 8002028:	d00c      	beq.n	8002044 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002034:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002038:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002042:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002058:	2b00      	cmp	r3, #0
 800205a:	d003      	beq.n	8002064 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	4798      	blx	r3
    }
  }
  return status;
 8002064:	7bfb      	ldrb	r3, [r7, #15]
}
 8002066:	4618      	mov	r0, r3
 8002068:	3710      	adds	r7, #16
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
	...

08002070 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002070:	b480      	push	{r7}
 8002072:	b087      	sub	sp, #28
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800207a:	2300      	movs	r3, #0
 800207c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800207e:	e15a      	b.n	8002336 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	2101      	movs	r1, #1
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	fa01 f303 	lsl.w	r3, r1, r3
 800208c:	4013      	ands	r3, r2
 800208e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2b00      	cmp	r3, #0
 8002094:	f000 814c 	beq.w	8002330 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f003 0303 	and.w	r3, r3, #3
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d005      	beq.n	80020b0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d130      	bne.n	8002112 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	2203      	movs	r2, #3
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	43db      	mvns	r3, r3
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	4013      	ands	r3, r2
 80020c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	68da      	ldr	r2, [r3, #12]
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020e6:	2201      	movs	r2, #1
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	43db      	mvns	r3, r3
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	4013      	ands	r3, r2
 80020f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	091b      	lsrs	r3, r3, #4
 80020fc:	f003 0201 	and.w	r2, r3, #1
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	4313      	orrs	r3, r2
 800210a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f003 0303 	and.w	r3, r3, #3
 800211a:	2b03      	cmp	r3, #3
 800211c:	d017      	beq.n	800214e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	2203      	movs	r2, #3
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	43db      	mvns	r3, r3
 8002130:	693a      	ldr	r2, [r7, #16]
 8002132:	4013      	ands	r3, r2
 8002134:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	689a      	ldr	r2, [r3, #8]
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	4313      	orrs	r3, r2
 8002146:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f003 0303 	and.w	r3, r3, #3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d123      	bne.n	80021a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	08da      	lsrs	r2, r3, #3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	3208      	adds	r2, #8
 8002162:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002166:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	f003 0307 	and.w	r3, r3, #7
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	220f      	movs	r2, #15
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	43db      	mvns	r3, r3
 8002178:	693a      	ldr	r2, [r7, #16]
 800217a:	4013      	ands	r3, r2
 800217c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	691a      	ldr	r2, [r3, #16]
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	f003 0307 	and.w	r3, r3, #7
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	4313      	orrs	r3, r2
 8002192:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	08da      	lsrs	r2, r3, #3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	3208      	adds	r2, #8
 800219c:	6939      	ldr	r1, [r7, #16]
 800219e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	2203      	movs	r2, #3
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	43db      	mvns	r3, r3
 80021b4:	693a      	ldr	r2, [r7, #16]
 80021b6:	4013      	ands	r3, r2
 80021b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f003 0203 	and.w	r2, r3, #3
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f000 80a6 	beq.w	8002330 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021e4:	4b5b      	ldr	r3, [pc, #364]	@ (8002354 <HAL_GPIO_Init+0x2e4>)
 80021e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021e8:	4a5a      	ldr	r2, [pc, #360]	@ (8002354 <HAL_GPIO_Init+0x2e4>)
 80021ea:	f043 0301 	orr.w	r3, r3, #1
 80021ee:	6613      	str	r3, [r2, #96]	@ 0x60
 80021f0:	4b58      	ldr	r3, [pc, #352]	@ (8002354 <HAL_GPIO_Init+0x2e4>)
 80021f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021f4:	f003 0301 	and.w	r3, r3, #1
 80021f8:	60bb      	str	r3, [r7, #8]
 80021fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021fc:	4a56      	ldr	r2, [pc, #344]	@ (8002358 <HAL_GPIO_Init+0x2e8>)
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	089b      	lsrs	r3, r3, #2
 8002202:	3302      	adds	r3, #2
 8002204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002208:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	f003 0303 	and.w	r3, r3, #3
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	220f      	movs	r2, #15
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	43db      	mvns	r3, r3
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	4013      	ands	r3, r2
 800221e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002226:	d01f      	beq.n	8002268 <HAL_GPIO_Init+0x1f8>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a4c      	ldr	r2, [pc, #304]	@ (800235c <HAL_GPIO_Init+0x2ec>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d019      	beq.n	8002264 <HAL_GPIO_Init+0x1f4>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4a4b      	ldr	r2, [pc, #300]	@ (8002360 <HAL_GPIO_Init+0x2f0>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d013      	beq.n	8002260 <HAL_GPIO_Init+0x1f0>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a4a      	ldr	r2, [pc, #296]	@ (8002364 <HAL_GPIO_Init+0x2f4>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d00d      	beq.n	800225c <HAL_GPIO_Init+0x1ec>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a49      	ldr	r2, [pc, #292]	@ (8002368 <HAL_GPIO_Init+0x2f8>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d007      	beq.n	8002258 <HAL_GPIO_Init+0x1e8>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4a48      	ldr	r2, [pc, #288]	@ (800236c <HAL_GPIO_Init+0x2fc>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d101      	bne.n	8002254 <HAL_GPIO_Init+0x1e4>
 8002250:	2305      	movs	r3, #5
 8002252:	e00a      	b.n	800226a <HAL_GPIO_Init+0x1fa>
 8002254:	2306      	movs	r3, #6
 8002256:	e008      	b.n	800226a <HAL_GPIO_Init+0x1fa>
 8002258:	2304      	movs	r3, #4
 800225a:	e006      	b.n	800226a <HAL_GPIO_Init+0x1fa>
 800225c:	2303      	movs	r3, #3
 800225e:	e004      	b.n	800226a <HAL_GPIO_Init+0x1fa>
 8002260:	2302      	movs	r3, #2
 8002262:	e002      	b.n	800226a <HAL_GPIO_Init+0x1fa>
 8002264:	2301      	movs	r3, #1
 8002266:	e000      	b.n	800226a <HAL_GPIO_Init+0x1fa>
 8002268:	2300      	movs	r3, #0
 800226a:	697a      	ldr	r2, [r7, #20]
 800226c:	f002 0203 	and.w	r2, r2, #3
 8002270:	0092      	lsls	r2, r2, #2
 8002272:	4093      	lsls	r3, r2
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	4313      	orrs	r3, r2
 8002278:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800227a:	4937      	ldr	r1, [pc, #220]	@ (8002358 <HAL_GPIO_Init+0x2e8>)
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	089b      	lsrs	r3, r3, #2
 8002280:	3302      	adds	r3, #2
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002288:	4b39      	ldr	r3, [pc, #228]	@ (8002370 <HAL_GPIO_Init+0x300>)
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	43db      	mvns	r3, r3
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	4013      	ands	r3, r2
 8002296:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d003      	beq.n	80022ac <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80022a4:	693a      	ldr	r2, [r7, #16]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80022ac:	4a30      	ldr	r2, [pc, #192]	@ (8002370 <HAL_GPIO_Init+0x300>)
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80022b2:	4b2f      	ldr	r3, [pc, #188]	@ (8002370 <HAL_GPIO_Init+0x300>)
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	43db      	mvns	r3, r3
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	4013      	ands	r3, r2
 80022c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d003      	beq.n	80022d6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80022d6:	4a26      	ldr	r2, [pc, #152]	@ (8002370 <HAL_GPIO_Init+0x300>)
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80022dc:	4b24      	ldr	r3, [pc, #144]	@ (8002370 <HAL_GPIO_Init+0x300>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	43db      	mvns	r3, r3
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	4013      	ands	r3, r2
 80022ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d003      	beq.n	8002300 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80022f8:	693a      	ldr	r2, [r7, #16]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002300:	4a1b      	ldr	r2, [pc, #108]	@ (8002370 <HAL_GPIO_Init+0x300>)
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002306:	4b1a      	ldr	r3, [pc, #104]	@ (8002370 <HAL_GPIO_Init+0x300>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	43db      	mvns	r3, r3
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	4013      	ands	r3, r2
 8002314:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d003      	beq.n	800232a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	4313      	orrs	r3, r2
 8002328:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800232a:	4a11      	ldr	r2, [pc, #68]	@ (8002370 <HAL_GPIO_Init+0x300>)
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	3301      	adds	r3, #1
 8002334:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	fa22 f303 	lsr.w	r3, r2, r3
 8002340:	2b00      	cmp	r3, #0
 8002342:	f47f ae9d 	bne.w	8002080 <HAL_GPIO_Init+0x10>
  }
}
 8002346:	bf00      	nop
 8002348:	bf00      	nop
 800234a:	371c      	adds	r7, #28
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	40021000 	.word	0x40021000
 8002358:	40010000 	.word	0x40010000
 800235c:	48000400 	.word	0x48000400
 8002360:	48000800 	.word	0x48000800
 8002364:	48000c00 	.word	0x48000c00
 8002368:	48001000 	.word	0x48001000
 800236c:	48001400 	.word	0x48001400
 8002370:	40010400 	.word	0x40010400

08002374 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	460b      	mov	r3, r1
 800237e:	807b      	strh	r3, [r7, #2]
 8002380:	4613      	mov	r3, r2
 8002382:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002384:	787b      	ldrb	r3, [r7, #1]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800238a:	887a      	ldrh	r2, [r7, #2]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002390:	e002      	b.n	8002398 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002392:	887a      	ldrh	r2, [r7, #2]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d141      	bne.n	8002436 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80023b2:	4b4b      	ldr	r3, [pc, #300]	@ (80024e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80023ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023be:	d131      	bne.n	8002424 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023c0:	4b47      	ldr	r3, [pc, #284]	@ (80024e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80023c6:	4a46      	ldr	r2, [pc, #280]	@ (80024e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80023cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80023d0:	4b43      	ldr	r3, [pc, #268]	@ (80024e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80023d8:	4a41      	ldr	r2, [pc, #260]	@ (80024e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80023e0:	4b40      	ldr	r3, [pc, #256]	@ (80024e4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2232      	movs	r2, #50	@ 0x32
 80023e6:	fb02 f303 	mul.w	r3, r2, r3
 80023ea:	4a3f      	ldr	r2, [pc, #252]	@ (80024e8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80023ec:	fba2 2303 	umull	r2, r3, r2, r3
 80023f0:	0c9b      	lsrs	r3, r3, #18
 80023f2:	3301      	adds	r3, #1
 80023f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023f6:	e002      	b.n	80023fe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	3b01      	subs	r3, #1
 80023fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023fe:	4b38      	ldr	r3, [pc, #224]	@ (80024e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002406:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800240a:	d102      	bne.n	8002412 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1f2      	bne.n	80023f8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002412:	4b33      	ldr	r3, [pc, #204]	@ (80024e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800241a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800241e:	d158      	bne.n	80024d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e057      	b.n	80024d4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002424:	4b2e      	ldr	r3, [pc, #184]	@ (80024e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002426:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800242a:	4a2d      	ldr	r2, [pc, #180]	@ (80024e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800242c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002430:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002434:	e04d      	b.n	80024d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800243c:	d141      	bne.n	80024c2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800243e:	4b28      	ldr	r3, [pc, #160]	@ (80024e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002446:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800244a:	d131      	bne.n	80024b0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800244c:	4b24      	ldr	r3, [pc, #144]	@ (80024e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800244e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002452:	4a23      	ldr	r2, [pc, #140]	@ (80024e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002454:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002458:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800245c:	4b20      	ldr	r3, [pc, #128]	@ (80024e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002464:	4a1e      	ldr	r2, [pc, #120]	@ (80024e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002466:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800246a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800246c:	4b1d      	ldr	r3, [pc, #116]	@ (80024e4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2232      	movs	r2, #50	@ 0x32
 8002472:	fb02 f303 	mul.w	r3, r2, r3
 8002476:	4a1c      	ldr	r2, [pc, #112]	@ (80024e8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002478:	fba2 2303 	umull	r2, r3, r2, r3
 800247c:	0c9b      	lsrs	r3, r3, #18
 800247e:	3301      	adds	r3, #1
 8002480:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002482:	e002      	b.n	800248a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	3b01      	subs	r3, #1
 8002488:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800248a:	4b15      	ldr	r3, [pc, #84]	@ (80024e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002492:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002496:	d102      	bne.n	800249e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1f2      	bne.n	8002484 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800249e:	4b10      	ldr	r3, [pc, #64]	@ (80024e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024a0:	695b      	ldr	r3, [r3, #20]
 80024a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024aa:	d112      	bne.n	80024d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e011      	b.n	80024d4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80024b0:	4b0b      	ldr	r3, [pc, #44]	@ (80024e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80024b6:	4a0a      	ldr	r2, [pc, #40]	@ (80024e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80024c0:	e007      	b.n	80024d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80024c2:	4b07      	ldr	r3, [pc, #28]	@ (80024e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80024ca:	4a05      	ldr	r2, [pc, #20]	@ (80024e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024cc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024d0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3714      	adds	r7, #20
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	40007000 	.word	0x40007000
 80024e4:	20000000 	.word	0x20000000
 80024e8:	431bde83 	.word	0x431bde83

080024ec <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80024f0:	4b05      	ldr	r3, [pc, #20]	@ (8002508 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	4a04      	ldr	r2, [pc, #16]	@ (8002508 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80024f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024fa:	6093      	str	r3, [r2, #8]
}
 80024fc:	bf00      	nop
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	40007000 	.word	0x40007000

0800250c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b088      	sub	sp, #32
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e2fe      	b.n	8002b1c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b00      	cmp	r3, #0
 8002528:	d075      	beq.n	8002616 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800252a:	4b97      	ldr	r3, [pc, #604]	@ (8002788 <HAL_RCC_OscConfig+0x27c>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f003 030c 	and.w	r3, r3, #12
 8002532:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002534:	4b94      	ldr	r3, [pc, #592]	@ (8002788 <HAL_RCC_OscConfig+0x27c>)
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	f003 0303 	and.w	r3, r3, #3
 800253c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	2b0c      	cmp	r3, #12
 8002542:	d102      	bne.n	800254a <HAL_RCC_OscConfig+0x3e>
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	2b03      	cmp	r3, #3
 8002548:	d002      	beq.n	8002550 <HAL_RCC_OscConfig+0x44>
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	2b08      	cmp	r3, #8
 800254e:	d10b      	bne.n	8002568 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002550:	4b8d      	ldr	r3, [pc, #564]	@ (8002788 <HAL_RCC_OscConfig+0x27c>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d05b      	beq.n	8002614 <HAL_RCC_OscConfig+0x108>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d157      	bne.n	8002614 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e2d9      	b.n	8002b1c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002570:	d106      	bne.n	8002580 <HAL_RCC_OscConfig+0x74>
 8002572:	4b85      	ldr	r3, [pc, #532]	@ (8002788 <HAL_RCC_OscConfig+0x27c>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a84      	ldr	r2, [pc, #528]	@ (8002788 <HAL_RCC_OscConfig+0x27c>)
 8002578:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800257c:	6013      	str	r3, [r2, #0]
 800257e:	e01d      	b.n	80025bc <HAL_RCC_OscConfig+0xb0>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002588:	d10c      	bne.n	80025a4 <HAL_RCC_OscConfig+0x98>
 800258a:	4b7f      	ldr	r3, [pc, #508]	@ (8002788 <HAL_RCC_OscConfig+0x27c>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a7e      	ldr	r2, [pc, #504]	@ (8002788 <HAL_RCC_OscConfig+0x27c>)
 8002590:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002594:	6013      	str	r3, [r2, #0]
 8002596:	4b7c      	ldr	r3, [pc, #496]	@ (8002788 <HAL_RCC_OscConfig+0x27c>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a7b      	ldr	r2, [pc, #492]	@ (8002788 <HAL_RCC_OscConfig+0x27c>)
 800259c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025a0:	6013      	str	r3, [r2, #0]
 80025a2:	e00b      	b.n	80025bc <HAL_RCC_OscConfig+0xb0>
 80025a4:	4b78      	ldr	r3, [pc, #480]	@ (8002788 <HAL_RCC_OscConfig+0x27c>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a77      	ldr	r2, [pc, #476]	@ (8002788 <HAL_RCC_OscConfig+0x27c>)
 80025aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025ae:	6013      	str	r3, [r2, #0]
 80025b0:	4b75      	ldr	r3, [pc, #468]	@ (8002788 <HAL_RCC_OscConfig+0x27c>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a74      	ldr	r2, [pc, #464]	@ (8002788 <HAL_RCC_OscConfig+0x27c>)
 80025b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d013      	beq.n	80025ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c4:	f7ff fb78 	bl	8001cb8 <HAL_GetTick>
 80025c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025ca:	e008      	b.n	80025de <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025cc:	f7ff fb74 	bl	8001cb8 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b64      	cmp	r3, #100	@ 0x64
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e29e      	b.n	8002b1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025de:	4b6a      	ldr	r3, [pc, #424]	@ (8002788 <HAL_RCC_OscConfig+0x27c>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d0f0      	beq.n	80025cc <HAL_RCC_OscConfig+0xc0>
 80025ea:	e014      	b.n	8002616 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ec:	f7ff fb64 	bl	8001cb8 <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025f4:	f7ff fb60 	bl	8001cb8 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b64      	cmp	r3, #100	@ 0x64
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e28a      	b.n	8002b1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002606:	4b60      	ldr	r3, [pc, #384]	@ (8002788 <HAL_RCC_OscConfig+0x27c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1f0      	bne.n	80025f4 <HAL_RCC_OscConfig+0xe8>
 8002612:	e000      	b.n	8002616 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002614:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d075      	beq.n	800270e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002622:	4b59      	ldr	r3, [pc, #356]	@ (8002788 <HAL_RCC_OscConfig+0x27c>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f003 030c 	and.w	r3, r3, #12
 800262a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800262c:	4b56      	ldr	r3, [pc, #344]	@ (8002788 <HAL_RCC_OscConfig+0x27c>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	f003 0303 	and.w	r3, r3, #3
 8002634:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	2b0c      	cmp	r3, #12
 800263a:	d102      	bne.n	8002642 <HAL_RCC_OscConfig+0x136>
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	2b02      	cmp	r3, #2
 8002640:	d002      	beq.n	8002648 <HAL_RCC_OscConfig+0x13c>
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	2b04      	cmp	r3, #4
 8002646:	d11f      	bne.n	8002688 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002648:	4b4f      	ldr	r3, [pc, #316]	@ (8002788 <HAL_RCC_OscConfig+0x27c>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002650:	2b00      	cmp	r3, #0
 8002652:	d005      	beq.n	8002660 <HAL_RCC_OscConfig+0x154>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d101      	bne.n	8002660 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e25d      	b.n	8002b1c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002660:	4b49      	ldr	r3, [pc, #292]	@ (8002788 <HAL_RCC_OscConfig+0x27c>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	061b      	lsls	r3, r3, #24
 800266e:	4946      	ldr	r1, [pc, #280]	@ (8002788 <HAL_RCC_OscConfig+0x27c>)
 8002670:	4313      	orrs	r3, r2
 8002672:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002674:	4b45      	ldr	r3, [pc, #276]	@ (800278c <HAL_RCC_OscConfig+0x280>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff fad1 	bl	8001c20 <HAL_InitTick>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d043      	beq.n	800270c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e249      	b.n	8002b1c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d023      	beq.n	80026d8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002690:	4b3d      	ldr	r3, [pc, #244]	@ (8002788 <HAL_RCC_OscConfig+0x27c>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a3c      	ldr	r2, [pc, #240]	@ (8002788 <HAL_RCC_OscConfig+0x27c>)
 8002696:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800269a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800269c:	f7ff fb0c 	bl	8001cb8 <HAL_GetTick>
 80026a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026a2:	e008      	b.n	80026b6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026a4:	f7ff fb08 	bl	8001cb8 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e232      	b.n	8002b1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026b6:	4b34      	ldr	r3, [pc, #208]	@ (8002788 <HAL_RCC_OscConfig+0x27c>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d0f0      	beq.n	80026a4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026c2:	4b31      	ldr	r3, [pc, #196]	@ (8002788 <HAL_RCC_OscConfig+0x27c>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	061b      	lsls	r3, r3, #24
 80026d0:	492d      	ldr	r1, [pc, #180]	@ (8002788 <HAL_RCC_OscConfig+0x27c>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	604b      	str	r3, [r1, #4]
 80026d6:	e01a      	b.n	800270e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026d8:	4b2b      	ldr	r3, [pc, #172]	@ (8002788 <HAL_RCC_OscConfig+0x27c>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a2a      	ldr	r2, [pc, #168]	@ (8002788 <HAL_RCC_OscConfig+0x27c>)
 80026de:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80026e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e4:	f7ff fae8 	bl	8001cb8 <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026ea:	e008      	b.n	80026fe <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ec:	f7ff fae4 	bl	8001cb8 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e20e      	b.n	8002b1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026fe:	4b22      	ldr	r3, [pc, #136]	@ (8002788 <HAL_RCC_OscConfig+0x27c>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1f0      	bne.n	80026ec <HAL_RCC_OscConfig+0x1e0>
 800270a:	e000      	b.n	800270e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800270c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0308 	and.w	r3, r3, #8
 8002716:	2b00      	cmp	r3, #0
 8002718:	d041      	beq.n	800279e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d01c      	beq.n	800275c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002722:	4b19      	ldr	r3, [pc, #100]	@ (8002788 <HAL_RCC_OscConfig+0x27c>)
 8002724:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002728:	4a17      	ldr	r2, [pc, #92]	@ (8002788 <HAL_RCC_OscConfig+0x27c>)
 800272a:	f043 0301 	orr.w	r3, r3, #1
 800272e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002732:	f7ff fac1 	bl	8001cb8 <HAL_GetTick>
 8002736:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002738:	e008      	b.n	800274c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800273a:	f7ff fabd 	bl	8001cb8 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d901      	bls.n	800274c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e1e7      	b.n	8002b1c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800274c:	4b0e      	ldr	r3, [pc, #56]	@ (8002788 <HAL_RCC_OscConfig+0x27c>)
 800274e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d0ef      	beq.n	800273a <HAL_RCC_OscConfig+0x22e>
 800275a:	e020      	b.n	800279e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800275c:	4b0a      	ldr	r3, [pc, #40]	@ (8002788 <HAL_RCC_OscConfig+0x27c>)
 800275e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002762:	4a09      	ldr	r2, [pc, #36]	@ (8002788 <HAL_RCC_OscConfig+0x27c>)
 8002764:	f023 0301 	bic.w	r3, r3, #1
 8002768:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800276c:	f7ff faa4 	bl	8001cb8 <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002772:	e00d      	b.n	8002790 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002774:	f7ff faa0 	bl	8001cb8 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d906      	bls.n	8002790 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e1ca      	b.n	8002b1c <HAL_RCC_OscConfig+0x610>
 8002786:	bf00      	nop
 8002788:	40021000 	.word	0x40021000
 800278c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002790:	4b8c      	ldr	r3, [pc, #560]	@ (80029c4 <HAL_RCC_OscConfig+0x4b8>)
 8002792:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1ea      	bne.n	8002774 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0304 	and.w	r3, r3, #4
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f000 80a6 	beq.w	80028f8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ac:	2300      	movs	r3, #0
 80027ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027b0:	4b84      	ldr	r3, [pc, #528]	@ (80029c4 <HAL_RCC_OscConfig+0x4b8>)
 80027b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d101      	bne.n	80027c0 <HAL_RCC_OscConfig+0x2b4>
 80027bc:	2301      	movs	r3, #1
 80027be:	e000      	b.n	80027c2 <HAL_RCC_OscConfig+0x2b6>
 80027c0:	2300      	movs	r3, #0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d00d      	beq.n	80027e2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027c6:	4b7f      	ldr	r3, [pc, #508]	@ (80029c4 <HAL_RCC_OscConfig+0x4b8>)
 80027c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ca:	4a7e      	ldr	r2, [pc, #504]	@ (80029c4 <HAL_RCC_OscConfig+0x4b8>)
 80027cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80027d2:	4b7c      	ldr	r3, [pc, #496]	@ (80029c4 <HAL_RCC_OscConfig+0x4b8>)
 80027d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027da:	60fb      	str	r3, [r7, #12]
 80027dc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80027de:	2301      	movs	r3, #1
 80027e0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027e2:	4b79      	ldr	r3, [pc, #484]	@ (80029c8 <HAL_RCC_OscConfig+0x4bc>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d118      	bne.n	8002820 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027ee:	4b76      	ldr	r3, [pc, #472]	@ (80029c8 <HAL_RCC_OscConfig+0x4bc>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a75      	ldr	r2, [pc, #468]	@ (80029c8 <HAL_RCC_OscConfig+0x4bc>)
 80027f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027fa:	f7ff fa5d 	bl	8001cb8 <HAL_GetTick>
 80027fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002800:	e008      	b.n	8002814 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002802:	f7ff fa59 	bl	8001cb8 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e183      	b.n	8002b1c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002814:	4b6c      	ldr	r3, [pc, #432]	@ (80029c8 <HAL_RCC_OscConfig+0x4bc>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0f0      	beq.n	8002802 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d108      	bne.n	800283a <HAL_RCC_OscConfig+0x32e>
 8002828:	4b66      	ldr	r3, [pc, #408]	@ (80029c4 <HAL_RCC_OscConfig+0x4b8>)
 800282a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800282e:	4a65      	ldr	r2, [pc, #404]	@ (80029c4 <HAL_RCC_OscConfig+0x4b8>)
 8002830:	f043 0301 	orr.w	r3, r3, #1
 8002834:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002838:	e024      	b.n	8002884 <HAL_RCC_OscConfig+0x378>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	2b05      	cmp	r3, #5
 8002840:	d110      	bne.n	8002864 <HAL_RCC_OscConfig+0x358>
 8002842:	4b60      	ldr	r3, [pc, #384]	@ (80029c4 <HAL_RCC_OscConfig+0x4b8>)
 8002844:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002848:	4a5e      	ldr	r2, [pc, #376]	@ (80029c4 <HAL_RCC_OscConfig+0x4b8>)
 800284a:	f043 0304 	orr.w	r3, r3, #4
 800284e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002852:	4b5c      	ldr	r3, [pc, #368]	@ (80029c4 <HAL_RCC_OscConfig+0x4b8>)
 8002854:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002858:	4a5a      	ldr	r2, [pc, #360]	@ (80029c4 <HAL_RCC_OscConfig+0x4b8>)
 800285a:	f043 0301 	orr.w	r3, r3, #1
 800285e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002862:	e00f      	b.n	8002884 <HAL_RCC_OscConfig+0x378>
 8002864:	4b57      	ldr	r3, [pc, #348]	@ (80029c4 <HAL_RCC_OscConfig+0x4b8>)
 8002866:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800286a:	4a56      	ldr	r2, [pc, #344]	@ (80029c4 <HAL_RCC_OscConfig+0x4b8>)
 800286c:	f023 0301 	bic.w	r3, r3, #1
 8002870:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002874:	4b53      	ldr	r3, [pc, #332]	@ (80029c4 <HAL_RCC_OscConfig+0x4b8>)
 8002876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800287a:	4a52      	ldr	r2, [pc, #328]	@ (80029c4 <HAL_RCC_OscConfig+0x4b8>)
 800287c:	f023 0304 	bic.w	r3, r3, #4
 8002880:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d016      	beq.n	80028ba <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800288c:	f7ff fa14 	bl	8001cb8 <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002892:	e00a      	b.n	80028aa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002894:	f7ff fa10 	bl	8001cb8 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e138      	b.n	8002b1c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028aa:	4b46      	ldr	r3, [pc, #280]	@ (80029c4 <HAL_RCC_OscConfig+0x4b8>)
 80028ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d0ed      	beq.n	8002894 <HAL_RCC_OscConfig+0x388>
 80028b8:	e015      	b.n	80028e6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ba:	f7ff f9fd 	bl	8001cb8 <HAL_GetTick>
 80028be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028c0:	e00a      	b.n	80028d8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028c2:	f7ff f9f9 	bl	8001cb8 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d901      	bls.n	80028d8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e121      	b.n	8002b1c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028d8:	4b3a      	ldr	r3, [pc, #232]	@ (80029c4 <HAL_RCC_OscConfig+0x4b8>)
 80028da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1ed      	bne.n	80028c2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028e6:	7ffb      	ldrb	r3, [r7, #31]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d105      	bne.n	80028f8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ec:	4b35      	ldr	r3, [pc, #212]	@ (80029c4 <HAL_RCC_OscConfig+0x4b8>)
 80028ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028f0:	4a34      	ldr	r2, [pc, #208]	@ (80029c4 <HAL_RCC_OscConfig+0x4b8>)
 80028f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028f6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0320 	and.w	r3, r3, #32
 8002900:	2b00      	cmp	r3, #0
 8002902:	d03c      	beq.n	800297e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d01c      	beq.n	8002946 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800290c:	4b2d      	ldr	r3, [pc, #180]	@ (80029c4 <HAL_RCC_OscConfig+0x4b8>)
 800290e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002912:	4a2c      	ldr	r2, [pc, #176]	@ (80029c4 <HAL_RCC_OscConfig+0x4b8>)
 8002914:	f043 0301 	orr.w	r3, r3, #1
 8002918:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800291c:	f7ff f9cc 	bl	8001cb8 <HAL_GetTick>
 8002920:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002922:	e008      	b.n	8002936 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002924:	f7ff f9c8 	bl	8001cb8 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b02      	cmp	r3, #2
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e0f2      	b.n	8002b1c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002936:	4b23      	ldr	r3, [pc, #140]	@ (80029c4 <HAL_RCC_OscConfig+0x4b8>)
 8002938:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d0ef      	beq.n	8002924 <HAL_RCC_OscConfig+0x418>
 8002944:	e01b      	b.n	800297e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002946:	4b1f      	ldr	r3, [pc, #124]	@ (80029c4 <HAL_RCC_OscConfig+0x4b8>)
 8002948:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800294c:	4a1d      	ldr	r2, [pc, #116]	@ (80029c4 <HAL_RCC_OscConfig+0x4b8>)
 800294e:	f023 0301 	bic.w	r3, r3, #1
 8002952:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002956:	f7ff f9af 	bl	8001cb8 <HAL_GetTick>
 800295a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800295c:	e008      	b.n	8002970 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800295e:	f7ff f9ab 	bl	8001cb8 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b02      	cmp	r3, #2
 800296a:	d901      	bls.n	8002970 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e0d5      	b.n	8002b1c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002970:	4b14      	ldr	r3, [pc, #80]	@ (80029c4 <HAL_RCC_OscConfig+0x4b8>)
 8002972:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1ef      	bne.n	800295e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	69db      	ldr	r3, [r3, #28]
 8002982:	2b00      	cmp	r3, #0
 8002984:	f000 80c9 	beq.w	8002b1a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002988:	4b0e      	ldr	r3, [pc, #56]	@ (80029c4 <HAL_RCC_OscConfig+0x4b8>)
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f003 030c 	and.w	r3, r3, #12
 8002990:	2b0c      	cmp	r3, #12
 8002992:	f000 8083 	beq.w	8002a9c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	69db      	ldr	r3, [r3, #28]
 800299a:	2b02      	cmp	r3, #2
 800299c:	d15e      	bne.n	8002a5c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800299e:	4b09      	ldr	r3, [pc, #36]	@ (80029c4 <HAL_RCC_OscConfig+0x4b8>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a08      	ldr	r2, [pc, #32]	@ (80029c4 <HAL_RCC_OscConfig+0x4b8>)
 80029a4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029aa:	f7ff f985 	bl	8001cb8 <HAL_GetTick>
 80029ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029b0:	e00c      	b.n	80029cc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b2:	f7ff f981 	bl	8001cb8 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d905      	bls.n	80029cc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e0ab      	b.n	8002b1c <HAL_RCC_OscConfig+0x610>
 80029c4:	40021000 	.word	0x40021000
 80029c8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029cc:	4b55      	ldr	r3, [pc, #340]	@ (8002b24 <HAL_RCC_OscConfig+0x618>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1ec      	bne.n	80029b2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029d8:	4b52      	ldr	r3, [pc, #328]	@ (8002b24 <HAL_RCC_OscConfig+0x618>)
 80029da:	68da      	ldr	r2, [r3, #12]
 80029dc:	4b52      	ldr	r3, [pc, #328]	@ (8002b28 <HAL_RCC_OscConfig+0x61c>)
 80029de:	4013      	ands	r3, r2
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	6a11      	ldr	r1, [r2, #32]
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80029e8:	3a01      	subs	r2, #1
 80029ea:	0112      	lsls	r2, r2, #4
 80029ec:	4311      	orrs	r1, r2
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80029f2:	0212      	lsls	r2, r2, #8
 80029f4:	4311      	orrs	r1, r2
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80029fa:	0852      	lsrs	r2, r2, #1
 80029fc:	3a01      	subs	r2, #1
 80029fe:	0552      	lsls	r2, r2, #21
 8002a00:	4311      	orrs	r1, r2
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002a06:	0852      	lsrs	r2, r2, #1
 8002a08:	3a01      	subs	r2, #1
 8002a0a:	0652      	lsls	r2, r2, #25
 8002a0c:	4311      	orrs	r1, r2
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002a12:	06d2      	lsls	r2, r2, #27
 8002a14:	430a      	orrs	r2, r1
 8002a16:	4943      	ldr	r1, [pc, #268]	@ (8002b24 <HAL_RCC_OscConfig+0x618>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a1c:	4b41      	ldr	r3, [pc, #260]	@ (8002b24 <HAL_RCC_OscConfig+0x618>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a40      	ldr	r2, [pc, #256]	@ (8002b24 <HAL_RCC_OscConfig+0x618>)
 8002a22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a26:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a28:	4b3e      	ldr	r3, [pc, #248]	@ (8002b24 <HAL_RCC_OscConfig+0x618>)
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	4a3d      	ldr	r2, [pc, #244]	@ (8002b24 <HAL_RCC_OscConfig+0x618>)
 8002a2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a32:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a34:	f7ff f940 	bl	8001cb8 <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a3c:	f7ff f93c 	bl	8001cb8 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e066      	b.n	8002b1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a4e:	4b35      	ldr	r3, [pc, #212]	@ (8002b24 <HAL_RCC_OscConfig+0x618>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d0f0      	beq.n	8002a3c <HAL_RCC_OscConfig+0x530>
 8002a5a:	e05e      	b.n	8002b1a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a5c:	4b31      	ldr	r3, [pc, #196]	@ (8002b24 <HAL_RCC_OscConfig+0x618>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a30      	ldr	r2, [pc, #192]	@ (8002b24 <HAL_RCC_OscConfig+0x618>)
 8002a62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a68:	f7ff f926 	bl	8001cb8 <HAL_GetTick>
 8002a6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a6e:	e008      	b.n	8002a82 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a70:	f7ff f922 	bl	8001cb8 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e04c      	b.n	8002b1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a82:	4b28      	ldr	r3, [pc, #160]	@ (8002b24 <HAL_RCC_OscConfig+0x618>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d1f0      	bne.n	8002a70 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002a8e:	4b25      	ldr	r3, [pc, #148]	@ (8002b24 <HAL_RCC_OscConfig+0x618>)
 8002a90:	68da      	ldr	r2, [r3, #12]
 8002a92:	4924      	ldr	r1, [pc, #144]	@ (8002b24 <HAL_RCC_OscConfig+0x618>)
 8002a94:	4b25      	ldr	r3, [pc, #148]	@ (8002b2c <HAL_RCC_OscConfig+0x620>)
 8002a96:	4013      	ands	r3, r2
 8002a98:	60cb      	str	r3, [r1, #12]
 8002a9a:	e03e      	b.n	8002b1a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	69db      	ldr	r3, [r3, #28]
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d101      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e039      	b.n	8002b1c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002aa8:	4b1e      	ldr	r3, [pc, #120]	@ (8002b24 <HAL_RCC_OscConfig+0x618>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	f003 0203 	and.w	r2, r3, #3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d12c      	bne.n	8002b16 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d123      	bne.n	8002b16 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ad8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d11b      	bne.n	8002b16 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d113      	bne.n	8002b16 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af8:	085b      	lsrs	r3, r3, #1
 8002afa:	3b01      	subs	r3, #1
 8002afc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d109      	bne.n	8002b16 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b0c:	085b      	lsrs	r3, r3, #1
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d001      	beq.n	8002b1a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e000      	b.n	8002b1c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3720      	adds	r7, #32
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	40021000 	.word	0x40021000
 8002b28:	019f800c 	.word	0x019f800c
 8002b2c:	feeefffc 	.word	0xfeeefffc

08002b30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d101      	bne.n	8002b48 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e11e      	b.n	8002d86 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b48:	4b91      	ldr	r3, [pc, #580]	@ (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 030f 	and.w	r3, r3, #15
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d910      	bls.n	8002b78 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b56:	4b8e      	ldr	r3, [pc, #568]	@ (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f023 020f 	bic.w	r2, r3, #15
 8002b5e:	498c      	ldr	r1, [pc, #560]	@ (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b66:	4b8a      	ldr	r3, [pc, #552]	@ (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 030f 	and.w	r3, r3, #15
 8002b6e:	683a      	ldr	r2, [r7, #0]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d001      	beq.n	8002b78 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e106      	b.n	8002d86 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0301 	and.w	r3, r3, #1
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d073      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	2b03      	cmp	r3, #3
 8002b8a:	d129      	bne.n	8002be0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b8c:	4b81      	ldr	r3, [pc, #516]	@ (8002d94 <HAL_RCC_ClockConfig+0x264>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d101      	bne.n	8002b9c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e0f4      	b.n	8002d86 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002b9c:	f000 f99e 	bl	8002edc <RCC_GetSysClockFreqFromPLLSource>
 8002ba0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	4a7c      	ldr	r2, [pc, #496]	@ (8002d98 <HAL_RCC_ClockConfig+0x268>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d93f      	bls.n	8002c2a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002baa:	4b7a      	ldr	r3, [pc, #488]	@ (8002d94 <HAL_RCC_ClockConfig+0x264>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d009      	beq.n	8002bca <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d033      	beq.n	8002c2a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d12f      	bne.n	8002c2a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002bca:	4b72      	ldr	r3, [pc, #456]	@ (8002d94 <HAL_RCC_ClockConfig+0x264>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002bd2:	4a70      	ldr	r2, [pc, #448]	@ (8002d94 <HAL_RCC_ClockConfig+0x264>)
 8002bd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002bd8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002bda:	2380      	movs	r3, #128	@ 0x80
 8002bdc:	617b      	str	r3, [r7, #20]
 8002bde:	e024      	b.n	8002c2a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d107      	bne.n	8002bf8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002be8:	4b6a      	ldr	r3, [pc, #424]	@ (8002d94 <HAL_RCC_ClockConfig+0x264>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d109      	bne.n	8002c08 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e0c6      	b.n	8002d86 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bf8:	4b66      	ldr	r3, [pc, #408]	@ (8002d94 <HAL_RCC_ClockConfig+0x264>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d101      	bne.n	8002c08 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e0be      	b.n	8002d86 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002c08:	f000 f8ce 	bl	8002da8 <HAL_RCC_GetSysClockFreq>
 8002c0c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	4a61      	ldr	r2, [pc, #388]	@ (8002d98 <HAL_RCC_ClockConfig+0x268>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d909      	bls.n	8002c2a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002c16:	4b5f      	ldr	r3, [pc, #380]	@ (8002d94 <HAL_RCC_ClockConfig+0x264>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002c1e:	4a5d      	ldr	r2, [pc, #372]	@ (8002d94 <HAL_RCC_ClockConfig+0x264>)
 8002c20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c24:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002c26:	2380      	movs	r3, #128	@ 0x80
 8002c28:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c2a:	4b5a      	ldr	r3, [pc, #360]	@ (8002d94 <HAL_RCC_ClockConfig+0x264>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f023 0203 	bic.w	r2, r3, #3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	4957      	ldr	r1, [pc, #348]	@ (8002d94 <HAL_RCC_ClockConfig+0x264>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c3c:	f7ff f83c 	bl	8001cb8 <HAL_GetTick>
 8002c40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c42:	e00a      	b.n	8002c5a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c44:	f7ff f838 	bl	8001cb8 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e095      	b.n	8002d86 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c5a:	4b4e      	ldr	r3, [pc, #312]	@ (8002d94 <HAL_RCC_ClockConfig+0x264>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f003 020c 	and.w	r2, r3, #12
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d1eb      	bne.n	8002c44 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d023      	beq.n	8002cc0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0304 	and.w	r3, r3, #4
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d005      	beq.n	8002c90 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c84:	4b43      	ldr	r3, [pc, #268]	@ (8002d94 <HAL_RCC_ClockConfig+0x264>)
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	4a42      	ldr	r2, [pc, #264]	@ (8002d94 <HAL_RCC_ClockConfig+0x264>)
 8002c8a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002c8e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0308 	and.w	r3, r3, #8
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d007      	beq.n	8002cac <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002c9c:	4b3d      	ldr	r3, [pc, #244]	@ (8002d94 <HAL_RCC_ClockConfig+0x264>)
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002ca4:	4a3b      	ldr	r2, [pc, #236]	@ (8002d94 <HAL_RCC_ClockConfig+0x264>)
 8002ca6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002caa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cac:	4b39      	ldr	r3, [pc, #228]	@ (8002d94 <HAL_RCC_ClockConfig+0x264>)
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	4936      	ldr	r1, [pc, #216]	@ (8002d94 <HAL_RCC_ClockConfig+0x264>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	608b      	str	r3, [r1, #8]
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	2b80      	cmp	r3, #128	@ 0x80
 8002cc4:	d105      	bne.n	8002cd2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002cc6:	4b33      	ldr	r3, [pc, #204]	@ (8002d94 <HAL_RCC_ClockConfig+0x264>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	4a32      	ldr	r2, [pc, #200]	@ (8002d94 <HAL_RCC_ClockConfig+0x264>)
 8002ccc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002cd0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cd2:	4b2f      	ldr	r3, [pc, #188]	@ (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 030f 	and.w	r3, r3, #15
 8002cda:	683a      	ldr	r2, [r7, #0]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d21d      	bcs.n	8002d1c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ce0:	4b2b      	ldr	r3, [pc, #172]	@ (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f023 020f 	bic.w	r2, r3, #15
 8002ce8:	4929      	ldr	r1, [pc, #164]	@ (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002cf0:	f7fe ffe2 	bl	8001cb8 <HAL_GetTick>
 8002cf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cf6:	e00a      	b.n	8002d0e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cf8:	f7fe ffde 	bl	8001cb8 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e03b      	b.n	8002d86 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d0e:	4b20      	ldr	r3, [pc, #128]	@ (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 030f 	and.w	r3, r3, #15
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d1ed      	bne.n	8002cf8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0304 	and.w	r3, r3, #4
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d008      	beq.n	8002d3a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d28:	4b1a      	ldr	r3, [pc, #104]	@ (8002d94 <HAL_RCC_ClockConfig+0x264>)
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	4917      	ldr	r1, [pc, #92]	@ (8002d94 <HAL_RCC_ClockConfig+0x264>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0308 	and.w	r3, r3, #8
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d009      	beq.n	8002d5a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d46:	4b13      	ldr	r3, [pc, #76]	@ (8002d94 <HAL_RCC_ClockConfig+0x264>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	490f      	ldr	r1, [pc, #60]	@ (8002d94 <HAL_RCC_ClockConfig+0x264>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d5a:	f000 f825 	bl	8002da8 <HAL_RCC_GetSysClockFreq>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	4b0c      	ldr	r3, [pc, #48]	@ (8002d94 <HAL_RCC_ClockConfig+0x264>)
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	091b      	lsrs	r3, r3, #4
 8002d66:	f003 030f 	and.w	r3, r3, #15
 8002d6a:	490c      	ldr	r1, [pc, #48]	@ (8002d9c <HAL_RCC_ClockConfig+0x26c>)
 8002d6c:	5ccb      	ldrb	r3, [r1, r3]
 8002d6e:	f003 031f 	and.w	r3, r3, #31
 8002d72:	fa22 f303 	lsr.w	r3, r2, r3
 8002d76:	4a0a      	ldr	r2, [pc, #40]	@ (8002da0 <HAL_RCC_ClockConfig+0x270>)
 8002d78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002d7a:	4b0a      	ldr	r3, [pc, #40]	@ (8002da4 <HAL_RCC_ClockConfig+0x274>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7fe ff4e 	bl	8001c20 <HAL_InitTick>
 8002d84:	4603      	mov	r3, r0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3718      	adds	r7, #24
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	40022000 	.word	0x40022000
 8002d94:	40021000 	.word	0x40021000
 8002d98:	04c4b400 	.word	0x04c4b400
 8002d9c:	0800a208 	.word	0x0800a208
 8002da0:	20000000 	.word	0x20000000
 8002da4:	20000004 	.word	0x20000004

08002da8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b087      	sub	sp, #28
 8002dac:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002dae:	4b2c      	ldr	r3, [pc, #176]	@ (8002e60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 030c 	and.w	r3, r3, #12
 8002db6:	2b04      	cmp	r3, #4
 8002db8:	d102      	bne.n	8002dc0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002dba:	4b2a      	ldr	r3, [pc, #168]	@ (8002e64 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002dbc:	613b      	str	r3, [r7, #16]
 8002dbe:	e047      	b.n	8002e50 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002dc0:	4b27      	ldr	r3, [pc, #156]	@ (8002e60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f003 030c 	and.w	r3, r3, #12
 8002dc8:	2b08      	cmp	r3, #8
 8002dca:	d102      	bne.n	8002dd2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002dcc:	4b26      	ldr	r3, [pc, #152]	@ (8002e68 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002dce:	613b      	str	r3, [r7, #16]
 8002dd0:	e03e      	b.n	8002e50 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002dd2:	4b23      	ldr	r3, [pc, #140]	@ (8002e60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f003 030c 	and.w	r3, r3, #12
 8002dda:	2b0c      	cmp	r3, #12
 8002ddc:	d136      	bne.n	8002e4c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002dde:	4b20      	ldr	r3, [pc, #128]	@ (8002e60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	f003 0303 	and.w	r3, r3, #3
 8002de6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002de8:	4b1d      	ldr	r3, [pc, #116]	@ (8002e60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	091b      	lsrs	r3, r3, #4
 8002dee:	f003 030f 	and.w	r3, r3, #15
 8002df2:	3301      	adds	r3, #1
 8002df4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2b03      	cmp	r3, #3
 8002dfa:	d10c      	bne.n	8002e16 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002dfc:	4a1a      	ldr	r2, [pc, #104]	@ (8002e68 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e04:	4a16      	ldr	r2, [pc, #88]	@ (8002e60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e06:	68d2      	ldr	r2, [r2, #12]
 8002e08:	0a12      	lsrs	r2, r2, #8
 8002e0a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002e0e:	fb02 f303 	mul.w	r3, r2, r3
 8002e12:	617b      	str	r3, [r7, #20]
      break;
 8002e14:	e00c      	b.n	8002e30 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e16:	4a13      	ldr	r2, [pc, #76]	@ (8002e64 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e1e:	4a10      	ldr	r2, [pc, #64]	@ (8002e60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e20:	68d2      	ldr	r2, [r2, #12]
 8002e22:	0a12      	lsrs	r2, r2, #8
 8002e24:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002e28:	fb02 f303 	mul.w	r3, r2, r3
 8002e2c:	617b      	str	r3, [r7, #20]
      break;
 8002e2e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e30:	4b0b      	ldr	r3, [pc, #44]	@ (8002e60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	0e5b      	lsrs	r3, r3, #25
 8002e36:	f003 0303 	and.w	r3, r3, #3
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002e40:	697a      	ldr	r2, [r7, #20]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e48:	613b      	str	r3, [r7, #16]
 8002e4a:	e001      	b.n	8002e50 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002e50:	693b      	ldr	r3, [r7, #16]
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	371c      	adds	r7, #28
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	40021000 	.word	0x40021000
 8002e64:	00f42400 	.word	0x00f42400
 8002e68:	016e3600 	.word	0x016e3600

08002e6c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e70:	4b03      	ldr	r3, [pc, #12]	@ (8002e80 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e72:	681b      	ldr	r3, [r3, #0]
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	20000000 	.word	0x20000000

08002e84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002e88:	f7ff fff0 	bl	8002e6c <HAL_RCC_GetHCLKFreq>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	4b06      	ldr	r3, [pc, #24]	@ (8002ea8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	0a1b      	lsrs	r3, r3, #8
 8002e94:	f003 0307 	and.w	r3, r3, #7
 8002e98:	4904      	ldr	r1, [pc, #16]	@ (8002eac <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e9a:	5ccb      	ldrb	r3, [r1, r3]
 8002e9c:	f003 031f 	and.w	r3, r3, #31
 8002ea0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	40021000 	.word	0x40021000
 8002eac:	0800a218 	.word	0x0800a218

08002eb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002eb4:	f7ff ffda 	bl	8002e6c <HAL_RCC_GetHCLKFreq>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	4b06      	ldr	r3, [pc, #24]	@ (8002ed4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	0adb      	lsrs	r3, r3, #11
 8002ec0:	f003 0307 	and.w	r3, r3, #7
 8002ec4:	4904      	ldr	r1, [pc, #16]	@ (8002ed8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ec6:	5ccb      	ldrb	r3, [r1, r3]
 8002ec8:	f003 031f 	and.w	r3, r3, #31
 8002ecc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	0800a218 	.word	0x0800a218

08002edc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b087      	sub	sp, #28
 8002ee0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ee2:	4b1e      	ldr	r3, [pc, #120]	@ (8002f5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	f003 0303 	and.w	r3, r3, #3
 8002eea:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002eec:	4b1b      	ldr	r3, [pc, #108]	@ (8002f5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	091b      	lsrs	r3, r3, #4
 8002ef2:	f003 030f 	and.w	r3, r3, #15
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	2b03      	cmp	r3, #3
 8002efe:	d10c      	bne.n	8002f1a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f00:	4a17      	ldr	r2, [pc, #92]	@ (8002f60 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f08:	4a14      	ldr	r2, [pc, #80]	@ (8002f5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f0a:	68d2      	ldr	r2, [r2, #12]
 8002f0c:	0a12      	lsrs	r2, r2, #8
 8002f0e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002f12:	fb02 f303 	mul.w	r3, r2, r3
 8002f16:	617b      	str	r3, [r7, #20]
    break;
 8002f18:	e00c      	b.n	8002f34 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f1a:	4a12      	ldr	r2, [pc, #72]	@ (8002f64 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f22:	4a0e      	ldr	r2, [pc, #56]	@ (8002f5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f24:	68d2      	ldr	r2, [r2, #12]
 8002f26:	0a12      	lsrs	r2, r2, #8
 8002f28:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002f2c:	fb02 f303 	mul.w	r3, r2, r3
 8002f30:	617b      	str	r3, [r7, #20]
    break;
 8002f32:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f34:	4b09      	ldr	r3, [pc, #36]	@ (8002f5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	0e5b      	lsrs	r3, r3, #25
 8002f3a:	f003 0303 	and.w	r3, r3, #3
 8002f3e:	3301      	adds	r3, #1
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002f44:	697a      	ldr	r2, [r7, #20]
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f4c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002f4e:	687b      	ldr	r3, [r7, #4]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	371c      	adds	r7, #28
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	016e3600 	.word	0x016e3600
 8002f64:	00f42400 	.word	0x00f42400

08002f68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f70:	2300      	movs	r3, #0
 8002f72:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f74:	2300      	movs	r3, #0
 8002f76:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f000 8098 	beq.w	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f86:	2300      	movs	r3, #0
 8002f88:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f8a:	4b43      	ldr	r3, [pc, #268]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d10d      	bne.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f96:	4b40      	ldr	r3, [pc, #256]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f9a:	4a3f      	ldr	r2, [pc, #252]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fa0:	6593      	str	r3, [r2, #88]	@ 0x58
 8002fa2:	4b3d      	ldr	r3, [pc, #244]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002faa:	60bb      	str	r3, [r7, #8]
 8002fac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fb2:	4b3a      	ldr	r3, [pc, #232]	@ (800309c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a39      	ldr	r2, [pc, #228]	@ (800309c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002fb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fbc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002fbe:	f7fe fe7b 	bl	8001cb8 <HAL_GetTick>
 8002fc2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002fc4:	e009      	b.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fc6:	f7fe fe77 	bl	8001cb8 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d902      	bls.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	74fb      	strb	r3, [r7, #19]
        break;
 8002fd8:	e005      	b.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002fda:	4b30      	ldr	r3, [pc, #192]	@ (800309c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d0ef      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002fe6:	7cfb      	ldrb	r3, [r7, #19]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d159      	bne.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002fec:	4b2a      	ldr	r3, [pc, #168]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ff2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ff6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d01e      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003002:	697a      	ldr	r2, [r7, #20]
 8003004:	429a      	cmp	r2, r3
 8003006:	d019      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003008:	4b23      	ldr	r3, [pc, #140]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800300a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800300e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003012:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003014:	4b20      	ldr	r3, [pc, #128]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003016:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800301a:	4a1f      	ldr	r2, [pc, #124]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800301c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003020:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003024:	4b1c      	ldr	r3, [pc, #112]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003026:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800302a:	4a1b      	ldr	r2, [pc, #108]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800302c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003030:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003034:	4a18      	ldr	r2, [pc, #96]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	2b00      	cmp	r3, #0
 8003044:	d016      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003046:	f7fe fe37 	bl	8001cb8 <HAL_GetTick>
 800304a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800304c:	e00b      	b.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800304e:	f7fe fe33 	bl	8001cb8 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	f241 3288 	movw	r2, #5000	@ 0x1388
 800305c:	4293      	cmp	r3, r2
 800305e:	d902      	bls.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	74fb      	strb	r3, [r7, #19]
            break;
 8003064:	e006      	b.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003066:	4b0c      	ldr	r3, [pc, #48]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003068:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d0ec      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003074:	7cfb      	ldrb	r3, [r7, #19]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d10b      	bne.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800307a:	4b07      	ldr	r3, [pc, #28]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800307c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003080:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003088:	4903      	ldr	r1, [pc, #12]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800308a:	4313      	orrs	r3, r2
 800308c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003090:	e008      	b.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003092:	7cfb      	ldrb	r3, [r7, #19]
 8003094:	74bb      	strb	r3, [r7, #18]
 8003096:	e005      	b.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003098:	40021000 	.word	0x40021000
 800309c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030a0:	7cfb      	ldrb	r3, [r7, #19]
 80030a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030a4:	7c7b      	ldrb	r3, [r7, #17]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d105      	bne.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030aa:	4ba6      	ldr	r3, [pc, #664]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ae:	4aa5      	ldr	r2, [pc, #660]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030b4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00a      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030c2:	4ba0      	ldr	r3, [pc, #640]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030c8:	f023 0203 	bic.w	r2, r3, #3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	499c      	ldr	r1, [pc, #624]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00a      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030e4:	4b97      	ldr	r3, [pc, #604]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030ea:	f023 020c 	bic.w	r2, r3, #12
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	4994      	ldr	r1, [pc, #592]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0304 	and.w	r3, r3, #4
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00a      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003106:	4b8f      	ldr	r3, [pc, #572]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003108:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800310c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	498b      	ldr	r1, [pc, #556]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003116:	4313      	orrs	r3, r2
 8003118:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0308 	and.w	r3, r3, #8
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00a      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003128:	4b86      	ldr	r3, [pc, #536]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800312a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800312e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	4983      	ldr	r1, [pc, #524]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003138:	4313      	orrs	r3, r2
 800313a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0320 	and.w	r3, r3, #32
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00a      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800314a:	4b7e      	ldr	r3, [pc, #504]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800314c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003150:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	695b      	ldr	r3, [r3, #20]
 8003158:	497a      	ldr	r1, [pc, #488]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800315a:	4313      	orrs	r3, r2
 800315c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00a      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800316c:	4b75      	ldr	r3, [pc, #468]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800316e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003172:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	4972      	ldr	r1, [pc, #456]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800317c:	4313      	orrs	r3, r2
 800317e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00a      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800318e:	4b6d      	ldr	r3, [pc, #436]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003190:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003194:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	69db      	ldr	r3, [r3, #28]
 800319c:	4969      	ldr	r1, [pc, #420]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00a      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031b0:	4b64      	ldr	r3, [pc, #400]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031b6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	4961      	ldr	r1, [pc, #388]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00a      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031d2:	4b5c      	ldr	r3, [pc, #368]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031d8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e0:	4958      	ldr	r1, [pc, #352]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d015      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031f4:	4b53      	ldr	r3, [pc, #332]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031fa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003202:	4950      	ldr	r1, [pc, #320]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003204:	4313      	orrs	r3, r2
 8003206:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800320e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003212:	d105      	bne.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003214:	4b4b      	ldr	r3, [pc, #300]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	4a4a      	ldr	r2, [pc, #296]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800321a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800321e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003228:	2b00      	cmp	r3, #0
 800322a:	d015      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800322c:	4b45      	ldr	r3, [pc, #276]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800322e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003232:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800323a:	4942      	ldr	r1, [pc, #264]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800323c:	4313      	orrs	r3, r2
 800323e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003246:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800324a:	d105      	bne.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800324c:	4b3d      	ldr	r3, [pc, #244]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	4a3c      	ldr	r2, [pc, #240]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003252:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003256:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d015      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003264:	4b37      	ldr	r3, [pc, #220]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003266:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800326a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003272:	4934      	ldr	r1, [pc, #208]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003274:	4313      	orrs	r3, r2
 8003276:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800327e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003282:	d105      	bne.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003284:	4b2f      	ldr	r3, [pc, #188]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	4a2e      	ldr	r2, [pc, #184]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800328a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800328e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d015      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800329c:	4b29      	ldr	r3, [pc, #164]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800329e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032a2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032aa:	4926      	ldr	r1, [pc, #152]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80032ba:	d105      	bne.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032bc:	4b21      	ldr	r3, [pc, #132]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	4a20      	ldr	r2, [pc, #128]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80032c6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d015      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80032d4:	4b1b      	ldr	r3, [pc, #108]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032da:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032e2:	4918      	ldr	r1, [pc, #96]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80032f2:	d105      	bne.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032f4:	4b13      	ldr	r3, [pc, #76]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	4a12      	ldr	r2, [pc, #72]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80032fe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d015      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800330c:	4b0d      	ldr	r3, [pc, #52]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800330e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003312:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800331a:	490a      	ldr	r1, [pc, #40]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800331c:	4313      	orrs	r3, r2
 800331e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003326:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800332a:	d105      	bne.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800332c:	4b05      	ldr	r3, [pc, #20]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	4a04      	ldr	r2, [pc, #16]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003332:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003336:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003338:	7cbb      	ldrb	r3, [r7, #18]
}
 800333a:	4618      	mov	r0, r3
 800333c:	3718      	adds	r7, #24
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	40021000 	.word	0x40021000

08003348 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d101      	bne.n	800335a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e042      	b.n	80033e0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003360:	2b00      	cmp	r3, #0
 8003362:	d106      	bne.n	8003372 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f7fe fb75 	bl	8001a5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2224      	movs	r2, #36	@ 0x24
 8003376:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f022 0201 	bic.w	r2, r2, #1
 8003388:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800338e:	2b00      	cmp	r3, #0
 8003390:	d002      	beq.n	8003398 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 ff34 	bl	8004200 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 fc65 	bl	8003c68 <UART_SetConfig>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d101      	bne.n	80033a8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e01b      	b.n	80033e0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	685a      	ldr	r2, [r3, #4]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80033b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	689a      	ldr	r2, [r3, #8]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80033c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f042 0201 	orr.w	r2, r2, #1
 80033d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f000 ffb3 	bl	8004344 <UART_CheckIdleState>
 80033de:	4603      	mov	r3, r0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3708      	adds	r7, #8
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b08a      	sub	sp, #40	@ 0x28
 80033ec:	af02      	add	r7, sp, #8
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	603b      	str	r3, [r7, #0]
 80033f4:	4613      	mov	r3, r2
 80033f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033fe:	2b20      	cmp	r3, #32
 8003400:	d17b      	bne.n	80034fa <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d002      	beq.n	800340e <HAL_UART_Transmit+0x26>
 8003408:	88fb      	ldrh	r3, [r7, #6]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e074      	b.n	80034fc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2221      	movs	r2, #33	@ 0x21
 800341e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003422:	f7fe fc49 	bl	8001cb8 <HAL_GetTick>
 8003426:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	88fa      	ldrh	r2, [r7, #6]
 800342c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	88fa      	ldrh	r2, [r7, #6]
 8003434:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003440:	d108      	bne.n	8003454 <HAL_UART_Transmit+0x6c>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d104      	bne.n	8003454 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800344a:	2300      	movs	r3, #0
 800344c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	61bb      	str	r3, [r7, #24]
 8003452:	e003      	b.n	800345c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003458:	2300      	movs	r3, #0
 800345a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800345c:	e030      	b.n	80034c0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	9300      	str	r3, [sp, #0]
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	2200      	movs	r2, #0
 8003466:	2180      	movs	r1, #128	@ 0x80
 8003468:	68f8      	ldr	r0, [r7, #12]
 800346a:	f001 f815 	bl	8004498 <UART_WaitOnFlagUntilTimeout>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d005      	beq.n	8003480 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2220      	movs	r2, #32
 8003478:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e03d      	b.n	80034fc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10b      	bne.n	800349e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	881b      	ldrh	r3, [r3, #0]
 800348a:	461a      	mov	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003494:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	3302      	adds	r3, #2
 800349a:	61bb      	str	r3, [r7, #24]
 800349c:	e007      	b.n	80034ae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	781a      	ldrb	r2, [r3, #0]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	3301      	adds	r3, #1
 80034ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	3b01      	subs	r3, #1
 80034b8:	b29a      	uxth	r2, r3
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d1c8      	bne.n	800345e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	9300      	str	r3, [sp, #0]
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	2200      	movs	r2, #0
 80034d4:	2140      	movs	r1, #64	@ 0x40
 80034d6:	68f8      	ldr	r0, [r7, #12]
 80034d8:	f000 ffde 	bl	8004498 <UART_WaitOnFlagUntilTimeout>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d005      	beq.n	80034ee <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2220      	movs	r2, #32
 80034e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e006      	b.n	80034fc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2220      	movs	r2, #32
 80034f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80034f6:	2300      	movs	r3, #0
 80034f8:	e000      	b.n	80034fc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80034fa:	2302      	movs	r3, #2
  }
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3720      	adds	r7, #32
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b08a      	sub	sp, #40	@ 0x28
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	4613      	mov	r3, r2
 8003510:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003518:	2b20      	cmp	r3, #32
 800351a:	d137      	bne.n	800358c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d002      	beq.n	8003528 <HAL_UART_Receive_IT+0x24>
 8003522:	88fb      	ldrh	r3, [r7, #6]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d101      	bne.n	800352c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e030      	b.n	800358e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a18      	ldr	r2, [pc, #96]	@ (8003598 <HAL_UART_Receive_IT+0x94>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d01f      	beq.n	800357c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d018      	beq.n	800357c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	e853 3f00 	ldrex	r3, [r3]
 8003556:	613b      	str	r3, [r7, #16]
   return(result);
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800355e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	461a      	mov	r2, r3
 8003566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003568:	623b      	str	r3, [r7, #32]
 800356a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800356c:	69f9      	ldr	r1, [r7, #28]
 800356e:	6a3a      	ldr	r2, [r7, #32]
 8003570:	e841 2300 	strex	r3, r2, [r1]
 8003574:	61bb      	str	r3, [r7, #24]
   return(result);
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d1e6      	bne.n	800354a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800357c:	88fb      	ldrh	r3, [r7, #6]
 800357e:	461a      	mov	r2, r3
 8003580:	68b9      	ldr	r1, [r7, #8]
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	f000 fff6 	bl	8004574 <UART_Start_Receive_IT>
 8003588:	4603      	mov	r3, r0
 800358a:	e000      	b.n	800358e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800358c:	2302      	movs	r3, #2
  }
}
 800358e:	4618      	mov	r0, r3
 8003590:	3728      	adds	r7, #40	@ 0x28
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	40008000 	.word	0x40008000

0800359c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b0ba      	sub	sp, #232	@ 0xe8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	69db      	ldr	r3, [r3, #28]
 80035aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80035c2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80035c6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80035ca:	4013      	ands	r3, r2
 80035cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80035d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d11b      	bne.n	8003610 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80035d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035dc:	f003 0320 	and.w	r3, r3, #32
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d015      	beq.n	8003610 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80035e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035e8:	f003 0320 	and.w	r3, r3, #32
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d105      	bne.n	80035fc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80035f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80035f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d009      	beq.n	8003610 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003600:	2b00      	cmp	r3, #0
 8003602:	f000 8300 	beq.w	8003c06 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	4798      	blx	r3
      }
      return;
 800360e:	e2fa      	b.n	8003c06 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003610:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003614:	2b00      	cmp	r3, #0
 8003616:	f000 8123 	beq.w	8003860 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800361a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800361e:	4b8d      	ldr	r3, [pc, #564]	@ (8003854 <HAL_UART_IRQHandler+0x2b8>)
 8003620:	4013      	ands	r3, r2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d106      	bne.n	8003634 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003626:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800362a:	4b8b      	ldr	r3, [pc, #556]	@ (8003858 <HAL_UART_IRQHandler+0x2bc>)
 800362c:	4013      	ands	r3, r2
 800362e:	2b00      	cmp	r3, #0
 8003630:	f000 8116 	beq.w	8003860 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003638:	f003 0301 	and.w	r3, r3, #1
 800363c:	2b00      	cmp	r3, #0
 800363e:	d011      	beq.n	8003664 <HAL_UART_IRQHandler+0xc8>
 8003640:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003644:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00b      	beq.n	8003664 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2201      	movs	r2, #1
 8003652:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800365a:	f043 0201 	orr.w	r2, r3, #1
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d011      	beq.n	8003694 <HAL_UART_IRQHandler+0xf8>
 8003670:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003674:	f003 0301 	and.w	r3, r3, #1
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00b      	beq.n	8003694 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2202      	movs	r2, #2
 8003682:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800368a:	f043 0204 	orr.w	r2, r3, #4
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003698:	f003 0304 	and.w	r3, r3, #4
 800369c:	2b00      	cmp	r3, #0
 800369e:	d011      	beq.n	80036c4 <HAL_UART_IRQHandler+0x128>
 80036a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00b      	beq.n	80036c4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2204      	movs	r2, #4
 80036b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036ba:	f043 0202 	orr.w	r2, r3, #2
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80036c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036c8:	f003 0308 	and.w	r3, r3, #8
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d017      	beq.n	8003700 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80036d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036d4:	f003 0320 	and.w	r3, r3, #32
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d105      	bne.n	80036e8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80036dc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80036e0:	4b5c      	ldr	r3, [pc, #368]	@ (8003854 <HAL_UART_IRQHandler+0x2b8>)
 80036e2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00b      	beq.n	8003700 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2208      	movs	r2, #8
 80036ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036f6:	f043 0208 	orr.w	r2, r3, #8
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003704:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003708:	2b00      	cmp	r3, #0
 800370a:	d012      	beq.n	8003732 <HAL_UART_IRQHandler+0x196>
 800370c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003710:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00c      	beq.n	8003732 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003720:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003728:	f043 0220 	orr.w	r2, r3, #32
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003738:	2b00      	cmp	r3, #0
 800373a:	f000 8266 	beq.w	8003c0a <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800373e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003742:	f003 0320 	and.w	r3, r3, #32
 8003746:	2b00      	cmp	r3, #0
 8003748:	d013      	beq.n	8003772 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800374a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800374e:	f003 0320 	and.w	r3, r3, #32
 8003752:	2b00      	cmp	r3, #0
 8003754:	d105      	bne.n	8003762 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003756:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800375a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d007      	beq.n	8003772 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003766:	2b00      	cmp	r3, #0
 8003768:	d003      	beq.n	8003772 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003778:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003786:	2b40      	cmp	r3, #64	@ 0x40
 8003788:	d005      	beq.n	8003796 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800378a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800378e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003792:	2b00      	cmp	r3, #0
 8003794:	d054      	beq.n	8003840 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f001 f80e 	bl	80047b8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037a6:	2b40      	cmp	r3, #64	@ 0x40
 80037a8:	d146      	bne.n	8003838 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	3308      	adds	r3, #8
 80037b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80037b8:	e853 3f00 	ldrex	r3, [r3]
 80037bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80037c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80037c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	3308      	adds	r3, #8
 80037d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80037d6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80037da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80037e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80037e6:	e841 2300 	strex	r3, r2, [r1]
 80037ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80037ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1d9      	bne.n	80037aa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d017      	beq.n	8003830 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003806:	4a15      	ldr	r2, [pc, #84]	@ (800385c <HAL_UART_IRQHandler+0x2c0>)
 8003808:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003810:	4618      	mov	r0, r3
 8003812:	f7fe fbc5 	bl	8001fa0 <HAL_DMA_Abort_IT>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d019      	beq.n	8003850 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800382a:	4610      	mov	r0, r2
 800382c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800382e:	e00f      	b.n	8003850 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f7fd fe8b 	bl	800154c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003836:	e00b      	b.n	8003850 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f7fd fe87 	bl	800154c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800383e:	e007      	b.n	8003850 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f7fd fe83 	bl	800154c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800384e:	e1dc      	b.n	8003c0a <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003850:	bf00      	nop
    return;
 8003852:	e1da      	b.n	8003c0a <HAL_UART_IRQHandler+0x66e>
 8003854:	10000001 	.word	0x10000001
 8003858:	04000120 	.word	0x04000120
 800385c:	08004885 	.word	0x08004885

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003864:	2b01      	cmp	r3, #1
 8003866:	f040 8170 	bne.w	8003b4a <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800386a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800386e:	f003 0310 	and.w	r3, r3, #16
 8003872:	2b00      	cmp	r3, #0
 8003874:	f000 8169 	beq.w	8003b4a <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003878:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800387c:	f003 0310 	and.w	r3, r3, #16
 8003880:	2b00      	cmp	r3, #0
 8003882:	f000 8162 	beq.w	8003b4a <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2210      	movs	r2, #16
 800388c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003898:	2b40      	cmp	r3, #64	@ 0x40
 800389a:	f040 80d8 	bne.w	8003a4e <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80038ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f000 80af 	beq.w	8003a14 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80038bc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80038c0:	429a      	cmp	r2, r3
 80038c2:	f080 80a7 	bcs.w	8003a14 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80038cc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0320 	and.w	r3, r3, #32
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f040 8087 	bne.w	80039f2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80038f0:	e853 3f00 	ldrex	r3, [r3]
 80038f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80038f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80038fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003900:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	461a      	mov	r2, r3
 800390a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800390e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003912:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003916:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800391a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800391e:	e841 2300 	strex	r3, r2, [r1]
 8003922:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003926:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800392a:	2b00      	cmp	r3, #0
 800392c:	d1da      	bne.n	80038e4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	3308      	adds	r3, #8
 8003934:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003936:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003938:	e853 3f00 	ldrex	r3, [r3]
 800393c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800393e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003940:	f023 0301 	bic.w	r3, r3, #1
 8003944:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	3308      	adds	r3, #8
 800394e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003952:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003956:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003958:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800395a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800395e:	e841 2300 	strex	r3, r2, [r1]
 8003962:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003964:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1e1      	bne.n	800392e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	3308      	adds	r3, #8
 8003970:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003972:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003974:	e853 3f00 	ldrex	r3, [r3]
 8003978:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800397a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800397c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003980:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	3308      	adds	r3, #8
 800398a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800398e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003990:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003992:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003994:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003996:	e841 2300 	strex	r3, r2, [r1]
 800399a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800399c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1e3      	bne.n	800396a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2220      	movs	r2, #32
 80039a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039b8:	e853 3f00 	ldrex	r3, [r3]
 80039bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80039be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039c0:	f023 0310 	bic.w	r3, r3, #16
 80039c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	461a      	mov	r2, r3
 80039ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80039d2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80039d4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80039d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80039da:	e841 2300 	strex	r3, r2, [r1]
 80039de:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80039e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1e4      	bne.n	80039b0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039ec:	4618      	mov	r0, r3
 80039ee:	f7fe fa7e 	bl	8001eee <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2202      	movs	r2, #2
 80039f6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 f911 	bl	8003c34 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003a12:	e0fc      	b.n	8003c0e <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003a1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	f040 80f5 	bne.w	8003c0e <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0320 	and.w	r3, r3, #32
 8003a32:	2b20      	cmp	r3, #32
 8003a34:	f040 80eb 	bne.w	8003c0e <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2202      	movs	r2, #2
 8003a3c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003a44:	4619      	mov	r1, r3
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 f8f4 	bl	8003c34 <HAL_UARTEx_RxEventCallback>
      return;
 8003a4c:	e0df      	b.n	8003c0e <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	f000 80d1 	beq.w	8003c12 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8003a70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f000 80cc 	beq.w	8003c12 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a82:	e853 3f00 	ldrex	r3, [r3]
 8003a86:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003a88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a8a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a8e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	461a      	mov	r2, r3
 8003a98:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003a9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a9e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003aa2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003aa4:	e841 2300 	strex	r3, r2, [r1]
 8003aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003aaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d1e4      	bne.n	8003a7a <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	3308      	adds	r3, #8
 8003ab6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aba:	e853 3f00 	ldrex	r3, [r3]
 8003abe:	623b      	str	r3, [r7, #32]
   return(result);
 8003ac0:	6a3b      	ldr	r3, [r7, #32]
 8003ac2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ac6:	f023 0301 	bic.w	r3, r3, #1
 8003aca:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	3308      	adds	r3, #8
 8003ad4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003ad8:	633a      	str	r2, [r7, #48]	@ 0x30
 8003ada:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003adc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ade:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ae0:	e841 2300 	strex	r3, r2, [r1]
 8003ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d1e1      	bne.n	8003ab0 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2220      	movs	r2, #32
 8003af0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	e853 3f00 	ldrex	r3, [r3]
 8003b0c:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f023 0310 	bic.w	r3, r3, #16
 8003b14:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003b22:	61fb      	str	r3, [r7, #28]
 8003b24:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b26:	69b9      	ldr	r1, [r7, #24]
 8003b28:	69fa      	ldr	r2, [r7, #28]
 8003b2a:	e841 2300 	strex	r3, r2, [r1]
 8003b2e:	617b      	str	r3, [r7, #20]
   return(result);
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1e4      	bne.n	8003b00 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2202      	movs	r2, #2
 8003b3a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b40:	4619      	mov	r1, r3
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 f876 	bl	8003c34 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003b48:	e063      	b.n	8003c12 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00e      	beq.n	8003b74 <HAL_UART_IRQHandler+0x5d8>
 8003b56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d008      	beq.n	8003b74 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003b6a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f001 fbe7 	bl	8005340 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003b72:	e051      	b.n	8003c18 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003b74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d014      	beq.n	8003baa <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003b80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d105      	bne.n	8003b98 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003b8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b90:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d008      	beq.n	8003baa <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d03a      	beq.n	8003c16 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	4798      	blx	r3
    }
    return;
 8003ba8:	e035      	b.n	8003c16 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d009      	beq.n	8003bca <HAL_UART_IRQHandler+0x62e>
 8003bb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d003      	beq.n	8003bca <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 fe70 	bl	80048a8 <UART_EndTransmit_IT>
    return;
 8003bc8:	e026      	b.n	8003c18 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d009      	beq.n	8003bea <HAL_UART_IRQHandler+0x64e>
 8003bd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bda:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d003      	beq.n	8003bea <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f001 fbc0 	bl	8005368 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003be8:	e016      	b.n	8003c18 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d010      	beq.n	8003c18 <HAL_UART_IRQHandler+0x67c>
 8003bf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	da0c      	bge.n	8003c18 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f001 fba8 	bl	8005354 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003c04:	e008      	b.n	8003c18 <HAL_UART_IRQHandler+0x67c>
      return;
 8003c06:	bf00      	nop
 8003c08:	e006      	b.n	8003c18 <HAL_UART_IRQHandler+0x67c>
    return;
 8003c0a:	bf00      	nop
 8003c0c:	e004      	b.n	8003c18 <HAL_UART_IRQHandler+0x67c>
      return;
 8003c0e:	bf00      	nop
 8003c10:	e002      	b.n	8003c18 <HAL_UART_IRQHandler+0x67c>
      return;
 8003c12:	bf00      	nop
 8003c14:	e000      	b.n	8003c18 <HAL_UART_IRQHandler+0x67c>
    return;
 8003c16:	bf00      	nop
  }
}
 8003c18:	37e8      	adds	r7, #232	@ 0xe8
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop

08003c20 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003c28:	bf00      	nop
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	370c      	adds	r7, #12
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
	...

08003c68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c6c:	b08c      	sub	sp, #48	@ 0x30
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c72:	2300      	movs	r3, #0
 8003c74:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	689a      	ldr	r2, [r3, #8]
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	691b      	ldr	r3, [r3, #16]
 8003c80:	431a      	orrs	r2, r3
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	431a      	orrs	r2, r3
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	69db      	ldr	r3, [r3, #28]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	4bab      	ldr	r3, [pc, #684]	@ (8003f44 <UART_SetConfig+0x2dc>)
 8003c98:	4013      	ands	r3, r2
 8003c9a:	697a      	ldr	r2, [r7, #20]
 8003c9c:	6812      	ldr	r2, [r2, #0]
 8003c9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ca0:	430b      	orrs	r3, r1
 8003ca2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	68da      	ldr	r2, [r3, #12]
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4aa0      	ldr	r2, [pc, #640]	@ (8003f48 <UART_SetConfig+0x2e0>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d004      	beq.n	8003cd4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003cde:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003ce2:	697a      	ldr	r2, [r7, #20]
 8003ce4:	6812      	ldr	r2, [r2, #0]
 8003ce6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ce8:	430b      	orrs	r3, r1
 8003cea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cf2:	f023 010f 	bic.w	r1, r3, #15
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a91      	ldr	r2, [pc, #580]	@ (8003f4c <UART_SetConfig+0x2e4>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d125      	bne.n	8003d58 <UART_SetConfig+0xf0>
 8003d0c:	4b90      	ldr	r3, [pc, #576]	@ (8003f50 <UART_SetConfig+0x2e8>)
 8003d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d12:	f003 0303 	and.w	r3, r3, #3
 8003d16:	2b03      	cmp	r3, #3
 8003d18:	d81a      	bhi.n	8003d50 <UART_SetConfig+0xe8>
 8003d1a:	a201      	add	r2, pc, #4	@ (adr r2, 8003d20 <UART_SetConfig+0xb8>)
 8003d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d20:	08003d31 	.word	0x08003d31
 8003d24:	08003d41 	.word	0x08003d41
 8003d28:	08003d39 	.word	0x08003d39
 8003d2c:	08003d49 	.word	0x08003d49
 8003d30:	2301      	movs	r3, #1
 8003d32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d36:	e0d6      	b.n	8003ee6 <UART_SetConfig+0x27e>
 8003d38:	2302      	movs	r3, #2
 8003d3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d3e:	e0d2      	b.n	8003ee6 <UART_SetConfig+0x27e>
 8003d40:	2304      	movs	r3, #4
 8003d42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d46:	e0ce      	b.n	8003ee6 <UART_SetConfig+0x27e>
 8003d48:	2308      	movs	r3, #8
 8003d4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d4e:	e0ca      	b.n	8003ee6 <UART_SetConfig+0x27e>
 8003d50:	2310      	movs	r3, #16
 8003d52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d56:	e0c6      	b.n	8003ee6 <UART_SetConfig+0x27e>
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a7d      	ldr	r2, [pc, #500]	@ (8003f54 <UART_SetConfig+0x2ec>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d138      	bne.n	8003dd4 <UART_SetConfig+0x16c>
 8003d62:	4b7b      	ldr	r3, [pc, #492]	@ (8003f50 <UART_SetConfig+0x2e8>)
 8003d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d68:	f003 030c 	and.w	r3, r3, #12
 8003d6c:	2b0c      	cmp	r3, #12
 8003d6e:	d82d      	bhi.n	8003dcc <UART_SetConfig+0x164>
 8003d70:	a201      	add	r2, pc, #4	@ (adr r2, 8003d78 <UART_SetConfig+0x110>)
 8003d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d76:	bf00      	nop
 8003d78:	08003dad 	.word	0x08003dad
 8003d7c:	08003dcd 	.word	0x08003dcd
 8003d80:	08003dcd 	.word	0x08003dcd
 8003d84:	08003dcd 	.word	0x08003dcd
 8003d88:	08003dbd 	.word	0x08003dbd
 8003d8c:	08003dcd 	.word	0x08003dcd
 8003d90:	08003dcd 	.word	0x08003dcd
 8003d94:	08003dcd 	.word	0x08003dcd
 8003d98:	08003db5 	.word	0x08003db5
 8003d9c:	08003dcd 	.word	0x08003dcd
 8003da0:	08003dcd 	.word	0x08003dcd
 8003da4:	08003dcd 	.word	0x08003dcd
 8003da8:	08003dc5 	.word	0x08003dc5
 8003dac:	2300      	movs	r3, #0
 8003dae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003db2:	e098      	b.n	8003ee6 <UART_SetConfig+0x27e>
 8003db4:	2302      	movs	r3, #2
 8003db6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dba:	e094      	b.n	8003ee6 <UART_SetConfig+0x27e>
 8003dbc:	2304      	movs	r3, #4
 8003dbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dc2:	e090      	b.n	8003ee6 <UART_SetConfig+0x27e>
 8003dc4:	2308      	movs	r3, #8
 8003dc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dca:	e08c      	b.n	8003ee6 <UART_SetConfig+0x27e>
 8003dcc:	2310      	movs	r3, #16
 8003dce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dd2:	e088      	b.n	8003ee6 <UART_SetConfig+0x27e>
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a5f      	ldr	r2, [pc, #380]	@ (8003f58 <UART_SetConfig+0x2f0>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d125      	bne.n	8003e2a <UART_SetConfig+0x1c2>
 8003dde:	4b5c      	ldr	r3, [pc, #368]	@ (8003f50 <UART_SetConfig+0x2e8>)
 8003de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003de4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003de8:	2b30      	cmp	r3, #48	@ 0x30
 8003dea:	d016      	beq.n	8003e1a <UART_SetConfig+0x1b2>
 8003dec:	2b30      	cmp	r3, #48	@ 0x30
 8003dee:	d818      	bhi.n	8003e22 <UART_SetConfig+0x1ba>
 8003df0:	2b20      	cmp	r3, #32
 8003df2:	d00a      	beq.n	8003e0a <UART_SetConfig+0x1a2>
 8003df4:	2b20      	cmp	r3, #32
 8003df6:	d814      	bhi.n	8003e22 <UART_SetConfig+0x1ba>
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d002      	beq.n	8003e02 <UART_SetConfig+0x19a>
 8003dfc:	2b10      	cmp	r3, #16
 8003dfe:	d008      	beq.n	8003e12 <UART_SetConfig+0x1aa>
 8003e00:	e00f      	b.n	8003e22 <UART_SetConfig+0x1ba>
 8003e02:	2300      	movs	r3, #0
 8003e04:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e08:	e06d      	b.n	8003ee6 <UART_SetConfig+0x27e>
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e10:	e069      	b.n	8003ee6 <UART_SetConfig+0x27e>
 8003e12:	2304      	movs	r3, #4
 8003e14:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e18:	e065      	b.n	8003ee6 <UART_SetConfig+0x27e>
 8003e1a:	2308      	movs	r3, #8
 8003e1c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e20:	e061      	b.n	8003ee6 <UART_SetConfig+0x27e>
 8003e22:	2310      	movs	r3, #16
 8003e24:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e28:	e05d      	b.n	8003ee6 <UART_SetConfig+0x27e>
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a4b      	ldr	r2, [pc, #300]	@ (8003f5c <UART_SetConfig+0x2f4>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d125      	bne.n	8003e80 <UART_SetConfig+0x218>
 8003e34:	4b46      	ldr	r3, [pc, #280]	@ (8003f50 <UART_SetConfig+0x2e8>)
 8003e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e3a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003e3e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003e40:	d016      	beq.n	8003e70 <UART_SetConfig+0x208>
 8003e42:	2bc0      	cmp	r3, #192	@ 0xc0
 8003e44:	d818      	bhi.n	8003e78 <UART_SetConfig+0x210>
 8003e46:	2b80      	cmp	r3, #128	@ 0x80
 8003e48:	d00a      	beq.n	8003e60 <UART_SetConfig+0x1f8>
 8003e4a:	2b80      	cmp	r3, #128	@ 0x80
 8003e4c:	d814      	bhi.n	8003e78 <UART_SetConfig+0x210>
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d002      	beq.n	8003e58 <UART_SetConfig+0x1f0>
 8003e52:	2b40      	cmp	r3, #64	@ 0x40
 8003e54:	d008      	beq.n	8003e68 <UART_SetConfig+0x200>
 8003e56:	e00f      	b.n	8003e78 <UART_SetConfig+0x210>
 8003e58:	2300      	movs	r3, #0
 8003e5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e5e:	e042      	b.n	8003ee6 <UART_SetConfig+0x27e>
 8003e60:	2302      	movs	r3, #2
 8003e62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e66:	e03e      	b.n	8003ee6 <UART_SetConfig+0x27e>
 8003e68:	2304      	movs	r3, #4
 8003e6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e6e:	e03a      	b.n	8003ee6 <UART_SetConfig+0x27e>
 8003e70:	2308      	movs	r3, #8
 8003e72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e76:	e036      	b.n	8003ee6 <UART_SetConfig+0x27e>
 8003e78:	2310      	movs	r3, #16
 8003e7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e7e:	e032      	b.n	8003ee6 <UART_SetConfig+0x27e>
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a30      	ldr	r2, [pc, #192]	@ (8003f48 <UART_SetConfig+0x2e0>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d12a      	bne.n	8003ee0 <UART_SetConfig+0x278>
 8003e8a:	4b31      	ldr	r3, [pc, #196]	@ (8003f50 <UART_SetConfig+0x2e8>)
 8003e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e90:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003e94:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003e98:	d01a      	beq.n	8003ed0 <UART_SetConfig+0x268>
 8003e9a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003e9e:	d81b      	bhi.n	8003ed8 <UART_SetConfig+0x270>
 8003ea0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ea4:	d00c      	beq.n	8003ec0 <UART_SetConfig+0x258>
 8003ea6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003eaa:	d815      	bhi.n	8003ed8 <UART_SetConfig+0x270>
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d003      	beq.n	8003eb8 <UART_SetConfig+0x250>
 8003eb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003eb4:	d008      	beq.n	8003ec8 <UART_SetConfig+0x260>
 8003eb6:	e00f      	b.n	8003ed8 <UART_SetConfig+0x270>
 8003eb8:	2300      	movs	r3, #0
 8003eba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ebe:	e012      	b.n	8003ee6 <UART_SetConfig+0x27e>
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ec6:	e00e      	b.n	8003ee6 <UART_SetConfig+0x27e>
 8003ec8:	2304      	movs	r3, #4
 8003eca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ece:	e00a      	b.n	8003ee6 <UART_SetConfig+0x27e>
 8003ed0:	2308      	movs	r3, #8
 8003ed2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ed6:	e006      	b.n	8003ee6 <UART_SetConfig+0x27e>
 8003ed8:	2310      	movs	r3, #16
 8003eda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ede:	e002      	b.n	8003ee6 <UART_SetConfig+0x27e>
 8003ee0:	2310      	movs	r3, #16
 8003ee2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a17      	ldr	r2, [pc, #92]	@ (8003f48 <UART_SetConfig+0x2e0>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	f040 80a8 	bne.w	8004042 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ef2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003ef6:	2b08      	cmp	r3, #8
 8003ef8:	d834      	bhi.n	8003f64 <UART_SetConfig+0x2fc>
 8003efa:	a201      	add	r2, pc, #4	@ (adr r2, 8003f00 <UART_SetConfig+0x298>)
 8003efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f00:	08003f25 	.word	0x08003f25
 8003f04:	08003f65 	.word	0x08003f65
 8003f08:	08003f2d 	.word	0x08003f2d
 8003f0c:	08003f65 	.word	0x08003f65
 8003f10:	08003f33 	.word	0x08003f33
 8003f14:	08003f65 	.word	0x08003f65
 8003f18:	08003f65 	.word	0x08003f65
 8003f1c:	08003f65 	.word	0x08003f65
 8003f20:	08003f3b 	.word	0x08003f3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f24:	f7fe ffae 	bl	8002e84 <HAL_RCC_GetPCLK1Freq>
 8003f28:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003f2a:	e021      	b.n	8003f70 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8003f60 <UART_SetConfig+0x2f8>)
 8003f2e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003f30:	e01e      	b.n	8003f70 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f32:	f7fe ff39 	bl	8002da8 <HAL_RCC_GetSysClockFreq>
 8003f36:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003f38:	e01a      	b.n	8003f70 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f3e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003f40:	e016      	b.n	8003f70 <UART_SetConfig+0x308>
 8003f42:	bf00      	nop
 8003f44:	cfff69f3 	.word	0xcfff69f3
 8003f48:	40008000 	.word	0x40008000
 8003f4c:	40013800 	.word	0x40013800
 8003f50:	40021000 	.word	0x40021000
 8003f54:	40004400 	.word	0x40004400
 8003f58:	40004800 	.word	0x40004800
 8003f5c:	40004c00 	.word	0x40004c00
 8003f60:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003f64:	2300      	movs	r3, #0
 8003f66:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003f6e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f000 812a 	beq.w	80041cc <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f7c:	4a9e      	ldr	r2, [pc, #632]	@ (80041f8 <UART_SetConfig+0x590>)
 8003f7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f82:	461a      	mov	r2, r3
 8003f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f86:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f8a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	685a      	ldr	r2, [r3, #4]
 8003f90:	4613      	mov	r3, r2
 8003f92:	005b      	lsls	r3, r3, #1
 8003f94:	4413      	add	r3, r2
 8003f96:	69ba      	ldr	r2, [r7, #24]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d305      	bcc.n	8003fa8 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003fa2:	69ba      	ldr	r2, [r7, #24]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d903      	bls.n	8003fb0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003fae:	e10d      	b.n	80041cc <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	60bb      	str	r3, [r7, #8]
 8003fb6:	60fa      	str	r2, [r7, #12]
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fbc:	4a8e      	ldr	r2, [pc, #568]	@ (80041f8 <UART_SetConfig+0x590>)
 8003fbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	603b      	str	r3, [r7, #0]
 8003fc8:	607a      	str	r2, [r7, #4]
 8003fca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003fd2:	f7fc fe81 	bl	8000cd8 <__aeabi_uldivmod>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	460b      	mov	r3, r1
 8003fda:	4610      	mov	r0, r2
 8003fdc:	4619      	mov	r1, r3
 8003fde:	f04f 0200 	mov.w	r2, #0
 8003fe2:	f04f 0300 	mov.w	r3, #0
 8003fe6:	020b      	lsls	r3, r1, #8
 8003fe8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003fec:	0202      	lsls	r2, r0, #8
 8003fee:	6979      	ldr	r1, [r7, #20]
 8003ff0:	6849      	ldr	r1, [r1, #4]
 8003ff2:	0849      	lsrs	r1, r1, #1
 8003ff4:	2000      	movs	r0, #0
 8003ff6:	460c      	mov	r4, r1
 8003ff8:	4605      	mov	r5, r0
 8003ffa:	eb12 0804 	adds.w	r8, r2, r4
 8003ffe:	eb43 0905 	adc.w	r9, r3, r5
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	469a      	mov	sl, r3
 800400a:	4693      	mov	fp, r2
 800400c:	4652      	mov	r2, sl
 800400e:	465b      	mov	r3, fp
 8004010:	4640      	mov	r0, r8
 8004012:	4649      	mov	r1, r9
 8004014:	f7fc fe60 	bl	8000cd8 <__aeabi_uldivmod>
 8004018:	4602      	mov	r2, r0
 800401a:	460b      	mov	r3, r1
 800401c:	4613      	mov	r3, r2
 800401e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004020:	6a3b      	ldr	r3, [r7, #32]
 8004022:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004026:	d308      	bcc.n	800403a <UART_SetConfig+0x3d2>
 8004028:	6a3b      	ldr	r3, [r7, #32]
 800402a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800402e:	d204      	bcs.n	800403a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	6a3a      	ldr	r2, [r7, #32]
 8004036:	60da      	str	r2, [r3, #12]
 8004038:	e0c8      	b.n	80041cc <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004040:	e0c4      	b.n	80041cc <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	69db      	ldr	r3, [r3, #28]
 8004046:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800404a:	d167      	bne.n	800411c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800404c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004050:	2b08      	cmp	r3, #8
 8004052:	d828      	bhi.n	80040a6 <UART_SetConfig+0x43e>
 8004054:	a201      	add	r2, pc, #4	@ (adr r2, 800405c <UART_SetConfig+0x3f4>)
 8004056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800405a:	bf00      	nop
 800405c:	08004081 	.word	0x08004081
 8004060:	08004089 	.word	0x08004089
 8004064:	08004091 	.word	0x08004091
 8004068:	080040a7 	.word	0x080040a7
 800406c:	08004097 	.word	0x08004097
 8004070:	080040a7 	.word	0x080040a7
 8004074:	080040a7 	.word	0x080040a7
 8004078:	080040a7 	.word	0x080040a7
 800407c:	0800409f 	.word	0x0800409f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004080:	f7fe ff00 	bl	8002e84 <HAL_RCC_GetPCLK1Freq>
 8004084:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004086:	e014      	b.n	80040b2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004088:	f7fe ff12 	bl	8002eb0 <HAL_RCC_GetPCLK2Freq>
 800408c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800408e:	e010      	b.n	80040b2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004090:	4b5a      	ldr	r3, [pc, #360]	@ (80041fc <UART_SetConfig+0x594>)
 8004092:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004094:	e00d      	b.n	80040b2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004096:	f7fe fe87 	bl	8002da8 <HAL_RCC_GetSysClockFreq>
 800409a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800409c:	e009      	b.n	80040b2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800409e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80040a4:	e005      	b.n	80040b2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80040a6:	2300      	movs	r3, #0
 80040a8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80040b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80040b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	f000 8089 	beq.w	80041cc <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040be:	4a4e      	ldr	r2, [pc, #312]	@ (80041f8 <UART_SetConfig+0x590>)
 80040c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040c4:	461a      	mov	r2, r3
 80040c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80040cc:	005a      	lsls	r2, r3, #1
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	085b      	lsrs	r3, r3, #1
 80040d4:	441a      	add	r2, r3
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	fbb2 f3f3 	udiv	r3, r2, r3
 80040de:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040e0:	6a3b      	ldr	r3, [r7, #32]
 80040e2:	2b0f      	cmp	r3, #15
 80040e4:	d916      	bls.n	8004114 <UART_SetConfig+0x4ac>
 80040e6:	6a3b      	ldr	r3, [r7, #32]
 80040e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040ec:	d212      	bcs.n	8004114 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040ee:	6a3b      	ldr	r3, [r7, #32]
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	f023 030f 	bic.w	r3, r3, #15
 80040f6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040f8:	6a3b      	ldr	r3, [r7, #32]
 80040fa:	085b      	lsrs	r3, r3, #1
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	f003 0307 	and.w	r3, r3, #7
 8004102:	b29a      	uxth	r2, r3
 8004104:	8bfb      	ldrh	r3, [r7, #30]
 8004106:	4313      	orrs	r3, r2
 8004108:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	8bfa      	ldrh	r2, [r7, #30]
 8004110:	60da      	str	r2, [r3, #12]
 8004112:	e05b      	b.n	80041cc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800411a:	e057      	b.n	80041cc <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800411c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004120:	2b08      	cmp	r3, #8
 8004122:	d828      	bhi.n	8004176 <UART_SetConfig+0x50e>
 8004124:	a201      	add	r2, pc, #4	@ (adr r2, 800412c <UART_SetConfig+0x4c4>)
 8004126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800412a:	bf00      	nop
 800412c:	08004151 	.word	0x08004151
 8004130:	08004159 	.word	0x08004159
 8004134:	08004161 	.word	0x08004161
 8004138:	08004177 	.word	0x08004177
 800413c:	08004167 	.word	0x08004167
 8004140:	08004177 	.word	0x08004177
 8004144:	08004177 	.word	0x08004177
 8004148:	08004177 	.word	0x08004177
 800414c:	0800416f 	.word	0x0800416f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004150:	f7fe fe98 	bl	8002e84 <HAL_RCC_GetPCLK1Freq>
 8004154:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004156:	e014      	b.n	8004182 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004158:	f7fe feaa 	bl	8002eb0 <HAL_RCC_GetPCLK2Freq>
 800415c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800415e:	e010      	b.n	8004182 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004160:	4b26      	ldr	r3, [pc, #152]	@ (80041fc <UART_SetConfig+0x594>)
 8004162:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004164:	e00d      	b.n	8004182 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004166:	f7fe fe1f 	bl	8002da8 <HAL_RCC_GetSysClockFreq>
 800416a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800416c:	e009      	b.n	8004182 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800416e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004172:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004174:	e005      	b.n	8004182 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8004176:	2300      	movs	r3, #0
 8004178:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004180:	bf00      	nop
    }

    if (pclk != 0U)
 8004182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004184:	2b00      	cmp	r3, #0
 8004186:	d021      	beq.n	80041cc <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800418c:	4a1a      	ldr	r2, [pc, #104]	@ (80041f8 <UART_SetConfig+0x590>)
 800418e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004192:	461a      	mov	r2, r3
 8004194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004196:	fbb3 f2f2 	udiv	r2, r3, r2
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	085b      	lsrs	r3, r3, #1
 80041a0:	441a      	add	r2, r3
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041aa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041ac:	6a3b      	ldr	r3, [r7, #32]
 80041ae:	2b0f      	cmp	r3, #15
 80041b0:	d909      	bls.n	80041c6 <UART_SetConfig+0x55e>
 80041b2:	6a3b      	ldr	r3, [r7, #32]
 80041b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041b8:	d205      	bcs.n	80041c6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80041ba:	6a3b      	ldr	r3, [r7, #32]
 80041bc:	b29a      	uxth	r2, r3
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	60da      	str	r2, [r3, #12]
 80041c4:	e002      	b.n	80041cc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	2200      	movs	r2, #0
 80041e0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	2200      	movs	r2, #0
 80041e6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80041e8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3730      	adds	r7, #48	@ 0x30
 80041f0:	46bd      	mov	sp, r7
 80041f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041f6:	bf00      	nop
 80041f8:	0800a220 	.word	0x0800a220
 80041fc:	00f42400 	.word	0x00f42400

08004200 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800420c:	f003 0308 	and.w	r3, r3, #8
 8004210:	2b00      	cmp	r3, #0
 8004212:	d00a      	beq.n	800422a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	430a      	orrs	r2, r1
 8004228:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800422e:	f003 0301 	and.w	r3, r3, #1
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00a      	beq.n	800424c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	430a      	orrs	r2, r1
 800424a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004250:	f003 0302 	and.w	r3, r3, #2
 8004254:	2b00      	cmp	r3, #0
 8004256:	d00a      	beq.n	800426e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	430a      	orrs	r2, r1
 800426c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004272:	f003 0304 	and.w	r3, r3, #4
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00a      	beq.n	8004290 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	430a      	orrs	r2, r1
 800428e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004294:	f003 0310 	and.w	r3, r3, #16
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00a      	beq.n	80042b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	430a      	orrs	r2, r1
 80042b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042b6:	f003 0320 	and.w	r3, r3, #32
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d00a      	beq.n	80042d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	430a      	orrs	r2, r1
 80042d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d01a      	beq.n	8004316 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	430a      	orrs	r2, r1
 80042f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042fe:	d10a      	bne.n	8004316 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	430a      	orrs	r2, r1
 8004314:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800431a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00a      	beq.n	8004338 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	430a      	orrs	r2, r1
 8004336:	605a      	str	r2, [r3, #4]
  }
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b098      	sub	sp, #96	@ 0x60
 8004348:	af02      	add	r7, sp, #8
 800434a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004354:	f7fd fcb0 	bl	8001cb8 <HAL_GetTick>
 8004358:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0308 	and.w	r3, r3, #8
 8004364:	2b08      	cmp	r3, #8
 8004366:	d12f      	bne.n	80043c8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004368:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800436c:	9300      	str	r3, [sp, #0]
 800436e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004370:	2200      	movs	r2, #0
 8004372:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 f88e 	bl	8004498 <UART_WaitOnFlagUntilTimeout>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d022      	beq.n	80043c8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800438a:	e853 3f00 	ldrex	r3, [r3]
 800438e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004392:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004396:	653b      	str	r3, [r7, #80]	@ 0x50
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	461a      	mov	r2, r3
 800439e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80043a2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80043a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80043a8:	e841 2300 	strex	r3, r2, [r1]
 80043ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80043ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1e6      	bne.n	8004382 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2220      	movs	r2, #32
 80043b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e063      	b.n	8004490 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0304 	and.w	r3, r3, #4
 80043d2:	2b04      	cmp	r3, #4
 80043d4:	d149      	bne.n	800446a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043d6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80043da:	9300      	str	r3, [sp, #0]
 80043dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043de:	2200      	movs	r2, #0
 80043e0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f000 f857 	bl	8004498 <UART_WaitOnFlagUntilTimeout>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d03c      	beq.n	800446a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f8:	e853 3f00 	ldrex	r3, [r3]
 80043fc:	623b      	str	r3, [r7, #32]
   return(result);
 80043fe:	6a3b      	ldr	r3, [r7, #32]
 8004400:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004404:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	461a      	mov	r2, r3
 800440c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800440e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004410:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004412:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004414:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004416:	e841 2300 	strex	r3, r2, [r1]
 800441a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800441c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1e6      	bne.n	80043f0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	3308      	adds	r3, #8
 8004428:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	e853 3f00 	ldrex	r3, [r3]
 8004430:	60fb      	str	r3, [r7, #12]
   return(result);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f023 0301 	bic.w	r3, r3, #1
 8004438:	64bb      	str	r3, [r7, #72]	@ 0x48
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	3308      	adds	r3, #8
 8004440:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004442:	61fa      	str	r2, [r7, #28]
 8004444:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004446:	69b9      	ldr	r1, [r7, #24]
 8004448:	69fa      	ldr	r2, [r7, #28]
 800444a:	e841 2300 	strex	r3, r2, [r1]
 800444e:	617b      	str	r3, [r7, #20]
   return(result);
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1e5      	bne.n	8004422 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2220      	movs	r2, #32
 800445a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e012      	b.n	8004490 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2220      	movs	r2, #32
 800446e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2220      	movs	r2, #32
 8004476:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800448e:	2300      	movs	r3, #0
}
 8004490:	4618      	mov	r0, r3
 8004492:	3758      	adds	r7, #88	@ 0x58
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	603b      	str	r3, [r7, #0]
 80044a4:	4613      	mov	r3, r2
 80044a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044a8:	e04f      	b.n	800454a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80044b0:	d04b      	beq.n	800454a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044b2:	f7fd fc01 	bl	8001cb8 <HAL_GetTick>
 80044b6:	4602      	mov	r2, r0
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	69ba      	ldr	r2, [r7, #24]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d302      	bcc.n	80044c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d101      	bne.n	80044cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e04e      	b.n	800456a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0304 	and.w	r3, r3, #4
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d037      	beq.n	800454a <UART_WaitOnFlagUntilTimeout+0xb2>
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	2b80      	cmp	r3, #128	@ 0x80
 80044de:	d034      	beq.n	800454a <UART_WaitOnFlagUntilTimeout+0xb2>
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	2b40      	cmp	r3, #64	@ 0x40
 80044e4:	d031      	beq.n	800454a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	69db      	ldr	r3, [r3, #28]
 80044ec:	f003 0308 	and.w	r3, r3, #8
 80044f0:	2b08      	cmp	r3, #8
 80044f2:	d110      	bne.n	8004516 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2208      	movs	r2, #8
 80044fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044fc:	68f8      	ldr	r0, [r7, #12]
 80044fe:	f000 f95b 	bl	80047b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2208      	movs	r2, #8
 8004506:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e029      	b.n	800456a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	69db      	ldr	r3, [r3, #28]
 800451c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004520:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004524:	d111      	bne.n	800454a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800452e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f000 f941 	bl	80047b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2220      	movs	r2, #32
 800453a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e00f      	b.n	800456a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	69da      	ldr	r2, [r3, #28]
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	4013      	ands	r3, r2
 8004554:	68ba      	ldr	r2, [r7, #8]
 8004556:	429a      	cmp	r2, r3
 8004558:	bf0c      	ite	eq
 800455a:	2301      	moveq	r3, #1
 800455c:	2300      	movne	r3, #0
 800455e:	b2db      	uxtb	r3, r3
 8004560:	461a      	mov	r2, r3
 8004562:	79fb      	ldrb	r3, [r7, #7]
 8004564:	429a      	cmp	r2, r3
 8004566:	d0a0      	beq.n	80044aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3710      	adds	r7, #16
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
	...

08004574 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004574:	b480      	push	{r7}
 8004576:	b0a3      	sub	sp, #140	@ 0x8c
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	4613      	mov	r3, r2
 8004580:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	68ba      	ldr	r2, [r7, #8]
 8004586:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	88fa      	ldrh	r2, [r7, #6]
 800458c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	88fa      	ldrh	r2, [r7, #6]
 8004594:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2200      	movs	r2, #0
 800459c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045a6:	d10e      	bne.n	80045c6 <UART_Start_Receive_IT+0x52>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d105      	bne.n	80045bc <UART_Start_Receive_IT+0x48>
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80045b6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80045ba:	e02d      	b.n	8004618 <UART_Start_Receive_IT+0xa4>
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	22ff      	movs	r2, #255	@ 0xff
 80045c0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80045c4:	e028      	b.n	8004618 <UART_Start_Receive_IT+0xa4>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d10d      	bne.n	80045ea <UART_Start_Receive_IT+0x76>
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d104      	bne.n	80045e0 <UART_Start_Receive_IT+0x6c>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	22ff      	movs	r2, #255	@ 0xff
 80045da:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80045de:	e01b      	b.n	8004618 <UART_Start_Receive_IT+0xa4>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	227f      	movs	r2, #127	@ 0x7f
 80045e4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80045e8:	e016      	b.n	8004618 <UART_Start_Receive_IT+0xa4>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80045f2:	d10d      	bne.n	8004610 <UART_Start_Receive_IT+0x9c>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d104      	bne.n	8004606 <UART_Start_Receive_IT+0x92>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	227f      	movs	r2, #127	@ 0x7f
 8004600:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004604:	e008      	b.n	8004618 <UART_Start_Receive_IT+0xa4>
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	223f      	movs	r2, #63	@ 0x3f
 800460a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800460e:	e003      	b.n	8004618 <UART_Start_Receive_IT+0xa4>
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2200      	movs	r2, #0
 8004614:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2222      	movs	r2, #34	@ 0x22
 8004624:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	3308      	adds	r3, #8
 800462e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004630:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004632:	e853 3f00 	ldrex	r3, [r3]
 8004636:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8004638:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800463a:	f043 0301 	orr.w	r3, r3, #1
 800463e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	3308      	adds	r3, #8
 8004648:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800464c:	673a      	str	r2, [r7, #112]	@ 0x70
 800464e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004650:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8004652:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8004654:	e841 2300 	strex	r3, r2, [r1]
 8004658:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800465a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800465c:	2b00      	cmp	r3, #0
 800465e:	d1e3      	bne.n	8004628 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004664:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004668:	d14f      	bne.n	800470a <UART_Start_Receive_IT+0x196>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004670:	88fa      	ldrh	r2, [r7, #6]
 8004672:	429a      	cmp	r2, r3
 8004674:	d349      	bcc.n	800470a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800467e:	d107      	bne.n	8004690 <UART_Start_Receive_IT+0x11c>
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d103      	bne.n	8004690 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	4a47      	ldr	r2, [pc, #284]	@ (80047a8 <UART_Start_Receive_IT+0x234>)
 800468c:	675a      	str	r2, [r3, #116]	@ 0x74
 800468e:	e002      	b.n	8004696 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	4a46      	ldr	r2, [pc, #280]	@ (80047ac <UART_Start_Receive_IT+0x238>)
 8004694:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d01a      	beq.n	80046d4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046a6:	e853 3f00 	ldrex	r3, [r3]
 80046aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80046ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046b2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	461a      	mov	r2, r3
 80046bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80046c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80046c2:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80046c6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80046c8:	e841 2300 	strex	r3, r2, [r1]
 80046cc:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80046ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d1e4      	bne.n	800469e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	3308      	adds	r3, #8
 80046da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046de:	e853 3f00 	ldrex	r3, [r3]
 80046e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80046e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	3308      	adds	r3, #8
 80046f2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80046f4:	64ba      	str	r2, [r7, #72]	@ 0x48
 80046f6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80046fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80046fc:	e841 2300 	strex	r3, r2, [r1]
 8004700:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004702:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004704:	2b00      	cmp	r3, #0
 8004706:	d1e5      	bne.n	80046d4 <UART_Start_Receive_IT+0x160>
 8004708:	e046      	b.n	8004798 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004712:	d107      	bne.n	8004724 <UART_Start_Receive_IT+0x1b0>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	691b      	ldr	r3, [r3, #16]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d103      	bne.n	8004724 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	4a24      	ldr	r2, [pc, #144]	@ (80047b0 <UART_Start_Receive_IT+0x23c>)
 8004720:	675a      	str	r2, [r3, #116]	@ 0x74
 8004722:	e002      	b.n	800472a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	4a23      	ldr	r2, [pc, #140]	@ (80047b4 <UART_Start_Receive_IT+0x240>)
 8004728:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d019      	beq.n	8004766 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800473a:	e853 3f00 	ldrex	r3, [r3]
 800473e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004742:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004746:	677b      	str	r3, [r7, #116]	@ 0x74
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	461a      	mov	r2, r3
 800474e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004750:	637b      	str	r3, [r7, #52]	@ 0x34
 8004752:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004754:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004756:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004758:	e841 2300 	strex	r3, r2, [r1]
 800475c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800475e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1e6      	bne.n	8004732 <UART_Start_Receive_IT+0x1be>
 8004764:	e018      	b.n	8004798 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	e853 3f00 	ldrex	r3, [r3]
 8004772:	613b      	str	r3, [r7, #16]
   return(result);
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	f043 0320 	orr.w	r3, r3, #32
 800477a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	461a      	mov	r2, r3
 8004782:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004784:	623b      	str	r3, [r7, #32]
 8004786:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004788:	69f9      	ldr	r1, [r7, #28]
 800478a:	6a3a      	ldr	r2, [r7, #32]
 800478c:	e841 2300 	strex	r3, r2, [r1]
 8004790:	61bb      	str	r3, [r7, #24]
   return(result);
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d1e6      	bne.n	8004766 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	378c      	adds	r7, #140	@ 0x8c
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	08004fd5 	.word	0x08004fd5
 80047ac:	08004c71 	.word	0x08004c71
 80047b0:	08004ab9 	.word	0x08004ab9
 80047b4:	08004901 	.word	0x08004901

080047b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b095      	sub	sp, #84	@ 0x54
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047c8:	e853 3f00 	ldrex	r3, [r3]
 80047cc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80047ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80047d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	461a      	mov	r2, r3
 80047dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047de:	643b      	str	r3, [r7, #64]	@ 0x40
 80047e0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80047e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80047e6:	e841 2300 	strex	r3, r2, [r1]
 80047ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80047ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1e6      	bne.n	80047c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	3308      	adds	r3, #8
 80047f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047fa:	6a3b      	ldr	r3, [r7, #32]
 80047fc:	e853 3f00 	ldrex	r3, [r3]
 8004800:	61fb      	str	r3, [r7, #28]
   return(result);
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004808:	f023 0301 	bic.w	r3, r3, #1
 800480c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	3308      	adds	r3, #8
 8004814:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004816:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004818:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800481a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800481c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800481e:	e841 2300 	strex	r3, r2, [r1]
 8004822:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1e3      	bne.n	80047f2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800482e:	2b01      	cmp	r3, #1
 8004830:	d118      	bne.n	8004864 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	e853 3f00 	ldrex	r3, [r3]
 800483e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	f023 0310 	bic.w	r3, r3, #16
 8004846:	647b      	str	r3, [r7, #68]	@ 0x44
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	461a      	mov	r2, r3
 800484e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004850:	61bb      	str	r3, [r7, #24]
 8004852:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004854:	6979      	ldr	r1, [r7, #20]
 8004856:	69ba      	ldr	r2, [r7, #24]
 8004858:	e841 2300 	strex	r3, r2, [r1]
 800485c:	613b      	str	r3, [r7, #16]
   return(result);
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d1e6      	bne.n	8004832 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2220      	movs	r2, #32
 8004868:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004878:	bf00      	nop
 800487a:	3754      	adds	r7, #84	@ 0x54
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004890:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800489a:	68f8      	ldr	r0, [r7, #12]
 800489c:	f7fc fe56 	bl	800154c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048a0:	bf00      	nop
 80048a2:	3710      	adds	r7, #16
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b088      	sub	sp, #32
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	e853 3f00 	ldrex	r3, [r3]
 80048bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048c4:	61fb      	str	r3, [r7, #28]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	461a      	mov	r2, r3
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	61bb      	str	r3, [r7, #24]
 80048d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d2:	6979      	ldr	r1, [r7, #20]
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	e841 2300 	strex	r3, r2, [r1]
 80048da:	613b      	str	r3, [r7, #16]
   return(result);
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1e6      	bne.n	80048b0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2220      	movs	r2, #32
 80048e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f7ff f995 	bl	8003c20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048f6:	bf00      	nop
 80048f8:	3720      	adds	r7, #32
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
	...

08004900 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b09c      	sub	sp, #112	@ 0x70
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800490e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004918:	2b22      	cmp	r3, #34	@ 0x22
 800491a:	f040 80be 	bne.w	8004a9a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004924:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004928:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800492c:	b2d9      	uxtb	r1, r3
 800492e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004932:	b2da      	uxtb	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004938:	400a      	ands	r2, r1
 800493a:	b2d2      	uxtb	r2, r2
 800493c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004942:	1c5a      	adds	r2, r3, #1
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800494e:	b29b      	uxth	r3, r3
 8004950:	3b01      	subs	r3, #1
 8004952:	b29a      	uxth	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004960:	b29b      	uxth	r3, r3
 8004962:	2b00      	cmp	r3, #0
 8004964:	f040 80a1 	bne.w	8004aaa <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800496e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004970:	e853 3f00 	ldrex	r3, [r3]
 8004974:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004976:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004978:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800497c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	461a      	mov	r2, r3
 8004984:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004986:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004988:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800498a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800498c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800498e:	e841 2300 	strex	r3, r2, [r1]
 8004992:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004994:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004996:	2b00      	cmp	r3, #0
 8004998:	d1e6      	bne.n	8004968 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	3308      	adds	r3, #8
 80049a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049a4:	e853 3f00 	ldrex	r3, [r3]
 80049a8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80049aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049ac:	f023 0301 	bic.w	r3, r3, #1
 80049b0:	667b      	str	r3, [r7, #100]	@ 0x64
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	3308      	adds	r3, #8
 80049b8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80049ba:	647a      	str	r2, [r7, #68]	@ 0x44
 80049bc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049be:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80049c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80049c2:	e841 2300 	strex	r3, r2, [r1]
 80049c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80049c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1e5      	bne.n	800499a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2220      	movs	r2, #32
 80049d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a33      	ldr	r2, [pc, #204]	@ (8004ab4 <UART_RxISR_8BIT+0x1b4>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d01f      	beq.n	8004a2c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d018      	beq.n	8004a2c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a02:	e853 3f00 	ldrex	r3, [r3]
 8004a06:	623b      	str	r3, [r7, #32]
   return(result);
 8004a08:	6a3b      	ldr	r3, [r7, #32]
 8004a0a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004a0e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	461a      	mov	r2, r3
 8004a16:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a18:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a1c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a20:	e841 2300 	strex	r3, r2, [r1]
 8004a24:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d1e6      	bne.n	80049fa <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d12e      	bne.n	8004a92 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	e853 3f00 	ldrex	r3, [r3]
 8004a46:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f023 0310 	bic.w	r3, r3, #16
 8004a4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	461a      	mov	r2, r3
 8004a56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a58:	61fb      	str	r3, [r7, #28]
 8004a5a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a5c:	69b9      	ldr	r1, [r7, #24]
 8004a5e:	69fa      	ldr	r2, [r7, #28]
 8004a60:	e841 2300 	strex	r3, r2, [r1]
 8004a64:	617b      	str	r3, [r7, #20]
   return(result);
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d1e6      	bne.n	8004a3a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	69db      	ldr	r3, [r3, #28]
 8004a72:	f003 0310 	and.w	r3, r3, #16
 8004a76:	2b10      	cmp	r3, #16
 8004a78:	d103      	bne.n	8004a82 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	2210      	movs	r2, #16
 8004a80:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004a88:	4619      	mov	r1, r3
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f7ff f8d2 	bl	8003c34 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004a90:	e00b      	b.n	8004aaa <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f7fc fcf2 	bl	800147c <HAL_UART_RxCpltCallback>
}
 8004a98:	e007      	b.n	8004aaa <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	699a      	ldr	r2, [r3, #24]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f042 0208 	orr.w	r2, r2, #8
 8004aa8:	619a      	str	r2, [r3, #24]
}
 8004aaa:	bf00      	nop
 8004aac:	3770      	adds	r7, #112	@ 0x70
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	40008000 	.word	0x40008000

08004ab8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b09c      	sub	sp, #112	@ 0x70
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004ac6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ad0:	2b22      	cmp	r3, #34	@ 0x22
 8004ad2:	f040 80be 	bne.w	8004c52 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004adc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ae4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004ae6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8004aea:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004aee:	4013      	ands	r3, r2
 8004af0:	b29a      	uxth	r2, r3
 8004af2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004af4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004afa:	1c9a      	adds	r2, r3, #2
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	3b01      	subs	r3, #1
 8004b0a:	b29a      	uxth	r2, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	f040 80a1 	bne.w	8004c62 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b28:	e853 3f00 	ldrex	r3, [r3]
 8004b2c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004b2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b34:	667b      	str	r3, [r7, #100]	@ 0x64
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b3e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b40:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b42:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004b44:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004b46:	e841 2300 	strex	r3, r2, [r1]
 8004b4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004b4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d1e6      	bne.n	8004b20 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	3308      	adds	r3, #8
 8004b58:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b5c:	e853 3f00 	ldrex	r3, [r3]
 8004b60:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b64:	f023 0301 	bic.w	r3, r3, #1
 8004b68:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	3308      	adds	r3, #8
 8004b70:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004b72:	643a      	str	r2, [r7, #64]	@ 0x40
 8004b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b76:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004b78:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b7a:	e841 2300 	strex	r3, r2, [r1]
 8004b7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1e5      	bne.n	8004b52 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2220      	movs	r2, #32
 8004b8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a33      	ldr	r2, [pc, #204]	@ (8004c6c <UART_RxISR_16BIT+0x1b4>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d01f      	beq.n	8004be4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d018      	beq.n	8004be4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb8:	6a3b      	ldr	r3, [r7, #32]
 8004bba:	e853 3f00 	ldrex	r3, [r3]
 8004bbe:	61fb      	str	r3, [r7, #28]
   return(result);
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004bc6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	461a      	mov	r2, r3
 8004bce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bd2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004bd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004bd8:	e841 2300 	strex	r3, r2, [r1]
 8004bdc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d1e6      	bne.n	8004bb2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d12e      	bne.n	8004c4a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	e853 3f00 	ldrex	r3, [r3]
 8004bfe:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	f023 0310 	bic.w	r3, r3, #16
 8004c06:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c10:	61bb      	str	r3, [r7, #24]
 8004c12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c14:	6979      	ldr	r1, [r7, #20]
 8004c16:	69ba      	ldr	r2, [r7, #24]
 8004c18:	e841 2300 	strex	r3, r2, [r1]
 8004c1c:	613b      	str	r3, [r7, #16]
   return(result);
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1e6      	bne.n	8004bf2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	69db      	ldr	r3, [r3, #28]
 8004c2a:	f003 0310 	and.w	r3, r3, #16
 8004c2e:	2b10      	cmp	r3, #16
 8004c30:	d103      	bne.n	8004c3a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2210      	movs	r2, #16
 8004c38:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004c40:	4619      	mov	r1, r3
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f7fe fff6 	bl	8003c34 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004c48:	e00b      	b.n	8004c62 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f7fc fc16 	bl	800147c <HAL_UART_RxCpltCallback>
}
 8004c50:	e007      	b.n	8004c62 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	699a      	ldr	r2, [r3, #24]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f042 0208 	orr.w	r2, r2, #8
 8004c60:	619a      	str	r2, [r3, #24]
}
 8004c62:	bf00      	nop
 8004c64:	3770      	adds	r7, #112	@ 0x70
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	40008000 	.word	0x40008000

08004c70 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b0ac      	sub	sp, #176	@ 0xb0
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004c7e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	69db      	ldr	r3, [r3, #28]
 8004c88:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ca6:	2b22      	cmp	r3, #34	@ 0x22
 8004ca8:	f040 8183 	bne.w	8004fb2 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004cb2:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004cb6:	e126      	b.n	8004f06 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cbe:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004cc2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8004cc6:	b2d9      	uxtb	r1, r3
 8004cc8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8004ccc:	b2da      	uxtb	r2, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cd2:	400a      	ands	r2, r1
 8004cd4:	b2d2      	uxtb	r2, r2
 8004cd6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cdc:	1c5a      	adds	r2, r3, #1
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	3b01      	subs	r3, #1
 8004cec:	b29a      	uxth	r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	69db      	ldr	r3, [r3, #28]
 8004cfa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004cfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004d02:	f003 0307 	and.w	r3, r3, #7
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d053      	beq.n	8004db2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004d0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004d0e:	f003 0301 	and.w	r3, r3, #1
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d011      	beq.n	8004d3a <UART_RxISR_8BIT_FIFOEN+0xca>
 8004d16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004d1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00b      	beq.n	8004d3a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2201      	movs	r2, #1
 8004d28:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d30:	f043 0201 	orr.w	r2, r3, #1
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004d3e:	f003 0302 	and.w	r3, r3, #2
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d011      	beq.n	8004d6a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8004d46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004d4a:	f003 0301 	and.w	r3, r3, #1
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00b      	beq.n	8004d6a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2202      	movs	r2, #2
 8004d58:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d60:	f043 0204 	orr.w	r2, r3, #4
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004d6e:	f003 0304 	and.w	r3, r3, #4
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d011      	beq.n	8004d9a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8004d76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004d7a:	f003 0301 	and.w	r3, r3, #1
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00b      	beq.n	8004d9a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2204      	movs	r2, #4
 8004d88:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d90:	f043 0202 	orr.w	r2, r3, #2
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d006      	beq.n	8004db2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f7fc fbd1 	bl	800154c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	f040 80a3 	bne.w	8004f06 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004dc8:	e853 3f00 	ldrex	r3, [r3]
 8004dcc:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8004dce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004dd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004dd4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	461a      	mov	r2, r3
 8004dde:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004de2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004de4:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8004de8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004dea:	e841 2300 	strex	r3, r2, [r1]
 8004dee:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8004df0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d1e4      	bne.n	8004dc0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	3308      	adds	r3, #8
 8004dfc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dfe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e00:	e853 3f00 	ldrex	r3, [r3]
 8004e04:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8004e06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e08:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e0c:	f023 0301 	bic.w	r3, r3, #1
 8004e10:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	3308      	adds	r3, #8
 8004e1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004e1e:	66ba      	str	r2, [r7, #104]	@ 0x68
 8004e20:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e22:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8004e24:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004e26:	e841 2300 	strex	r3, r2, [r1]
 8004e2a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8004e2c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1e1      	bne.n	8004df6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2220      	movs	r2, #32
 8004e36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a60      	ldr	r2, [pc, #384]	@ (8004fcc <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d021      	beq.n	8004e94 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d01a      	beq.n	8004e94 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e66:	e853 3f00 	ldrex	r3, [r3]
 8004e6a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004e6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e6e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004e72:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004e80:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e82:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e84:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004e86:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004e88:	e841 2300 	strex	r3, r2, [r1]
 8004e8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004e8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d1e4      	bne.n	8004e5e <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d130      	bne.n	8004efe <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eaa:	e853 3f00 	ldrex	r3, [r3]
 8004eae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eb2:	f023 0310 	bic.w	r3, r3, #16
 8004eb6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ec4:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ec6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004eca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ecc:	e841 2300 	strex	r3, r2, [r1]
 8004ed0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d1e4      	bne.n	8004ea2 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	69db      	ldr	r3, [r3, #28]
 8004ede:	f003 0310 	and.w	r3, r3, #16
 8004ee2:	2b10      	cmp	r3, #16
 8004ee4:	d103      	bne.n	8004eee <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	2210      	movs	r2, #16
 8004eec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f7fe fe9c 	bl	8003c34 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8004efc:	e00e      	b.n	8004f1c <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f7fc fabc 	bl	800147c <HAL_UART_RxCpltCallback>
        break;
 8004f04:	e00a      	b.n	8004f1c <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004f06:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d006      	beq.n	8004f1c <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8004f0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004f12:	f003 0320 	and.w	r3, r3, #32
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	f47f aece 	bne.w	8004cb8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004f22:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004f26:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d049      	beq.n	8004fc2 <UART_RxISR_8BIT_FIFOEN+0x352>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004f34:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d242      	bcs.n	8004fc2 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	3308      	adds	r3, #8
 8004f42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f44:	6a3b      	ldr	r3, [r7, #32]
 8004f46:	e853 3f00 	ldrex	r3, [r3]
 8004f4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f52:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	3308      	adds	r3, #8
 8004f5c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8004f60:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f62:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f68:	e841 2300 	strex	r3, r2, [r1]
 8004f6c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1e3      	bne.n	8004f3c <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a16      	ldr	r2, [pc, #88]	@ (8004fd0 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8004f78:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	e853 3f00 	ldrex	r3, [r3]
 8004f86:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	f043 0320 	orr.w	r3, r3, #32
 8004f8e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	461a      	mov	r2, r3
 8004f98:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004f9c:	61bb      	str	r3, [r7, #24]
 8004f9e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa0:	6979      	ldr	r1, [r7, #20]
 8004fa2:	69ba      	ldr	r2, [r7, #24]
 8004fa4:	e841 2300 	strex	r3, r2, [r1]
 8004fa8:	613b      	str	r3, [r7, #16]
   return(result);
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d1e4      	bne.n	8004f7a <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004fb0:	e007      	b.n	8004fc2 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	699a      	ldr	r2, [r3, #24]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f042 0208 	orr.w	r2, r2, #8
 8004fc0:	619a      	str	r2, [r3, #24]
}
 8004fc2:	bf00      	nop
 8004fc4:	37b0      	adds	r7, #176	@ 0xb0
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	40008000 	.word	0x40008000
 8004fd0:	08004901 	.word	0x08004901

08004fd4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b0ae      	sub	sp, #184	@ 0xb8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004fe2:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	69db      	ldr	r3, [r3, #28]
 8004fec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800500a:	2b22      	cmp	r3, #34	@ 0x22
 800500c:	f040 8187 	bne.w	800531e <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005016:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800501a:	e12a      	b.n	8005272 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005022:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800502a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800502e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8005032:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8005036:	4013      	ands	r3, r2
 8005038:	b29a      	uxth	r2, r3
 800503a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800503e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005044:	1c9a      	adds	r2, r3, #2
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005050:	b29b      	uxth	r3, r3
 8005052:	3b01      	subs	r3, #1
 8005054:	b29a      	uxth	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	69db      	ldr	r3, [r3, #28]
 8005062:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005066:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800506a:	f003 0307 	and.w	r3, r3, #7
 800506e:	2b00      	cmp	r3, #0
 8005070:	d053      	beq.n	800511a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005072:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005076:	f003 0301 	and.w	r3, r3, #1
 800507a:	2b00      	cmp	r3, #0
 800507c:	d011      	beq.n	80050a2 <UART_RxISR_16BIT_FIFOEN+0xce>
 800507e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005082:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00b      	beq.n	80050a2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2201      	movs	r2, #1
 8005090:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005098:	f043 0201 	orr.w	r2, r3, #1
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80050a6:	f003 0302 	and.w	r3, r3, #2
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d011      	beq.n	80050d2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80050ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80050b2:	f003 0301 	and.w	r3, r3, #1
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d00b      	beq.n	80050d2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2202      	movs	r2, #2
 80050c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050c8:	f043 0204 	orr.w	r2, r3, #4
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80050d6:	f003 0304 	and.w	r3, r3, #4
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d011      	beq.n	8005102 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80050de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80050e2:	f003 0301 	and.w	r3, r3, #1
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00b      	beq.n	8005102 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2204      	movs	r2, #4
 80050f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050f8:	f043 0202 	orr.w	r2, r3, #2
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005108:	2b00      	cmp	r3, #0
 800510a:	d006      	beq.n	800511a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f7fc fa1d 	bl	800154c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005120:	b29b      	uxth	r3, r3
 8005122:	2b00      	cmp	r3, #0
 8005124:	f040 80a5 	bne.w	8005272 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800512e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005130:	e853 3f00 	ldrex	r3, [r3]
 8005134:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005136:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005138:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800513c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	461a      	mov	r2, r3
 8005146:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800514a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800514e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005150:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005152:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005156:	e841 2300 	strex	r3, r2, [r1]
 800515a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800515c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800515e:	2b00      	cmp	r3, #0
 8005160:	d1e2      	bne.n	8005128 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	3308      	adds	r3, #8
 8005168:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800516a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800516c:	e853 3f00 	ldrex	r3, [r3]
 8005170:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005172:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005174:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005178:	f023 0301 	bic.w	r3, r3, #1
 800517c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	3308      	adds	r3, #8
 8005186:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800518a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800518c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800518e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005190:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005192:	e841 2300 	strex	r3, r2, [r1]
 8005196:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005198:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800519a:	2b00      	cmp	r3, #0
 800519c:	d1e1      	bne.n	8005162 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2220      	movs	r2, #32
 80051a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a60      	ldr	r2, [pc, #384]	@ (8005338 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d021      	beq.n	8005200 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d01a      	beq.n	8005200 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051d2:	e853 3f00 	ldrex	r3, [r3]
 80051d6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80051d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80051da:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80051de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	461a      	mov	r2, r3
 80051e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80051ec:	65bb      	str	r3, [r7, #88]	@ 0x58
 80051ee:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80051f2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80051f4:	e841 2300 	strex	r3, r2, [r1]
 80051f8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80051fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d1e4      	bne.n	80051ca <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005204:	2b01      	cmp	r3, #1
 8005206:	d130      	bne.n	800526a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005216:	e853 3f00 	ldrex	r3, [r3]
 800521a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800521c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800521e:	f023 0310 	bic.w	r3, r3, #16
 8005222:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	461a      	mov	r2, r3
 800522c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005230:	647b      	str	r3, [r7, #68]	@ 0x44
 8005232:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005234:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005236:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005238:	e841 2300 	strex	r3, r2, [r1]
 800523c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800523e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005240:	2b00      	cmp	r3, #0
 8005242:	d1e4      	bne.n	800520e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	69db      	ldr	r3, [r3, #28]
 800524a:	f003 0310 	and.w	r3, r3, #16
 800524e:	2b10      	cmp	r3, #16
 8005250:	d103      	bne.n	800525a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	2210      	movs	r2, #16
 8005258:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005260:	4619      	mov	r1, r3
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f7fe fce6 	bl	8003c34 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8005268:	e00e      	b.n	8005288 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f7fc f906 	bl	800147c <HAL_UART_RxCpltCallback>
        break;
 8005270:	e00a      	b.n	8005288 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005272:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8005276:	2b00      	cmp	r3, #0
 8005278:	d006      	beq.n	8005288 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 800527a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800527e:	f003 0320 	and.w	r3, r3, #32
 8005282:	2b00      	cmp	r3, #0
 8005284:	f47f aeca 	bne.w	800501c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800528e:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005292:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8005296:	2b00      	cmp	r3, #0
 8005298:	d049      	beq.n	800532e <UART_RxISR_16BIT_FIFOEN+0x35a>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80052a0:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d242      	bcs.n	800532e <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	3308      	adds	r3, #8
 80052ae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b2:	e853 3f00 	ldrex	r3, [r3]
 80052b6:	623b      	str	r3, [r7, #32]
   return(result);
 80052b8:	6a3b      	ldr	r3, [r7, #32]
 80052ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052be:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	3308      	adds	r3, #8
 80052c8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80052cc:	633a      	str	r2, [r7, #48]	@ 0x30
 80052ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80052d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052d4:	e841 2300 	strex	r3, r2, [r1]
 80052d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80052da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d1e3      	bne.n	80052a8 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4a16      	ldr	r2, [pc, #88]	@ (800533c <UART_RxISR_16BIT_FIFOEN+0x368>)
 80052e4:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	e853 3f00 	ldrex	r3, [r3]
 80052f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f043 0320 	orr.w	r3, r3, #32
 80052fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	461a      	mov	r2, r3
 8005304:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005308:	61fb      	str	r3, [r7, #28]
 800530a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800530c:	69b9      	ldr	r1, [r7, #24]
 800530e:	69fa      	ldr	r2, [r7, #28]
 8005310:	e841 2300 	strex	r3, r2, [r1]
 8005314:	617b      	str	r3, [r7, #20]
   return(result);
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d1e4      	bne.n	80052e6 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800531c:	e007      	b.n	800532e <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	699a      	ldr	r2, [r3, #24]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f042 0208 	orr.w	r2, r2, #8
 800532c:	619a      	str	r2, [r3, #24]
}
 800532e:	bf00      	nop
 8005330:	37b8      	adds	r7, #184	@ 0xb8
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	40008000 	.word	0x40008000
 800533c:	08004ab9 	.word	0x08004ab9

08005340 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005348:	bf00      	nop
 800534a:	370c      	adds	r7, #12
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800535c:	bf00      	nop
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005370:	bf00      	nop
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800537c:	b480      	push	{r7}
 800537e:	b085      	sub	sp, #20
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800538a:	2b01      	cmp	r3, #1
 800538c:	d101      	bne.n	8005392 <HAL_UARTEx_DisableFifoMode+0x16>
 800538e:	2302      	movs	r3, #2
 8005390:	e027      	b.n	80053e2 <HAL_UARTEx_DisableFifoMode+0x66>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2201      	movs	r2, #1
 8005396:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2224      	movs	r2, #36	@ 0x24
 800539e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f022 0201 	bic.w	r2, r2, #1
 80053b8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80053c0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2220      	movs	r2, #32
 80053d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3714      	adds	r7, #20
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr

080053ee <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80053ee:	b580      	push	{r7, lr}
 80053f0:	b084      	sub	sp, #16
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
 80053f6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d101      	bne.n	8005406 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005402:	2302      	movs	r3, #2
 8005404:	e02d      	b.n	8005462 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2201      	movs	r2, #1
 800540a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2224      	movs	r2, #36	@ 0x24
 8005412:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f022 0201 	bic.w	r2, r2, #1
 800542c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	683a      	ldr	r2, [r7, #0]
 800543e:	430a      	orrs	r2, r1
 8005440:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 f850 	bl	80054e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2220      	movs	r2, #32
 8005454:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3710      	adds	r7, #16
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}

0800546a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800546a:	b580      	push	{r7, lr}
 800546c:	b084      	sub	sp, #16
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
 8005472:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800547a:	2b01      	cmp	r3, #1
 800547c:	d101      	bne.n	8005482 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800547e:	2302      	movs	r3, #2
 8005480:	e02d      	b.n	80054de <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2201      	movs	r2, #1
 8005486:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2224      	movs	r2, #36	@ 0x24
 800548e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f022 0201 	bic.w	r2, r2, #1
 80054a8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	683a      	ldr	r2, [r7, #0]
 80054ba:	430a      	orrs	r2, r1
 80054bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 f812 	bl	80054e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68fa      	ldr	r2, [r7, #12]
 80054ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2220      	movs	r2, #32
 80054d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3710      	adds	r7, #16
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
	...

080054e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b085      	sub	sp, #20
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d108      	bne.n	800550a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005508:	e031      	b.n	800556e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800550a:	2308      	movs	r3, #8
 800550c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800550e:	2308      	movs	r3, #8
 8005510:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	0e5b      	lsrs	r3, r3, #25
 800551a:	b2db      	uxtb	r3, r3
 800551c:	f003 0307 	and.w	r3, r3, #7
 8005520:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	0f5b      	lsrs	r3, r3, #29
 800552a:	b2db      	uxtb	r3, r3
 800552c:	f003 0307 	and.w	r3, r3, #7
 8005530:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005532:	7bbb      	ldrb	r3, [r7, #14]
 8005534:	7b3a      	ldrb	r2, [r7, #12]
 8005536:	4911      	ldr	r1, [pc, #68]	@ (800557c <UARTEx_SetNbDataToProcess+0x94>)
 8005538:	5c8a      	ldrb	r2, [r1, r2]
 800553a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800553e:	7b3a      	ldrb	r2, [r7, #12]
 8005540:	490f      	ldr	r1, [pc, #60]	@ (8005580 <UARTEx_SetNbDataToProcess+0x98>)
 8005542:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005544:	fb93 f3f2 	sdiv	r3, r3, r2
 8005548:	b29a      	uxth	r2, r3
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005550:	7bfb      	ldrb	r3, [r7, #15]
 8005552:	7b7a      	ldrb	r2, [r7, #13]
 8005554:	4909      	ldr	r1, [pc, #36]	@ (800557c <UARTEx_SetNbDataToProcess+0x94>)
 8005556:	5c8a      	ldrb	r2, [r1, r2]
 8005558:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800555c:	7b7a      	ldrb	r2, [r7, #13]
 800555e:	4908      	ldr	r1, [pc, #32]	@ (8005580 <UARTEx_SetNbDataToProcess+0x98>)
 8005560:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005562:	fb93 f3f2 	sdiv	r3, r3, r2
 8005566:	b29a      	uxth	r2, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800556e:	bf00      	nop
 8005570:	3714      	adds	r7, #20
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr
 800557a:	bf00      	nop
 800557c:	0800a238 	.word	0x0800a238
 8005580:	0800a240 	.word	0x0800a240

08005584 <__cvt>:
 8005584:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005588:	ec57 6b10 	vmov	r6, r7, d0
 800558c:	2f00      	cmp	r7, #0
 800558e:	460c      	mov	r4, r1
 8005590:	4619      	mov	r1, r3
 8005592:	463b      	mov	r3, r7
 8005594:	bfbb      	ittet	lt
 8005596:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800559a:	461f      	movlt	r7, r3
 800559c:	2300      	movge	r3, #0
 800559e:	232d      	movlt	r3, #45	@ 0x2d
 80055a0:	700b      	strb	r3, [r1, #0]
 80055a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80055a4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80055a8:	4691      	mov	r9, r2
 80055aa:	f023 0820 	bic.w	r8, r3, #32
 80055ae:	bfbc      	itt	lt
 80055b0:	4632      	movlt	r2, r6
 80055b2:	4616      	movlt	r6, r2
 80055b4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80055b8:	d005      	beq.n	80055c6 <__cvt+0x42>
 80055ba:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80055be:	d100      	bne.n	80055c2 <__cvt+0x3e>
 80055c0:	3401      	adds	r4, #1
 80055c2:	2102      	movs	r1, #2
 80055c4:	e000      	b.n	80055c8 <__cvt+0x44>
 80055c6:	2103      	movs	r1, #3
 80055c8:	ab03      	add	r3, sp, #12
 80055ca:	9301      	str	r3, [sp, #4]
 80055cc:	ab02      	add	r3, sp, #8
 80055ce:	9300      	str	r3, [sp, #0]
 80055d0:	ec47 6b10 	vmov	d0, r6, r7
 80055d4:	4653      	mov	r3, sl
 80055d6:	4622      	mov	r2, r4
 80055d8:	f001 f992 	bl	8006900 <_dtoa_r>
 80055dc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80055e0:	4605      	mov	r5, r0
 80055e2:	d119      	bne.n	8005618 <__cvt+0x94>
 80055e4:	f019 0f01 	tst.w	r9, #1
 80055e8:	d00e      	beq.n	8005608 <__cvt+0x84>
 80055ea:	eb00 0904 	add.w	r9, r0, r4
 80055ee:	2200      	movs	r2, #0
 80055f0:	2300      	movs	r3, #0
 80055f2:	4630      	mov	r0, r6
 80055f4:	4639      	mov	r1, r7
 80055f6:	f7fb fa8f 	bl	8000b18 <__aeabi_dcmpeq>
 80055fa:	b108      	cbz	r0, 8005600 <__cvt+0x7c>
 80055fc:	f8cd 900c 	str.w	r9, [sp, #12]
 8005600:	2230      	movs	r2, #48	@ 0x30
 8005602:	9b03      	ldr	r3, [sp, #12]
 8005604:	454b      	cmp	r3, r9
 8005606:	d31e      	bcc.n	8005646 <__cvt+0xc2>
 8005608:	9b03      	ldr	r3, [sp, #12]
 800560a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800560c:	1b5b      	subs	r3, r3, r5
 800560e:	4628      	mov	r0, r5
 8005610:	6013      	str	r3, [r2, #0]
 8005612:	b004      	add	sp, #16
 8005614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005618:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800561c:	eb00 0904 	add.w	r9, r0, r4
 8005620:	d1e5      	bne.n	80055ee <__cvt+0x6a>
 8005622:	7803      	ldrb	r3, [r0, #0]
 8005624:	2b30      	cmp	r3, #48	@ 0x30
 8005626:	d10a      	bne.n	800563e <__cvt+0xba>
 8005628:	2200      	movs	r2, #0
 800562a:	2300      	movs	r3, #0
 800562c:	4630      	mov	r0, r6
 800562e:	4639      	mov	r1, r7
 8005630:	f7fb fa72 	bl	8000b18 <__aeabi_dcmpeq>
 8005634:	b918      	cbnz	r0, 800563e <__cvt+0xba>
 8005636:	f1c4 0401 	rsb	r4, r4, #1
 800563a:	f8ca 4000 	str.w	r4, [sl]
 800563e:	f8da 3000 	ldr.w	r3, [sl]
 8005642:	4499      	add	r9, r3
 8005644:	e7d3      	b.n	80055ee <__cvt+0x6a>
 8005646:	1c59      	adds	r1, r3, #1
 8005648:	9103      	str	r1, [sp, #12]
 800564a:	701a      	strb	r2, [r3, #0]
 800564c:	e7d9      	b.n	8005602 <__cvt+0x7e>

0800564e <__exponent>:
 800564e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005650:	2900      	cmp	r1, #0
 8005652:	bfba      	itte	lt
 8005654:	4249      	neglt	r1, r1
 8005656:	232d      	movlt	r3, #45	@ 0x2d
 8005658:	232b      	movge	r3, #43	@ 0x2b
 800565a:	2909      	cmp	r1, #9
 800565c:	7002      	strb	r2, [r0, #0]
 800565e:	7043      	strb	r3, [r0, #1]
 8005660:	dd29      	ble.n	80056b6 <__exponent+0x68>
 8005662:	f10d 0307 	add.w	r3, sp, #7
 8005666:	461d      	mov	r5, r3
 8005668:	270a      	movs	r7, #10
 800566a:	461a      	mov	r2, r3
 800566c:	fbb1 f6f7 	udiv	r6, r1, r7
 8005670:	fb07 1416 	mls	r4, r7, r6, r1
 8005674:	3430      	adds	r4, #48	@ 0x30
 8005676:	f802 4c01 	strb.w	r4, [r2, #-1]
 800567a:	460c      	mov	r4, r1
 800567c:	2c63      	cmp	r4, #99	@ 0x63
 800567e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8005682:	4631      	mov	r1, r6
 8005684:	dcf1      	bgt.n	800566a <__exponent+0x1c>
 8005686:	3130      	adds	r1, #48	@ 0x30
 8005688:	1e94      	subs	r4, r2, #2
 800568a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800568e:	1c41      	adds	r1, r0, #1
 8005690:	4623      	mov	r3, r4
 8005692:	42ab      	cmp	r3, r5
 8005694:	d30a      	bcc.n	80056ac <__exponent+0x5e>
 8005696:	f10d 0309 	add.w	r3, sp, #9
 800569a:	1a9b      	subs	r3, r3, r2
 800569c:	42ac      	cmp	r4, r5
 800569e:	bf88      	it	hi
 80056a0:	2300      	movhi	r3, #0
 80056a2:	3302      	adds	r3, #2
 80056a4:	4403      	add	r3, r0
 80056a6:	1a18      	subs	r0, r3, r0
 80056a8:	b003      	add	sp, #12
 80056aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056ac:	f813 6b01 	ldrb.w	r6, [r3], #1
 80056b0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80056b4:	e7ed      	b.n	8005692 <__exponent+0x44>
 80056b6:	2330      	movs	r3, #48	@ 0x30
 80056b8:	3130      	adds	r1, #48	@ 0x30
 80056ba:	7083      	strb	r3, [r0, #2]
 80056bc:	70c1      	strb	r1, [r0, #3]
 80056be:	1d03      	adds	r3, r0, #4
 80056c0:	e7f1      	b.n	80056a6 <__exponent+0x58>
	...

080056c4 <_printf_float>:
 80056c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056c8:	b08d      	sub	sp, #52	@ 0x34
 80056ca:	460c      	mov	r4, r1
 80056cc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80056d0:	4616      	mov	r6, r2
 80056d2:	461f      	mov	r7, r3
 80056d4:	4605      	mov	r5, r0
 80056d6:	f001 f80d 	bl	80066f4 <_localeconv_r>
 80056da:	6803      	ldr	r3, [r0, #0]
 80056dc:	9304      	str	r3, [sp, #16]
 80056de:	4618      	mov	r0, r3
 80056e0:	f7fa fdee 	bl	80002c0 <strlen>
 80056e4:	2300      	movs	r3, #0
 80056e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80056e8:	f8d8 3000 	ldr.w	r3, [r8]
 80056ec:	9005      	str	r0, [sp, #20]
 80056ee:	3307      	adds	r3, #7
 80056f0:	f023 0307 	bic.w	r3, r3, #7
 80056f4:	f103 0208 	add.w	r2, r3, #8
 80056f8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80056fc:	f8d4 b000 	ldr.w	fp, [r4]
 8005700:	f8c8 2000 	str.w	r2, [r8]
 8005704:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005708:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800570c:	9307      	str	r3, [sp, #28]
 800570e:	f8cd 8018 	str.w	r8, [sp, #24]
 8005712:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005716:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800571a:	4b9c      	ldr	r3, [pc, #624]	@ (800598c <_printf_float+0x2c8>)
 800571c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005720:	f7fb fa2c 	bl	8000b7c <__aeabi_dcmpun>
 8005724:	bb70      	cbnz	r0, 8005784 <_printf_float+0xc0>
 8005726:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800572a:	4b98      	ldr	r3, [pc, #608]	@ (800598c <_printf_float+0x2c8>)
 800572c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005730:	f7fb fa06 	bl	8000b40 <__aeabi_dcmple>
 8005734:	bb30      	cbnz	r0, 8005784 <_printf_float+0xc0>
 8005736:	2200      	movs	r2, #0
 8005738:	2300      	movs	r3, #0
 800573a:	4640      	mov	r0, r8
 800573c:	4649      	mov	r1, r9
 800573e:	f7fb f9f5 	bl	8000b2c <__aeabi_dcmplt>
 8005742:	b110      	cbz	r0, 800574a <_printf_float+0x86>
 8005744:	232d      	movs	r3, #45	@ 0x2d
 8005746:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800574a:	4a91      	ldr	r2, [pc, #580]	@ (8005990 <_printf_float+0x2cc>)
 800574c:	4b91      	ldr	r3, [pc, #580]	@ (8005994 <_printf_float+0x2d0>)
 800574e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005752:	bf94      	ite	ls
 8005754:	4690      	movls	r8, r2
 8005756:	4698      	movhi	r8, r3
 8005758:	2303      	movs	r3, #3
 800575a:	6123      	str	r3, [r4, #16]
 800575c:	f02b 0304 	bic.w	r3, fp, #4
 8005760:	6023      	str	r3, [r4, #0]
 8005762:	f04f 0900 	mov.w	r9, #0
 8005766:	9700      	str	r7, [sp, #0]
 8005768:	4633      	mov	r3, r6
 800576a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800576c:	4621      	mov	r1, r4
 800576e:	4628      	mov	r0, r5
 8005770:	f000 f9d2 	bl	8005b18 <_printf_common>
 8005774:	3001      	adds	r0, #1
 8005776:	f040 808d 	bne.w	8005894 <_printf_float+0x1d0>
 800577a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800577e:	b00d      	add	sp, #52	@ 0x34
 8005780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005784:	4642      	mov	r2, r8
 8005786:	464b      	mov	r3, r9
 8005788:	4640      	mov	r0, r8
 800578a:	4649      	mov	r1, r9
 800578c:	f7fb f9f6 	bl	8000b7c <__aeabi_dcmpun>
 8005790:	b140      	cbz	r0, 80057a4 <_printf_float+0xe0>
 8005792:	464b      	mov	r3, r9
 8005794:	2b00      	cmp	r3, #0
 8005796:	bfbc      	itt	lt
 8005798:	232d      	movlt	r3, #45	@ 0x2d
 800579a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800579e:	4a7e      	ldr	r2, [pc, #504]	@ (8005998 <_printf_float+0x2d4>)
 80057a0:	4b7e      	ldr	r3, [pc, #504]	@ (800599c <_printf_float+0x2d8>)
 80057a2:	e7d4      	b.n	800574e <_printf_float+0x8a>
 80057a4:	6863      	ldr	r3, [r4, #4]
 80057a6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80057aa:	9206      	str	r2, [sp, #24]
 80057ac:	1c5a      	adds	r2, r3, #1
 80057ae:	d13b      	bne.n	8005828 <_printf_float+0x164>
 80057b0:	2306      	movs	r3, #6
 80057b2:	6063      	str	r3, [r4, #4]
 80057b4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80057b8:	2300      	movs	r3, #0
 80057ba:	6022      	str	r2, [r4, #0]
 80057bc:	9303      	str	r3, [sp, #12]
 80057be:	ab0a      	add	r3, sp, #40	@ 0x28
 80057c0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80057c4:	ab09      	add	r3, sp, #36	@ 0x24
 80057c6:	9300      	str	r3, [sp, #0]
 80057c8:	6861      	ldr	r1, [r4, #4]
 80057ca:	ec49 8b10 	vmov	d0, r8, r9
 80057ce:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80057d2:	4628      	mov	r0, r5
 80057d4:	f7ff fed6 	bl	8005584 <__cvt>
 80057d8:	9b06      	ldr	r3, [sp, #24]
 80057da:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80057dc:	2b47      	cmp	r3, #71	@ 0x47
 80057de:	4680      	mov	r8, r0
 80057e0:	d129      	bne.n	8005836 <_printf_float+0x172>
 80057e2:	1cc8      	adds	r0, r1, #3
 80057e4:	db02      	blt.n	80057ec <_printf_float+0x128>
 80057e6:	6863      	ldr	r3, [r4, #4]
 80057e8:	4299      	cmp	r1, r3
 80057ea:	dd41      	ble.n	8005870 <_printf_float+0x1ac>
 80057ec:	f1aa 0a02 	sub.w	sl, sl, #2
 80057f0:	fa5f fa8a 	uxtb.w	sl, sl
 80057f4:	3901      	subs	r1, #1
 80057f6:	4652      	mov	r2, sl
 80057f8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80057fc:	9109      	str	r1, [sp, #36]	@ 0x24
 80057fe:	f7ff ff26 	bl	800564e <__exponent>
 8005802:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005804:	1813      	adds	r3, r2, r0
 8005806:	2a01      	cmp	r2, #1
 8005808:	4681      	mov	r9, r0
 800580a:	6123      	str	r3, [r4, #16]
 800580c:	dc02      	bgt.n	8005814 <_printf_float+0x150>
 800580e:	6822      	ldr	r2, [r4, #0]
 8005810:	07d2      	lsls	r2, r2, #31
 8005812:	d501      	bpl.n	8005818 <_printf_float+0x154>
 8005814:	3301      	adds	r3, #1
 8005816:	6123      	str	r3, [r4, #16]
 8005818:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800581c:	2b00      	cmp	r3, #0
 800581e:	d0a2      	beq.n	8005766 <_printf_float+0xa2>
 8005820:	232d      	movs	r3, #45	@ 0x2d
 8005822:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005826:	e79e      	b.n	8005766 <_printf_float+0xa2>
 8005828:	9a06      	ldr	r2, [sp, #24]
 800582a:	2a47      	cmp	r2, #71	@ 0x47
 800582c:	d1c2      	bne.n	80057b4 <_printf_float+0xf0>
 800582e:	2b00      	cmp	r3, #0
 8005830:	d1c0      	bne.n	80057b4 <_printf_float+0xf0>
 8005832:	2301      	movs	r3, #1
 8005834:	e7bd      	b.n	80057b2 <_printf_float+0xee>
 8005836:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800583a:	d9db      	bls.n	80057f4 <_printf_float+0x130>
 800583c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005840:	d118      	bne.n	8005874 <_printf_float+0x1b0>
 8005842:	2900      	cmp	r1, #0
 8005844:	6863      	ldr	r3, [r4, #4]
 8005846:	dd0b      	ble.n	8005860 <_printf_float+0x19c>
 8005848:	6121      	str	r1, [r4, #16]
 800584a:	b913      	cbnz	r3, 8005852 <_printf_float+0x18e>
 800584c:	6822      	ldr	r2, [r4, #0]
 800584e:	07d0      	lsls	r0, r2, #31
 8005850:	d502      	bpl.n	8005858 <_printf_float+0x194>
 8005852:	3301      	adds	r3, #1
 8005854:	440b      	add	r3, r1
 8005856:	6123      	str	r3, [r4, #16]
 8005858:	65a1      	str	r1, [r4, #88]	@ 0x58
 800585a:	f04f 0900 	mov.w	r9, #0
 800585e:	e7db      	b.n	8005818 <_printf_float+0x154>
 8005860:	b913      	cbnz	r3, 8005868 <_printf_float+0x1a4>
 8005862:	6822      	ldr	r2, [r4, #0]
 8005864:	07d2      	lsls	r2, r2, #31
 8005866:	d501      	bpl.n	800586c <_printf_float+0x1a8>
 8005868:	3302      	adds	r3, #2
 800586a:	e7f4      	b.n	8005856 <_printf_float+0x192>
 800586c:	2301      	movs	r3, #1
 800586e:	e7f2      	b.n	8005856 <_printf_float+0x192>
 8005870:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005874:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005876:	4299      	cmp	r1, r3
 8005878:	db05      	blt.n	8005886 <_printf_float+0x1c2>
 800587a:	6823      	ldr	r3, [r4, #0]
 800587c:	6121      	str	r1, [r4, #16]
 800587e:	07d8      	lsls	r0, r3, #31
 8005880:	d5ea      	bpl.n	8005858 <_printf_float+0x194>
 8005882:	1c4b      	adds	r3, r1, #1
 8005884:	e7e7      	b.n	8005856 <_printf_float+0x192>
 8005886:	2900      	cmp	r1, #0
 8005888:	bfd4      	ite	le
 800588a:	f1c1 0202 	rsble	r2, r1, #2
 800588e:	2201      	movgt	r2, #1
 8005890:	4413      	add	r3, r2
 8005892:	e7e0      	b.n	8005856 <_printf_float+0x192>
 8005894:	6823      	ldr	r3, [r4, #0]
 8005896:	055a      	lsls	r2, r3, #21
 8005898:	d407      	bmi.n	80058aa <_printf_float+0x1e6>
 800589a:	6923      	ldr	r3, [r4, #16]
 800589c:	4642      	mov	r2, r8
 800589e:	4631      	mov	r1, r6
 80058a0:	4628      	mov	r0, r5
 80058a2:	47b8      	blx	r7
 80058a4:	3001      	adds	r0, #1
 80058a6:	d12b      	bne.n	8005900 <_printf_float+0x23c>
 80058a8:	e767      	b.n	800577a <_printf_float+0xb6>
 80058aa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80058ae:	f240 80dd 	bls.w	8005a6c <_printf_float+0x3a8>
 80058b2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80058b6:	2200      	movs	r2, #0
 80058b8:	2300      	movs	r3, #0
 80058ba:	f7fb f92d 	bl	8000b18 <__aeabi_dcmpeq>
 80058be:	2800      	cmp	r0, #0
 80058c0:	d033      	beq.n	800592a <_printf_float+0x266>
 80058c2:	4a37      	ldr	r2, [pc, #220]	@ (80059a0 <_printf_float+0x2dc>)
 80058c4:	2301      	movs	r3, #1
 80058c6:	4631      	mov	r1, r6
 80058c8:	4628      	mov	r0, r5
 80058ca:	47b8      	blx	r7
 80058cc:	3001      	adds	r0, #1
 80058ce:	f43f af54 	beq.w	800577a <_printf_float+0xb6>
 80058d2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80058d6:	4543      	cmp	r3, r8
 80058d8:	db02      	blt.n	80058e0 <_printf_float+0x21c>
 80058da:	6823      	ldr	r3, [r4, #0]
 80058dc:	07d8      	lsls	r0, r3, #31
 80058de:	d50f      	bpl.n	8005900 <_printf_float+0x23c>
 80058e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80058e4:	4631      	mov	r1, r6
 80058e6:	4628      	mov	r0, r5
 80058e8:	47b8      	blx	r7
 80058ea:	3001      	adds	r0, #1
 80058ec:	f43f af45 	beq.w	800577a <_printf_float+0xb6>
 80058f0:	f04f 0900 	mov.w	r9, #0
 80058f4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80058f8:	f104 0a1a 	add.w	sl, r4, #26
 80058fc:	45c8      	cmp	r8, r9
 80058fe:	dc09      	bgt.n	8005914 <_printf_float+0x250>
 8005900:	6823      	ldr	r3, [r4, #0]
 8005902:	079b      	lsls	r3, r3, #30
 8005904:	f100 8103 	bmi.w	8005b0e <_printf_float+0x44a>
 8005908:	68e0      	ldr	r0, [r4, #12]
 800590a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800590c:	4298      	cmp	r0, r3
 800590e:	bfb8      	it	lt
 8005910:	4618      	movlt	r0, r3
 8005912:	e734      	b.n	800577e <_printf_float+0xba>
 8005914:	2301      	movs	r3, #1
 8005916:	4652      	mov	r2, sl
 8005918:	4631      	mov	r1, r6
 800591a:	4628      	mov	r0, r5
 800591c:	47b8      	blx	r7
 800591e:	3001      	adds	r0, #1
 8005920:	f43f af2b 	beq.w	800577a <_printf_float+0xb6>
 8005924:	f109 0901 	add.w	r9, r9, #1
 8005928:	e7e8      	b.n	80058fc <_printf_float+0x238>
 800592a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800592c:	2b00      	cmp	r3, #0
 800592e:	dc39      	bgt.n	80059a4 <_printf_float+0x2e0>
 8005930:	4a1b      	ldr	r2, [pc, #108]	@ (80059a0 <_printf_float+0x2dc>)
 8005932:	2301      	movs	r3, #1
 8005934:	4631      	mov	r1, r6
 8005936:	4628      	mov	r0, r5
 8005938:	47b8      	blx	r7
 800593a:	3001      	adds	r0, #1
 800593c:	f43f af1d 	beq.w	800577a <_printf_float+0xb6>
 8005940:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005944:	ea59 0303 	orrs.w	r3, r9, r3
 8005948:	d102      	bne.n	8005950 <_printf_float+0x28c>
 800594a:	6823      	ldr	r3, [r4, #0]
 800594c:	07d9      	lsls	r1, r3, #31
 800594e:	d5d7      	bpl.n	8005900 <_printf_float+0x23c>
 8005950:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005954:	4631      	mov	r1, r6
 8005956:	4628      	mov	r0, r5
 8005958:	47b8      	blx	r7
 800595a:	3001      	adds	r0, #1
 800595c:	f43f af0d 	beq.w	800577a <_printf_float+0xb6>
 8005960:	f04f 0a00 	mov.w	sl, #0
 8005964:	f104 0b1a 	add.w	fp, r4, #26
 8005968:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800596a:	425b      	negs	r3, r3
 800596c:	4553      	cmp	r3, sl
 800596e:	dc01      	bgt.n	8005974 <_printf_float+0x2b0>
 8005970:	464b      	mov	r3, r9
 8005972:	e793      	b.n	800589c <_printf_float+0x1d8>
 8005974:	2301      	movs	r3, #1
 8005976:	465a      	mov	r2, fp
 8005978:	4631      	mov	r1, r6
 800597a:	4628      	mov	r0, r5
 800597c:	47b8      	blx	r7
 800597e:	3001      	adds	r0, #1
 8005980:	f43f aefb 	beq.w	800577a <_printf_float+0xb6>
 8005984:	f10a 0a01 	add.w	sl, sl, #1
 8005988:	e7ee      	b.n	8005968 <_printf_float+0x2a4>
 800598a:	bf00      	nop
 800598c:	7fefffff 	.word	0x7fefffff
 8005990:	0800a248 	.word	0x0800a248
 8005994:	0800a24c 	.word	0x0800a24c
 8005998:	0800a250 	.word	0x0800a250
 800599c:	0800a254 	.word	0x0800a254
 80059a0:	0800a258 	.word	0x0800a258
 80059a4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80059a6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80059aa:	4553      	cmp	r3, sl
 80059ac:	bfa8      	it	ge
 80059ae:	4653      	movge	r3, sl
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	4699      	mov	r9, r3
 80059b4:	dc36      	bgt.n	8005a24 <_printf_float+0x360>
 80059b6:	f04f 0b00 	mov.w	fp, #0
 80059ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80059be:	f104 021a 	add.w	r2, r4, #26
 80059c2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80059c4:	9306      	str	r3, [sp, #24]
 80059c6:	eba3 0309 	sub.w	r3, r3, r9
 80059ca:	455b      	cmp	r3, fp
 80059cc:	dc31      	bgt.n	8005a32 <_printf_float+0x36e>
 80059ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059d0:	459a      	cmp	sl, r3
 80059d2:	dc3a      	bgt.n	8005a4a <_printf_float+0x386>
 80059d4:	6823      	ldr	r3, [r4, #0]
 80059d6:	07da      	lsls	r2, r3, #31
 80059d8:	d437      	bmi.n	8005a4a <_printf_float+0x386>
 80059da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059dc:	ebaa 0903 	sub.w	r9, sl, r3
 80059e0:	9b06      	ldr	r3, [sp, #24]
 80059e2:	ebaa 0303 	sub.w	r3, sl, r3
 80059e6:	4599      	cmp	r9, r3
 80059e8:	bfa8      	it	ge
 80059ea:	4699      	movge	r9, r3
 80059ec:	f1b9 0f00 	cmp.w	r9, #0
 80059f0:	dc33      	bgt.n	8005a5a <_printf_float+0x396>
 80059f2:	f04f 0800 	mov.w	r8, #0
 80059f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80059fa:	f104 0b1a 	add.w	fp, r4, #26
 80059fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a00:	ebaa 0303 	sub.w	r3, sl, r3
 8005a04:	eba3 0309 	sub.w	r3, r3, r9
 8005a08:	4543      	cmp	r3, r8
 8005a0a:	f77f af79 	ble.w	8005900 <_printf_float+0x23c>
 8005a0e:	2301      	movs	r3, #1
 8005a10:	465a      	mov	r2, fp
 8005a12:	4631      	mov	r1, r6
 8005a14:	4628      	mov	r0, r5
 8005a16:	47b8      	blx	r7
 8005a18:	3001      	adds	r0, #1
 8005a1a:	f43f aeae 	beq.w	800577a <_printf_float+0xb6>
 8005a1e:	f108 0801 	add.w	r8, r8, #1
 8005a22:	e7ec      	b.n	80059fe <_printf_float+0x33a>
 8005a24:	4642      	mov	r2, r8
 8005a26:	4631      	mov	r1, r6
 8005a28:	4628      	mov	r0, r5
 8005a2a:	47b8      	blx	r7
 8005a2c:	3001      	adds	r0, #1
 8005a2e:	d1c2      	bne.n	80059b6 <_printf_float+0x2f2>
 8005a30:	e6a3      	b.n	800577a <_printf_float+0xb6>
 8005a32:	2301      	movs	r3, #1
 8005a34:	4631      	mov	r1, r6
 8005a36:	4628      	mov	r0, r5
 8005a38:	9206      	str	r2, [sp, #24]
 8005a3a:	47b8      	blx	r7
 8005a3c:	3001      	adds	r0, #1
 8005a3e:	f43f ae9c 	beq.w	800577a <_printf_float+0xb6>
 8005a42:	9a06      	ldr	r2, [sp, #24]
 8005a44:	f10b 0b01 	add.w	fp, fp, #1
 8005a48:	e7bb      	b.n	80059c2 <_printf_float+0x2fe>
 8005a4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a4e:	4631      	mov	r1, r6
 8005a50:	4628      	mov	r0, r5
 8005a52:	47b8      	blx	r7
 8005a54:	3001      	adds	r0, #1
 8005a56:	d1c0      	bne.n	80059da <_printf_float+0x316>
 8005a58:	e68f      	b.n	800577a <_printf_float+0xb6>
 8005a5a:	9a06      	ldr	r2, [sp, #24]
 8005a5c:	464b      	mov	r3, r9
 8005a5e:	4442      	add	r2, r8
 8005a60:	4631      	mov	r1, r6
 8005a62:	4628      	mov	r0, r5
 8005a64:	47b8      	blx	r7
 8005a66:	3001      	adds	r0, #1
 8005a68:	d1c3      	bne.n	80059f2 <_printf_float+0x32e>
 8005a6a:	e686      	b.n	800577a <_printf_float+0xb6>
 8005a6c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005a70:	f1ba 0f01 	cmp.w	sl, #1
 8005a74:	dc01      	bgt.n	8005a7a <_printf_float+0x3b6>
 8005a76:	07db      	lsls	r3, r3, #31
 8005a78:	d536      	bpl.n	8005ae8 <_printf_float+0x424>
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	4642      	mov	r2, r8
 8005a7e:	4631      	mov	r1, r6
 8005a80:	4628      	mov	r0, r5
 8005a82:	47b8      	blx	r7
 8005a84:	3001      	adds	r0, #1
 8005a86:	f43f ae78 	beq.w	800577a <_printf_float+0xb6>
 8005a8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a8e:	4631      	mov	r1, r6
 8005a90:	4628      	mov	r0, r5
 8005a92:	47b8      	blx	r7
 8005a94:	3001      	adds	r0, #1
 8005a96:	f43f ae70 	beq.w	800577a <_printf_float+0xb6>
 8005a9a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005aa6:	f7fb f837 	bl	8000b18 <__aeabi_dcmpeq>
 8005aaa:	b9c0      	cbnz	r0, 8005ade <_printf_float+0x41a>
 8005aac:	4653      	mov	r3, sl
 8005aae:	f108 0201 	add.w	r2, r8, #1
 8005ab2:	4631      	mov	r1, r6
 8005ab4:	4628      	mov	r0, r5
 8005ab6:	47b8      	blx	r7
 8005ab8:	3001      	adds	r0, #1
 8005aba:	d10c      	bne.n	8005ad6 <_printf_float+0x412>
 8005abc:	e65d      	b.n	800577a <_printf_float+0xb6>
 8005abe:	2301      	movs	r3, #1
 8005ac0:	465a      	mov	r2, fp
 8005ac2:	4631      	mov	r1, r6
 8005ac4:	4628      	mov	r0, r5
 8005ac6:	47b8      	blx	r7
 8005ac8:	3001      	adds	r0, #1
 8005aca:	f43f ae56 	beq.w	800577a <_printf_float+0xb6>
 8005ace:	f108 0801 	add.w	r8, r8, #1
 8005ad2:	45d0      	cmp	r8, sl
 8005ad4:	dbf3      	blt.n	8005abe <_printf_float+0x3fa>
 8005ad6:	464b      	mov	r3, r9
 8005ad8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005adc:	e6df      	b.n	800589e <_printf_float+0x1da>
 8005ade:	f04f 0800 	mov.w	r8, #0
 8005ae2:	f104 0b1a 	add.w	fp, r4, #26
 8005ae6:	e7f4      	b.n	8005ad2 <_printf_float+0x40e>
 8005ae8:	2301      	movs	r3, #1
 8005aea:	4642      	mov	r2, r8
 8005aec:	e7e1      	b.n	8005ab2 <_printf_float+0x3ee>
 8005aee:	2301      	movs	r3, #1
 8005af0:	464a      	mov	r2, r9
 8005af2:	4631      	mov	r1, r6
 8005af4:	4628      	mov	r0, r5
 8005af6:	47b8      	blx	r7
 8005af8:	3001      	adds	r0, #1
 8005afa:	f43f ae3e 	beq.w	800577a <_printf_float+0xb6>
 8005afe:	f108 0801 	add.w	r8, r8, #1
 8005b02:	68e3      	ldr	r3, [r4, #12]
 8005b04:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005b06:	1a5b      	subs	r3, r3, r1
 8005b08:	4543      	cmp	r3, r8
 8005b0a:	dcf0      	bgt.n	8005aee <_printf_float+0x42a>
 8005b0c:	e6fc      	b.n	8005908 <_printf_float+0x244>
 8005b0e:	f04f 0800 	mov.w	r8, #0
 8005b12:	f104 0919 	add.w	r9, r4, #25
 8005b16:	e7f4      	b.n	8005b02 <_printf_float+0x43e>

08005b18 <_printf_common>:
 8005b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b1c:	4616      	mov	r6, r2
 8005b1e:	4698      	mov	r8, r3
 8005b20:	688a      	ldr	r2, [r1, #8]
 8005b22:	690b      	ldr	r3, [r1, #16]
 8005b24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	bfb8      	it	lt
 8005b2c:	4613      	movlt	r3, r2
 8005b2e:	6033      	str	r3, [r6, #0]
 8005b30:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005b34:	4607      	mov	r7, r0
 8005b36:	460c      	mov	r4, r1
 8005b38:	b10a      	cbz	r2, 8005b3e <_printf_common+0x26>
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	6033      	str	r3, [r6, #0]
 8005b3e:	6823      	ldr	r3, [r4, #0]
 8005b40:	0699      	lsls	r1, r3, #26
 8005b42:	bf42      	ittt	mi
 8005b44:	6833      	ldrmi	r3, [r6, #0]
 8005b46:	3302      	addmi	r3, #2
 8005b48:	6033      	strmi	r3, [r6, #0]
 8005b4a:	6825      	ldr	r5, [r4, #0]
 8005b4c:	f015 0506 	ands.w	r5, r5, #6
 8005b50:	d106      	bne.n	8005b60 <_printf_common+0x48>
 8005b52:	f104 0a19 	add.w	sl, r4, #25
 8005b56:	68e3      	ldr	r3, [r4, #12]
 8005b58:	6832      	ldr	r2, [r6, #0]
 8005b5a:	1a9b      	subs	r3, r3, r2
 8005b5c:	42ab      	cmp	r3, r5
 8005b5e:	dc26      	bgt.n	8005bae <_printf_common+0x96>
 8005b60:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005b64:	6822      	ldr	r2, [r4, #0]
 8005b66:	3b00      	subs	r3, #0
 8005b68:	bf18      	it	ne
 8005b6a:	2301      	movne	r3, #1
 8005b6c:	0692      	lsls	r2, r2, #26
 8005b6e:	d42b      	bmi.n	8005bc8 <_printf_common+0xb0>
 8005b70:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005b74:	4641      	mov	r1, r8
 8005b76:	4638      	mov	r0, r7
 8005b78:	47c8      	blx	r9
 8005b7a:	3001      	adds	r0, #1
 8005b7c:	d01e      	beq.n	8005bbc <_printf_common+0xa4>
 8005b7e:	6823      	ldr	r3, [r4, #0]
 8005b80:	6922      	ldr	r2, [r4, #16]
 8005b82:	f003 0306 	and.w	r3, r3, #6
 8005b86:	2b04      	cmp	r3, #4
 8005b88:	bf02      	ittt	eq
 8005b8a:	68e5      	ldreq	r5, [r4, #12]
 8005b8c:	6833      	ldreq	r3, [r6, #0]
 8005b8e:	1aed      	subeq	r5, r5, r3
 8005b90:	68a3      	ldr	r3, [r4, #8]
 8005b92:	bf0c      	ite	eq
 8005b94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b98:	2500      	movne	r5, #0
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	bfc4      	itt	gt
 8005b9e:	1a9b      	subgt	r3, r3, r2
 8005ba0:	18ed      	addgt	r5, r5, r3
 8005ba2:	2600      	movs	r6, #0
 8005ba4:	341a      	adds	r4, #26
 8005ba6:	42b5      	cmp	r5, r6
 8005ba8:	d11a      	bne.n	8005be0 <_printf_common+0xc8>
 8005baa:	2000      	movs	r0, #0
 8005bac:	e008      	b.n	8005bc0 <_printf_common+0xa8>
 8005bae:	2301      	movs	r3, #1
 8005bb0:	4652      	mov	r2, sl
 8005bb2:	4641      	mov	r1, r8
 8005bb4:	4638      	mov	r0, r7
 8005bb6:	47c8      	blx	r9
 8005bb8:	3001      	adds	r0, #1
 8005bba:	d103      	bne.n	8005bc4 <_printf_common+0xac>
 8005bbc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bc4:	3501      	adds	r5, #1
 8005bc6:	e7c6      	b.n	8005b56 <_printf_common+0x3e>
 8005bc8:	18e1      	adds	r1, r4, r3
 8005bca:	1c5a      	adds	r2, r3, #1
 8005bcc:	2030      	movs	r0, #48	@ 0x30
 8005bce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005bd2:	4422      	add	r2, r4
 8005bd4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005bd8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005bdc:	3302      	adds	r3, #2
 8005bde:	e7c7      	b.n	8005b70 <_printf_common+0x58>
 8005be0:	2301      	movs	r3, #1
 8005be2:	4622      	mov	r2, r4
 8005be4:	4641      	mov	r1, r8
 8005be6:	4638      	mov	r0, r7
 8005be8:	47c8      	blx	r9
 8005bea:	3001      	adds	r0, #1
 8005bec:	d0e6      	beq.n	8005bbc <_printf_common+0xa4>
 8005bee:	3601      	adds	r6, #1
 8005bf0:	e7d9      	b.n	8005ba6 <_printf_common+0x8e>
	...

08005bf4 <_printf_i>:
 8005bf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005bf8:	7e0f      	ldrb	r7, [r1, #24]
 8005bfa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005bfc:	2f78      	cmp	r7, #120	@ 0x78
 8005bfe:	4691      	mov	r9, r2
 8005c00:	4680      	mov	r8, r0
 8005c02:	460c      	mov	r4, r1
 8005c04:	469a      	mov	sl, r3
 8005c06:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005c0a:	d807      	bhi.n	8005c1c <_printf_i+0x28>
 8005c0c:	2f62      	cmp	r7, #98	@ 0x62
 8005c0e:	d80a      	bhi.n	8005c26 <_printf_i+0x32>
 8005c10:	2f00      	cmp	r7, #0
 8005c12:	f000 80d2 	beq.w	8005dba <_printf_i+0x1c6>
 8005c16:	2f58      	cmp	r7, #88	@ 0x58
 8005c18:	f000 80b9 	beq.w	8005d8e <_printf_i+0x19a>
 8005c1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005c20:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005c24:	e03a      	b.n	8005c9c <_printf_i+0xa8>
 8005c26:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005c2a:	2b15      	cmp	r3, #21
 8005c2c:	d8f6      	bhi.n	8005c1c <_printf_i+0x28>
 8005c2e:	a101      	add	r1, pc, #4	@ (adr r1, 8005c34 <_printf_i+0x40>)
 8005c30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c34:	08005c8d 	.word	0x08005c8d
 8005c38:	08005ca1 	.word	0x08005ca1
 8005c3c:	08005c1d 	.word	0x08005c1d
 8005c40:	08005c1d 	.word	0x08005c1d
 8005c44:	08005c1d 	.word	0x08005c1d
 8005c48:	08005c1d 	.word	0x08005c1d
 8005c4c:	08005ca1 	.word	0x08005ca1
 8005c50:	08005c1d 	.word	0x08005c1d
 8005c54:	08005c1d 	.word	0x08005c1d
 8005c58:	08005c1d 	.word	0x08005c1d
 8005c5c:	08005c1d 	.word	0x08005c1d
 8005c60:	08005da1 	.word	0x08005da1
 8005c64:	08005ccb 	.word	0x08005ccb
 8005c68:	08005d5b 	.word	0x08005d5b
 8005c6c:	08005c1d 	.word	0x08005c1d
 8005c70:	08005c1d 	.word	0x08005c1d
 8005c74:	08005dc3 	.word	0x08005dc3
 8005c78:	08005c1d 	.word	0x08005c1d
 8005c7c:	08005ccb 	.word	0x08005ccb
 8005c80:	08005c1d 	.word	0x08005c1d
 8005c84:	08005c1d 	.word	0x08005c1d
 8005c88:	08005d63 	.word	0x08005d63
 8005c8c:	6833      	ldr	r3, [r6, #0]
 8005c8e:	1d1a      	adds	r2, r3, #4
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	6032      	str	r2, [r6, #0]
 8005c94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005c98:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e09d      	b.n	8005ddc <_printf_i+0x1e8>
 8005ca0:	6833      	ldr	r3, [r6, #0]
 8005ca2:	6820      	ldr	r0, [r4, #0]
 8005ca4:	1d19      	adds	r1, r3, #4
 8005ca6:	6031      	str	r1, [r6, #0]
 8005ca8:	0606      	lsls	r6, r0, #24
 8005caa:	d501      	bpl.n	8005cb0 <_printf_i+0xbc>
 8005cac:	681d      	ldr	r5, [r3, #0]
 8005cae:	e003      	b.n	8005cb8 <_printf_i+0xc4>
 8005cb0:	0645      	lsls	r5, r0, #25
 8005cb2:	d5fb      	bpl.n	8005cac <_printf_i+0xb8>
 8005cb4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005cb8:	2d00      	cmp	r5, #0
 8005cba:	da03      	bge.n	8005cc4 <_printf_i+0xd0>
 8005cbc:	232d      	movs	r3, #45	@ 0x2d
 8005cbe:	426d      	negs	r5, r5
 8005cc0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005cc4:	4859      	ldr	r0, [pc, #356]	@ (8005e2c <_printf_i+0x238>)
 8005cc6:	230a      	movs	r3, #10
 8005cc8:	e011      	b.n	8005cee <_printf_i+0xfa>
 8005cca:	6821      	ldr	r1, [r4, #0]
 8005ccc:	6833      	ldr	r3, [r6, #0]
 8005cce:	0608      	lsls	r0, r1, #24
 8005cd0:	f853 5b04 	ldr.w	r5, [r3], #4
 8005cd4:	d402      	bmi.n	8005cdc <_printf_i+0xe8>
 8005cd6:	0649      	lsls	r1, r1, #25
 8005cd8:	bf48      	it	mi
 8005cda:	b2ad      	uxthmi	r5, r5
 8005cdc:	2f6f      	cmp	r7, #111	@ 0x6f
 8005cde:	4853      	ldr	r0, [pc, #332]	@ (8005e2c <_printf_i+0x238>)
 8005ce0:	6033      	str	r3, [r6, #0]
 8005ce2:	bf14      	ite	ne
 8005ce4:	230a      	movne	r3, #10
 8005ce6:	2308      	moveq	r3, #8
 8005ce8:	2100      	movs	r1, #0
 8005cea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005cee:	6866      	ldr	r6, [r4, #4]
 8005cf0:	60a6      	str	r6, [r4, #8]
 8005cf2:	2e00      	cmp	r6, #0
 8005cf4:	bfa2      	ittt	ge
 8005cf6:	6821      	ldrge	r1, [r4, #0]
 8005cf8:	f021 0104 	bicge.w	r1, r1, #4
 8005cfc:	6021      	strge	r1, [r4, #0]
 8005cfe:	b90d      	cbnz	r5, 8005d04 <_printf_i+0x110>
 8005d00:	2e00      	cmp	r6, #0
 8005d02:	d04b      	beq.n	8005d9c <_printf_i+0x1a8>
 8005d04:	4616      	mov	r6, r2
 8005d06:	fbb5 f1f3 	udiv	r1, r5, r3
 8005d0a:	fb03 5711 	mls	r7, r3, r1, r5
 8005d0e:	5dc7      	ldrb	r7, [r0, r7]
 8005d10:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005d14:	462f      	mov	r7, r5
 8005d16:	42bb      	cmp	r3, r7
 8005d18:	460d      	mov	r5, r1
 8005d1a:	d9f4      	bls.n	8005d06 <_printf_i+0x112>
 8005d1c:	2b08      	cmp	r3, #8
 8005d1e:	d10b      	bne.n	8005d38 <_printf_i+0x144>
 8005d20:	6823      	ldr	r3, [r4, #0]
 8005d22:	07df      	lsls	r7, r3, #31
 8005d24:	d508      	bpl.n	8005d38 <_printf_i+0x144>
 8005d26:	6923      	ldr	r3, [r4, #16]
 8005d28:	6861      	ldr	r1, [r4, #4]
 8005d2a:	4299      	cmp	r1, r3
 8005d2c:	bfde      	ittt	le
 8005d2e:	2330      	movle	r3, #48	@ 0x30
 8005d30:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005d34:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005d38:	1b92      	subs	r2, r2, r6
 8005d3a:	6122      	str	r2, [r4, #16]
 8005d3c:	f8cd a000 	str.w	sl, [sp]
 8005d40:	464b      	mov	r3, r9
 8005d42:	aa03      	add	r2, sp, #12
 8005d44:	4621      	mov	r1, r4
 8005d46:	4640      	mov	r0, r8
 8005d48:	f7ff fee6 	bl	8005b18 <_printf_common>
 8005d4c:	3001      	adds	r0, #1
 8005d4e:	d14a      	bne.n	8005de6 <_printf_i+0x1f2>
 8005d50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005d54:	b004      	add	sp, #16
 8005d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d5a:	6823      	ldr	r3, [r4, #0]
 8005d5c:	f043 0320 	orr.w	r3, r3, #32
 8005d60:	6023      	str	r3, [r4, #0]
 8005d62:	4833      	ldr	r0, [pc, #204]	@ (8005e30 <_printf_i+0x23c>)
 8005d64:	2778      	movs	r7, #120	@ 0x78
 8005d66:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005d6a:	6823      	ldr	r3, [r4, #0]
 8005d6c:	6831      	ldr	r1, [r6, #0]
 8005d6e:	061f      	lsls	r7, r3, #24
 8005d70:	f851 5b04 	ldr.w	r5, [r1], #4
 8005d74:	d402      	bmi.n	8005d7c <_printf_i+0x188>
 8005d76:	065f      	lsls	r7, r3, #25
 8005d78:	bf48      	it	mi
 8005d7a:	b2ad      	uxthmi	r5, r5
 8005d7c:	6031      	str	r1, [r6, #0]
 8005d7e:	07d9      	lsls	r1, r3, #31
 8005d80:	bf44      	itt	mi
 8005d82:	f043 0320 	orrmi.w	r3, r3, #32
 8005d86:	6023      	strmi	r3, [r4, #0]
 8005d88:	b11d      	cbz	r5, 8005d92 <_printf_i+0x19e>
 8005d8a:	2310      	movs	r3, #16
 8005d8c:	e7ac      	b.n	8005ce8 <_printf_i+0xf4>
 8005d8e:	4827      	ldr	r0, [pc, #156]	@ (8005e2c <_printf_i+0x238>)
 8005d90:	e7e9      	b.n	8005d66 <_printf_i+0x172>
 8005d92:	6823      	ldr	r3, [r4, #0]
 8005d94:	f023 0320 	bic.w	r3, r3, #32
 8005d98:	6023      	str	r3, [r4, #0]
 8005d9a:	e7f6      	b.n	8005d8a <_printf_i+0x196>
 8005d9c:	4616      	mov	r6, r2
 8005d9e:	e7bd      	b.n	8005d1c <_printf_i+0x128>
 8005da0:	6833      	ldr	r3, [r6, #0]
 8005da2:	6825      	ldr	r5, [r4, #0]
 8005da4:	6961      	ldr	r1, [r4, #20]
 8005da6:	1d18      	adds	r0, r3, #4
 8005da8:	6030      	str	r0, [r6, #0]
 8005daa:	062e      	lsls	r6, r5, #24
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	d501      	bpl.n	8005db4 <_printf_i+0x1c0>
 8005db0:	6019      	str	r1, [r3, #0]
 8005db2:	e002      	b.n	8005dba <_printf_i+0x1c6>
 8005db4:	0668      	lsls	r0, r5, #25
 8005db6:	d5fb      	bpl.n	8005db0 <_printf_i+0x1bc>
 8005db8:	8019      	strh	r1, [r3, #0]
 8005dba:	2300      	movs	r3, #0
 8005dbc:	6123      	str	r3, [r4, #16]
 8005dbe:	4616      	mov	r6, r2
 8005dc0:	e7bc      	b.n	8005d3c <_printf_i+0x148>
 8005dc2:	6833      	ldr	r3, [r6, #0]
 8005dc4:	1d1a      	adds	r2, r3, #4
 8005dc6:	6032      	str	r2, [r6, #0]
 8005dc8:	681e      	ldr	r6, [r3, #0]
 8005dca:	6862      	ldr	r2, [r4, #4]
 8005dcc:	2100      	movs	r1, #0
 8005dce:	4630      	mov	r0, r6
 8005dd0:	f7fa fa26 	bl	8000220 <memchr>
 8005dd4:	b108      	cbz	r0, 8005dda <_printf_i+0x1e6>
 8005dd6:	1b80      	subs	r0, r0, r6
 8005dd8:	6060      	str	r0, [r4, #4]
 8005dda:	6863      	ldr	r3, [r4, #4]
 8005ddc:	6123      	str	r3, [r4, #16]
 8005dde:	2300      	movs	r3, #0
 8005de0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005de4:	e7aa      	b.n	8005d3c <_printf_i+0x148>
 8005de6:	6923      	ldr	r3, [r4, #16]
 8005de8:	4632      	mov	r2, r6
 8005dea:	4649      	mov	r1, r9
 8005dec:	4640      	mov	r0, r8
 8005dee:	47d0      	blx	sl
 8005df0:	3001      	adds	r0, #1
 8005df2:	d0ad      	beq.n	8005d50 <_printf_i+0x15c>
 8005df4:	6823      	ldr	r3, [r4, #0]
 8005df6:	079b      	lsls	r3, r3, #30
 8005df8:	d413      	bmi.n	8005e22 <_printf_i+0x22e>
 8005dfa:	68e0      	ldr	r0, [r4, #12]
 8005dfc:	9b03      	ldr	r3, [sp, #12]
 8005dfe:	4298      	cmp	r0, r3
 8005e00:	bfb8      	it	lt
 8005e02:	4618      	movlt	r0, r3
 8005e04:	e7a6      	b.n	8005d54 <_printf_i+0x160>
 8005e06:	2301      	movs	r3, #1
 8005e08:	4632      	mov	r2, r6
 8005e0a:	4649      	mov	r1, r9
 8005e0c:	4640      	mov	r0, r8
 8005e0e:	47d0      	blx	sl
 8005e10:	3001      	adds	r0, #1
 8005e12:	d09d      	beq.n	8005d50 <_printf_i+0x15c>
 8005e14:	3501      	adds	r5, #1
 8005e16:	68e3      	ldr	r3, [r4, #12]
 8005e18:	9903      	ldr	r1, [sp, #12]
 8005e1a:	1a5b      	subs	r3, r3, r1
 8005e1c:	42ab      	cmp	r3, r5
 8005e1e:	dcf2      	bgt.n	8005e06 <_printf_i+0x212>
 8005e20:	e7eb      	b.n	8005dfa <_printf_i+0x206>
 8005e22:	2500      	movs	r5, #0
 8005e24:	f104 0619 	add.w	r6, r4, #25
 8005e28:	e7f5      	b.n	8005e16 <_printf_i+0x222>
 8005e2a:	bf00      	nop
 8005e2c:	0800a25a 	.word	0x0800a25a
 8005e30:	0800a26b 	.word	0x0800a26b

08005e34 <_scanf_float>:
 8005e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e38:	b087      	sub	sp, #28
 8005e3a:	4617      	mov	r7, r2
 8005e3c:	9303      	str	r3, [sp, #12]
 8005e3e:	688b      	ldr	r3, [r1, #8]
 8005e40:	1e5a      	subs	r2, r3, #1
 8005e42:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005e46:	bf81      	itttt	hi
 8005e48:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005e4c:	eb03 0b05 	addhi.w	fp, r3, r5
 8005e50:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005e54:	608b      	strhi	r3, [r1, #8]
 8005e56:	680b      	ldr	r3, [r1, #0]
 8005e58:	460a      	mov	r2, r1
 8005e5a:	f04f 0500 	mov.w	r5, #0
 8005e5e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8005e62:	f842 3b1c 	str.w	r3, [r2], #28
 8005e66:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005e6a:	4680      	mov	r8, r0
 8005e6c:	460c      	mov	r4, r1
 8005e6e:	bf98      	it	ls
 8005e70:	f04f 0b00 	movls.w	fp, #0
 8005e74:	9201      	str	r2, [sp, #4]
 8005e76:	4616      	mov	r6, r2
 8005e78:	46aa      	mov	sl, r5
 8005e7a:	46a9      	mov	r9, r5
 8005e7c:	9502      	str	r5, [sp, #8]
 8005e7e:	68a2      	ldr	r2, [r4, #8]
 8005e80:	b152      	cbz	r2, 8005e98 <_scanf_float+0x64>
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	2b4e      	cmp	r3, #78	@ 0x4e
 8005e88:	d864      	bhi.n	8005f54 <_scanf_float+0x120>
 8005e8a:	2b40      	cmp	r3, #64	@ 0x40
 8005e8c:	d83c      	bhi.n	8005f08 <_scanf_float+0xd4>
 8005e8e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8005e92:	b2c8      	uxtb	r0, r1
 8005e94:	280e      	cmp	r0, #14
 8005e96:	d93a      	bls.n	8005f0e <_scanf_float+0xda>
 8005e98:	f1b9 0f00 	cmp.w	r9, #0
 8005e9c:	d003      	beq.n	8005ea6 <_scanf_float+0x72>
 8005e9e:	6823      	ldr	r3, [r4, #0]
 8005ea0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ea4:	6023      	str	r3, [r4, #0]
 8005ea6:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005eaa:	f1ba 0f01 	cmp.w	sl, #1
 8005eae:	f200 8117 	bhi.w	80060e0 <_scanf_float+0x2ac>
 8005eb2:	9b01      	ldr	r3, [sp, #4]
 8005eb4:	429e      	cmp	r6, r3
 8005eb6:	f200 8108 	bhi.w	80060ca <_scanf_float+0x296>
 8005eba:	2001      	movs	r0, #1
 8005ebc:	b007      	add	sp, #28
 8005ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ec2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8005ec6:	2a0d      	cmp	r2, #13
 8005ec8:	d8e6      	bhi.n	8005e98 <_scanf_float+0x64>
 8005eca:	a101      	add	r1, pc, #4	@ (adr r1, 8005ed0 <_scanf_float+0x9c>)
 8005ecc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005ed0:	08006017 	.word	0x08006017
 8005ed4:	08005e99 	.word	0x08005e99
 8005ed8:	08005e99 	.word	0x08005e99
 8005edc:	08005e99 	.word	0x08005e99
 8005ee0:	08006077 	.word	0x08006077
 8005ee4:	0800604f 	.word	0x0800604f
 8005ee8:	08005e99 	.word	0x08005e99
 8005eec:	08005e99 	.word	0x08005e99
 8005ef0:	08006025 	.word	0x08006025
 8005ef4:	08005e99 	.word	0x08005e99
 8005ef8:	08005e99 	.word	0x08005e99
 8005efc:	08005e99 	.word	0x08005e99
 8005f00:	08005e99 	.word	0x08005e99
 8005f04:	08005fdd 	.word	0x08005fdd
 8005f08:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005f0c:	e7db      	b.n	8005ec6 <_scanf_float+0x92>
 8005f0e:	290e      	cmp	r1, #14
 8005f10:	d8c2      	bhi.n	8005e98 <_scanf_float+0x64>
 8005f12:	a001      	add	r0, pc, #4	@ (adr r0, 8005f18 <_scanf_float+0xe4>)
 8005f14:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005f18:	08005fcd 	.word	0x08005fcd
 8005f1c:	08005e99 	.word	0x08005e99
 8005f20:	08005fcd 	.word	0x08005fcd
 8005f24:	08006063 	.word	0x08006063
 8005f28:	08005e99 	.word	0x08005e99
 8005f2c:	08005f75 	.word	0x08005f75
 8005f30:	08005fb3 	.word	0x08005fb3
 8005f34:	08005fb3 	.word	0x08005fb3
 8005f38:	08005fb3 	.word	0x08005fb3
 8005f3c:	08005fb3 	.word	0x08005fb3
 8005f40:	08005fb3 	.word	0x08005fb3
 8005f44:	08005fb3 	.word	0x08005fb3
 8005f48:	08005fb3 	.word	0x08005fb3
 8005f4c:	08005fb3 	.word	0x08005fb3
 8005f50:	08005fb3 	.word	0x08005fb3
 8005f54:	2b6e      	cmp	r3, #110	@ 0x6e
 8005f56:	d809      	bhi.n	8005f6c <_scanf_float+0x138>
 8005f58:	2b60      	cmp	r3, #96	@ 0x60
 8005f5a:	d8b2      	bhi.n	8005ec2 <_scanf_float+0x8e>
 8005f5c:	2b54      	cmp	r3, #84	@ 0x54
 8005f5e:	d07b      	beq.n	8006058 <_scanf_float+0x224>
 8005f60:	2b59      	cmp	r3, #89	@ 0x59
 8005f62:	d199      	bne.n	8005e98 <_scanf_float+0x64>
 8005f64:	2d07      	cmp	r5, #7
 8005f66:	d197      	bne.n	8005e98 <_scanf_float+0x64>
 8005f68:	2508      	movs	r5, #8
 8005f6a:	e02c      	b.n	8005fc6 <_scanf_float+0x192>
 8005f6c:	2b74      	cmp	r3, #116	@ 0x74
 8005f6e:	d073      	beq.n	8006058 <_scanf_float+0x224>
 8005f70:	2b79      	cmp	r3, #121	@ 0x79
 8005f72:	e7f6      	b.n	8005f62 <_scanf_float+0x12e>
 8005f74:	6821      	ldr	r1, [r4, #0]
 8005f76:	05c8      	lsls	r0, r1, #23
 8005f78:	d51b      	bpl.n	8005fb2 <_scanf_float+0x17e>
 8005f7a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8005f7e:	6021      	str	r1, [r4, #0]
 8005f80:	f109 0901 	add.w	r9, r9, #1
 8005f84:	f1bb 0f00 	cmp.w	fp, #0
 8005f88:	d003      	beq.n	8005f92 <_scanf_float+0x15e>
 8005f8a:	3201      	adds	r2, #1
 8005f8c:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8005f90:	60a2      	str	r2, [r4, #8]
 8005f92:	68a3      	ldr	r3, [r4, #8]
 8005f94:	3b01      	subs	r3, #1
 8005f96:	60a3      	str	r3, [r4, #8]
 8005f98:	6923      	ldr	r3, [r4, #16]
 8005f9a:	3301      	adds	r3, #1
 8005f9c:	6123      	str	r3, [r4, #16]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	3b01      	subs	r3, #1
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	607b      	str	r3, [r7, #4]
 8005fa6:	f340 8087 	ble.w	80060b8 <_scanf_float+0x284>
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	3301      	adds	r3, #1
 8005fae:	603b      	str	r3, [r7, #0]
 8005fb0:	e765      	b.n	8005e7e <_scanf_float+0x4a>
 8005fb2:	eb1a 0105 	adds.w	r1, sl, r5
 8005fb6:	f47f af6f 	bne.w	8005e98 <_scanf_float+0x64>
 8005fba:	6822      	ldr	r2, [r4, #0]
 8005fbc:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8005fc0:	6022      	str	r2, [r4, #0]
 8005fc2:	460d      	mov	r5, r1
 8005fc4:	468a      	mov	sl, r1
 8005fc6:	f806 3b01 	strb.w	r3, [r6], #1
 8005fca:	e7e2      	b.n	8005f92 <_scanf_float+0x15e>
 8005fcc:	6822      	ldr	r2, [r4, #0]
 8005fce:	0610      	lsls	r0, r2, #24
 8005fd0:	f57f af62 	bpl.w	8005e98 <_scanf_float+0x64>
 8005fd4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005fd8:	6022      	str	r2, [r4, #0]
 8005fda:	e7f4      	b.n	8005fc6 <_scanf_float+0x192>
 8005fdc:	f1ba 0f00 	cmp.w	sl, #0
 8005fe0:	d10e      	bne.n	8006000 <_scanf_float+0x1cc>
 8005fe2:	f1b9 0f00 	cmp.w	r9, #0
 8005fe6:	d10e      	bne.n	8006006 <_scanf_float+0x1d2>
 8005fe8:	6822      	ldr	r2, [r4, #0]
 8005fea:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005fee:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005ff2:	d108      	bne.n	8006006 <_scanf_float+0x1d2>
 8005ff4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005ff8:	6022      	str	r2, [r4, #0]
 8005ffa:	f04f 0a01 	mov.w	sl, #1
 8005ffe:	e7e2      	b.n	8005fc6 <_scanf_float+0x192>
 8006000:	f1ba 0f02 	cmp.w	sl, #2
 8006004:	d055      	beq.n	80060b2 <_scanf_float+0x27e>
 8006006:	2d01      	cmp	r5, #1
 8006008:	d002      	beq.n	8006010 <_scanf_float+0x1dc>
 800600a:	2d04      	cmp	r5, #4
 800600c:	f47f af44 	bne.w	8005e98 <_scanf_float+0x64>
 8006010:	3501      	adds	r5, #1
 8006012:	b2ed      	uxtb	r5, r5
 8006014:	e7d7      	b.n	8005fc6 <_scanf_float+0x192>
 8006016:	f1ba 0f01 	cmp.w	sl, #1
 800601a:	f47f af3d 	bne.w	8005e98 <_scanf_float+0x64>
 800601e:	f04f 0a02 	mov.w	sl, #2
 8006022:	e7d0      	b.n	8005fc6 <_scanf_float+0x192>
 8006024:	b97d      	cbnz	r5, 8006046 <_scanf_float+0x212>
 8006026:	f1b9 0f00 	cmp.w	r9, #0
 800602a:	f47f af38 	bne.w	8005e9e <_scanf_float+0x6a>
 800602e:	6822      	ldr	r2, [r4, #0]
 8006030:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006034:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006038:	f040 8108 	bne.w	800624c <_scanf_float+0x418>
 800603c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006040:	6022      	str	r2, [r4, #0]
 8006042:	2501      	movs	r5, #1
 8006044:	e7bf      	b.n	8005fc6 <_scanf_float+0x192>
 8006046:	2d03      	cmp	r5, #3
 8006048:	d0e2      	beq.n	8006010 <_scanf_float+0x1dc>
 800604a:	2d05      	cmp	r5, #5
 800604c:	e7de      	b.n	800600c <_scanf_float+0x1d8>
 800604e:	2d02      	cmp	r5, #2
 8006050:	f47f af22 	bne.w	8005e98 <_scanf_float+0x64>
 8006054:	2503      	movs	r5, #3
 8006056:	e7b6      	b.n	8005fc6 <_scanf_float+0x192>
 8006058:	2d06      	cmp	r5, #6
 800605a:	f47f af1d 	bne.w	8005e98 <_scanf_float+0x64>
 800605e:	2507      	movs	r5, #7
 8006060:	e7b1      	b.n	8005fc6 <_scanf_float+0x192>
 8006062:	6822      	ldr	r2, [r4, #0]
 8006064:	0591      	lsls	r1, r2, #22
 8006066:	f57f af17 	bpl.w	8005e98 <_scanf_float+0x64>
 800606a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800606e:	6022      	str	r2, [r4, #0]
 8006070:	f8cd 9008 	str.w	r9, [sp, #8]
 8006074:	e7a7      	b.n	8005fc6 <_scanf_float+0x192>
 8006076:	6822      	ldr	r2, [r4, #0]
 8006078:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800607c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006080:	d006      	beq.n	8006090 <_scanf_float+0x25c>
 8006082:	0550      	lsls	r0, r2, #21
 8006084:	f57f af08 	bpl.w	8005e98 <_scanf_float+0x64>
 8006088:	f1b9 0f00 	cmp.w	r9, #0
 800608c:	f000 80de 	beq.w	800624c <_scanf_float+0x418>
 8006090:	0591      	lsls	r1, r2, #22
 8006092:	bf58      	it	pl
 8006094:	9902      	ldrpl	r1, [sp, #8]
 8006096:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800609a:	bf58      	it	pl
 800609c:	eba9 0101 	subpl.w	r1, r9, r1
 80060a0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80060a4:	bf58      	it	pl
 80060a6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80060aa:	6022      	str	r2, [r4, #0]
 80060ac:	f04f 0900 	mov.w	r9, #0
 80060b0:	e789      	b.n	8005fc6 <_scanf_float+0x192>
 80060b2:	f04f 0a03 	mov.w	sl, #3
 80060b6:	e786      	b.n	8005fc6 <_scanf_float+0x192>
 80060b8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80060bc:	4639      	mov	r1, r7
 80060be:	4640      	mov	r0, r8
 80060c0:	4798      	blx	r3
 80060c2:	2800      	cmp	r0, #0
 80060c4:	f43f aedb 	beq.w	8005e7e <_scanf_float+0x4a>
 80060c8:	e6e6      	b.n	8005e98 <_scanf_float+0x64>
 80060ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80060ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80060d2:	463a      	mov	r2, r7
 80060d4:	4640      	mov	r0, r8
 80060d6:	4798      	blx	r3
 80060d8:	6923      	ldr	r3, [r4, #16]
 80060da:	3b01      	subs	r3, #1
 80060dc:	6123      	str	r3, [r4, #16]
 80060de:	e6e8      	b.n	8005eb2 <_scanf_float+0x7e>
 80060e0:	1e6b      	subs	r3, r5, #1
 80060e2:	2b06      	cmp	r3, #6
 80060e4:	d824      	bhi.n	8006130 <_scanf_float+0x2fc>
 80060e6:	2d02      	cmp	r5, #2
 80060e8:	d836      	bhi.n	8006158 <_scanf_float+0x324>
 80060ea:	9b01      	ldr	r3, [sp, #4]
 80060ec:	429e      	cmp	r6, r3
 80060ee:	f67f aee4 	bls.w	8005eba <_scanf_float+0x86>
 80060f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80060f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80060fa:	463a      	mov	r2, r7
 80060fc:	4640      	mov	r0, r8
 80060fe:	4798      	blx	r3
 8006100:	6923      	ldr	r3, [r4, #16]
 8006102:	3b01      	subs	r3, #1
 8006104:	6123      	str	r3, [r4, #16]
 8006106:	e7f0      	b.n	80060ea <_scanf_float+0x2b6>
 8006108:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800610c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006110:	463a      	mov	r2, r7
 8006112:	4640      	mov	r0, r8
 8006114:	4798      	blx	r3
 8006116:	6923      	ldr	r3, [r4, #16]
 8006118:	3b01      	subs	r3, #1
 800611a:	6123      	str	r3, [r4, #16]
 800611c:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8006120:	fa5f fa8a 	uxtb.w	sl, sl
 8006124:	f1ba 0f02 	cmp.w	sl, #2
 8006128:	d1ee      	bne.n	8006108 <_scanf_float+0x2d4>
 800612a:	3d03      	subs	r5, #3
 800612c:	b2ed      	uxtb	r5, r5
 800612e:	1b76      	subs	r6, r6, r5
 8006130:	6823      	ldr	r3, [r4, #0]
 8006132:	05da      	lsls	r2, r3, #23
 8006134:	d530      	bpl.n	8006198 <_scanf_float+0x364>
 8006136:	055b      	lsls	r3, r3, #21
 8006138:	d511      	bpl.n	800615e <_scanf_float+0x32a>
 800613a:	9b01      	ldr	r3, [sp, #4]
 800613c:	429e      	cmp	r6, r3
 800613e:	f67f aebc 	bls.w	8005eba <_scanf_float+0x86>
 8006142:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006146:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800614a:	463a      	mov	r2, r7
 800614c:	4640      	mov	r0, r8
 800614e:	4798      	blx	r3
 8006150:	6923      	ldr	r3, [r4, #16]
 8006152:	3b01      	subs	r3, #1
 8006154:	6123      	str	r3, [r4, #16]
 8006156:	e7f0      	b.n	800613a <_scanf_float+0x306>
 8006158:	46aa      	mov	sl, r5
 800615a:	46b3      	mov	fp, r6
 800615c:	e7de      	b.n	800611c <_scanf_float+0x2e8>
 800615e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006162:	6923      	ldr	r3, [r4, #16]
 8006164:	2965      	cmp	r1, #101	@ 0x65
 8006166:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800616a:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800616e:	6123      	str	r3, [r4, #16]
 8006170:	d00c      	beq.n	800618c <_scanf_float+0x358>
 8006172:	2945      	cmp	r1, #69	@ 0x45
 8006174:	d00a      	beq.n	800618c <_scanf_float+0x358>
 8006176:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800617a:	463a      	mov	r2, r7
 800617c:	4640      	mov	r0, r8
 800617e:	4798      	blx	r3
 8006180:	6923      	ldr	r3, [r4, #16]
 8006182:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006186:	3b01      	subs	r3, #1
 8006188:	1eb5      	subs	r5, r6, #2
 800618a:	6123      	str	r3, [r4, #16]
 800618c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006190:	463a      	mov	r2, r7
 8006192:	4640      	mov	r0, r8
 8006194:	4798      	blx	r3
 8006196:	462e      	mov	r6, r5
 8006198:	6822      	ldr	r2, [r4, #0]
 800619a:	f012 0210 	ands.w	r2, r2, #16
 800619e:	d001      	beq.n	80061a4 <_scanf_float+0x370>
 80061a0:	2000      	movs	r0, #0
 80061a2:	e68b      	b.n	8005ebc <_scanf_float+0x88>
 80061a4:	7032      	strb	r2, [r6, #0]
 80061a6:	6823      	ldr	r3, [r4, #0]
 80061a8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80061ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061b0:	d11c      	bne.n	80061ec <_scanf_float+0x3b8>
 80061b2:	9b02      	ldr	r3, [sp, #8]
 80061b4:	454b      	cmp	r3, r9
 80061b6:	eba3 0209 	sub.w	r2, r3, r9
 80061ba:	d123      	bne.n	8006204 <_scanf_float+0x3d0>
 80061bc:	9901      	ldr	r1, [sp, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	4640      	mov	r0, r8
 80061c2:	f002 fd15 	bl	8008bf0 <_strtod_r>
 80061c6:	9b03      	ldr	r3, [sp, #12]
 80061c8:	6821      	ldr	r1, [r4, #0]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f011 0f02 	tst.w	r1, #2
 80061d0:	ec57 6b10 	vmov	r6, r7, d0
 80061d4:	f103 0204 	add.w	r2, r3, #4
 80061d8:	d01f      	beq.n	800621a <_scanf_float+0x3e6>
 80061da:	9903      	ldr	r1, [sp, #12]
 80061dc:	600a      	str	r2, [r1, #0]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	e9c3 6700 	strd	r6, r7, [r3]
 80061e4:	68e3      	ldr	r3, [r4, #12]
 80061e6:	3301      	adds	r3, #1
 80061e8:	60e3      	str	r3, [r4, #12]
 80061ea:	e7d9      	b.n	80061a0 <_scanf_float+0x36c>
 80061ec:	9b04      	ldr	r3, [sp, #16]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d0e4      	beq.n	80061bc <_scanf_float+0x388>
 80061f2:	9905      	ldr	r1, [sp, #20]
 80061f4:	230a      	movs	r3, #10
 80061f6:	3101      	adds	r1, #1
 80061f8:	4640      	mov	r0, r8
 80061fa:	f002 fd79 	bl	8008cf0 <_strtol_r>
 80061fe:	9b04      	ldr	r3, [sp, #16]
 8006200:	9e05      	ldr	r6, [sp, #20]
 8006202:	1ac2      	subs	r2, r0, r3
 8006204:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006208:	429e      	cmp	r6, r3
 800620a:	bf28      	it	cs
 800620c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006210:	4910      	ldr	r1, [pc, #64]	@ (8006254 <_scanf_float+0x420>)
 8006212:	4630      	mov	r0, r6
 8006214:	f000 f954 	bl	80064c0 <siprintf>
 8006218:	e7d0      	b.n	80061bc <_scanf_float+0x388>
 800621a:	f011 0f04 	tst.w	r1, #4
 800621e:	9903      	ldr	r1, [sp, #12]
 8006220:	600a      	str	r2, [r1, #0]
 8006222:	d1dc      	bne.n	80061de <_scanf_float+0x3aa>
 8006224:	681d      	ldr	r5, [r3, #0]
 8006226:	4632      	mov	r2, r6
 8006228:	463b      	mov	r3, r7
 800622a:	4630      	mov	r0, r6
 800622c:	4639      	mov	r1, r7
 800622e:	f7fa fca5 	bl	8000b7c <__aeabi_dcmpun>
 8006232:	b128      	cbz	r0, 8006240 <_scanf_float+0x40c>
 8006234:	4808      	ldr	r0, [pc, #32]	@ (8006258 <_scanf_float+0x424>)
 8006236:	f000 fad5 	bl	80067e4 <nanf>
 800623a:	ed85 0a00 	vstr	s0, [r5]
 800623e:	e7d1      	b.n	80061e4 <_scanf_float+0x3b0>
 8006240:	4630      	mov	r0, r6
 8006242:	4639      	mov	r1, r7
 8006244:	f7fa fcf8 	bl	8000c38 <__aeabi_d2f>
 8006248:	6028      	str	r0, [r5, #0]
 800624a:	e7cb      	b.n	80061e4 <_scanf_float+0x3b0>
 800624c:	f04f 0900 	mov.w	r9, #0
 8006250:	e629      	b.n	8005ea6 <_scanf_float+0x72>
 8006252:	bf00      	nop
 8006254:	0800a27c 	.word	0x0800a27c
 8006258:	0800a615 	.word	0x0800a615

0800625c <std>:
 800625c:	2300      	movs	r3, #0
 800625e:	b510      	push	{r4, lr}
 8006260:	4604      	mov	r4, r0
 8006262:	e9c0 3300 	strd	r3, r3, [r0]
 8006266:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800626a:	6083      	str	r3, [r0, #8]
 800626c:	8181      	strh	r1, [r0, #12]
 800626e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006270:	81c2      	strh	r2, [r0, #14]
 8006272:	6183      	str	r3, [r0, #24]
 8006274:	4619      	mov	r1, r3
 8006276:	2208      	movs	r2, #8
 8006278:	305c      	adds	r0, #92	@ 0x5c
 800627a:	f000 fa33 	bl	80066e4 <memset>
 800627e:	4b0d      	ldr	r3, [pc, #52]	@ (80062b4 <std+0x58>)
 8006280:	6263      	str	r3, [r4, #36]	@ 0x24
 8006282:	4b0d      	ldr	r3, [pc, #52]	@ (80062b8 <std+0x5c>)
 8006284:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006286:	4b0d      	ldr	r3, [pc, #52]	@ (80062bc <std+0x60>)
 8006288:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800628a:	4b0d      	ldr	r3, [pc, #52]	@ (80062c0 <std+0x64>)
 800628c:	6323      	str	r3, [r4, #48]	@ 0x30
 800628e:	4b0d      	ldr	r3, [pc, #52]	@ (80062c4 <std+0x68>)
 8006290:	6224      	str	r4, [r4, #32]
 8006292:	429c      	cmp	r4, r3
 8006294:	d006      	beq.n	80062a4 <std+0x48>
 8006296:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800629a:	4294      	cmp	r4, r2
 800629c:	d002      	beq.n	80062a4 <std+0x48>
 800629e:	33d0      	adds	r3, #208	@ 0xd0
 80062a0:	429c      	cmp	r4, r3
 80062a2:	d105      	bne.n	80062b0 <std+0x54>
 80062a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80062a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062ac:	f000 ba96 	b.w	80067dc <__retarget_lock_init_recursive>
 80062b0:	bd10      	pop	{r4, pc}
 80062b2:	bf00      	nop
 80062b4:	08006501 	.word	0x08006501
 80062b8:	08006523 	.word	0x08006523
 80062bc:	0800655b 	.word	0x0800655b
 80062c0:	0800657f 	.word	0x0800657f
 80062c4:	20000b24 	.word	0x20000b24

080062c8 <stdio_exit_handler>:
 80062c8:	4a02      	ldr	r2, [pc, #8]	@ (80062d4 <stdio_exit_handler+0xc>)
 80062ca:	4903      	ldr	r1, [pc, #12]	@ (80062d8 <stdio_exit_handler+0x10>)
 80062cc:	4803      	ldr	r0, [pc, #12]	@ (80062dc <stdio_exit_handler+0x14>)
 80062ce:	f000 b869 	b.w	80063a4 <_fwalk_sglue>
 80062d2:	bf00      	nop
 80062d4:	2000000c 	.word	0x2000000c
 80062d8:	08009331 	.word	0x08009331
 80062dc:	2000001c 	.word	0x2000001c

080062e0 <cleanup_stdio>:
 80062e0:	6841      	ldr	r1, [r0, #4]
 80062e2:	4b0c      	ldr	r3, [pc, #48]	@ (8006314 <cleanup_stdio+0x34>)
 80062e4:	4299      	cmp	r1, r3
 80062e6:	b510      	push	{r4, lr}
 80062e8:	4604      	mov	r4, r0
 80062ea:	d001      	beq.n	80062f0 <cleanup_stdio+0x10>
 80062ec:	f003 f820 	bl	8009330 <_fflush_r>
 80062f0:	68a1      	ldr	r1, [r4, #8]
 80062f2:	4b09      	ldr	r3, [pc, #36]	@ (8006318 <cleanup_stdio+0x38>)
 80062f4:	4299      	cmp	r1, r3
 80062f6:	d002      	beq.n	80062fe <cleanup_stdio+0x1e>
 80062f8:	4620      	mov	r0, r4
 80062fa:	f003 f819 	bl	8009330 <_fflush_r>
 80062fe:	68e1      	ldr	r1, [r4, #12]
 8006300:	4b06      	ldr	r3, [pc, #24]	@ (800631c <cleanup_stdio+0x3c>)
 8006302:	4299      	cmp	r1, r3
 8006304:	d004      	beq.n	8006310 <cleanup_stdio+0x30>
 8006306:	4620      	mov	r0, r4
 8006308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800630c:	f003 b810 	b.w	8009330 <_fflush_r>
 8006310:	bd10      	pop	{r4, pc}
 8006312:	bf00      	nop
 8006314:	20000b24 	.word	0x20000b24
 8006318:	20000b8c 	.word	0x20000b8c
 800631c:	20000bf4 	.word	0x20000bf4

08006320 <global_stdio_init.part.0>:
 8006320:	b510      	push	{r4, lr}
 8006322:	4b0b      	ldr	r3, [pc, #44]	@ (8006350 <global_stdio_init.part.0+0x30>)
 8006324:	4c0b      	ldr	r4, [pc, #44]	@ (8006354 <global_stdio_init.part.0+0x34>)
 8006326:	4a0c      	ldr	r2, [pc, #48]	@ (8006358 <global_stdio_init.part.0+0x38>)
 8006328:	601a      	str	r2, [r3, #0]
 800632a:	4620      	mov	r0, r4
 800632c:	2200      	movs	r2, #0
 800632e:	2104      	movs	r1, #4
 8006330:	f7ff ff94 	bl	800625c <std>
 8006334:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006338:	2201      	movs	r2, #1
 800633a:	2109      	movs	r1, #9
 800633c:	f7ff ff8e 	bl	800625c <std>
 8006340:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006344:	2202      	movs	r2, #2
 8006346:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800634a:	2112      	movs	r1, #18
 800634c:	f7ff bf86 	b.w	800625c <std>
 8006350:	20000c5c 	.word	0x20000c5c
 8006354:	20000b24 	.word	0x20000b24
 8006358:	080062c9 	.word	0x080062c9

0800635c <__sfp_lock_acquire>:
 800635c:	4801      	ldr	r0, [pc, #4]	@ (8006364 <__sfp_lock_acquire+0x8>)
 800635e:	f000 ba3e 	b.w	80067de <__retarget_lock_acquire_recursive>
 8006362:	bf00      	nop
 8006364:	20000c65 	.word	0x20000c65

08006368 <__sfp_lock_release>:
 8006368:	4801      	ldr	r0, [pc, #4]	@ (8006370 <__sfp_lock_release+0x8>)
 800636a:	f000 ba39 	b.w	80067e0 <__retarget_lock_release_recursive>
 800636e:	bf00      	nop
 8006370:	20000c65 	.word	0x20000c65

08006374 <__sinit>:
 8006374:	b510      	push	{r4, lr}
 8006376:	4604      	mov	r4, r0
 8006378:	f7ff fff0 	bl	800635c <__sfp_lock_acquire>
 800637c:	6a23      	ldr	r3, [r4, #32]
 800637e:	b11b      	cbz	r3, 8006388 <__sinit+0x14>
 8006380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006384:	f7ff bff0 	b.w	8006368 <__sfp_lock_release>
 8006388:	4b04      	ldr	r3, [pc, #16]	@ (800639c <__sinit+0x28>)
 800638a:	6223      	str	r3, [r4, #32]
 800638c:	4b04      	ldr	r3, [pc, #16]	@ (80063a0 <__sinit+0x2c>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d1f5      	bne.n	8006380 <__sinit+0xc>
 8006394:	f7ff ffc4 	bl	8006320 <global_stdio_init.part.0>
 8006398:	e7f2      	b.n	8006380 <__sinit+0xc>
 800639a:	bf00      	nop
 800639c:	080062e1 	.word	0x080062e1
 80063a0:	20000c5c 	.word	0x20000c5c

080063a4 <_fwalk_sglue>:
 80063a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063a8:	4607      	mov	r7, r0
 80063aa:	4688      	mov	r8, r1
 80063ac:	4614      	mov	r4, r2
 80063ae:	2600      	movs	r6, #0
 80063b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80063b4:	f1b9 0901 	subs.w	r9, r9, #1
 80063b8:	d505      	bpl.n	80063c6 <_fwalk_sglue+0x22>
 80063ba:	6824      	ldr	r4, [r4, #0]
 80063bc:	2c00      	cmp	r4, #0
 80063be:	d1f7      	bne.n	80063b0 <_fwalk_sglue+0xc>
 80063c0:	4630      	mov	r0, r6
 80063c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063c6:	89ab      	ldrh	r3, [r5, #12]
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d907      	bls.n	80063dc <_fwalk_sglue+0x38>
 80063cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80063d0:	3301      	adds	r3, #1
 80063d2:	d003      	beq.n	80063dc <_fwalk_sglue+0x38>
 80063d4:	4629      	mov	r1, r5
 80063d6:	4638      	mov	r0, r7
 80063d8:	47c0      	blx	r8
 80063da:	4306      	orrs	r6, r0
 80063dc:	3568      	adds	r5, #104	@ 0x68
 80063de:	e7e9      	b.n	80063b4 <_fwalk_sglue+0x10>

080063e0 <iprintf>:
 80063e0:	b40f      	push	{r0, r1, r2, r3}
 80063e2:	b507      	push	{r0, r1, r2, lr}
 80063e4:	4906      	ldr	r1, [pc, #24]	@ (8006400 <iprintf+0x20>)
 80063e6:	ab04      	add	r3, sp, #16
 80063e8:	6808      	ldr	r0, [r1, #0]
 80063ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80063ee:	6881      	ldr	r1, [r0, #8]
 80063f0:	9301      	str	r3, [sp, #4]
 80063f2:	f002 fe01 	bl	8008ff8 <_vfiprintf_r>
 80063f6:	b003      	add	sp, #12
 80063f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80063fc:	b004      	add	sp, #16
 80063fe:	4770      	bx	lr
 8006400:	20000018 	.word	0x20000018

08006404 <_puts_r>:
 8006404:	6a03      	ldr	r3, [r0, #32]
 8006406:	b570      	push	{r4, r5, r6, lr}
 8006408:	6884      	ldr	r4, [r0, #8]
 800640a:	4605      	mov	r5, r0
 800640c:	460e      	mov	r6, r1
 800640e:	b90b      	cbnz	r3, 8006414 <_puts_r+0x10>
 8006410:	f7ff ffb0 	bl	8006374 <__sinit>
 8006414:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006416:	07db      	lsls	r3, r3, #31
 8006418:	d405      	bmi.n	8006426 <_puts_r+0x22>
 800641a:	89a3      	ldrh	r3, [r4, #12]
 800641c:	0598      	lsls	r0, r3, #22
 800641e:	d402      	bmi.n	8006426 <_puts_r+0x22>
 8006420:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006422:	f000 f9dc 	bl	80067de <__retarget_lock_acquire_recursive>
 8006426:	89a3      	ldrh	r3, [r4, #12]
 8006428:	0719      	lsls	r1, r3, #28
 800642a:	d502      	bpl.n	8006432 <_puts_r+0x2e>
 800642c:	6923      	ldr	r3, [r4, #16]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d135      	bne.n	800649e <_puts_r+0x9a>
 8006432:	4621      	mov	r1, r4
 8006434:	4628      	mov	r0, r5
 8006436:	f000 f8e5 	bl	8006604 <__swsetup_r>
 800643a:	b380      	cbz	r0, 800649e <_puts_r+0x9a>
 800643c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8006440:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006442:	07da      	lsls	r2, r3, #31
 8006444:	d405      	bmi.n	8006452 <_puts_r+0x4e>
 8006446:	89a3      	ldrh	r3, [r4, #12]
 8006448:	059b      	lsls	r3, r3, #22
 800644a:	d402      	bmi.n	8006452 <_puts_r+0x4e>
 800644c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800644e:	f000 f9c7 	bl	80067e0 <__retarget_lock_release_recursive>
 8006452:	4628      	mov	r0, r5
 8006454:	bd70      	pop	{r4, r5, r6, pc}
 8006456:	2b00      	cmp	r3, #0
 8006458:	da04      	bge.n	8006464 <_puts_r+0x60>
 800645a:	69a2      	ldr	r2, [r4, #24]
 800645c:	429a      	cmp	r2, r3
 800645e:	dc17      	bgt.n	8006490 <_puts_r+0x8c>
 8006460:	290a      	cmp	r1, #10
 8006462:	d015      	beq.n	8006490 <_puts_r+0x8c>
 8006464:	6823      	ldr	r3, [r4, #0]
 8006466:	1c5a      	adds	r2, r3, #1
 8006468:	6022      	str	r2, [r4, #0]
 800646a:	7019      	strb	r1, [r3, #0]
 800646c:	68a3      	ldr	r3, [r4, #8]
 800646e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006472:	3b01      	subs	r3, #1
 8006474:	60a3      	str	r3, [r4, #8]
 8006476:	2900      	cmp	r1, #0
 8006478:	d1ed      	bne.n	8006456 <_puts_r+0x52>
 800647a:	2b00      	cmp	r3, #0
 800647c:	da11      	bge.n	80064a2 <_puts_r+0x9e>
 800647e:	4622      	mov	r2, r4
 8006480:	210a      	movs	r1, #10
 8006482:	4628      	mov	r0, r5
 8006484:	f000 f87f 	bl	8006586 <__swbuf_r>
 8006488:	3001      	adds	r0, #1
 800648a:	d0d7      	beq.n	800643c <_puts_r+0x38>
 800648c:	250a      	movs	r5, #10
 800648e:	e7d7      	b.n	8006440 <_puts_r+0x3c>
 8006490:	4622      	mov	r2, r4
 8006492:	4628      	mov	r0, r5
 8006494:	f000 f877 	bl	8006586 <__swbuf_r>
 8006498:	3001      	adds	r0, #1
 800649a:	d1e7      	bne.n	800646c <_puts_r+0x68>
 800649c:	e7ce      	b.n	800643c <_puts_r+0x38>
 800649e:	3e01      	subs	r6, #1
 80064a0:	e7e4      	b.n	800646c <_puts_r+0x68>
 80064a2:	6823      	ldr	r3, [r4, #0]
 80064a4:	1c5a      	adds	r2, r3, #1
 80064a6:	6022      	str	r2, [r4, #0]
 80064a8:	220a      	movs	r2, #10
 80064aa:	701a      	strb	r2, [r3, #0]
 80064ac:	e7ee      	b.n	800648c <_puts_r+0x88>
	...

080064b0 <puts>:
 80064b0:	4b02      	ldr	r3, [pc, #8]	@ (80064bc <puts+0xc>)
 80064b2:	4601      	mov	r1, r0
 80064b4:	6818      	ldr	r0, [r3, #0]
 80064b6:	f7ff bfa5 	b.w	8006404 <_puts_r>
 80064ba:	bf00      	nop
 80064bc:	20000018 	.word	0x20000018

080064c0 <siprintf>:
 80064c0:	b40e      	push	{r1, r2, r3}
 80064c2:	b500      	push	{lr}
 80064c4:	b09c      	sub	sp, #112	@ 0x70
 80064c6:	ab1d      	add	r3, sp, #116	@ 0x74
 80064c8:	9002      	str	r0, [sp, #8]
 80064ca:	9006      	str	r0, [sp, #24]
 80064cc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80064d0:	4809      	ldr	r0, [pc, #36]	@ (80064f8 <siprintf+0x38>)
 80064d2:	9107      	str	r1, [sp, #28]
 80064d4:	9104      	str	r1, [sp, #16]
 80064d6:	4909      	ldr	r1, [pc, #36]	@ (80064fc <siprintf+0x3c>)
 80064d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80064dc:	9105      	str	r1, [sp, #20]
 80064de:	6800      	ldr	r0, [r0, #0]
 80064e0:	9301      	str	r3, [sp, #4]
 80064e2:	a902      	add	r1, sp, #8
 80064e4:	f002 fc62 	bl	8008dac <_svfiprintf_r>
 80064e8:	9b02      	ldr	r3, [sp, #8]
 80064ea:	2200      	movs	r2, #0
 80064ec:	701a      	strb	r2, [r3, #0]
 80064ee:	b01c      	add	sp, #112	@ 0x70
 80064f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80064f4:	b003      	add	sp, #12
 80064f6:	4770      	bx	lr
 80064f8:	20000018 	.word	0x20000018
 80064fc:	ffff0208 	.word	0xffff0208

08006500 <__sread>:
 8006500:	b510      	push	{r4, lr}
 8006502:	460c      	mov	r4, r1
 8006504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006508:	f000 f91a 	bl	8006740 <_read_r>
 800650c:	2800      	cmp	r0, #0
 800650e:	bfab      	itete	ge
 8006510:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006512:	89a3      	ldrhlt	r3, [r4, #12]
 8006514:	181b      	addge	r3, r3, r0
 8006516:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800651a:	bfac      	ite	ge
 800651c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800651e:	81a3      	strhlt	r3, [r4, #12]
 8006520:	bd10      	pop	{r4, pc}

08006522 <__swrite>:
 8006522:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006526:	461f      	mov	r7, r3
 8006528:	898b      	ldrh	r3, [r1, #12]
 800652a:	05db      	lsls	r3, r3, #23
 800652c:	4605      	mov	r5, r0
 800652e:	460c      	mov	r4, r1
 8006530:	4616      	mov	r6, r2
 8006532:	d505      	bpl.n	8006540 <__swrite+0x1e>
 8006534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006538:	2302      	movs	r3, #2
 800653a:	2200      	movs	r2, #0
 800653c:	f000 f8ee 	bl	800671c <_lseek_r>
 8006540:	89a3      	ldrh	r3, [r4, #12]
 8006542:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006546:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800654a:	81a3      	strh	r3, [r4, #12]
 800654c:	4632      	mov	r2, r6
 800654e:	463b      	mov	r3, r7
 8006550:	4628      	mov	r0, r5
 8006552:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006556:	f000 b905 	b.w	8006764 <_write_r>

0800655a <__sseek>:
 800655a:	b510      	push	{r4, lr}
 800655c:	460c      	mov	r4, r1
 800655e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006562:	f000 f8db 	bl	800671c <_lseek_r>
 8006566:	1c43      	adds	r3, r0, #1
 8006568:	89a3      	ldrh	r3, [r4, #12]
 800656a:	bf15      	itete	ne
 800656c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800656e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006572:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006576:	81a3      	strheq	r3, [r4, #12]
 8006578:	bf18      	it	ne
 800657a:	81a3      	strhne	r3, [r4, #12]
 800657c:	bd10      	pop	{r4, pc}

0800657e <__sclose>:
 800657e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006582:	f000 b8bb 	b.w	80066fc <_close_r>

08006586 <__swbuf_r>:
 8006586:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006588:	460e      	mov	r6, r1
 800658a:	4614      	mov	r4, r2
 800658c:	4605      	mov	r5, r0
 800658e:	b118      	cbz	r0, 8006598 <__swbuf_r+0x12>
 8006590:	6a03      	ldr	r3, [r0, #32]
 8006592:	b90b      	cbnz	r3, 8006598 <__swbuf_r+0x12>
 8006594:	f7ff feee 	bl	8006374 <__sinit>
 8006598:	69a3      	ldr	r3, [r4, #24]
 800659a:	60a3      	str	r3, [r4, #8]
 800659c:	89a3      	ldrh	r3, [r4, #12]
 800659e:	071a      	lsls	r2, r3, #28
 80065a0:	d501      	bpl.n	80065a6 <__swbuf_r+0x20>
 80065a2:	6923      	ldr	r3, [r4, #16]
 80065a4:	b943      	cbnz	r3, 80065b8 <__swbuf_r+0x32>
 80065a6:	4621      	mov	r1, r4
 80065a8:	4628      	mov	r0, r5
 80065aa:	f000 f82b 	bl	8006604 <__swsetup_r>
 80065ae:	b118      	cbz	r0, 80065b8 <__swbuf_r+0x32>
 80065b0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80065b4:	4638      	mov	r0, r7
 80065b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065b8:	6823      	ldr	r3, [r4, #0]
 80065ba:	6922      	ldr	r2, [r4, #16]
 80065bc:	1a98      	subs	r0, r3, r2
 80065be:	6963      	ldr	r3, [r4, #20]
 80065c0:	b2f6      	uxtb	r6, r6
 80065c2:	4283      	cmp	r3, r0
 80065c4:	4637      	mov	r7, r6
 80065c6:	dc05      	bgt.n	80065d4 <__swbuf_r+0x4e>
 80065c8:	4621      	mov	r1, r4
 80065ca:	4628      	mov	r0, r5
 80065cc:	f002 feb0 	bl	8009330 <_fflush_r>
 80065d0:	2800      	cmp	r0, #0
 80065d2:	d1ed      	bne.n	80065b0 <__swbuf_r+0x2a>
 80065d4:	68a3      	ldr	r3, [r4, #8]
 80065d6:	3b01      	subs	r3, #1
 80065d8:	60a3      	str	r3, [r4, #8]
 80065da:	6823      	ldr	r3, [r4, #0]
 80065dc:	1c5a      	adds	r2, r3, #1
 80065de:	6022      	str	r2, [r4, #0]
 80065e0:	701e      	strb	r6, [r3, #0]
 80065e2:	6962      	ldr	r2, [r4, #20]
 80065e4:	1c43      	adds	r3, r0, #1
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d004      	beq.n	80065f4 <__swbuf_r+0x6e>
 80065ea:	89a3      	ldrh	r3, [r4, #12]
 80065ec:	07db      	lsls	r3, r3, #31
 80065ee:	d5e1      	bpl.n	80065b4 <__swbuf_r+0x2e>
 80065f0:	2e0a      	cmp	r6, #10
 80065f2:	d1df      	bne.n	80065b4 <__swbuf_r+0x2e>
 80065f4:	4621      	mov	r1, r4
 80065f6:	4628      	mov	r0, r5
 80065f8:	f002 fe9a 	bl	8009330 <_fflush_r>
 80065fc:	2800      	cmp	r0, #0
 80065fe:	d0d9      	beq.n	80065b4 <__swbuf_r+0x2e>
 8006600:	e7d6      	b.n	80065b0 <__swbuf_r+0x2a>
	...

08006604 <__swsetup_r>:
 8006604:	b538      	push	{r3, r4, r5, lr}
 8006606:	4b29      	ldr	r3, [pc, #164]	@ (80066ac <__swsetup_r+0xa8>)
 8006608:	4605      	mov	r5, r0
 800660a:	6818      	ldr	r0, [r3, #0]
 800660c:	460c      	mov	r4, r1
 800660e:	b118      	cbz	r0, 8006618 <__swsetup_r+0x14>
 8006610:	6a03      	ldr	r3, [r0, #32]
 8006612:	b90b      	cbnz	r3, 8006618 <__swsetup_r+0x14>
 8006614:	f7ff feae 	bl	8006374 <__sinit>
 8006618:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800661c:	0719      	lsls	r1, r3, #28
 800661e:	d422      	bmi.n	8006666 <__swsetup_r+0x62>
 8006620:	06da      	lsls	r2, r3, #27
 8006622:	d407      	bmi.n	8006634 <__swsetup_r+0x30>
 8006624:	2209      	movs	r2, #9
 8006626:	602a      	str	r2, [r5, #0]
 8006628:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800662c:	81a3      	strh	r3, [r4, #12]
 800662e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006632:	e033      	b.n	800669c <__swsetup_r+0x98>
 8006634:	0758      	lsls	r0, r3, #29
 8006636:	d512      	bpl.n	800665e <__swsetup_r+0x5a>
 8006638:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800663a:	b141      	cbz	r1, 800664e <__swsetup_r+0x4a>
 800663c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006640:	4299      	cmp	r1, r3
 8006642:	d002      	beq.n	800664a <__swsetup_r+0x46>
 8006644:	4628      	mov	r0, r5
 8006646:	f000 ff1f 	bl	8007488 <_free_r>
 800664a:	2300      	movs	r3, #0
 800664c:	6363      	str	r3, [r4, #52]	@ 0x34
 800664e:	89a3      	ldrh	r3, [r4, #12]
 8006650:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006654:	81a3      	strh	r3, [r4, #12]
 8006656:	2300      	movs	r3, #0
 8006658:	6063      	str	r3, [r4, #4]
 800665a:	6923      	ldr	r3, [r4, #16]
 800665c:	6023      	str	r3, [r4, #0]
 800665e:	89a3      	ldrh	r3, [r4, #12]
 8006660:	f043 0308 	orr.w	r3, r3, #8
 8006664:	81a3      	strh	r3, [r4, #12]
 8006666:	6923      	ldr	r3, [r4, #16]
 8006668:	b94b      	cbnz	r3, 800667e <__swsetup_r+0x7a>
 800666a:	89a3      	ldrh	r3, [r4, #12]
 800666c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006670:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006674:	d003      	beq.n	800667e <__swsetup_r+0x7a>
 8006676:	4621      	mov	r1, r4
 8006678:	4628      	mov	r0, r5
 800667a:	f002 fea7 	bl	80093cc <__smakebuf_r>
 800667e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006682:	f013 0201 	ands.w	r2, r3, #1
 8006686:	d00a      	beq.n	800669e <__swsetup_r+0x9a>
 8006688:	2200      	movs	r2, #0
 800668a:	60a2      	str	r2, [r4, #8]
 800668c:	6962      	ldr	r2, [r4, #20]
 800668e:	4252      	negs	r2, r2
 8006690:	61a2      	str	r2, [r4, #24]
 8006692:	6922      	ldr	r2, [r4, #16]
 8006694:	b942      	cbnz	r2, 80066a8 <__swsetup_r+0xa4>
 8006696:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800669a:	d1c5      	bne.n	8006628 <__swsetup_r+0x24>
 800669c:	bd38      	pop	{r3, r4, r5, pc}
 800669e:	0799      	lsls	r1, r3, #30
 80066a0:	bf58      	it	pl
 80066a2:	6962      	ldrpl	r2, [r4, #20]
 80066a4:	60a2      	str	r2, [r4, #8]
 80066a6:	e7f4      	b.n	8006692 <__swsetup_r+0x8e>
 80066a8:	2000      	movs	r0, #0
 80066aa:	e7f7      	b.n	800669c <__swsetup_r+0x98>
 80066ac:	20000018 	.word	0x20000018

080066b0 <memmove>:
 80066b0:	4288      	cmp	r0, r1
 80066b2:	b510      	push	{r4, lr}
 80066b4:	eb01 0402 	add.w	r4, r1, r2
 80066b8:	d902      	bls.n	80066c0 <memmove+0x10>
 80066ba:	4284      	cmp	r4, r0
 80066bc:	4623      	mov	r3, r4
 80066be:	d807      	bhi.n	80066d0 <memmove+0x20>
 80066c0:	1e43      	subs	r3, r0, #1
 80066c2:	42a1      	cmp	r1, r4
 80066c4:	d008      	beq.n	80066d8 <memmove+0x28>
 80066c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80066ce:	e7f8      	b.n	80066c2 <memmove+0x12>
 80066d0:	4402      	add	r2, r0
 80066d2:	4601      	mov	r1, r0
 80066d4:	428a      	cmp	r2, r1
 80066d6:	d100      	bne.n	80066da <memmove+0x2a>
 80066d8:	bd10      	pop	{r4, pc}
 80066da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80066de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80066e2:	e7f7      	b.n	80066d4 <memmove+0x24>

080066e4 <memset>:
 80066e4:	4402      	add	r2, r0
 80066e6:	4603      	mov	r3, r0
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d100      	bne.n	80066ee <memset+0xa>
 80066ec:	4770      	bx	lr
 80066ee:	f803 1b01 	strb.w	r1, [r3], #1
 80066f2:	e7f9      	b.n	80066e8 <memset+0x4>

080066f4 <_localeconv_r>:
 80066f4:	4800      	ldr	r0, [pc, #0]	@ (80066f8 <_localeconv_r+0x4>)
 80066f6:	4770      	bx	lr
 80066f8:	20000158 	.word	0x20000158

080066fc <_close_r>:
 80066fc:	b538      	push	{r3, r4, r5, lr}
 80066fe:	4d06      	ldr	r5, [pc, #24]	@ (8006718 <_close_r+0x1c>)
 8006700:	2300      	movs	r3, #0
 8006702:	4604      	mov	r4, r0
 8006704:	4608      	mov	r0, r1
 8006706:	602b      	str	r3, [r5, #0]
 8006708:	f7fb f894 	bl	8001834 <_close>
 800670c:	1c43      	adds	r3, r0, #1
 800670e:	d102      	bne.n	8006716 <_close_r+0x1a>
 8006710:	682b      	ldr	r3, [r5, #0]
 8006712:	b103      	cbz	r3, 8006716 <_close_r+0x1a>
 8006714:	6023      	str	r3, [r4, #0]
 8006716:	bd38      	pop	{r3, r4, r5, pc}
 8006718:	20000c60 	.word	0x20000c60

0800671c <_lseek_r>:
 800671c:	b538      	push	{r3, r4, r5, lr}
 800671e:	4d07      	ldr	r5, [pc, #28]	@ (800673c <_lseek_r+0x20>)
 8006720:	4604      	mov	r4, r0
 8006722:	4608      	mov	r0, r1
 8006724:	4611      	mov	r1, r2
 8006726:	2200      	movs	r2, #0
 8006728:	602a      	str	r2, [r5, #0]
 800672a:	461a      	mov	r2, r3
 800672c:	f7fb f8a9 	bl	8001882 <_lseek>
 8006730:	1c43      	adds	r3, r0, #1
 8006732:	d102      	bne.n	800673a <_lseek_r+0x1e>
 8006734:	682b      	ldr	r3, [r5, #0]
 8006736:	b103      	cbz	r3, 800673a <_lseek_r+0x1e>
 8006738:	6023      	str	r3, [r4, #0]
 800673a:	bd38      	pop	{r3, r4, r5, pc}
 800673c:	20000c60 	.word	0x20000c60

08006740 <_read_r>:
 8006740:	b538      	push	{r3, r4, r5, lr}
 8006742:	4d07      	ldr	r5, [pc, #28]	@ (8006760 <_read_r+0x20>)
 8006744:	4604      	mov	r4, r0
 8006746:	4608      	mov	r0, r1
 8006748:	4611      	mov	r1, r2
 800674a:	2200      	movs	r2, #0
 800674c:	602a      	str	r2, [r5, #0]
 800674e:	461a      	mov	r2, r3
 8006750:	f7fb f837 	bl	80017c2 <_read>
 8006754:	1c43      	adds	r3, r0, #1
 8006756:	d102      	bne.n	800675e <_read_r+0x1e>
 8006758:	682b      	ldr	r3, [r5, #0]
 800675a:	b103      	cbz	r3, 800675e <_read_r+0x1e>
 800675c:	6023      	str	r3, [r4, #0]
 800675e:	bd38      	pop	{r3, r4, r5, pc}
 8006760:	20000c60 	.word	0x20000c60

08006764 <_write_r>:
 8006764:	b538      	push	{r3, r4, r5, lr}
 8006766:	4d07      	ldr	r5, [pc, #28]	@ (8006784 <_write_r+0x20>)
 8006768:	4604      	mov	r4, r0
 800676a:	4608      	mov	r0, r1
 800676c:	4611      	mov	r1, r2
 800676e:	2200      	movs	r2, #0
 8006770:	602a      	str	r2, [r5, #0]
 8006772:	461a      	mov	r2, r3
 8006774:	f7fb f842 	bl	80017fc <_write>
 8006778:	1c43      	adds	r3, r0, #1
 800677a:	d102      	bne.n	8006782 <_write_r+0x1e>
 800677c:	682b      	ldr	r3, [r5, #0]
 800677e:	b103      	cbz	r3, 8006782 <_write_r+0x1e>
 8006780:	6023      	str	r3, [r4, #0]
 8006782:	bd38      	pop	{r3, r4, r5, pc}
 8006784:	20000c60 	.word	0x20000c60

08006788 <__errno>:
 8006788:	4b01      	ldr	r3, [pc, #4]	@ (8006790 <__errno+0x8>)
 800678a:	6818      	ldr	r0, [r3, #0]
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop
 8006790:	20000018 	.word	0x20000018

08006794 <__libc_init_array>:
 8006794:	b570      	push	{r4, r5, r6, lr}
 8006796:	4d0d      	ldr	r5, [pc, #52]	@ (80067cc <__libc_init_array+0x38>)
 8006798:	4c0d      	ldr	r4, [pc, #52]	@ (80067d0 <__libc_init_array+0x3c>)
 800679a:	1b64      	subs	r4, r4, r5
 800679c:	10a4      	asrs	r4, r4, #2
 800679e:	2600      	movs	r6, #0
 80067a0:	42a6      	cmp	r6, r4
 80067a2:	d109      	bne.n	80067b8 <__libc_init_array+0x24>
 80067a4:	4d0b      	ldr	r5, [pc, #44]	@ (80067d4 <__libc_init_array+0x40>)
 80067a6:	4c0c      	ldr	r4, [pc, #48]	@ (80067d8 <__libc_init_array+0x44>)
 80067a8:	f003 fc42 	bl	800a030 <_init>
 80067ac:	1b64      	subs	r4, r4, r5
 80067ae:	10a4      	asrs	r4, r4, #2
 80067b0:	2600      	movs	r6, #0
 80067b2:	42a6      	cmp	r6, r4
 80067b4:	d105      	bne.n	80067c2 <__libc_init_array+0x2e>
 80067b6:	bd70      	pop	{r4, r5, r6, pc}
 80067b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80067bc:	4798      	blx	r3
 80067be:	3601      	adds	r6, #1
 80067c0:	e7ee      	b.n	80067a0 <__libc_init_array+0xc>
 80067c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80067c6:	4798      	blx	r3
 80067c8:	3601      	adds	r6, #1
 80067ca:	e7f2      	b.n	80067b2 <__libc_init_array+0x1e>
 80067cc:	0800a6b8 	.word	0x0800a6b8
 80067d0:	0800a6b8 	.word	0x0800a6b8
 80067d4:	0800a6b8 	.word	0x0800a6b8
 80067d8:	0800a6bc 	.word	0x0800a6bc

080067dc <__retarget_lock_init_recursive>:
 80067dc:	4770      	bx	lr

080067de <__retarget_lock_acquire_recursive>:
 80067de:	4770      	bx	lr

080067e0 <__retarget_lock_release_recursive>:
 80067e0:	4770      	bx	lr
	...

080067e4 <nanf>:
 80067e4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80067ec <nanf+0x8>
 80067e8:	4770      	bx	lr
 80067ea:	bf00      	nop
 80067ec:	7fc00000 	.word	0x7fc00000

080067f0 <quorem>:
 80067f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067f4:	6903      	ldr	r3, [r0, #16]
 80067f6:	690c      	ldr	r4, [r1, #16]
 80067f8:	42a3      	cmp	r3, r4
 80067fa:	4607      	mov	r7, r0
 80067fc:	db7e      	blt.n	80068fc <quorem+0x10c>
 80067fe:	3c01      	subs	r4, #1
 8006800:	f101 0814 	add.w	r8, r1, #20
 8006804:	00a3      	lsls	r3, r4, #2
 8006806:	f100 0514 	add.w	r5, r0, #20
 800680a:	9300      	str	r3, [sp, #0]
 800680c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006810:	9301      	str	r3, [sp, #4]
 8006812:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006816:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800681a:	3301      	adds	r3, #1
 800681c:	429a      	cmp	r2, r3
 800681e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006822:	fbb2 f6f3 	udiv	r6, r2, r3
 8006826:	d32e      	bcc.n	8006886 <quorem+0x96>
 8006828:	f04f 0a00 	mov.w	sl, #0
 800682c:	46c4      	mov	ip, r8
 800682e:	46ae      	mov	lr, r5
 8006830:	46d3      	mov	fp, sl
 8006832:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006836:	b298      	uxth	r0, r3
 8006838:	fb06 a000 	mla	r0, r6, r0, sl
 800683c:	0c02      	lsrs	r2, r0, #16
 800683e:	0c1b      	lsrs	r3, r3, #16
 8006840:	fb06 2303 	mla	r3, r6, r3, r2
 8006844:	f8de 2000 	ldr.w	r2, [lr]
 8006848:	b280      	uxth	r0, r0
 800684a:	b292      	uxth	r2, r2
 800684c:	1a12      	subs	r2, r2, r0
 800684e:	445a      	add	r2, fp
 8006850:	f8de 0000 	ldr.w	r0, [lr]
 8006854:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006858:	b29b      	uxth	r3, r3
 800685a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800685e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006862:	b292      	uxth	r2, r2
 8006864:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006868:	45e1      	cmp	r9, ip
 800686a:	f84e 2b04 	str.w	r2, [lr], #4
 800686e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006872:	d2de      	bcs.n	8006832 <quorem+0x42>
 8006874:	9b00      	ldr	r3, [sp, #0]
 8006876:	58eb      	ldr	r3, [r5, r3]
 8006878:	b92b      	cbnz	r3, 8006886 <quorem+0x96>
 800687a:	9b01      	ldr	r3, [sp, #4]
 800687c:	3b04      	subs	r3, #4
 800687e:	429d      	cmp	r5, r3
 8006880:	461a      	mov	r2, r3
 8006882:	d32f      	bcc.n	80068e4 <quorem+0xf4>
 8006884:	613c      	str	r4, [r7, #16]
 8006886:	4638      	mov	r0, r7
 8006888:	f001 f9c2 	bl	8007c10 <__mcmp>
 800688c:	2800      	cmp	r0, #0
 800688e:	db25      	blt.n	80068dc <quorem+0xec>
 8006890:	4629      	mov	r1, r5
 8006892:	2000      	movs	r0, #0
 8006894:	f858 2b04 	ldr.w	r2, [r8], #4
 8006898:	f8d1 c000 	ldr.w	ip, [r1]
 800689c:	fa1f fe82 	uxth.w	lr, r2
 80068a0:	fa1f f38c 	uxth.w	r3, ip
 80068a4:	eba3 030e 	sub.w	r3, r3, lr
 80068a8:	4403      	add	r3, r0
 80068aa:	0c12      	lsrs	r2, r2, #16
 80068ac:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80068b0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80068ba:	45c1      	cmp	r9, r8
 80068bc:	f841 3b04 	str.w	r3, [r1], #4
 80068c0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80068c4:	d2e6      	bcs.n	8006894 <quorem+0xa4>
 80068c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80068ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80068ce:	b922      	cbnz	r2, 80068da <quorem+0xea>
 80068d0:	3b04      	subs	r3, #4
 80068d2:	429d      	cmp	r5, r3
 80068d4:	461a      	mov	r2, r3
 80068d6:	d30b      	bcc.n	80068f0 <quorem+0x100>
 80068d8:	613c      	str	r4, [r7, #16]
 80068da:	3601      	adds	r6, #1
 80068dc:	4630      	mov	r0, r6
 80068de:	b003      	add	sp, #12
 80068e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068e4:	6812      	ldr	r2, [r2, #0]
 80068e6:	3b04      	subs	r3, #4
 80068e8:	2a00      	cmp	r2, #0
 80068ea:	d1cb      	bne.n	8006884 <quorem+0x94>
 80068ec:	3c01      	subs	r4, #1
 80068ee:	e7c6      	b.n	800687e <quorem+0x8e>
 80068f0:	6812      	ldr	r2, [r2, #0]
 80068f2:	3b04      	subs	r3, #4
 80068f4:	2a00      	cmp	r2, #0
 80068f6:	d1ef      	bne.n	80068d8 <quorem+0xe8>
 80068f8:	3c01      	subs	r4, #1
 80068fa:	e7ea      	b.n	80068d2 <quorem+0xe2>
 80068fc:	2000      	movs	r0, #0
 80068fe:	e7ee      	b.n	80068de <quorem+0xee>

08006900 <_dtoa_r>:
 8006900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006904:	69c7      	ldr	r7, [r0, #28]
 8006906:	b099      	sub	sp, #100	@ 0x64
 8006908:	ed8d 0b02 	vstr	d0, [sp, #8]
 800690c:	ec55 4b10 	vmov	r4, r5, d0
 8006910:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006912:	9109      	str	r1, [sp, #36]	@ 0x24
 8006914:	4683      	mov	fp, r0
 8006916:	920e      	str	r2, [sp, #56]	@ 0x38
 8006918:	9313      	str	r3, [sp, #76]	@ 0x4c
 800691a:	b97f      	cbnz	r7, 800693c <_dtoa_r+0x3c>
 800691c:	2010      	movs	r0, #16
 800691e:	f000 fdfd 	bl	800751c <malloc>
 8006922:	4602      	mov	r2, r0
 8006924:	f8cb 001c 	str.w	r0, [fp, #28]
 8006928:	b920      	cbnz	r0, 8006934 <_dtoa_r+0x34>
 800692a:	4ba7      	ldr	r3, [pc, #668]	@ (8006bc8 <_dtoa_r+0x2c8>)
 800692c:	21ef      	movs	r1, #239	@ 0xef
 800692e:	48a7      	ldr	r0, [pc, #668]	@ (8006bcc <_dtoa_r+0x2cc>)
 8006930:	f002 fde2 	bl	80094f8 <__assert_func>
 8006934:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006938:	6007      	str	r7, [r0, #0]
 800693a:	60c7      	str	r7, [r0, #12]
 800693c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006940:	6819      	ldr	r1, [r3, #0]
 8006942:	b159      	cbz	r1, 800695c <_dtoa_r+0x5c>
 8006944:	685a      	ldr	r2, [r3, #4]
 8006946:	604a      	str	r2, [r1, #4]
 8006948:	2301      	movs	r3, #1
 800694a:	4093      	lsls	r3, r2
 800694c:	608b      	str	r3, [r1, #8]
 800694e:	4658      	mov	r0, fp
 8006950:	f000 feda 	bl	8007708 <_Bfree>
 8006954:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006958:	2200      	movs	r2, #0
 800695a:	601a      	str	r2, [r3, #0]
 800695c:	1e2b      	subs	r3, r5, #0
 800695e:	bfb9      	ittee	lt
 8006960:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006964:	9303      	strlt	r3, [sp, #12]
 8006966:	2300      	movge	r3, #0
 8006968:	6033      	strge	r3, [r6, #0]
 800696a:	9f03      	ldr	r7, [sp, #12]
 800696c:	4b98      	ldr	r3, [pc, #608]	@ (8006bd0 <_dtoa_r+0x2d0>)
 800696e:	bfbc      	itt	lt
 8006970:	2201      	movlt	r2, #1
 8006972:	6032      	strlt	r2, [r6, #0]
 8006974:	43bb      	bics	r3, r7
 8006976:	d112      	bne.n	800699e <_dtoa_r+0x9e>
 8006978:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800697a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800697e:	6013      	str	r3, [r2, #0]
 8006980:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006984:	4323      	orrs	r3, r4
 8006986:	f000 854d 	beq.w	8007424 <_dtoa_r+0xb24>
 800698a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800698c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006be4 <_dtoa_r+0x2e4>
 8006990:	2b00      	cmp	r3, #0
 8006992:	f000 854f 	beq.w	8007434 <_dtoa_r+0xb34>
 8006996:	f10a 0303 	add.w	r3, sl, #3
 800699a:	f000 bd49 	b.w	8007430 <_dtoa_r+0xb30>
 800699e:	ed9d 7b02 	vldr	d7, [sp, #8]
 80069a2:	2200      	movs	r2, #0
 80069a4:	ec51 0b17 	vmov	r0, r1, d7
 80069a8:	2300      	movs	r3, #0
 80069aa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80069ae:	f7fa f8b3 	bl	8000b18 <__aeabi_dcmpeq>
 80069b2:	4680      	mov	r8, r0
 80069b4:	b158      	cbz	r0, 80069ce <_dtoa_r+0xce>
 80069b6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80069b8:	2301      	movs	r3, #1
 80069ba:	6013      	str	r3, [r2, #0]
 80069bc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80069be:	b113      	cbz	r3, 80069c6 <_dtoa_r+0xc6>
 80069c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80069c2:	4b84      	ldr	r3, [pc, #528]	@ (8006bd4 <_dtoa_r+0x2d4>)
 80069c4:	6013      	str	r3, [r2, #0]
 80069c6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006be8 <_dtoa_r+0x2e8>
 80069ca:	f000 bd33 	b.w	8007434 <_dtoa_r+0xb34>
 80069ce:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80069d2:	aa16      	add	r2, sp, #88	@ 0x58
 80069d4:	a917      	add	r1, sp, #92	@ 0x5c
 80069d6:	4658      	mov	r0, fp
 80069d8:	f001 fa3a 	bl	8007e50 <__d2b>
 80069dc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80069e0:	4681      	mov	r9, r0
 80069e2:	2e00      	cmp	r6, #0
 80069e4:	d077      	beq.n	8006ad6 <_dtoa_r+0x1d6>
 80069e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80069e8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80069ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80069f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80069f4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80069f8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80069fc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006a00:	4619      	mov	r1, r3
 8006a02:	2200      	movs	r2, #0
 8006a04:	4b74      	ldr	r3, [pc, #464]	@ (8006bd8 <_dtoa_r+0x2d8>)
 8006a06:	f7f9 fc67 	bl	80002d8 <__aeabi_dsub>
 8006a0a:	a369      	add	r3, pc, #420	@ (adr r3, 8006bb0 <_dtoa_r+0x2b0>)
 8006a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a10:	f7f9 fe1a 	bl	8000648 <__aeabi_dmul>
 8006a14:	a368      	add	r3, pc, #416	@ (adr r3, 8006bb8 <_dtoa_r+0x2b8>)
 8006a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a1a:	f7f9 fc5f 	bl	80002dc <__adddf3>
 8006a1e:	4604      	mov	r4, r0
 8006a20:	4630      	mov	r0, r6
 8006a22:	460d      	mov	r5, r1
 8006a24:	f7f9 fda6 	bl	8000574 <__aeabi_i2d>
 8006a28:	a365      	add	r3, pc, #404	@ (adr r3, 8006bc0 <_dtoa_r+0x2c0>)
 8006a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a2e:	f7f9 fe0b 	bl	8000648 <__aeabi_dmul>
 8006a32:	4602      	mov	r2, r0
 8006a34:	460b      	mov	r3, r1
 8006a36:	4620      	mov	r0, r4
 8006a38:	4629      	mov	r1, r5
 8006a3a:	f7f9 fc4f 	bl	80002dc <__adddf3>
 8006a3e:	4604      	mov	r4, r0
 8006a40:	460d      	mov	r5, r1
 8006a42:	f7fa f8b1 	bl	8000ba8 <__aeabi_d2iz>
 8006a46:	2200      	movs	r2, #0
 8006a48:	4607      	mov	r7, r0
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	4620      	mov	r0, r4
 8006a4e:	4629      	mov	r1, r5
 8006a50:	f7fa f86c 	bl	8000b2c <__aeabi_dcmplt>
 8006a54:	b140      	cbz	r0, 8006a68 <_dtoa_r+0x168>
 8006a56:	4638      	mov	r0, r7
 8006a58:	f7f9 fd8c 	bl	8000574 <__aeabi_i2d>
 8006a5c:	4622      	mov	r2, r4
 8006a5e:	462b      	mov	r3, r5
 8006a60:	f7fa f85a 	bl	8000b18 <__aeabi_dcmpeq>
 8006a64:	b900      	cbnz	r0, 8006a68 <_dtoa_r+0x168>
 8006a66:	3f01      	subs	r7, #1
 8006a68:	2f16      	cmp	r7, #22
 8006a6a:	d851      	bhi.n	8006b10 <_dtoa_r+0x210>
 8006a6c:	4b5b      	ldr	r3, [pc, #364]	@ (8006bdc <_dtoa_r+0x2dc>)
 8006a6e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006a7a:	f7fa f857 	bl	8000b2c <__aeabi_dcmplt>
 8006a7e:	2800      	cmp	r0, #0
 8006a80:	d048      	beq.n	8006b14 <_dtoa_r+0x214>
 8006a82:	3f01      	subs	r7, #1
 8006a84:	2300      	movs	r3, #0
 8006a86:	9312      	str	r3, [sp, #72]	@ 0x48
 8006a88:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006a8a:	1b9b      	subs	r3, r3, r6
 8006a8c:	1e5a      	subs	r2, r3, #1
 8006a8e:	bf44      	itt	mi
 8006a90:	f1c3 0801 	rsbmi	r8, r3, #1
 8006a94:	2300      	movmi	r3, #0
 8006a96:	9208      	str	r2, [sp, #32]
 8006a98:	bf54      	ite	pl
 8006a9a:	f04f 0800 	movpl.w	r8, #0
 8006a9e:	9308      	strmi	r3, [sp, #32]
 8006aa0:	2f00      	cmp	r7, #0
 8006aa2:	db39      	blt.n	8006b18 <_dtoa_r+0x218>
 8006aa4:	9b08      	ldr	r3, [sp, #32]
 8006aa6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006aa8:	443b      	add	r3, r7
 8006aaa:	9308      	str	r3, [sp, #32]
 8006aac:	2300      	movs	r3, #0
 8006aae:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ab0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ab2:	2b09      	cmp	r3, #9
 8006ab4:	d864      	bhi.n	8006b80 <_dtoa_r+0x280>
 8006ab6:	2b05      	cmp	r3, #5
 8006ab8:	bfc4      	itt	gt
 8006aba:	3b04      	subgt	r3, #4
 8006abc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006abe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ac0:	f1a3 0302 	sub.w	r3, r3, #2
 8006ac4:	bfcc      	ite	gt
 8006ac6:	2400      	movgt	r4, #0
 8006ac8:	2401      	movle	r4, #1
 8006aca:	2b03      	cmp	r3, #3
 8006acc:	d863      	bhi.n	8006b96 <_dtoa_r+0x296>
 8006ace:	e8df f003 	tbb	[pc, r3]
 8006ad2:	372a      	.short	0x372a
 8006ad4:	5535      	.short	0x5535
 8006ad6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006ada:	441e      	add	r6, r3
 8006adc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006ae0:	2b20      	cmp	r3, #32
 8006ae2:	bfc1      	itttt	gt
 8006ae4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006ae8:	409f      	lslgt	r7, r3
 8006aea:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006aee:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006af2:	bfd6      	itet	le
 8006af4:	f1c3 0320 	rsble	r3, r3, #32
 8006af8:	ea47 0003 	orrgt.w	r0, r7, r3
 8006afc:	fa04 f003 	lslle.w	r0, r4, r3
 8006b00:	f7f9 fd28 	bl	8000554 <__aeabi_ui2d>
 8006b04:	2201      	movs	r2, #1
 8006b06:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006b0a:	3e01      	subs	r6, #1
 8006b0c:	9214      	str	r2, [sp, #80]	@ 0x50
 8006b0e:	e777      	b.n	8006a00 <_dtoa_r+0x100>
 8006b10:	2301      	movs	r3, #1
 8006b12:	e7b8      	b.n	8006a86 <_dtoa_r+0x186>
 8006b14:	9012      	str	r0, [sp, #72]	@ 0x48
 8006b16:	e7b7      	b.n	8006a88 <_dtoa_r+0x188>
 8006b18:	427b      	negs	r3, r7
 8006b1a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	eba8 0807 	sub.w	r8, r8, r7
 8006b22:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006b24:	e7c4      	b.n	8006ab0 <_dtoa_r+0x1b0>
 8006b26:	2300      	movs	r3, #0
 8006b28:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	dc35      	bgt.n	8006b9c <_dtoa_r+0x29c>
 8006b30:	2301      	movs	r3, #1
 8006b32:	9300      	str	r3, [sp, #0]
 8006b34:	9307      	str	r3, [sp, #28]
 8006b36:	461a      	mov	r2, r3
 8006b38:	920e      	str	r2, [sp, #56]	@ 0x38
 8006b3a:	e00b      	b.n	8006b54 <_dtoa_r+0x254>
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	e7f3      	b.n	8006b28 <_dtoa_r+0x228>
 8006b40:	2300      	movs	r3, #0
 8006b42:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b46:	18fb      	adds	r3, r7, r3
 8006b48:	9300      	str	r3, [sp, #0]
 8006b4a:	3301      	adds	r3, #1
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	9307      	str	r3, [sp, #28]
 8006b50:	bfb8      	it	lt
 8006b52:	2301      	movlt	r3, #1
 8006b54:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006b58:	2100      	movs	r1, #0
 8006b5a:	2204      	movs	r2, #4
 8006b5c:	f102 0514 	add.w	r5, r2, #20
 8006b60:	429d      	cmp	r5, r3
 8006b62:	d91f      	bls.n	8006ba4 <_dtoa_r+0x2a4>
 8006b64:	6041      	str	r1, [r0, #4]
 8006b66:	4658      	mov	r0, fp
 8006b68:	f000 fd8e 	bl	8007688 <_Balloc>
 8006b6c:	4682      	mov	sl, r0
 8006b6e:	2800      	cmp	r0, #0
 8006b70:	d13c      	bne.n	8006bec <_dtoa_r+0x2ec>
 8006b72:	4b1b      	ldr	r3, [pc, #108]	@ (8006be0 <_dtoa_r+0x2e0>)
 8006b74:	4602      	mov	r2, r0
 8006b76:	f240 11af 	movw	r1, #431	@ 0x1af
 8006b7a:	e6d8      	b.n	800692e <_dtoa_r+0x2e>
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e7e0      	b.n	8006b42 <_dtoa_r+0x242>
 8006b80:	2401      	movs	r4, #1
 8006b82:	2300      	movs	r3, #0
 8006b84:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b86:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006b88:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006b8c:	9300      	str	r3, [sp, #0]
 8006b8e:	9307      	str	r3, [sp, #28]
 8006b90:	2200      	movs	r2, #0
 8006b92:	2312      	movs	r3, #18
 8006b94:	e7d0      	b.n	8006b38 <_dtoa_r+0x238>
 8006b96:	2301      	movs	r3, #1
 8006b98:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b9a:	e7f5      	b.n	8006b88 <_dtoa_r+0x288>
 8006b9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b9e:	9300      	str	r3, [sp, #0]
 8006ba0:	9307      	str	r3, [sp, #28]
 8006ba2:	e7d7      	b.n	8006b54 <_dtoa_r+0x254>
 8006ba4:	3101      	adds	r1, #1
 8006ba6:	0052      	lsls	r2, r2, #1
 8006ba8:	e7d8      	b.n	8006b5c <_dtoa_r+0x25c>
 8006baa:	bf00      	nop
 8006bac:	f3af 8000 	nop.w
 8006bb0:	636f4361 	.word	0x636f4361
 8006bb4:	3fd287a7 	.word	0x3fd287a7
 8006bb8:	8b60c8b3 	.word	0x8b60c8b3
 8006bbc:	3fc68a28 	.word	0x3fc68a28
 8006bc0:	509f79fb 	.word	0x509f79fb
 8006bc4:	3fd34413 	.word	0x3fd34413
 8006bc8:	0800a28e 	.word	0x0800a28e
 8006bcc:	0800a2a5 	.word	0x0800a2a5
 8006bd0:	7ff00000 	.word	0x7ff00000
 8006bd4:	0800a259 	.word	0x0800a259
 8006bd8:	3ff80000 	.word	0x3ff80000
 8006bdc:	0800a3a0 	.word	0x0800a3a0
 8006be0:	0800a2fd 	.word	0x0800a2fd
 8006be4:	0800a28a 	.word	0x0800a28a
 8006be8:	0800a258 	.word	0x0800a258
 8006bec:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006bf0:	6018      	str	r0, [r3, #0]
 8006bf2:	9b07      	ldr	r3, [sp, #28]
 8006bf4:	2b0e      	cmp	r3, #14
 8006bf6:	f200 80a4 	bhi.w	8006d42 <_dtoa_r+0x442>
 8006bfa:	2c00      	cmp	r4, #0
 8006bfc:	f000 80a1 	beq.w	8006d42 <_dtoa_r+0x442>
 8006c00:	2f00      	cmp	r7, #0
 8006c02:	dd33      	ble.n	8006c6c <_dtoa_r+0x36c>
 8006c04:	4bad      	ldr	r3, [pc, #692]	@ (8006ebc <_dtoa_r+0x5bc>)
 8006c06:	f007 020f 	and.w	r2, r7, #15
 8006c0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c0e:	ed93 7b00 	vldr	d7, [r3]
 8006c12:	05f8      	lsls	r0, r7, #23
 8006c14:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006c18:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006c1c:	d516      	bpl.n	8006c4c <_dtoa_r+0x34c>
 8006c1e:	4ba8      	ldr	r3, [pc, #672]	@ (8006ec0 <_dtoa_r+0x5c0>)
 8006c20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c24:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006c28:	f7f9 fe38 	bl	800089c <__aeabi_ddiv>
 8006c2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c30:	f004 040f 	and.w	r4, r4, #15
 8006c34:	2603      	movs	r6, #3
 8006c36:	4da2      	ldr	r5, [pc, #648]	@ (8006ec0 <_dtoa_r+0x5c0>)
 8006c38:	b954      	cbnz	r4, 8006c50 <_dtoa_r+0x350>
 8006c3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c42:	f7f9 fe2b 	bl	800089c <__aeabi_ddiv>
 8006c46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c4a:	e028      	b.n	8006c9e <_dtoa_r+0x39e>
 8006c4c:	2602      	movs	r6, #2
 8006c4e:	e7f2      	b.n	8006c36 <_dtoa_r+0x336>
 8006c50:	07e1      	lsls	r1, r4, #31
 8006c52:	d508      	bpl.n	8006c66 <_dtoa_r+0x366>
 8006c54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c58:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006c5c:	f7f9 fcf4 	bl	8000648 <__aeabi_dmul>
 8006c60:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c64:	3601      	adds	r6, #1
 8006c66:	1064      	asrs	r4, r4, #1
 8006c68:	3508      	adds	r5, #8
 8006c6a:	e7e5      	b.n	8006c38 <_dtoa_r+0x338>
 8006c6c:	f000 80d2 	beq.w	8006e14 <_dtoa_r+0x514>
 8006c70:	427c      	negs	r4, r7
 8006c72:	4b92      	ldr	r3, [pc, #584]	@ (8006ebc <_dtoa_r+0x5bc>)
 8006c74:	4d92      	ldr	r5, [pc, #584]	@ (8006ec0 <_dtoa_r+0x5c0>)
 8006c76:	f004 020f 	and.w	r2, r4, #15
 8006c7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c82:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c86:	f7f9 fcdf 	bl	8000648 <__aeabi_dmul>
 8006c8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c8e:	1124      	asrs	r4, r4, #4
 8006c90:	2300      	movs	r3, #0
 8006c92:	2602      	movs	r6, #2
 8006c94:	2c00      	cmp	r4, #0
 8006c96:	f040 80b2 	bne.w	8006dfe <_dtoa_r+0x4fe>
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d1d3      	bne.n	8006c46 <_dtoa_r+0x346>
 8006c9e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006ca0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	f000 80b7 	beq.w	8006e18 <_dtoa_r+0x518>
 8006caa:	4b86      	ldr	r3, [pc, #536]	@ (8006ec4 <_dtoa_r+0x5c4>)
 8006cac:	2200      	movs	r2, #0
 8006cae:	4620      	mov	r0, r4
 8006cb0:	4629      	mov	r1, r5
 8006cb2:	f7f9 ff3b 	bl	8000b2c <__aeabi_dcmplt>
 8006cb6:	2800      	cmp	r0, #0
 8006cb8:	f000 80ae 	beq.w	8006e18 <_dtoa_r+0x518>
 8006cbc:	9b07      	ldr	r3, [sp, #28]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	f000 80aa 	beq.w	8006e18 <_dtoa_r+0x518>
 8006cc4:	9b00      	ldr	r3, [sp, #0]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	dd37      	ble.n	8006d3a <_dtoa_r+0x43a>
 8006cca:	1e7b      	subs	r3, r7, #1
 8006ccc:	9304      	str	r3, [sp, #16]
 8006cce:	4620      	mov	r0, r4
 8006cd0:	4b7d      	ldr	r3, [pc, #500]	@ (8006ec8 <_dtoa_r+0x5c8>)
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	4629      	mov	r1, r5
 8006cd6:	f7f9 fcb7 	bl	8000648 <__aeabi_dmul>
 8006cda:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006cde:	9c00      	ldr	r4, [sp, #0]
 8006ce0:	3601      	adds	r6, #1
 8006ce2:	4630      	mov	r0, r6
 8006ce4:	f7f9 fc46 	bl	8000574 <__aeabi_i2d>
 8006ce8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006cec:	f7f9 fcac 	bl	8000648 <__aeabi_dmul>
 8006cf0:	4b76      	ldr	r3, [pc, #472]	@ (8006ecc <_dtoa_r+0x5cc>)
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f7f9 faf2 	bl	80002dc <__adddf3>
 8006cf8:	4605      	mov	r5, r0
 8006cfa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006cfe:	2c00      	cmp	r4, #0
 8006d00:	f040 808d 	bne.w	8006e1e <_dtoa_r+0x51e>
 8006d04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d08:	4b71      	ldr	r3, [pc, #452]	@ (8006ed0 <_dtoa_r+0x5d0>)
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f7f9 fae4 	bl	80002d8 <__aeabi_dsub>
 8006d10:	4602      	mov	r2, r0
 8006d12:	460b      	mov	r3, r1
 8006d14:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006d18:	462a      	mov	r2, r5
 8006d1a:	4633      	mov	r3, r6
 8006d1c:	f7f9 ff24 	bl	8000b68 <__aeabi_dcmpgt>
 8006d20:	2800      	cmp	r0, #0
 8006d22:	f040 828b 	bne.w	800723c <_dtoa_r+0x93c>
 8006d26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d2a:	462a      	mov	r2, r5
 8006d2c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006d30:	f7f9 fefc 	bl	8000b2c <__aeabi_dcmplt>
 8006d34:	2800      	cmp	r0, #0
 8006d36:	f040 8128 	bne.w	8006f8a <_dtoa_r+0x68a>
 8006d3a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006d3e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006d42:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	f2c0 815a 	blt.w	8006ffe <_dtoa_r+0x6fe>
 8006d4a:	2f0e      	cmp	r7, #14
 8006d4c:	f300 8157 	bgt.w	8006ffe <_dtoa_r+0x6fe>
 8006d50:	4b5a      	ldr	r3, [pc, #360]	@ (8006ebc <_dtoa_r+0x5bc>)
 8006d52:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006d56:	ed93 7b00 	vldr	d7, [r3]
 8006d5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	ed8d 7b00 	vstr	d7, [sp]
 8006d62:	da03      	bge.n	8006d6c <_dtoa_r+0x46c>
 8006d64:	9b07      	ldr	r3, [sp, #28]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	f340 8101 	ble.w	8006f6e <_dtoa_r+0x66e>
 8006d6c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006d70:	4656      	mov	r6, sl
 8006d72:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d76:	4620      	mov	r0, r4
 8006d78:	4629      	mov	r1, r5
 8006d7a:	f7f9 fd8f 	bl	800089c <__aeabi_ddiv>
 8006d7e:	f7f9 ff13 	bl	8000ba8 <__aeabi_d2iz>
 8006d82:	4680      	mov	r8, r0
 8006d84:	f7f9 fbf6 	bl	8000574 <__aeabi_i2d>
 8006d88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d8c:	f7f9 fc5c 	bl	8000648 <__aeabi_dmul>
 8006d90:	4602      	mov	r2, r0
 8006d92:	460b      	mov	r3, r1
 8006d94:	4620      	mov	r0, r4
 8006d96:	4629      	mov	r1, r5
 8006d98:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006d9c:	f7f9 fa9c 	bl	80002d8 <__aeabi_dsub>
 8006da0:	f806 4b01 	strb.w	r4, [r6], #1
 8006da4:	9d07      	ldr	r5, [sp, #28]
 8006da6:	eba6 040a 	sub.w	r4, r6, sl
 8006daa:	42a5      	cmp	r5, r4
 8006dac:	4602      	mov	r2, r0
 8006dae:	460b      	mov	r3, r1
 8006db0:	f040 8117 	bne.w	8006fe2 <_dtoa_r+0x6e2>
 8006db4:	f7f9 fa92 	bl	80002dc <__adddf3>
 8006db8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006dbc:	4604      	mov	r4, r0
 8006dbe:	460d      	mov	r5, r1
 8006dc0:	f7f9 fed2 	bl	8000b68 <__aeabi_dcmpgt>
 8006dc4:	2800      	cmp	r0, #0
 8006dc6:	f040 80f9 	bne.w	8006fbc <_dtoa_r+0x6bc>
 8006dca:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006dce:	4620      	mov	r0, r4
 8006dd0:	4629      	mov	r1, r5
 8006dd2:	f7f9 fea1 	bl	8000b18 <__aeabi_dcmpeq>
 8006dd6:	b118      	cbz	r0, 8006de0 <_dtoa_r+0x4e0>
 8006dd8:	f018 0f01 	tst.w	r8, #1
 8006ddc:	f040 80ee 	bne.w	8006fbc <_dtoa_r+0x6bc>
 8006de0:	4649      	mov	r1, r9
 8006de2:	4658      	mov	r0, fp
 8006de4:	f000 fc90 	bl	8007708 <_Bfree>
 8006de8:	2300      	movs	r3, #0
 8006dea:	7033      	strb	r3, [r6, #0]
 8006dec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006dee:	3701      	adds	r7, #1
 8006df0:	601f      	str	r7, [r3, #0]
 8006df2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	f000 831d 	beq.w	8007434 <_dtoa_r+0xb34>
 8006dfa:	601e      	str	r6, [r3, #0]
 8006dfc:	e31a      	b.n	8007434 <_dtoa_r+0xb34>
 8006dfe:	07e2      	lsls	r2, r4, #31
 8006e00:	d505      	bpl.n	8006e0e <_dtoa_r+0x50e>
 8006e02:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006e06:	f7f9 fc1f 	bl	8000648 <__aeabi_dmul>
 8006e0a:	3601      	adds	r6, #1
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	1064      	asrs	r4, r4, #1
 8006e10:	3508      	adds	r5, #8
 8006e12:	e73f      	b.n	8006c94 <_dtoa_r+0x394>
 8006e14:	2602      	movs	r6, #2
 8006e16:	e742      	b.n	8006c9e <_dtoa_r+0x39e>
 8006e18:	9c07      	ldr	r4, [sp, #28]
 8006e1a:	9704      	str	r7, [sp, #16]
 8006e1c:	e761      	b.n	8006ce2 <_dtoa_r+0x3e2>
 8006e1e:	4b27      	ldr	r3, [pc, #156]	@ (8006ebc <_dtoa_r+0x5bc>)
 8006e20:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006e22:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006e26:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006e2a:	4454      	add	r4, sl
 8006e2c:	2900      	cmp	r1, #0
 8006e2e:	d053      	beq.n	8006ed8 <_dtoa_r+0x5d8>
 8006e30:	4928      	ldr	r1, [pc, #160]	@ (8006ed4 <_dtoa_r+0x5d4>)
 8006e32:	2000      	movs	r0, #0
 8006e34:	f7f9 fd32 	bl	800089c <__aeabi_ddiv>
 8006e38:	4633      	mov	r3, r6
 8006e3a:	462a      	mov	r2, r5
 8006e3c:	f7f9 fa4c 	bl	80002d8 <__aeabi_dsub>
 8006e40:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006e44:	4656      	mov	r6, sl
 8006e46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e4a:	f7f9 fead 	bl	8000ba8 <__aeabi_d2iz>
 8006e4e:	4605      	mov	r5, r0
 8006e50:	f7f9 fb90 	bl	8000574 <__aeabi_i2d>
 8006e54:	4602      	mov	r2, r0
 8006e56:	460b      	mov	r3, r1
 8006e58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e5c:	f7f9 fa3c 	bl	80002d8 <__aeabi_dsub>
 8006e60:	3530      	adds	r5, #48	@ 0x30
 8006e62:	4602      	mov	r2, r0
 8006e64:	460b      	mov	r3, r1
 8006e66:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006e6a:	f806 5b01 	strb.w	r5, [r6], #1
 8006e6e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006e72:	f7f9 fe5b 	bl	8000b2c <__aeabi_dcmplt>
 8006e76:	2800      	cmp	r0, #0
 8006e78:	d171      	bne.n	8006f5e <_dtoa_r+0x65e>
 8006e7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e7e:	4911      	ldr	r1, [pc, #68]	@ (8006ec4 <_dtoa_r+0x5c4>)
 8006e80:	2000      	movs	r0, #0
 8006e82:	f7f9 fa29 	bl	80002d8 <__aeabi_dsub>
 8006e86:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006e8a:	f7f9 fe4f 	bl	8000b2c <__aeabi_dcmplt>
 8006e8e:	2800      	cmp	r0, #0
 8006e90:	f040 8095 	bne.w	8006fbe <_dtoa_r+0x6be>
 8006e94:	42a6      	cmp	r6, r4
 8006e96:	f43f af50 	beq.w	8006d3a <_dtoa_r+0x43a>
 8006e9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006e9e:	4b0a      	ldr	r3, [pc, #40]	@ (8006ec8 <_dtoa_r+0x5c8>)
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	f7f9 fbd1 	bl	8000648 <__aeabi_dmul>
 8006ea6:	4b08      	ldr	r3, [pc, #32]	@ (8006ec8 <_dtoa_r+0x5c8>)
 8006ea8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006eac:	2200      	movs	r2, #0
 8006eae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006eb2:	f7f9 fbc9 	bl	8000648 <__aeabi_dmul>
 8006eb6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006eba:	e7c4      	b.n	8006e46 <_dtoa_r+0x546>
 8006ebc:	0800a3a0 	.word	0x0800a3a0
 8006ec0:	0800a378 	.word	0x0800a378
 8006ec4:	3ff00000 	.word	0x3ff00000
 8006ec8:	40240000 	.word	0x40240000
 8006ecc:	401c0000 	.word	0x401c0000
 8006ed0:	40140000 	.word	0x40140000
 8006ed4:	3fe00000 	.word	0x3fe00000
 8006ed8:	4631      	mov	r1, r6
 8006eda:	4628      	mov	r0, r5
 8006edc:	f7f9 fbb4 	bl	8000648 <__aeabi_dmul>
 8006ee0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006ee4:	9415      	str	r4, [sp, #84]	@ 0x54
 8006ee6:	4656      	mov	r6, sl
 8006ee8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006eec:	f7f9 fe5c 	bl	8000ba8 <__aeabi_d2iz>
 8006ef0:	4605      	mov	r5, r0
 8006ef2:	f7f9 fb3f 	bl	8000574 <__aeabi_i2d>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	460b      	mov	r3, r1
 8006efa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006efe:	f7f9 f9eb 	bl	80002d8 <__aeabi_dsub>
 8006f02:	3530      	adds	r5, #48	@ 0x30
 8006f04:	f806 5b01 	strb.w	r5, [r6], #1
 8006f08:	4602      	mov	r2, r0
 8006f0a:	460b      	mov	r3, r1
 8006f0c:	42a6      	cmp	r6, r4
 8006f0e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006f12:	f04f 0200 	mov.w	r2, #0
 8006f16:	d124      	bne.n	8006f62 <_dtoa_r+0x662>
 8006f18:	4bac      	ldr	r3, [pc, #688]	@ (80071cc <_dtoa_r+0x8cc>)
 8006f1a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006f1e:	f7f9 f9dd 	bl	80002dc <__adddf3>
 8006f22:	4602      	mov	r2, r0
 8006f24:	460b      	mov	r3, r1
 8006f26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f2a:	f7f9 fe1d 	bl	8000b68 <__aeabi_dcmpgt>
 8006f2e:	2800      	cmp	r0, #0
 8006f30:	d145      	bne.n	8006fbe <_dtoa_r+0x6be>
 8006f32:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006f36:	49a5      	ldr	r1, [pc, #660]	@ (80071cc <_dtoa_r+0x8cc>)
 8006f38:	2000      	movs	r0, #0
 8006f3a:	f7f9 f9cd 	bl	80002d8 <__aeabi_dsub>
 8006f3e:	4602      	mov	r2, r0
 8006f40:	460b      	mov	r3, r1
 8006f42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f46:	f7f9 fdf1 	bl	8000b2c <__aeabi_dcmplt>
 8006f4a:	2800      	cmp	r0, #0
 8006f4c:	f43f aef5 	beq.w	8006d3a <_dtoa_r+0x43a>
 8006f50:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006f52:	1e73      	subs	r3, r6, #1
 8006f54:	9315      	str	r3, [sp, #84]	@ 0x54
 8006f56:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006f5a:	2b30      	cmp	r3, #48	@ 0x30
 8006f5c:	d0f8      	beq.n	8006f50 <_dtoa_r+0x650>
 8006f5e:	9f04      	ldr	r7, [sp, #16]
 8006f60:	e73e      	b.n	8006de0 <_dtoa_r+0x4e0>
 8006f62:	4b9b      	ldr	r3, [pc, #620]	@ (80071d0 <_dtoa_r+0x8d0>)
 8006f64:	f7f9 fb70 	bl	8000648 <__aeabi_dmul>
 8006f68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f6c:	e7bc      	b.n	8006ee8 <_dtoa_r+0x5e8>
 8006f6e:	d10c      	bne.n	8006f8a <_dtoa_r+0x68a>
 8006f70:	4b98      	ldr	r3, [pc, #608]	@ (80071d4 <_dtoa_r+0x8d4>)
 8006f72:	2200      	movs	r2, #0
 8006f74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006f78:	f7f9 fb66 	bl	8000648 <__aeabi_dmul>
 8006f7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006f80:	f7f9 fde8 	bl	8000b54 <__aeabi_dcmpge>
 8006f84:	2800      	cmp	r0, #0
 8006f86:	f000 8157 	beq.w	8007238 <_dtoa_r+0x938>
 8006f8a:	2400      	movs	r4, #0
 8006f8c:	4625      	mov	r5, r4
 8006f8e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f90:	43db      	mvns	r3, r3
 8006f92:	9304      	str	r3, [sp, #16]
 8006f94:	4656      	mov	r6, sl
 8006f96:	2700      	movs	r7, #0
 8006f98:	4621      	mov	r1, r4
 8006f9a:	4658      	mov	r0, fp
 8006f9c:	f000 fbb4 	bl	8007708 <_Bfree>
 8006fa0:	2d00      	cmp	r5, #0
 8006fa2:	d0dc      	beq.n	8006f5e <_dtoa_r+0x65e>
 8006fa4:	b12f      	cbz	r7, 8006fb2 <_dtoa_r+0x6b2>
 8006fa6:	42af      	cmp	r7, r5
 8006fa8:	d003      	beq.n	8006fb2 <_dtoa_r+0x6b2>
 8006faa:	4639      	mov	r1, r7
 8006fac:	4658      	mov	r0, fp
 8006fae:	f000 fbab 	bl	8007708 <_Bfree>
 8006fb2:	4629      	mov	r1, r5
 8006fb4:	4658      	mov	r0, fp
 8006fb6:	f000 fba7 	bl	8007708 <_Bfree>
 8006fba:	e7d0      	b.n	8006f5e <_dtoa_r+0x65e>
 8006fbc:	9704      	str	r7, [sp, #16]
 8006fbe:	4633      	mov	r3, r6
 8006fc0:	461e      	mov	r6, r3
 8006fc2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006fc6:	2a39      	cmp	r2, #57	@ 0x39
 8006fc8:	d107      	bne.n	8006fda <_dtoa_r+0x6da>
 8006fca:	459a      	cmp	sl, r3
 8006fcc:	d1f8      	bne.n	8006fc0 <_dtoa_r+0x6c0>
 8006fce:	9a04      	ldr	r2, [sp, #16]
 8006fd0:	3201      	adds	r2, #1
 8006fd2:	9204      	str	r2, [sp, #16]
 8006fd4:	2230      	movs	r2, #48	@ 0x30
 8006fd6:	f88a 2000 	strb.w	r2, [sl]
 8006fda:	781a      	ldrb	r2, [r3, #0]
 8006fdc:	3201      	adds	r2, #1
 8006fde:	701a      	strb	r2, [r3, #0]
 8006fe0:	e7bd      	b.n	8006f5e <_dtoa_r+0x65e>
 8006fe2:	4b7b      	ldr	r3, [pc, #492]	@ (80071d0 <_dtoa_r+0x8d0>)
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	f7f9 fb2f 	bl	8000648 <__aeabi_dmul>
 8006fea:	2200      	movs	r2, #0
 8006fec:	2300      	movs	r3, #0
 8006fee:	4604      	mov	r4, r0
 8006ff0:	460d      	mov	r5, r1
 8006ff2:	f7f9 fd91 	bl	8000b18 <__aeabi_dcmpeq>
 8006ff6:	2800      	cmp	r0, #0
 8006ff8:	f43f aebb 	beq.w	8006d72 <_dtoa_r+0x472>
 8006ffc:	e6f0      	b.n	8006de0 <_dtoa_r+0x4e0>
 8006ffe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007000:	2a00      	cmp	r2, #0
 8007002:	f000 80db 	beq.w	80071bc <_dtoa_r+0x8bc>
 8007006:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007008:	2a01      	cmp	r2, #1
 800700a:	f300 80bf 	bgt.w	800718c <_dtoa_r+0x88c>
 800700e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007010:	2a00      	cmp	r2, #0
 8007012:	f000 80b7 	beq.w	8007184 <_dtoa_r+0x884>
 8007016:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800701a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800701c:	4646      	mov	r6, r8
 800701e:	9a08      	ldr	r2, [sp, #32]
 8007020:	2101      	movs	r1, #1
 8007022:	441a      	add	r2, r3
 8007024:	4658      	mov	r0, fp
 8007026:	4498      	add	r8, r3
 8007028:	9208      	str	r2, [sp, #32]
 800702a:	f000 fc6b 	bl	8007904 <__i2b>
 800702e:	4605      	mov	r5, r0
 8007030:	b15e      	cbz	r6, 800704a <_dtoa_r+0x74a>
 8007032:	9b08      	ldr	r3, [sp, #32]
 8007034:	2b00      	cmp	r3, #0
 8007036:	dd08      	ble.n	800704a <_dtoa_r+0x74a>
 8007038:	42b3      	cmp	r3, r6
 800703a:	9a08      	ldr	r2, [sp, #32]
 800703c:	bfa8      	it	ge
 800703e:	4633      	movge	r3, r6
 8007040:	eba8 0803 	sub.w	r8, r8, r3
 8007044:	1af6      	subs	r6, r6, r3
 8007046:	1ad3      	subs	r3, r2, r3
 8007048:	9308      	str	r3, [sp, #32]
 800704a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800704c:	b1f3      	cbz	r3, 800708c <_dtoa_r+0x78c>
 800704e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007050:	2b00      	cmp	r3, #0
 8007052:	f000 80b7 	beq.w	80071c4 <_dtoa_r+0x8c4>
 8007056:	b18c      	cbz	r4, 800707c <_dtoa_r+0x77c>
 8007058:	4629      	mov	r1, r5
 800705a:	4622      	mov	r2, r4
 800705c:	4658      	mov	r0, fp
 800705e:	f000 fd11 	bl	8007a84 <__pow5mult>
 8007062:	464a      	mov	r2, r9
 8007064:	4601      	mov	r1, r0
 8007066:	4605      	mov	r5, r0
 8007068:	4658      	mov	r0, fp
 800706a:	f000 fc61 	bl	8007930 <__multiply>
 800706e:	4649      	mov	r1, r9
 8007070:	9004      	str	r0, [sp, #16]
 8007072:	4658      	mov	r0, fp
 8007074:	f000 fb48 	bl	8007708 <_Bfree>
 8007078:	9b04      	ldr	r3, [sp, #16]
 800707a:	4699      	mov	r9, r3
 800707c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800707e:	1b1a      	subs	r2, r3, r4
 8007080:	d004      	beq.n	800708c <_dtoa_r+0x78c>
 8007082:	4649      	mov	r1, r9
 8007084:	4658      	mov	r0, fp
 8007086:	f000 fcfd 	bl	8007a84 <__pow5mult>
 800708a:	4681      	mov	r9, r0
 800708c:	2101      	movs	r1, #1
 800708e:	4658      	mov	r0, fp
 8007090:	f000 fc38 	bl	8007904 <__i2b>
 8007094:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007096:	4604      	mov	r4, r0
 8007098:	2b00      	cmp	r3, #0
 800709a:	f000 81cf 	beq.w	800743c <_dtoa_r+0xb3c>
 800709e:	461a      	mov	r2, r3
 80070a0:	4601      	mov	r1, r0
 80070a2:	4658      	mov	r0, fp
 80070a4:	f000 fcee 	bl	8007a84 <__pow5mult>
 80070a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	4604      	mov	r4, r0
 80070ae:	f300 8095 	bgt.w	80071dc <_dtoa_r+0x8dc>
 80070b2:	9b02      	ldr	r3, [sp, #8]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	f040 8087 	bne.w	80071c8 <_dtoa_r+0x8c8>
 80070ba:	9b03      	ldr	r3, [sp, #12]
 80070bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	f040 8089 	bne.w	80071d8 <_dtoa_r+0x8d8>
 80070c6:	9b03      	ldr	r3, [sp, #12]
 80070c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80070cc:	0d1b      	lsrs	r3, r3, #20
 80070ce:	051b      	lsls	r3, r3, #20
 80070d0:	b12b      	cbz	r3, 80070de <_dtoa_r+0x7de>
 80070d2:	9b08      	ldr	r3, [sp, #32]
 80070d4:	3301      	adds	r3, #1
 80070d6:	9308      	str	r3, [sp, #32]
 80070d8:	f108 0801 	add.w	r8, r8, #1
 80070dc:	2301      	movs	r3, #1
 80070de:	930a      	str	r3, [sp, #40]	@ 0x28
 80070e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	f000 81b0 	beq.w	8007448 <_dtoa_r+0xb48>
 80070e8:	6923      	ldr	r3, [r4, #16]
 80070ea:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80070ee:	6918      	ldr	r0, [r3, #16]
 80070f0:	f000 fbbc 	bl	800786c <__hi0bits>
 80070f4:	f1c0 0020 	rsb	r0, r0, #32
 80070f8:	9b08      	ldr	r3, [sp, #32]
 80070fa:	4418      	add	r0, r3
 80070fc:	f010 001f 	ands.w	r0, r0, #31
 8007100:	d077      	beq.n	80071f2 <_dtoa_r+0x8f2>
 8007102:	f1c0 0320 	rsb	r3, r0, #32
 8007106:	2b04      	cmp	r3, #4
 8007108:	dd6b      	ble.n	80071e2 <_dtoa_r+0x8e2>
 800710a:	9b08      	ldr	r3, [sp, #32]
 800710c:	f1c0 001c 	rsb	r0, r0, #28
 8007110:	4403      	add	r3, r0
 8007112:	4480      	add	r8, r0
 8007114:	4406      	add	r6, r0
 8007116:	9308      	str	r3, [sp, #32]
 8007118:	f1b8 0f00 	cmp.w	r8, #0
 800711c:	dd05      	ble.n	800712a <_dtoa_r+0x82a>
 800711e:	4649      	mov	r1, r9
 8007120:	4642      	mov	r2, r8
 8007122:	4658      	mov	r0, fp
 8007124:	f000 fd08 	bl	8007b38 <__lshift>
 8007128:	4681      	mov	r9, r0
 800712a:	9b08      	ldr	r3, [sp, #32]
 800712c:	2b00      	cmp	r3, #0
 800712e:	dd05      	ble.n	800713c <_dtoa_r+0x83c>
 8007130:	4621      	mov	r1, r4
 8007132:	461a      	mov	r2, r3
 8007134:	4658      	mov	r0, fp
 8007136:	f000 fcff 	bl	8007b38 <__lshift>
 800713a:	4604      	mov	r4, r0
 800713c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800713e:	2b00      	cmp	r3, #0
 8007140:	d059      	beq.n	80071f6 <_dtoa_r+0x8f6>
 8007142:	4621      	mov	r1, r4
 8007144:	4648      	mov	r0, r9
 8007146:	f000 fd63 	bl	8007c10 <__mcmp>
 800714a:	2800      	cmp	r0, #0
 800714c:	da53      	bge.n	80071f6 <_dtoa_r+0x8f6>
 800714e:	1e7b      	subs	r3, r7, #1
 8007150:	9304      	str	r3, [sp, #16]
 8007152:	4649      	mov	r1, r9
 8007154:	2300      	movs	r3, #0
 8007156:	220a      	movs	r2, #10
 8007158:	4658      	mov	r0, fp
 800715a:	f000 faf7 	bl	800774c <__multadd>
 800715e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007160:	4681      	mov	r9, r0
 8007162:	2b00      	cmp	r3, #0
 8007164:	f000 8172 	beq.w	800744c <_dtoa_r+0xb4c>
 8007168:	2300      	movs	r3, #0
 800716a:	4629      	mov	r1, r5
 800716c:	220a      	movs	r2, #10
 800716e:	4658      	mov	r0, fp
 8007170:	f000 faec 	bl	800774c <__multadd>
 8007174:	9b00      	ldr	r3, [sp, #0]
 8007176:	2b00      	cmp	r3, #0
 8007178:	4605      	mov	r5, r0
 800717a:	dc67      	bgt.n	800724c <_dtoa_r+0x94c>
 800717c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800717e:	2b02      	cmp	r3, #2
 8007180:	dc41      	bgt.n	8007206 <_dtoa_r+0x906>
 8007182:	e063      	b.n	800724c <_dtoa_r+0x94c>
 8007184:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007186:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800718a:	e746      	b.n	800701a <_dtoa_r+0x71a>
 800718c:	9b07      	ldr	r3, [sp, #28]
 800718e:	1e5c      	subs	r4, r3, #1
 8007190:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007192:	42a3      	cmp	r3, r4
 8007194:	bfbf      	itttt	lt
 8007196:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007198:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800719a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800719c:	1ae3      	sublt	r3, r4, r3
 800719e:	bfb4      	ite	lt
 80071a0:	18d2      	addlt	r2, r2, r3
 80071a2:	1b1c      	subge	r4, r3, r4
 80071a4:	9b07      	ldr	r3, [sp, #28]
 80071a6:	bfbc      	itt	lt
 80071a8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80071aa:	2400      	movlt	r4, #0
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	bfb5      	itete	lt
 80071b0:	eba8 0603 	sublt.w	r6, r8, r3
 80071b4:	9b07      	ldrge	r3, [sp, #28]
 80071b6:	2300      	movlt	r3, #0
 80071b8:	4646      	movge	r6, r8
 80071ba:	e730      	b.n	800701e <_dtoa_r+0x71e>
 80071bc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80071be:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80071c0:	4646      	mov	r6, r8
 80071c2:	e735      	b.n	8007030 <_dtoa_r+0x730>
 80071c4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80071c6:	e75c      	b.n	8007082 <_dtoa_r+0x782>
 80071c8:	2300      	movs	r3, #0
 80071ca:	e788      	b.n	80070de <_dtoa_r+0x7de>
 80071cc:	3fe00000 	.word	0x3fe00000
 80071d0:	40240000 	.word	0x40240000
 80071d4:	40140000 	.word	0x40140000
 80071d8:	9b02      	ldr	r3, [sp, #8]
 80071da:	e780      	b.n	80070de <_dtoa_r+0x7de>
 80071dc:	2300      	movs	r3, #0
 80071de:	930a      	str	r3, [sp, #40]	@ 0x28
 80071e0:	e782      	b.n	80070e8 <_dtoa_r+0x7e8>
 80071e2:	d099      	beq.n	8007118 <_dtoa_r+0x818>
 80071e4:	9a08      	ldr	r2, [sp, #32]
 80071e6:	331c      	adds	r3, #28
 80071e8:	441a      	add	r2, r3
 80071ea:	4498      	add	r8, r3
 80071ec:	441e      	add	r6, r3
 80071ee:	9208      	str	r2, [sp, #32]
 80071f0:	e792      	b.n	8007118 <_dtoa_r+0x818>
 80071f2:	4603      	mov	r3, r0
 80071f4:	e7f6      	b.n	80071e4 <_dtoa_r+0x8e4>
 80071f6:	9b07      	ldr	r3, [sp, #28]
 80071f8:	9704      	str	r7, [sp, #16]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	dc20      	bgt.n	8007240 <_dtoa_r+0x940>
 80071fe:	9300      	str	r3, [sp, #0]
 8007200:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007202:	2b02      	cmp	r3, #2
 8007204:	dd1e      	ble.n	8007244 <_dtoa_r+0x944>
 8007206:	9b00      	ldr	r3, [sp, #0]
 8007208:	2b00      	cmp	r3, #0
 800720a:	f47f aec0 	bne.w	8006f8e <_dtoa_r+0x68e>
 800720e:	4621      	mov	r1, r4
 8007210:	2205      	movs	r2, #5
 8007212:	4658      	mov	r0, fp
 8007214:	f000 fa9a 	bl	800774c <__multadd>
 8007218:	4601      	mov	r1, r0
 800721a:	4604      	mov	r4, r0
 800721c:	4648      	mov	r0, r9
 800721e:	f000 fcf7 	bl	8007c10 <__mcmp>
 8007222:	2800      	cmp	r0, #0
 8007224:	f77f aeb3 	ble.w	8006f8e <_dtoa_r+0x68e>
 8007228:	4656      	mov	r6, sl
 800722a:	2331      	movs	r3, #49	@ 0x31
 800722c:	f806 3b01 	strb.w	r3, [r6], #1
 8007230:	9b04      	ldr	r3, [sp, #16]
 8007232:	3301      	adds	r3, #1
 8007234:	9304      	str	r3, [sp, #16]
 8007236:	e6ae      	b.n	8006f96 <_dtoa_r+0x696>
 8007238:	9c07      	ldr	r4, [sp, #28]
 800723a:	9704      	str	r7, [sp, #16]
 800723c:	4625      	mov	r5, r4
 800723e:	e7f3      	b.n	8007228 <_dtoa_r+0x928>
 8007240:	9b07      	ldr	r3, [sp, #28]
 8007242:	9300      	str	r3, [sp, #0]
 8007244:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007246:	2b00      	cmp	r3, #0
 8007248:	f000 8104 	beq.w	8007454 <_dtoa_r+0xb54>
 800724c:	2e00      	cmp	r6, #0
 800724e:	dd05      	ble.n	800725c <_dtoa_r+0x95c>
 8007250:	4629      	mov	r1, r5
 8007252:	4632      	mov	r2, r6
 8007254:	4658      	mov	r0, fp
 8007256:	f000 fc6f 	bl	8007b38 <__lshift>
 800725a:	4605      	mov	r5, r0
 800725c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800725e:	2b00      	cmp	r3, #0
 8007260:	d05a      	beq.n	8007318 <_dtoa_r+0xa18>
 8007262:	6869      	ldr	r1, [r5, #4]
 8007264:	4658      	mov	r0, fp
 8007266:	f000 fa0f 	bl	8007688 <_Balloc>
 800726a:	4606      	mov	r6, r0
 800726c:	b928      	cbnz	r0, 800727a <_dtoa_r+0x97a>
 800726e:	4b84      	ldr	r3, [pc, #528]	@ (8007480 <_dtoa_r+0xb80>)
 8007270:	4602      	mov	r2, r0
 8007272:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007276:	f7ff bb5a 	b.w	800692e <_dtoa_r+0x2e>
 800727a:	692a      	ldr	r2, [r5, #16]
 800727c:	3202      	adds	r2, #2
 800727e:	0092      	lsls	r2, r2, #2
 8007280:	f105 010c 	add.w	r1, r5, #12
 8007284:	300c      	adds	r0, #12
 8007286:	f002 f921 	bl	80094cc <memcpy>
 800728a:	2201      	movs	r2, #1
 800728c:	4631      	mov	r1, r6
 800728e:	4658      	mov	r0, fp
 8007290:	f000 fc52 	bl	8007b38 <__lshift>
 8007294:	f10a 0301 	add.w	r3, sl, #1
 8007298:	9307      	str	r3, [sp, #28]
 800729a:	9b00      	ldr	r3, [sp, #0]
 800729c:	4453      	add	r3, sl
 800729e:	930b      	str	r3, [sp, #44]	@ 0x2c
 80072a0:	9b02      	ldr	r3, [sp, #8]
 80072a2:	f003 0301 	and.w	r3, r3, #1
 80072a6:	462f      	mov	r7, r5
 80072a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80072aa:	4605      	mov	r5, r0
 80072ac:	9b07      	ldr	r3, [sp, #28]
 80072ae:	4621      	mov	r1, r4
 80072b0:	3b01      	subs	r3, #1
 80072b2:	4648      	mov	r0, r9
 80072b4:	9300      	str	r3, [sp, #0]
 80072b6:	f7ff fa9b 	bl	80067f0 <quorem>
 80072ba:	4639      	mov	r1, r7
 80072bc:	9002      	str	r0, [sp, #8]
 80072be:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80072c2:	4648      	mov	r0, r9
 80072c4:	f000 fca4 	bl	8007c10 <__mcmp>
 80072c8:	462a      	mov	r2, r5
 80072ca:	9008      	str	r0, [sp, #32]
 80072cc:	4621      	mov	r1, r4
 80072ce:	4658      	mov	r0, fp
 80072d0:	f000 fcba 	bl	8007c48 <__mdiff>
 80072d4:	68c2      	ldr	r2, [r0, #12]
 80072d6:	4606      	mov	r6, r0
 80072d8:	bb02      	cbnz	r2, 800731c <_dtoa_r+0xa1c>
 80072da:	4601      	mov	r1, r0
 80072dc:	4648      	mov	r0, r9
 80072de:	f000 fc97 	bl	8007c10 <__mcmp>
 80072e2:	4602      	mov	r2, r0
 80072e4:	4631      	mov	r1, r6
 80072e6:	4658      	mov	r0, fp
 80072e8:	920e      	str	r2, [sp, #56]	@ 0x38
 80072ea:	f000 fa0d 	bl	8007708 <_Bfree>
 80072ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072f0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80072f2:	9e07      	ldr	r6, [sp, #28]
 80072f4:	ea43 0102 	orr.w	r1, r3, r2
 80072f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80072fa:	4319      	orrs	r1, r3
 80072fc:	d110      	bne.n	8007320 <_dtoa_r+0xa20>
 80072fe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007302:	d029      	beq.n	8007358 <_dtoa_r+0xa58>
 8007304:	9b08      	ldr	r3, [sp, #32]
 8007306:	2b00      	cmp	r3, #0
 8007308:	dd02      	ble.n	8007310 <_dtoa_r+0xa10>
 800730a:	9b02      	ldr	r3, [sp, #8]
 800730c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007310:	9b00      	ldr	r3, [sp, #0]
 8007312:	f883 8000 	strb.w	r8, [r3]
 8007316:	e63f      	b.n	8006f98 <_dtoa_r+0x698>
 8007318:	4628      	mov	r0, r5
 800731a:	e7bb      	b.n	8007294 <_dtoa_r+0x994>
 800731c:	2201      	movs	r2, #1
 800731e:	e7e1      	b.n	80072e4 <_dtoa_r+0x9e4>
 8007320:	9b08      	ldr	r3, [sp, #32]
 8007322:	2b00      	cmp	r3, #0
 8007324:	db04      	blt.n	8007330 <_dtoa_r+0xa30>
 8007326:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007328:	430b      	orrs	r3, r1
 800732a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800732c:	430b      	orrs	r3, r1
 800732e:	d120      	bne.n	8007372 <_dtoa_r+0xa72>
 8007330:	2a00      	cmp	r2, #0
 8007332:	dded      	ble.n	8007310 <_dtoa_r+0xa10>
 8007334:	4649      	mov	r1, r9
 8007336:	2201      	movs	r2, #1
 8007338:	4658      	mov	r0, fp
 800733a:	f000 fbfd 	bl	8007b38 <__lshift>
 800733e:	4621      	mov	r1, r4
 8007340:	4681      	mov	r9, r0
 8007342:	f000 fc65 	bl	8007c10 <__mcmp>
 8007346:	2800      	cmp	r0, #0
 8007348:	dc03      	bgt.n	8007352 <_dtoa_r+0xa52>
 800734a:	d1e1      	bne.n	8007310 <_dtoa_r+0xa10>
 800734c:	f018 0f01 	tst.w	r8, #1
 8007350:	d0de      	beq.n	8007310 <_dtoa_r+0xa10>
 8007352:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007356:	d1d8      	bne.n	800730a <_dtoa_r+0xa0a>
 8007358:	9a00      	ldr	r2, [sp, #0]
 800735a:	2339      	movs	r3, #57	@ 0x39
 800735c:	7013      	strb	r3, [r2, #0]
 800735e:	4633      	mov	r3, r6
 8007360:	461e      	mov	r6, r3
 8007362:	3b01      	subs	r3, #1
 8007364:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007368:	2a39      	cmp	r2, #57	@ 0x39
 800736a:	d052      	beq.n	8007412 <_dtoa_r+0xb12>
 800736c:	3201      	adds	r2, #1
 800736e:	701a      	strb	r2, [r3, #0]
 8007370:	e612      	b.n	8006f98 <_dtoa_r+0x698>
 8007372:	2a00      	cmp	r2, #0
 8007374:	dd07      	ble.n	8007386 <_dtoa_r+0xa86>
 8007376:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800737a:	d0ed      	beq.n	8007358 <_dtoa_r+0xa58>
 800737c:	9a00      	ldr	r2, [sp, #0]
 800737e:	f108 0301 	add.w	r3, r8, #1
 8007382:	7013      	strb	r3, [r2, #0]
 8007384:	e608      	b.n	8006f98 <_dtoa_r+0x698>
 8007386:	9b07      	ldr	r3, [sp, #28]
 8007388:	9a07      	ldr	r2, [sp, #28]
 800738a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800738e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007390:	4293      	cmp	r3, r2
 8007392:	d028      	beq.n	80073e6 <_dtoa_r+0xae6>
 8007394:	4649      	mov	r1, r9
 8007396:	2300      	movs	r3, #0
 8007398:	220a      	movs	r2, #10
 800739a:	4658      	mov	r0, fp
 800739c:	f000 f9d6 	bl	800774c <__multadd>
 80073a0:	42af      	cmp	r7, r5
 80073a2:	4681      	mov	r9, r0
 80073a4:	f04f 0300 	mov.w	r3, #0
 80073a8:	f04f 020a 	mov.w	r2, #10
 80073ac:	4639      	mov	r1, r7
 80073ae:	4658      	mov	r0, fp
 80073b0:	d107      	bne.n	80073c2 <_dtoa_r+0xac2>
 80073b2:	f000 f9cb 	bl	800774c <__multadd>
 80073b6:	4607      	mov	r7, r0
 80073b8:	4605      	mov	r5, r0
 80073ba:	9b07      	ldr	r3, [sp, #28]
 80073bc:	3301      	adds	r3, #1
 80073be:	9307      	str	r3, [sp, #28]
 80073c0:	e774      	b.n	80072ac <_dtoa_r+0x9ac>
 80073c2:	f000 f9c3 	bl	800774c <__multadd>
 80073c6:	4629      	mov	r1, r5
 80073c8:	4607      	mov	r7, r0
 80073ca:	2300      	movs	r3, #0
 80073cc:	220a      	movs	r2, #10
 80073ce:	4658      	mov	r0, fp
 80073d0:	f000 f9bc 	bl	800774c <__multadd>
 80073d4:	4605      	mov	r5, r0
 80073d6:	e7f0      	b.n	80073ba <_dtoa_r+0xaba>
 80073d8:	9b00      	ldr	r3, [sp, #0]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	bfcc      	ite	gt
 80073de:	461e      	movgt	r6, r3
 80073e0:	2601      	movle	r6, #1
 80073e2:	4456      	add	r6, sl
 80073e4:	2700      	movs	r7, #0
 80073e6:	4649      	mov	r1, r9
 80073e8:	2201      	movs	r2, #1
 80073ea:	4658      	mov	r0, fp
 80073ec:	f000 fba4 	bl	8007b38 <__lshift>
 80073f0:	4621      	mov	r1, r4
 80073f2:	4681      	mov	r9, r0
 80073f4:	f000 fc0c 	bl	8007c10 <__mcmp>
 80073f8:	2800      	cmp	r0, #0
 80073fa:	dcb0      	bgt.n	800735e <_dtoa_r+0xa5e>
 80073fc:	d102      	bne.n	8007404 <_dtoa_r+0xb04>
 80073fe:	f018 0f01 	tst.w	r8, #1
 8007402:	d1ac      	bne.n	800735e <_dtoa_r+0xa5e>
 8007404:	4633      	mov	r3, r6
 8007406:	461e      	mov	r6, r3
 8007408:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800740c:	2a30      	cmp	r2, #48	@ 0x30
 800740e:	d0fa      	beq.n	8007406 <_dtoa_r+0xb06>
 8007410:	e5c2      	b.n	8006f98 <_dtoa_r+0x698>
 8007412:	459a      	cmp	sl, r3
 8007414:	d1a4      	bne.n	8007360 <_dtoa_r+0xa60>
 8007416:	9b04      	ldr	r3, [sp, #16]
 8007418:	3301      	adds	r3, #1
 800741a:	9304      	str	r3, [sp, #16]
 800741c:	2331      	movs	r3, #49	@ 0x31
 800741e:	f88a 3000 	strb.w	r3, [sl]
 8007422:	e5b9      	b.n	8006f98 <_dtoa_r+0x698>
 8007424:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007426:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007484 <_dtoa_r+0xb84>
 800742a:	b11b      	cbz	r3, 8007434 <_dtoa_r+0xb34>
 800742c:	f10a 0308 	add.w	r3, sl, #8
 8007430:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007432:	6013      	str	r3, [r2, #0]
 8007434:	4650      	mov	r0, sl
 8007436:	b019      	add	sp, #100	@ 0x64
 8007438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800743c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800743e:	2b01      	cmp	r3, #1
 8007440:	f77f ae37 	ble.w	80070b2 <_dtoa_r+0x7b2>
 8007444:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007446:	930a      	str	r3, [sp, #40]	@ 0x28
 8007448:	2001      	movs	r0, #1
 800744a:	e655      	b.n	80070f8 <_dtoa_r+0x7f8>
 800744c:	9b00      	ldr	r3, [sp, #0]
 800744e:	2b00      	cmp	r3, #0
 8007450:	f77f aed6 	ble.w	8007200 <_dtoa_r+0x900>
 8007454:	4656      	mov	r6, sl
 8007456:	4621      	mov	r1, r4
 8007458:	4648      	mov	r0, r9
 800745a:	f7ff f9c9 	bl	80067f0 <quorem>
 800745e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007462:	f806 8b01 	strb.w	r8, [r6], #1
 8007466:	9b00      	ldr	r3, [sp, #0]
 8007468:	eba6 020a 	sub.w	r2, r6, sl
 800746c:	4293      	cmp	r3, r2
 800746e:	ddb3      	ble.n	80073d8 <_dtoa_r+0xad8>
 8007470:	4649      	mov	r1, r9
 8007472:	2300      	movs	r3, #0
 8007474:	220a      	movs	r2, #10
 8007476:	4658      	mov	r0, fp
 8007478:	f000 f968 	bl	800774c <__multadd>
 800747c:	4681      	mov	r9, r0
 800747e:	e7ea      	b.n	8007456 <_dtoa_r+0xb56>
 8007480:	0800a2fd 	.word	0x0800a2fd
 8007484:	0800a281 	.word	0x0800a281

08007488 <_free_r>:
 8007488:	b538      	push	{r3, r4, r5, lr}
 800748a:	4605      	mov	r5, r0
 800748c:	2900      	cmp	r1, #0
 800748e:	d041      	beq.n	8007514 <_free_r+0x8c>
 8007490:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007494:	1f0c      	subs	r4, r1, #4
 8007496:	2b00      	cmp	r3, #0
 8007498:	bfb8      	it	lt
 800749a:	18e4      	addlt	r4, r4, r3
 800749c:	f000 f8e8 	bl	8007670 <__malloc_lock>
 80074a0:	4a1d      	ldr	r2, [pc, #116]	@ (8007518 <_free_r+0x90>)
 80074a2:	6813      	ldr	r3, [r2, #0]
 80074a4:	b933      	cbnz	r3, 80074b4 <_free_r+0x2c>
 80074a6:	6063      	str	r3, [r4, #4]
 80074a8:	6014      	str	r4, [r2, #0]
 80074aa:	4628      	mov	r0, r5
 80074ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074b0:	f000 b8e4 	b.w	800767c <__malloc_unlock>
 80074b4:	42a3      	cmp	r3, r4
 80074b6:	d908      	bls.n	80074ca <_free_r+0x42>
 80074b8:	6820      	ldr	r0, [r4, #0]
 80074ba:	1821      	adds	r1, r4, r0
 80074bc:	428b      	cmp	r3, r1
 80074be:	bf01      	itttt	eq
 80074c0:	6819      	ldreq	r1, [r3, #0]
 80074c2:	685b      	ldreq	r3, [r3, #4]
 80074c4:	1809      	addeq	r1, r1, r0
 80074c6:	6021      	streq	r1, [r4, #0]
 80074c8:	e7ed      	b.n	80074a6 <_free_r+0x1e>
 80074ca:	461a      	mov	r2, r3
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	b10b      	cbz	r3, 80074d4 <_free_r+0x4c>
 80074d0:	42a3      	cmp	r3, r4
 80074d2:	d9fa      	bls.n	80074ca <_free_r+0x42>
 80074d4:	6811      	ldr	r1, [r2, #0]
 80074d6:	1850      	adds	r0, r2, r1
 80074d8:	42a0      	cmp	r0, r4
 80074da:	d10b      	bne.n	80074f4 <_free_r+0x6c>
 80074dc:	6820      	ldr	r0, [r4, #0]
 80074de:	4401      	add	r1, r0
 80074e0:	1850      	adds	r0, r2, r1
 80074e2:	4283      	cmp	r3, r0
 80074e4:	6011      	str	r1, [r2, #0]
 80074e6:	d1e0      	bne.n	80074aa <_free_r+0x22>
 80074e8:	6818      	ldr	r0, [r3, #0]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	6053      	str	r3, [r2, #4]
 80074ee:	4408      	add	r0, r1
 80074f0:	6010      	str	r0, [r2, #0]
 80074f2:	e7da      	b.n	80074aa <_free_r+0x22>
 80074f4:	d902      	bls.n	80074fc <_free_r+0x74>
 80074f6:	230c      	movs	r3, #12
 80074f8:	602b      	str	r3, [r5, #0]
 80074fa:	e7d6      	b.n	80074aa <_free_r+0x22>
 80074fc:	6820      	ldr	r0, [r4, #0]
 80074fe:	1821      	adds	r1, r4, r0
 8007500:	428b      	cmp	r3, r1
 8007502:	bf04      	itt	eq
 8007504:	6819      	ldreq	r1, [r3, #0]
 8007506:	685b      	ldreq	r3, [r3, #4]
 8007508:	6063      	str	r3, [r4, #4]
 800750a:	bf04      	itt	eq
 800750c:	1809      	addeq	r1, r1, r0
 800750e:	6021      	streq	r1, [r4, #0]
 8007510:	6054      	str	r4, [r2, #4]
 8007512:	e7ca      	b.n	80074aa <_free_r+0x22>
 8007514:	bd38      	pop	{r3, r4, r5, pc}
 8007516:	bf00      	nop
 8007518:	20000c6c 	.word	0x20000c6c

0800751c <malloc>:
 800751c:	4b02      	ldr	r3, [pc, #8]	@ (8007528 <malloc+0xc>)
 800751e:	4601      	mov	r1, r0
 8007520:	6818      	ldr	r0, [r3, #0]
 8007522:	f000 b825 	b.w	8007570 <_malloc_r>
 8007526:	bf00      	nop
 8007528:	20000018 	.word	0x20000018

0800752c <sbrk_aligned>:
 800752c:	b570      	push	{r4, r5, r6, lr}
 800752e:	4e0f      	ldr	r6, [pc, #60]	@ (800756c <sbrk_aligned+0x40>)
 8007530:	460c      	mov	r4, r1
 8007532:	6831      	ldr	r1, [r6, #0]
 8007534:	4605      	mov	r5, r0
 8007536:	b911      	cbnz	r1, 800753e <sbrk_aligned+0x12>
 8007538:	f001 ffb8 	bl	80094ac <_sbrk_r>
 800753c:	6030      	str	r0, [r6, #0]
 800753e:	4621      	mov	r1, r4
 8007540:	4628      	mov	r0, r5
 8007542:	f001 ffb3 	bl	80094ac <_sbrk_r>
 8007546:	1c43      	adds	r3, r0, #1
 8007548:	d103      	bne.n	8007552 <sbrk_aligned+0x26>
 800754a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800754e:	4620      	mov	r0, r4
 8007550:	bd70      	pop	{r4, r5, r6, pc}
 8007552:	1cc4      	adds	r4, r0, #3
 8007554:	f024 0403 	bic.w	r4, r4, #3
 8007558:	42a0      	cmp	r0, r4
 800755a:	d0f8      	beq.n	800754e <sbrk_aligned+0x22>
 800755c:	1a21      	subs	r1, r4, r0
 800755e:	4628      	mov	r0, r5
 8007560:	f001 ffa4 	bl	80094ac <_sbrk_r>
 8007564:	3001      	adds	r0, #1
 8007566:	d1f2      	bne.n	800754e <sbrk_aligned+0x22>
 8007568:	e7ef      	b.n	800754a <sbrk_aligned+0x1e>
 800756a:	bf00      	nop
 800756c:	20000c68 	.word	0x20000c68

08007570 <_malloc_r>:
 8007570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007574:	1ccd      	adds	r5, r1, #3
 8007576:	f025 0503 	bic.w	r5, r5, #3
 800757a:	3508      	adds	r5, #8
 800757c:	2d0c      	cmp	r5, #12
 800757e:	bf38      	it	cc
 8007580:	250c      	movcc	r5, #12
 8007582:	2d00      	cmp	r5, #0
 8007584:	4606      	mov	r6, r0
 8007586:	db01      	blt.n	800758c <_malloc_r+0x1c>
 8007588:	42a9      	cmp	r1, r5
 800758a:	d904      	bls.n	8007596 <_malloc_r+0x26>
 800758c:	230c      	movs	r3, #12
 800758e:	6033      	str	r3, [r6, #0]
 8007590:	2000      	movs	r0, #0
 8007592:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007596:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800766c <_malloc_r+0xfc>
 800759a:	f000 f869 	bl	8007670 <__malloc_lock>
 800759e:	f8d8 3000 	ldr.w	r3, [r8]
 80075a2:	461c      	mov	r4, r3
 80075a4:	bb44      	cbnz	r4, 80075f8 <_malloc_r+0x88>
 80075a6:	4629      	mov	r1, r5
 80075a8:	4630      	mov	r0, r6
 80075aa:	f7ff ffbf 	bl	800752c <sbrk_aligned>
 80075ae:	1c43      	adds	r3, r0, #1
 80075b0:	4604      	mov	r4, r0
 80075b2:	d158      	bne.n	8007666 <_malloc_r+0xf6>
 80075b4:	f8d8 4000 	ldr.w	r4, [r8]
 80075b8:	4627      	mov	r7, r4
 80075ba:	2f00      	cmp	r7, #0
 80075bc:	d143      	bne.n	8007646 <_malloc_r+0xd6>
 80075be:	2c00      	cmp	r4, #0
 80075c0:	d04b      	beq.n	800765a <_malloc_r+0xea>
 80075c2:	6823      	ldr	r3, [r4, #0]
 80075c4:	4639      	mov	r1, r7
 80075c6:	4630      	mov	r0, r6
 80075c8:	eb04 0903 	add.w	r9, r4, r3
 80075cc:	f001 ff6e 	bl	80094ac <_sbrk_r>
 80075d0:	4581      	cmp	r9, r0
 80075d2:	d142      	bne.n	800765a <_malloc_r+0xea>
 80075d4:	6821      	ldr	r1, [r4, #0]
 80075d6:	1a6d      	subs	r5, r5, r1
 80075d8:	4629      	mov	r1, r5
 80075da:	4630      	mov	r0, r6
 80075dc:	f7ff ffa6 	bl	800752c <sbrk_aligned>
 80075e0:	3001      	adds	r0, #1
 80075e2:	d03a      	beq.n	800765a <_malloc_r+0xea>
 80075e4:	6823      	ldr	r3, [r4, #0]
 80075e6:	442b      	add	r3, r5
 80075e8:	6023      	str	r3, [r4, #0]
 80075ea:	f8d8 3000 	ldr.w	r3, [r8]
 80075ee:	685a      	ldr	r2, [r3, #4]
 80075f0:	bb62      	cbnz	r2, 800764c <_malloc_r+0xdc>
 80075f2:	f8c8 7000 	str.w	r7, [r8]
 80075f6:	e00f      	b.n	8007618 <_malloc_r+0xa8>
 80075f8:	6822      	ldr	r2, [r4, #0]
 80075fa:	1b52      	subs	r2, r2, r5
 80075fc:	d420      	bmi.n	8007640 <_malloc_r+0xd0>
 80075fe:	2a0b      	cmp	r2, #11
 8007600:	d917      	bls.n	8007632 <_malloc_r+0xc2>
 8007602:	1961      	adds	r1, r4, r5
 8007604:	42a3      	cmp	r3, r4
 8007606:	6025      	str	r5, [r4, #0]
 8007608:	bf18      	it	ne
 800760a:	6059      	strne	r1, [r3, #4]
 800760c:	6863      	ldr	r3, [r4, #4]
 800760e:	bf08      	it	eq
 8007610:	f8c8 1000 	streq.w	r1, [r8]
 8007614:	5162      	str	r2, [r4, r5]
 8007616:	604b      	str	r3, [r1, #4]
 8007618:	4630      	mov	r0, r6
 800761a:	f000 f82f 	bl	800767c <__malloc_unlock>
 800761e:	f104 000b 	add.w	r0, r4, #11
 8007622:	1d23      	adds	r3, r4, #4
 8007624:	f020 0007 	bic.w	r0, r0, #7
 8007628:	1ac2      	subs	r2, r0, r3
 800762a:	bf1c      	itt	ne
 800762c:	1a1b      	subne	r3, r3, r0
 800762e:	50a3      	strne	r3, [r4, r2]
 8007630:	e7af      	b.n	8007592 <_malloc_r+0x22>
 8007632:	6862      	ldr	r2, [r4, #4]
 8007634:	42a3      	cmp	r3, r4
 8007636:	bf0c      	ite	eq
 8007638:	f8c8 2000 	streq.w	r2, [r8]
 800763c:	605a      	strne	r2, [r3, #4]
 800763e:	e7eb      	b.n	8007618 <_malloc_r+0xa8>
 8007640:	4623      	mov	r3, r4
 8007642:	6864      	ldr	r4, [r4, #4]
 8007644:	e7ae      	b.n	80075a4 <_malloc_r+0x34>
 8007646:	463c      	mov	r4, r7
 8007648:	687f      	ldr	r7, [r7, #4]
 800764a:	e7b6      	b.n	80075ba <_malloc_r+0x4a>
 800764c:	461a      	mov	r2, r3
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	42a3      	cmp	r3, r4
 8007652:	d1fb      	bne.n	800764c <_malloc_r+0xdc>
 8007654:	2300      	movs	r3, #0
 8007656:	6053      	str	r3, [r2, #4]
 8007658:	e7de      	b.n	8007618 <_malloc_r+0xa8>
 800765a:	230c      	movs	r3, #12
 800765c:	6033      	str	r3, [r6, #0]
 800765e:	4630      	mov	r0, r6
 8007660:	f000 f80c 	bl	800767c <__malloc_unlock>
 8007664:	e794      	b.n	8007590 <_malloc_r+0x20>
 8007666:	6005      	str	r5, [r0, #0]
 8007668:	e7d6      	b.n	8007618 <_malloc_r+0xa8>
 800766a:	bf00      	nop
 800766c:	20000c6c 	.word	0x20000c6c

08007670 <__malloc_lock>:
 8007670:	4801      	ldr	r0, [pc, #4]	@ (8007678 <__malloc_lock+0x8>)
 8007672:	f7ff b8b4 	b.w	80067de <__retarget_lock_acquire_recursive>
 8007676:	bf00      	nop
 8007678:	20000c64 	.word	0x20000c64

0800767c <__malloc_unlock>:
 800767c:	4801      	ldr	r0, [pc, #4]	@ (8007684 <__malloc_unlock+0x8>)
 800767e:	f7ff b8af 	b.w	80067e0 <__retarget_lock_release_recursive>
 8007682:	bf00      	nop
 8007684:	20000c64 	.word	0x20000c64

08007688 <_Balloc>:
 8007688:	b570      	push	{r4, r5, r6, lr}
 800768a:	69c6      	ldr	r6, [r0, #28]
 800768c:	4604      	mov	r4, r0
 800768e:	460d      	mov	r5, r1
 8007690:	b976      	cbnz	r6, 80076b0 <_Balloc+0x28>
 8007692:	2010      	movs	r0, #16
 8007694:	f7ff ff42 	bl	800751c <malloc>
 8007698:	4602      	mov	r2, r0
 800769a:	61e0      	str	r0, [r4, #28]
 800769c:	b920      	cbnz	r0, 80076a8 <_Balloc+0x20>
 800769e:	4b18      	ldr	r3, [pc, #96]	@ (8007700 <_Balloc+0x78>)
 80076a0:	4818      	ldr	r0, [pc, #96]	@ (8007704 <_Balloc+0x7c>)
 80076a2:	216b      	movs	r1, #107	@ 0x6b
 80076a4:	f001 ff28 	bl	80094f8 <__assert_func>
 80076a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80076ac:	6006      	str	r6, [r0, #0]
 80076ae:	60c6      	str	r6, [r0, #12]
 80076b0:	69e6      	ldr	r6, [r4, #28]
 80076b2:	68f3      	ldr	r3, [r6, #12]
 80076b4:	b183      	cbz	r3, 80076d8 <_Balloc+0x50>
 80076b6:	69e3      	ldr	r3, [r4, #28]
 80076b8:	68db      	ldr	r3, [r3, #12]
 80076ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80076be:	b9b8      	cbnz	r0, 80076f0 <_Balloc+0x68>
 80076c0:	2101      	movs	r1, #1
 80076c2:	fa01 f605 	lsl.w	r6, r1, r5
 80076c6:	1d72      	adds	r2, r6, #5
 80076c8:	0092      	lsls	r2, r2, #2
 80076ca:	4620      	mov	r0, r4
 80076cc:	f001 ff32 	bl	8009534 <_calloc_r>
 80076d0:	b160      	cbz	r0, 80076ec <_Balloc+0x64>
 80076d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80076d6:	e00e      	b.n	80076f6 <_Balloc+0x6e>
 80076d8:	2221      	movs	r2, #33	@ 0x21
 80076da:	2104      	movs	r1, #4
 80076dc:	4620      	mov	r0, r4
 80076de:	f001 ff29 	bl	8009534 <_calloc_r>
 80076e2:	69e3      	ldr	r3, [r4, #28]
 80076e4:	60f0      	str	r0, [r6, #12]
 80076e6:	68db      	ldr	r3, [r3, #12]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d1e4      	bne.n	80076b6 <_Balloc+0x2e>
 80076ec:	2000      	movs	r0, #0
 80076ee:	bd70      	pop	{r4, r5, r6, pc}
 80076f0:	6802      	ldr	r2, [r0, #0]
 80076f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80076f6:	2300      	movs	r3, #0
 80076f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80076fc:	e7f7      	b.n	80076ee <_Balloc+0x66>
 80076fe:	bf00      	nop
 8007700:	0800a28e 	.word	0x0800a28e
 8007704:	0800a30e 	.word	0x0800a30e

08007708 <_Bfree>:
 8007708:	b570      	push	{r4, r5, r6, lr}
 800770a:	69c6      	ldr	r6, [r0, #28]
 800770c:	4605      	mov	r5, r0
 800770e:	460c      	mov	r4, r1
 8007710:	b976      	cbnz	r6, 8007730 <_Bfree+0x28>
 8007712:	2010      	movs	r0, #16
 8007714:	f7ff ff02 	bl	800751c <malloc>
 8007718:	4602      	mov	r2, r0
 800771a:	61e8      	str	r0, [r5, #28]
 800771c:	b920      	cbnz	r0, 8007728 <_Bfree+0x20>
 800771e:	4b09      	ldr	r3, [pc, #36]	@ (8007744 <_Bfree+0x3c>)
 8007720:	4809      	ldr	r0, [pc, #36]	@ (8007748 <_Bfree+0x40>)
 8007722:	218f      	movs	r1, #143	@ 0x8f
 8007724:	f001 fee8 	bl	80094f8 <__assert_func>
 8007728:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800772c:	6006      	str	r6, [r0, #0]
 800772e:	60c6      	str	r6, [r0, #12]
 8007730:	b13c      	cbz	r4, 8007742 <_Bfree+0x3a>
 8007732:	69eb      	ldr	r3, [r5, #28]
 8007734:	6862      	ldr	r2, [r4, #4]
 8007736:	68db      	ldr	r3, [r3, #12]
 8007738:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800773c:	6021      	str	r1, [r4, #0]
 800773e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007742:	bd70      	pop	{r4, r5, r6, pc}
 8007744:	0800a28e 	.word	0x0800a28e
 8007748:	0800a30e 	.word	0x0800a30e

0800774c <__multadd>:
 800774c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007750:	690d      	ldr	r5, [r1, #16]
 8007752:	4607      	mov	r7, r0
 8007754:	460c      	mov	r4, r1
 8007756:	461e      	mov	r6, r3
 8007758:	f101 0c14 	add.w	ip, r1, #20
 800775c:	2000      	movs	r0, #0
 800775e:	f8dc 3000 	ldr.w	r3, [ip]
 8007762:	b299      	uxth	r1, r3
 8007764:	fb02 6101 	mla	r1, r2, r1, r6
 8007768:	0c1e      	lsrs	r6, r3, #16
 800776a:	0c0b      	lsrs	r3, r1, #16
 800776c:	fb02 3306 	mla	r3, r2, r6, r3
 8007770:	b289      	uxth	r1, r1
 8007772:	3001      	adds	r0, #1
 8007774:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007778:	4285      	cmp	r5, r0
 800777a:	f84c 1b04 	str.w	r1, [ip], #4
 800777e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007782:	dcec      	bgt.n	800775e <__multadd+0x12>
 8007784:	b30e      	cbz	r6, 80077ca <__multadd+0x7e>
 8007786:	68a3      	ldr	r3, [r4, #8]
 8007788:	42ab      	cmp	r3, r5
 800778a:	dc19      	bgt.n	80077c0 <__multadd+0x74>
 800778c:	6861      	ldr	r1, [r4, #4]
 800778e:	4638      	mov	r0, r7
 8007790:	3101      	adds	r1, #1
 8007792:	f7ff ff79 	bl	8007688 <_Balloc>
 8007796:	4680      	mov	r8, r0
 8007798:	b928      	cbnz	r0, 80077a6 <__multadd+0x5a>
 800779a:	4602      	mov	r2, r0
 800779c:	4b0c      	ldr	r3, [pc, #48]	@ (80077d0 <__multadd+0x84>)
 800779e:	480d      	ldr	r0, [pc, #52]	@ (80077d4 <__multadd+0x88>)
 80077a0:	21ba      	movs	r1, #186	@ 0xba
 80077a2:	f001 fea9 	bl	80094f8 <__assert_func>
 80077a6:	6922      	ldr	r2, [r4, #16]
 80077a8:	3202      	adds	r2, #2
 80077aa:	f104 010c 	add.w	r1, r4, #12
 80077ae:	0092      	lsls	r2, r2, #2
 80077b0:	300c      	adds	r0, #12
 80077b2:	f001 fe8b 	bl	80094cc <memcpy>
 80077b6:	4621      	mov	r1, r4
 80077b8:	4638      	mov	r0, r7
 80077ba:	f7ff ffa5 	bl	8007708 <_Bfree>
 80077be:	4644      	mov	r4, r8
 80077c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80077c4:	3501      	adds	r5, #1
 80077c6:	615e      	str	r6, [r3, #20]
 80077c8:	6125      	str	r5, [r4, #16]
 80077ca:	4620      	mov	r0, r4
 80077cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077d0:	0800a2fd 	.word	0x0800a2fd
 80077d4:	0800a30e 	.word	0x0800a30e

080077d8 <__s2b>:
 80077d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077dc:	460c      	mov	r4, r1
 80077de:	4615      	mov	r5, r2
 80077e0:	461f      	mov	r7, r3
 80077e2:	2209      	movs	r2, #9
 80077e4:	3308      	adds	r3, #8
 80077e6:	4606      	mov	r6, r0
 80077e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80077ec:	2100      	movs	r1, #0
 80077ee:	2201      	movs	r2, #1
 80077f0:	429a      	cmp	r2, r3
 80077f2:	db09      	blt.n	8007808 <__s2b+0x30>
 80077f4:	4630      	mov	r0, r6
 80077f6:	f7ff ff47 	bl	8007688 <_Balloc>
 80077fa:	b940      	cbnz	r0, 800780e <__s2b+0x36>
 80077fc:	4602      	mov	r2, r0
 80077fe:	4b19      	ldr	r3, [pc, #100]	@ (8007864 <__s2b+0x8c>)
 8007800:	4819      	ldr	r0, [pc, #100]	@ (8007868 <__s2b+0x90>)
 8007802:	21d3      	movs	r1, #211	@ 0xd3
 8007804:	f001 fe78 	bl	80094f8 <__assert_func>
 8007808:	0052      	lsls	r2, r2, #1
 800780a:	3101      	adds	r1, #1
 800780c:	e7f0      	b.n	80077f0 <__s2b+0x18>
 800780e:	9b08      	ldr	r3, [sp, #32]
 8007810:	6143      	str	r3, [r0, #20]
 8007812:	2d09      	cmp	r5, #9
 8007814:	f04f 0301 	mov.w	r3, #1
 8007818:	6103      	str	r3, [r0, #16]
 800781a:	dd16      	ble.n	800784a <__s2b+0x72>
 800781c:	f104 0909 	add.w	r9, r4, #9
 8007820:	46c8      	mov	r8, r9
 8007822:	442c      	add	r4, r5
 8007824:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007828:	4601      	mov	r1, r0
 800782a:	3b30      	subs	r3, #48	@ 0x30
 800782c:	220a      	movs	r2, #10
 800782e:	4630      	mov	r0, r6
 8007830:	f7ff ff8c 	bl	800774c <__multadd>
 8007834:	45a0      	cmp	r8, r4
 8007836:	d1f5      	bne.n	8007824 <__s2b+0x4c>
 8007838:	f1a5 0408 	sub.w	r4, r5, #8
 800783c:	444c      	add	r4, r9
 800783e:	1b2d      	subs	r5, r5, r4
 8007840:	1963      	adds	r3, r4, r5
 8007842:	42bb      	cmp	r3, r7
 8007844:	db04      	blt.n	8007850 <__s2b+0x78>
 8007846:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800784a:	340a      	adds	r4, #10
 800784c:	2509      	movs	r5, #9
 800784e:	e7f6      	b.n	800783e <__s2b+0x66>
 8007850:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007854:	4601      	mov	r1, r0
 8007856:	3b30      	subs	r3, #48	@ 0x30
 8007858:	220a      	movs	r2, #10
 800785a:	4630      	mov	r0, r6
 800785c:	f7ff ff76 	bl	800774c <__multadd>
 8007860:	e7ee      	b.n	8007840 <__s2b+0x68>
 8007862:	bf00      	nop
 8007864:	0800a2fd 	.word	0x0800a2fd
 8007868:	0800a30e 	.word	0x0800a30e

0800786c <__hi0bits>:
 800786c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007870:	4603      	mov	r3, r0
 8007872:	bf36      	itet	cc
 8007874:	0403      	lslcc	r3, r0, #16
 8007876:	2000      	movcs	r0, #0
 8007878:	2010      	movcc	r0, #16
 800787a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800787e:	bf3c      	itt	cc
 8007880:	021b      	lslcc	r3, r3, #8
 8007882:	3008      	addcc	r0, #8
 8007884:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007888:	bf3c      	itt	cc
 800788a:	011b      	lslcc	r3, r3, #4
 800788c:	3004      	addcc	r0, #4
 800788e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007892:	bf3c      	itt	cc
 8007894:	009b      	lslcc	r3, r3, #2
 8007896:	3002      	addcc	r0, #2
 8007898:	2b00      	cmp	r3, #0
 800789a:	db05      	blt.n	80078a8 <__hi0bits+0x3c>
 800789c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80078a0:	f100 0001 	add.w	r0, r0, #1
 80078a4:	bf08      	it	eq
 80078a6:	2020      	moveq	r0, #32
 80078a8:	4770      	bx	lr

080078aa <__lo0bits>:
 80078aa:	6803      	ldr	r3, [r0, #0]
 80078ac:	4602      	mov	r2, r0
 80078ae:	f013 0007 	ands.w	r0, r3, #7
 80078b2:	d00b      	beq.n	80078cc <__lo0bits+0x22>
 80078b4:	07d9      	lsls	r1, r3, #31
 80078b6:	d421      	bmi.n	80078fc <__lo0bits+0x52>
 80078b8:	0798      	lsls	r0, r3, #30
 80078ba:	bf49      	itett	mi
 80078bc:	085b      	lsrmi	r3, r3, #1
 80078be:	089b      	lsrpl	r3, r3, #2
 80078c0:	2001      	movmi	r0, #1
 80078c2:	6013      	strmi	r3, [r2, #0]
 80078c4:	bf5c      	itt	pl
 80078c6:	6013      	strpl	r3, [r2, #0]
 80078c8:	2002      	movpl	r0, #2
 80078ca:	4770      	bx	lr
 80078cc:	b299      	uxth	r1, r3
 80078ce:	b909      	cbnz	r1, 80078d4 <__lo0bits+0x2a>
 80078d0:	0c1b      	lsrs	r3, r3, #16
 80078d2:	2010      	movs	r0, #16
 80078d4:	b2d9      	uxtb	r1, r3
 80078d6:	b909      	cbnz	r1, 80078dc <__lo0bits+0x32>
 80078d8:	3008      	adds	r0, #8
 80078da:	0a1b      	lsrs	r3, r3, #8
 80078dc:	0719      	lsls	r1, r3, #28
 80078de:	bf04      	itt	eq
 80078e0:	091b      	lsreq	r3, r3, #4
 80078e2:	3004      	addeq	r0, #4
 80078e4:	0799      	lsls	r1, r3, #30
 80078e6:	bf04      	itt	eq
 80078e8:	089b      	lsreq	r3, r3, #2
 80078ea:	3002      	addeq	r0, #2
 80078ec:	07d9      	lsls	r1, r3, #31
 80078ee:	d403      	bmi.n	80078f8 <__lo0bits+0x4e>
 80078f0:	085b      	lsrs	r3, r3, #1
 80078f2:	f100 0001 	add.w	r0, r0, #1
 80078f6:	d003      	beq.n	8007900 <__lo0bits+0x56>
 80078f8:	6013      	str	r3, [r2, #0]
 80078fa:	4770      	bx	lr
 80078fc:	2000      	movs	r0, #0
 80078fe:	4770      	bx	lr
 8007900:	2020      	movs	r0, #32
 8007902:	4770      	bx	lr

08007904 <__i2b>:
 8007904:	b510      	push	{r4, lr}
 8007906:	460c      	mov	r4, r1
 8007908:	2101      	movs	r1, #1
 800790a:	f7ff febd 	bl	8007688 <_Balloc>
 800790e:	4602      	mov	r2, r0
 8007910:	b928      	cbnz	r0, 800791e <__i2b+0x1a>
 8007912:	4b05      	ldr	r3, [pc, #20]	@ (8007928 <__i2b+0x24>)
 8007914:	4805      	ldr	r0, [pc, #20]	@ (800792c <__i2b+0x28>)
 8007916:	f240 1145 	movw	r1, #325	@ 0x145
 800791a:	f001 fded 	bl	80094f8 <__assert_func>
 800791e:	2301      	movs	r3, #1
 8007920:	6144      	str	r4, [r0, #20]
 8007922:	6103      	str	r3, [r0, #16]
 8007924:	bd10      	pop	{r4, pc}
 8007926:	bf00      	nop
 8007928:	0800a2fd 	.word	0x0800a2fd
 800792c:	0800a30e 	.word	0x0800a30e

08007930 <__multiply>:
 8007930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007934:	4614      	mov	r4, r2
 8007936:	690a      	ldr	r2, [r1, #16]
 8007938:	6923      	ldr	r3, [r4, #16]
 800793a:	429a      	cmp	r2, r3
 800793c:	bfa8      	it	ge
 800793e:	4623      	movge	r3, r4
 8007940:	460f      	mov	r7, r1
 8007942:	bfa4      	itt	ge
 8007944:	460c      	movge	r4, r1
 8007946:	461f      	movge	r7, r3
 8007948:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800794c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007950:	68a3      	ldr	r3, [r4, #8]
 8007952:	6861      	ldr	r1, [r4, #4]
 8007954:	eb0a 0609 	add.w	r6, sl, r9
 8007958:	42b3      	cmp	r3, r6
 800795a:	b085      	sub	sp, #20
 800795c:	bfb8      	it	lt
 800795e:	3101      	addlt	r1, #1
 8007960:	f7ff fe92 	bl	8007688 <_Balloc>
 8007964:	b930      	cbnz	r0, 8007974 <__multiply+0x44>
 8007966:	4602      	mov	r2, r0
 8007968:	4b44      	ldr	r3, [pc, #272]	@ (8007a7c <__multiply+0x14c>)
 800796a:	4845      	ldr	r0, [pc, #276]	@ (8007a80 <__multiply+0x150>)
 800796c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007970:	f001 fdc2 	bl	80094f8 <__assert_func>
 8007974:	f100 0514 	add.w	r5, r0, #20
 8007978:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800797c:	462b      	mov	r3, r5
 800797e:	2200      	movs	r2, #0
 8007980:	4543      	cmp	r3, r8
 8007982:	d321      	bcc.n	80079c8 <__multiply+0x98>
 8007984:	f107 0114 	add.w	r1, r7, #20
 8007988:	f104 0214 	add.w	r2, r4, #20
 800798c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007990:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007994:	9302      	str	r3, [sp, #8]
 8007996:	1b13      	subs	r3, r2, r4
 8007998:	3b15      	subs	r3, #21
 800799a:	f023 0303 	bic.w	r3, r3, #3
 800799e:	3304      	adds	r3, #4
 80079a0:	f104 0715 	add.w	r7, r4, #21
 80079a4:	42ba      	cmp	r2, r7
 80079a6:	bf38      	it	cc
 80079a8:	2304      	movcc	r3, #4
 80079aa:	9301      	str	r3, [sp, #4]
 80079ac:	9b02      	ldr	r3, [sp, #8]
 80079ae:	9103      	str	r1, [sp, #12]
 80079b0:	428b      	cmp	r3, r1
 80079b2:	d80c      	bhi.n	80079ce <__multiply+0x9e>
 80079b4:	2e00      	cmp	r6, #0
 80079b6:	dd03      	ble.n	80079c0 <__multiply+0x90>
 80079b8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d05b      	beq.n	8007a78 <__multiply+0x148>
 80079c0:	6106      	str	r6, [r0, #16]
 80079c2:	b005      	add	sp, #20
 80079c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079c8:	f843 2b04 	str.w	r2, [r3], #4
 80079cc:	e7d8      	b.n	8007980 <__multiply+0x50>
 80079ce:	f8b1 a000 	ldrh.w	sl, [r1]
 80079d2:	f1ba 0f00 	cmp.w	sl, #0
 80079d6:	d024      	beq.n	8007a22 <__multiply+0xf2>
 80079d8:	f104 0e14 	add.w	lr, r4, #20
 80079dc:	46a9      	mov	r9, r5
 80079de:	f04f 0c00 	mov.w	ip, #0
 80079e2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80079e6:	f8d9 3000 	ldr.w	r3, [r9]
 80079ea:	fa1f fb87 	uxth.w	fp, r7
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	fb0a 330b 	mla	r3, sl, fp, r3
 80079f4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80079f8:	f8d9 7000 	ldr.w	r7, [r9]
 80079fc:	4463      	add	r3, ip
 80079fe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007a02:	fb0a c70b 	mla	r7, sl, fp, ip
 8007a06:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007a10:	4572      	cmp	r2, lr
 8007a12:	f849 3b04 	str.w	r3, [r9], #4
 8007a16:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007a1a:	d8e2      	bhi.n	80079e2 <__multiply+0xb2>
 8007a1c:	9b01      	ldr	r3, [sp, #4]
 8007a1e:	f845 c003 	str.w	ip, [r5, r3]
 8007a22:	9b03      	ldr	r3, [sp, #12]
 8007a24:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007a28:	3104      	adds	r1, #4
 8007a2a:	f1b9 0f00 	cmp.w	r9, #0
 8007a2e:	d021      	beq.n	8007a74 <__multiply+0x144>
 8007a30:	682b      	ldr	r3, [r5, #0]
 8007a32:	f104 0c14 	add.w	ip, r4, #20
 8007a36:	46ae      	mov	lr, r5
 8007a38:	f04f 0a00 	mov.w	sl, #0
 8007a3c:	f8bc b000 	ldrh.w	fp, [ip]
 8007a40:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007a44:	fb09 770b 	mla	r7, r9, fp, r7
 8007a48:	4457      	add	r7, sl
 8007a4a:	b29b      	uxth	r3, r3
 8007a4c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007a50:	f84e 3b04 	str.w	r3, [lr], #4
 8007a54:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007a58:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007a5c:	f8be 3000 	ldrh.w	r3, [lr]
 8007a60:	fb09 330a 	mla	r3, r9, sl, r3
 8007a64:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007a68:	4562      	cmp	r2, ip
 8007a6a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007a6e:	d8e5      	bhi.n	8007a3c <__multiply+0x10c>
 8007a70:	9f01      	ldr	r7, [sp, #4]
 8007a72:	51eb      	str	r3, [r5, r7]
 8007a74:	3504      	adds	r5, #4
 8007a76:	e799      	b.n	80079ac <__multiply+0x7c>
 8007a78:	3e01      	subs	r6, #1
 8007a7a:	e79b      	b.n	80079b4 <__multiply+0x84>
 8007a7c:	0800a2fd 	.word	0x0800a2fd
 8007a80:	0800a30e 	.word	0x0800a30e

08007a84 <__pow5mult>:
 8007a84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a88:	4615      	mov	r5, r2
 8007a8a:	f012 0203 	ands.w	r2, r2, #3
 8007a8e:	4607      	mov	r7, r0
 8007a90:	460e      	mov	r6, r1
 8007a92:	d007      	beq.n	8007aa4 <__pow5mult+0x20>
 8007a94:	4c25      	ldr	r4, [pc, #148]	@ (8007b2c <__pow5mult+0xa8>)
 8007a96:	3a01      	subs	r2, #1
 8007a98:	2300      	movs	r3, #0
 8007a9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007a9e:	f7ff fe55 	bl	800774c <__multadd>
 8007aa2:	4606      	mov	r6, r0
 8007aa4:	10ad      	asrs	r5, r5, #2
 8007aa6:	d03d      	beq.n	8007b24 <__pow5mult+0xa0>
 8007aa8:	69fc      	ldr	r4, [r7, #28]
 8007aaa:	b97c      	cbnz	r4, 8007acc <__pow5mult+0x48>
 8007aac:	2010      	movs	r0, #16
 8007aae:	f7ff fd35 	bl	800751c <malloc>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	61f8      	str	r0, [r7, #28]
 8007ab6:	b928      	cbnz	r0, 8007ac4 <__pow5mult+0x40>
 8007ab8:	4b1d      	ldr	r3, [pc, #116]	@ (8007b30 <__pow5mult+0xac>)
 8007aba:	481e      	ldr	r0, [pc, #120]	@ (8007b34 <__pow5mult+0xb0>)
 8007abc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007ac0:	f001 fd1a 	bl	80094f8 <__assert_func>
 8007ac4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007ac8:	6004      	str	r4, [r0, #0]
 8007aca:	60c4      	str	r4, [r0, #12]
 8007acc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007ad0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007ad4:	b94c      	cbnz	r4, 8007aea <__pow5mult+0x66>
 8007ad6:	f240 2171 	movw	r1, #625	@ 0x271
 8007ada:	4638      	mov	r0, r7
 8007adc:	f7ff ff12 	bl	8007904 <__i2b>
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	f8c8 0008 	str.w	r0, [r8, #8]
 8007ae6:	4604      	mov	r4, r0
 8007ae8:	6003      	str	r3, [r0, #0]
 8007aea:	f04f 0900 	mov.w	r9, #0
 8007aee:	07eb      	lsls	r3, r5, #31
 8007af0:	d50a      	bpl.n	8007b08 <__pow5mult+0x84>
 8007af2:	4631      	mov	r1, r6
 8007af4:	4622      	mov	r2, r4
 8007af6:	4638      	mov	r0, r7
 8007af8:	f7ff ff1a 	bl	8007930 <__multiply>
 8007afc:	4631      	mov	r1, r6
 8007afe:	4680      	mov	r8, r0
 8007b00:	4638      	mov	r0, r7
 8007b02:	f7ff fe01 	bl	8007708 <_Bfree>
 8007b06:	4646      	mov	r6, r8
 8007b08:	106d      	asrs	r5, r5, #1
 8007b0a:	d00b      	beq.n	8007b24 <__pow5mult+0xa0>
 8007b0c:	6820      	ldr	r0, [r4, #0]
 8007b0e:	b938      	cbnz	r0, 8007b20 <__pow5mult+0x9c>
 8007b10:	4622      	mov	r2, r4
 8007b12:	4621      	mov	r1, r4
 8007b14:	4638      	mov	r0, r7
 8007b16:	f7ff ff0b 	bl	8007930 <__multiply>
 8007b1a:	6020      	str	r0, [r4, #0]
 8007b1c:	f8c0 9000 	str.w	r9, [r0]
 8007b20:	4604      	mov	r4, r0
 8007b22:	e7e4      	b.n	8007aee <__pow5mult+0x6a>
 8007b24:	4630      	mov	r0, r6
 8007b26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b2a:	bf00      	nop
 8007b2c:	0800a368 	.word	0x0800a368
 8007b30:	0800a28e 	.word	0x0800a28e
 8007b34:	0800a30e 	.word	0x0800a30e

08007b38 <__lshift>:
 8007b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b3c:	460c      	mov	r4, r1
 8007b3e:	6849      	ldr	r1, [r1, #4]
 8007b40:	6923      	ldr	r3, [r4, #16]
 8007b42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007b46:	68a3      	ldr	r3, [r4, #8]
 8007b48:	4607      	mov	r7, r0
 8007b4a:	4691      	mov	r9, r2
 8007b4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007b50:	f108 0601 	add.w	r6, r8, #1
 8007b54:	42b3      	cmp	r3, r6
 8007b56:	db0b      	blt.n	8007b70 <__lshift+0x38>
 8007b58:	4638      	mov	r0, r7
 8007b5a:	f7ff fd95 	bl	8007688 <_Balloc>
 8007b5e:	4605      	mov	r5, r0
 8007b60:	b948      	cbnz	r0, 8007b76 <__lshift+0x3e>
 8007b62:	4602      	mov	r2, r0
 8007b64:	4b28      	ldr	r3, [pc, #160]	@ (8007c08 <__lshift+0xd0>)
 8007b66:	4829      	ldr	r0, [pc, #164]	@ (8007c0c <__lshift+0xd4>)
 8007b68:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007b6c:	f001 fcc4 	bl	80094f8 <__assert_func>
 8007b70:	3101      	adds	r1, #1
 8007b72:	005b      	lsls	r3, r3, #1
 8007b74:	e7ee      	b.n	8007b54 <__lshift+0x1c>
 8007b76:	2300      	movs	r3, #0
 8007b78:	f100 0114 	add.w	r1, r0, #20
 8007b7c:	f100 0210 	add.w	r2, r0, #16
 8007b80:	4618      	mov	r0, r3
 8007b82:	4553      	cmp	r3, sl
 8007b84:	db33      	blt.n	8007bee <__lshift+0xb6>
 8007b86:	6920      	ldr	r0, [r4, #16]
 8007b88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007b8c:	f104 0314 	add.w	r3, r4, #20
 8007b90:	f019 091f 	ands.w	r9, r9, #31
 8007b94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007b98:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007b9c:	d02b      	beq.n	8007bf6 <__lshift+0xbe>
 8007b9e:	f1c9 0e20 	rsb	lr, r9, #32
 8007ba2:	468a      	mov	sl, r1
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	6818      	ldr	r0, [r3, #0]
 8007ba8:	fa00 f009 	lsl.w	r0, r0, r9
 8007bac:	4310      	orrs	r0, r2
 8007bae:	f84a 0b04 	str.w	r0, [sl], #4
 8007bb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bb6:	459c      	cmp	ip, r3
 8007bb8:	fa22 f20e 	lsr.w	r2, r2, lr
 8007bbc:	d8f3      	bhi.n	8007ba6 <__lshift+0x6e>
 8007bbe:	ebac 0304 	sub.w	r3, ip, r4
 8007bc2:	3b15      	subs	r3, #21
 8007bc4:	f023 0303 	bic.w	r3, r3, #3
 8007bc8:	3304      	adds	r3, #4
 8007bca:	f104 0015 	add.w	r0, r4, #21
 8007bce:	4584      	cmp	ip, r0
 8007bd0:	bf38      	it	cc
 8007bd2:	2304      	movcc	r3, #4
 8007bd4:	50ca      	str	r2, [r1, r3]
 8007bd6:	b10a      	cbz	r2, 8007bdc <__lshift+0xa4>
 8007bd8:	f108 0602 	add.w	r6, r8, #2
 8007bdc:	3e01      	subs	r6, #1
 8007bde:	4638      	mov	r0, r7
 8007be0:	612e      	str	r6, [r5, #16]
 8007be2:	4621      	mov	r1, r4
 8007be4:	f7ff fd90 	bl	8007708 <_Bfree>
 8007be8:	4628      	mov	r0, r5
 8007bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bee:	f842 0f04 	str.w	r0, [r2, #4]!
 8007bf2:	3301      	adds	r3, #1
 8007bf4:	e7c5      	b.n	8007b82 <__lshift+0x4a>
 8007bf6:	3904      	subs	r1, #4
 8007bf8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bfc:	f841 2f04 	str.w	r2, [r1, #4]!
 8007c00:	459c      	cmp	ip, r3
 8007c02:	d8f9      	bhi.n	8007bf8 <__lshift+0xc0>
 8007c04:	e7ea      	b.n	8007bdc <__lshift+0xa4>
 8007c06:	bf00      	nop
 8007c08:	0800a2fd 	.word	0x0800a2fd
 8007c0c:	0800a30e 	.word	0x0800a30e

08007c10 <__mcmp>:
 8007c10:	690a      	ldr	r2, [r1, #16]
 8007c12:	4603      	mov	r3, r0
 8007c14:	6900      	ldr	r0, [r0, #16]
 8007c16:	1a80      	subs	r0, r0, r2
 8007c18:	b530      	push	{r4, r5, lr}
 8007c1a:	d10e      	bne.n	8007c3a <__mcmp+0x2a>
 8007c1c:	3314      	adds	r3, #20
 8007c1e:	3114      	adds	r1, #20
 8007c20:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007c24:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007c28:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007c2c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007c30:	4295      	cmp	r5, r2
 8007c32:	d003      	beq.n	8007c3c <__mcmp+0x2c>
 8007c34:	d205      	bcs.n	8007c42 <__mcmp+0x32>
 8007c36:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007c3a:	bd30      	pop	{r4, r5, pc}
 8007c3c:	42a3      	cmp	r3, r4
 8007c3e:	d3f3      	bcc.n	8007c28 <__mcmp+0x18>
 8007c40:	e7fb      	b.n	8007c3a <__mcmp+0x2a>
 8007c42:	2001      	movs	r0, #1
 8007c44:	e7f9      	b.n	8007c3a <__mcmp+0x2a>
	...

08007c48 <__mdiff>:
 8007c48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c4c:	4689      	mov	r9, r1
 8007c4e:	4606      	mov	r6, r0
 8007c50:	4611      	mov	r1, r2
 8007c52:	4648      	mov	r0, r9
 8007c54:	4614      	mov	r4, r2
 8007c56:	f7ff ffdb 	bl	8007c10 <__mcmp>
 8007c5a:	1e05      	subs	r5, r0, #0
 8007c5c:	d112      	bne.n	8007c84 <__mdiff+0x3c>
 8007c5e:	4629      	mov	r1, r5
 8007c60:	4630      	mov	r0, r6
 8007c62:	f7ff fd11 	bl	8007688 <_Balloc>
 8007c66:	4602      	mov	r2, r0
 8007c68:	b928      	cbnz	r0, 8007c76 <__mdiff+0x2e>
 8007c6a:	4b3f      	ldr	r3, [pc, #252]	@ (8007d68 <__mdiff+0x120>)
 8007c6c:	f240 2137 	movw	r1, #567	@ 0x237
 8007c70:	483e      	ldr	r0, [pc, #248]	@ (8007d6c <__mdiff+0x124>)
 8007c72:	f001 fc41 	bl	80094f8 <__assert_func>
 8007c76:	2301      	movs	r3, #1
 8007c78:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007c7c:	4610      	mov	r0, r2
 8007c7e:	b003      	add	sp, #12
 8007c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c84:	bfbc      	itt	lt
 8007c86:	464b      	movlt	r3, r9
 8007c88:	46a1      	movlt	r9, r4
 8007c8a:	4630      	mov	r0, r6
 8007c8c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007c90:	bfba      	itte	lt
 8007c92:	461c      	movlt	r4, r3
 8007c94:	2501      	movlt	r5, #1
 8007c96:	2500      	movge	r5, #0
 8007c98:	f7ff fcf6 	bl	8007688 <_Balloc>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	b918      	cbnz	r0, 8007ca8 <__mdiff+0x60>
 8007ca0:	4b31      	ldr	r3, [pc, #196]	@ (8007d68 <__mdiff+0x120>)
 8007ca2:	f240 2145 	movw	r1, #581	@ 0x245
 8007ca6:	e7e3      	b.n	8007c70 <__mdiff+0x28>
 8007ca8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007cac:	6926      	ldr	r6, [r4, #16]
 8007cae:	60c5      	str	r5, [r0, #12]
 8007cb0:	f109 0310 	add.w	r3, r9, #16
 8007cb4:	f109 0514 	add.w	r5, r9, #20
 8007cb8:	f104 0e14 	add.w	lr, r4, #20
 8007cbc:	f100 0b14 	add.w	fp, r0, #20
 8007cc0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007cc4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007cc8:	9301      	str	r3, [sp, #4]
 8007cca:	46d9      	mov	r9, fp
 8007ccc:	f04f 0c00 	mov.w	ip, #0
 8007cd0:	9b01      	ldr	r3, [sp, #4]
 8007cd2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007cd6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007cda:	9301      	str	r3, [sp, #4]
 8007cdc:	fa1f f38a 	uxth.w	r3, sl
 8007ce0:	4619      	mov	r1, r3
 8007ce2:	b283      	uxth	r3, r0
 8007ce4:	1acb      	subs	r3, r1, r3
 8007ce6:	0c00      	lsrs	r0, r0, #16
 8007ce8:	4463      	add	r3, ip
 8007cea:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007cee:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007cf8:	4576      	cmp	r6, lr
 8007cfa:	f849 3b04 	str.w	r3, [r9], #4
 8007cfe:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007d02:	d8e5      	bhi.n	8007cd0 <__mdiff+0x88>
 8007d04:	1b33      	subs	r3, r6, r4
 8007d06:	3b15      	subs	r3, #21
 8007d08:	f023 0303 	bic.w	r3, r3, #3
 8007d0c:	3415      	adds	r4, #21
 8007d0e:	3304      	adds	r3, #4
 8007d10:	42a6      	cmp	r6, r4
 8007d12:	bf38      	it	cc
 8007d14:	2304      	movcc	r3, #4
 8007d16:	441d      	add	r5, r3
 8007d18:	445b      	add	r3, fp
 8007d1a:	461e      	mov	r6, r3
 8007d1c:	462c      	mov	r4, r5
 8007d1e:	4544      	cmp	r4, r8
 8007d20:	d30e      	bcc.n	8007d40 <__mdiff+0xf8>
 8007d22:	f108 0103 	add.w	r1, r8, #3
 8007d26:	1b49      	subs	r1, r1, r5
 8007d28:	f021 0103 	bic.w	r1, r1, #3
 8007d2c:	3d03      	subs	r5, #3
 8007d2e:	45a8      	cmp	r8, r5
 8007d30:	bf38      	it	cc
 8007d32:	2100      	movcc	r1, #0
 8007d34:	440b      	add	r3, r1
 8007d36:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007d3a:	b191      	cbz	r1, 8007d62 <__mdiff+0x11a>
 8007d3c:	6117      	str	r7, [r2, #16]
 8007d3e:	e79d      	b.n	8007c7c <__mdiff+0x34>
 8007d40:	f854 1b04 	ldr.w	r1, [r4], #4
 8007d44:	46e6      	mov	lr, ip
 8007d46:	0c08      	lsrs	r0, r1, #16
 8007d48:	fa1c fc81 	uxtah	ip, ip, r1
 8007d4c:	4471      	add	r1, lr
 8007d4e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007d52:	b289      	uxth	r1, r1
 8007d54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007d58:	f846 1b04 	str.w	r1, [r6], #4
 8007d5c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007d60:	e7dd      	b.n	8007d1e <__mdiff+0xd6>
 8007d62:	3f01      	subs	r7, #1
 8007d64:	e7e7      	b.n	8007d36 <__mdiff+0xee>
 8007d66:	bf00      	nop
 8007d68:	0800a2fd 	.word	0x0800a2fd
 8007d6c:	0800a30e 	.word	0x0800a30e

08007d70 <__ulp>:
 8007d70:	b082      	sub	sp, #8
 8007d72:	ed8d 0b00 	vstr	d0, [sp]
 8007d76:	9a01      	ldr	r2, [sp, #4]
 8007d78:	4b0f      	ldr	r3, [pc, #60]	@ (8007db8 <__ulp+0x48>)
 8007d7a:	4013      	ands	r3, r2
 8007d7c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	dc08      	bgt.n	8007d96 <__ulp+0x26>
 8007d84:	425b      	negs	r3, r3
 8007d86:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007d8a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007d8e:	da04      	bge.n	8007d9a <__ulp+0x2a>
 8007d90:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007d94:	4113      	asrs	r3, r2
 8007d96:	2200      	movs	r2, #0
 8007d98:	e008      	b.n	8007dac <__ulp+0x3c>
 8007d9a:	f1a2 0314 	sub.w	r3, r2, #20
 8007d9e:	2b1e      	cmp	r3, #30
 8007da0:	bfda      	itte	le
 8007da2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007da6:	40da      	lsrle	r2, r3
 8007da8:	2201      	movgt	r2, #1
 8007daa:	2300      	movs	r3, #0
 8007dac:	4619      	mov	r1, r3
 8007dae:	4610      	mov	r0, r2
 8007db0:	ec41 0b10 	vmov	d0, r0, r1
 8007db4:	b002      	add	sp, #8
 8007db6:	4770      	bx	lr
 8007db8:	7ff00000 	.word	0x7ff00000

08007dbc <__b2d>:
 8007dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dc0:	6906      	ldr	r6, [r0, #16]
 8007dc2:	f100 0814 	add.w	r8, r0, #20
 8007dc6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007dca:	1f37      	subs	r7, r6, #4
 8007dcc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007dd0:	4610      	mov	r0, r2
 8007dd2:	f7ff fd4b 	bl	800786c <__hi0bits>
 8007dd6:	f1c0 0320 	rsb	r3, r0, #32
 8007dda:	280a      	cmp	r0, #10
 8007ddc:	600b      	str	r3, [r1, #0]
 8007dde:	491b      	ldr	r1, [pc, #108]	@ (8007e4c <__b2d+0x90>)
 8007de0:	dc15      	bgt.n	8007e0e <__b2d+0x52>
 8007de2:	f1c0 0c0b 	rsb	ip, r0, #11
 8007de6:	fa22 f30c 	lsr.w	r3, r2, ip
 8007dea:	45b8      	cmp	r8, r7
 8007dec:	ea43 0501 	orr.w	r5, r3, r1
 8007df0:	bf34      	ite	cc
 8007df2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007df6:	2300      	movcs	r3, #0
 8007df8:	3015      	adds	r0, #21
 8007dfa:	fa02 f000 	lsl.w	r0, r2, r0
 8007dfe:	fa23 f30c 	lsr.w	r3, r3, ip
 8007e02:	4303      	orrs	r3, r0
 8007e04:	461c      	mov	r4, r3
 8007e06:	ec45 4b10 	vmov	d0, r4, r5
 8007e0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e0e:	45b8      	cmp	r8, r7
 8007e10:	bf3a      	itte	cc
 8007e12:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007e16:	f1a6 0708 	subcc.w	r7, r6, #8
 8007e1a:	2300      	movcs	r3, #0
 8007e1c:	380b      	subs	r0, #11
 8007e1e:	d012      	beq.n	8007e46 <__b2d+0x8a>
 8007e20:	f1c0 0120 	rsb	r1, r0, #32
 8007e24:	fa23 f401 	lsr.w	r4, r3, r1
 8007e28:	4082      	lsls	r2, r0
 8007e2a:	4322      	orrs	r2, r4
 8007e2c:	4547      	cmp	r7, r8
 8007e2e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8007e32:	bf8c      	ite	hi
 8007e34:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007e38:	2200      	movls	r2, #0
 8007e3a:	4083      	lsls	r3, r0
 8007e3c:	40ca      	lsrs	r2, r1
 8007e3e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007e42:	4313      	orrs	r3, r2
 8007e44:	e7de      	b.n	8007e04 <__b2d+0x48>
 8007e46:	ea42 0501 	orr.w	r5, r2, r1
 8007e4a:	e7db      	b.n	8007e04 <__b2d+0x48>
 8007e4c:	3ff00000 	.word	0x3ff00000

08007e50 <__d2b>:
 8007e50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007e54:	460f      	mov	r7, r1
 8007e56:	2101      	movs	r1, #1
 8007e58:	ec59 8b10 	vmov	r8, r9, d0
 8007e5c:	4616      	mov	r6, r2
 8007e5e:	f7ff fc13 	bl	8007688 <_Balloc>
 8007e62:	4604      	mov	r4, r0
 8007e64:	b930      	cbnz	r0, 8007e74 <__d2b+0x24>
 8007e66:	4602      	mov	r2, r0
 8007e68:	4b23      	ldr	r3, [pc, #140]	@ (8007ef8 <__d2b+0xa8>)
 8007e6a:	4824      	ldr	r0, [pc, #144]	@ (8007efc <__d2b+0xac>)
 8007e6c:	f240 310f 	movw	r1, #783	@ 0x30f
 8007e70:	f001 fb42 	bl	80094f8 <__assert_func>
 8007e74:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007e78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007e7c:	b10d      	cbz	r5, 8007e82 <__d2b+0x32>
 8007e7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007e82:	9301      	str	r3, [sp, #4]
 8007e84:	f1b8 0300 	subs.w	r3, r8, #0
 8007e88:	d023      	beq.n	8007ed2 <__d2b+0x82>
 8007e8a:	4668      	mov	r0, sp
 8007e8c:	9300      	str	r3, [sp, #0]
 8007e8e:	f7ff fd0c 	bl	80078aa <__lo0bits>
 8007e92:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007e96:	b1d0      	cbz	r0, 8007ece <__d2b+0x7e>
 8007e98:	f1c0 0320 	rsb	r3, r0, #32
 8007e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8007ea0:	430b      	orrs	r3, r1
 8007ea2:	40c2      	lsrs	r2, r0
 8007ea4:	6163      	str	r3, [r4, #20]
 8007ea6:	9201      	str	r2, [sp, #4]
 8007ea8:	9b01      	ldr	r3, [sp, #4]
 8007eaa:	61a3      	str	r3, [r4, #24]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	bf0c      	ite	eq
 8007eb0:	2201      	moveq	r2, #1
 8007eb2:	2202      	movne	r2, #2
 8007eb4:	6122      	str	r2, [r4, #16]
 8007eb6:	b1a5      	cbz	r5, 8007ee2 <__d2b+0x92>
 8007eb8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007ebc:	4405      	add	r5, r0
 8007ebe:	603d      	str	r5, [r7, #0]
 8007ec0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007ec4:	6030      	str	r0, [r6, #0]
 8007ec6:	4620      	mov	r0, r4
 8007ec8:	b003      	add	sp, #12
 8007eca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ece:	6161      	str	r1, [r4, #20]
 8007ed0:	e7ea      	b.n	8007ea8 <__d2b+0x58>
 8007ed2:	a801      	add	r0, sp, #4
 8007ed4:	f7ff fce9 	bl	80078aa <__lo0bits>
 8007ed8:	9b01      	ldr	r3, [sp, #4]
 8007eda:	6163      	str	r3, [r4, #20]
 8007edc:	3020      	adds	r0, #32
 8007ede:	2201      	movs	r2, #1
 8007ee0:	e7e8      	b.n	8007eb4 <__d2b+0x64>
 8007ee2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007ee6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007eea:	6038      	str	r0, [r7, #0]
 8007eec:	6918      	ldr	r0, [r3, #16]
 8007eee:	f7ff fcbd 	bl	800786c <__hi0bits>
 8007ef2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007ef6:	e7e5      	b.n	8007ec4 <__d2b+0x74>
 8007ef8:	0800a2fd 	.word	0x0800a2fd
 8007efc:	0800a30e 	.word	0x0800a30e

08007f00 <__ratio>:
 8007f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f04:	b085      	sub	sp, #20
 8007f06:	e9cd 1000 	strd	r1, r0, [sp]
 8007f0a:	a902      	add	r1, sp, #8
 8007f0c:	f7ff ff56 	bl	8007dbc <__b2d>
 8007f10:	9800      	ldr	r0, [sp, #0]
 8007f12:	a903      	add	r1, sp, #12
 8007f14:	ec55 4b10 	vmov	r4, r5, d0
 8007f18:	f7ff ff50 	bl	8007dbc <__b2d>
 8007f1c:	9b01      	ldr	r3, [sp, #4]
 8007f1e:	6919      	ldr	r1, [r3, #16]
 8007f20:	9b00      	ldr	r3, [sp, #0]
 8007f22:	691b      	ldr	r3, [r3, #16]
 8007f24:	1ac9      	subs	r1, r1, r3
 8007f26:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007f2a:	1a9b      	subs	r3, r3, r2
 8007f2c:	ec5b ab10 	vmov	sl, fp, d0
 8007f30:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	bfce      	itee	gt
 8007f38:	462a      	movgt	r2, r5
 8007f3a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007f3e:	465a      	movle	r2, fp
 8007f40:	462f      	mov	r7, r5
 8007f42:	46d9      	mov	r9, fp
 8007f44:	bfcc      	ite	gt
 8007f46:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007f4a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007f4e:	464b      	mov	r3, r9
 8007f50:	4652      	mov	r2, sl
 8007f52:	4620      	mov	r0, r4
 8007f54:	4639      	mov	r1, r7
 8007f56:	f7f8 fca1 	bl	800089c <__aeabi_ddiv>
 8007f5a:	ec41 0b10 	vmov	d0, r0, r1
 8007f5e:	b005      	add	sp, #20
 8007f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007f64 <__copybits>:
 8007f64:	3901      	subs	r1, #1
 8007f66:	b570      	push	{r4, r5, r6, lr}
 8007f68:	1149      	asrs	r1, r1, #5
 8007f6a:	6914      	ldr	r4, [r2, #16]
 8007f6c:	3101      	adds	r1, #1
 8007f6e:	f102 0314 	add.w	r3, r2, #20
 8007f72:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007f76:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007f7a:	1f05      	subs	r5, r0, #4
 8007f7c:	42a3      	cmp	r3, r4
 8007f7e:	d30c      	bcc.n	8007f9a <__copybits+0x36>
 8007f80:	1aa3      	subs	r3, r4, r2
 8007f82:	3b11      	subs	r3, #17
 8007f84:	f023 0303 	bic.w	r3, r3, #3
 8007f88:	3211      	adds	r2, #17
 8007f8a:	42a2      	cmp	r2, r4
 8007f8c:	bf88      	it	hi
 8007f8e:	2300      	movhi	r3, #0
 8007f90:	4418      	add	r0, r3
 8007f92:	2300      	movs	r3, #0
 8007f94:	4288      	cmp	r0, r1
 8007f96:	d305      	bcc.n	8007fa4 <__copybits+0x40>
 8007f98:	bd70      	pop	{r4, r5, r6, pc}
 8007f9a:	f853 6b04 	ldr.w	r6, [r3], #4
 8007f9e:	f845 6f04 	str.w	r6, [r5, #4]!
 8007fa2:	e7eb      	b.n	8007f7c <__copybits+0x18>
 8007fa4:	f840 3b04 	str.w	r3, [r0], #4
 8007fa8:	e7f4      	b.n	8007f94 <__copybits+0x30>

08007faa <__any_on>:
 8007faa:	f100 0214 	add.w	r2, r0, #20
 8007fae:	6900      	ldr	r0, [r0, #16]
 8007fb0:	114b      	asrs	r3, r1, #5
 8007fb2:	4298      	cmp	r0, r3
 8007fb4:	b510      	push	{r4, lr}
 8007fb6:	db11      	blt.n	8007fdc <__any_on+0x32>
 8007fb8:	dd0a      	ble.n	8007fd0 <__any_on+0x26>
 8007fba:	f011 011f 	ands.w	r1, r1, #31
 8007fbe:	d007      	beq.n	8007fd0 <__any_on+0x26>
 8007fc0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007fc4:	fa24 f001 	lsr.w	r0, r4, r1
 8007fc8:	fa00 f101 	lsl.w	r1, r0, r1
 8007fcc:	428c      	cmp	r4, r1
 8007fce:	d10b      	bne.n	8007fe8 <__any_on+0x3e>
 8007fd0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d803      	bhi.n	8007fe0 <__any_on+0x36>
 8007fd8:	2000      	movs	r0, #0
 8007fda:	bd10      	pop	{r4, pc}
 8007fdc:	4603      	mov	r3, r0
 8007fde:	e7f7      	b.n	8007fd0 <__any_on+0x26>
 8007fe0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007fe4:	2900      	cmp	r1, #0
 8007fe6:	d0f5      	beq.n	8007fd4 <__any_on+0x2a>
 8007fe8:	2001      	movs	r0, #1
 8007fea:	e7f6      	b.n	8007fda <__any_on+0x30>

08007fec <sulp>:
 8007fec:	b570      	push	{r4, r5, r6, lr}
 8007fee:	4604      	mov	r4, r0
 8007ff0:	460d      	mov	r5, r1
 8007ff2:	ec45 4b10 	vmov	d0, r4, r5
 8007ff6:	4616      	mov	r6, r2
 8007ff8:	f7ff feba 	bl	8007d70 <__ulp>
 8007ffc:	ec51 0b10 	vmov	r0, r1, d0
 8008000:	b17e      	cbz	r6, 8008022 <sulp+0x36>
 8008002:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008006:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800800a:	2b00      	cmp	r3, #0
 800800c:	dd09      	ble.n	8008022 <sulp+0x36>
 800800e:	051b      	lsls	r3, r3, #20
 8008010:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008014:	2400      	movs	r4, #0
 8008016:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800801a:	4622      	mov	r2, r4
 800801c:	462b      	mov	r3, r5
 800801e:	f7f8 fb13 	bl	8000648 <__aeabi_dmul>
 8008022:	ec41 0b10 	vmov	d0, r0, r1
 8008026:	bd70      	pop	{r4, r5, r6, pc}

08008028 <_strtod_l>:
 8008028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800802c:	b09f      	sub	sp, #124	@ 0x7c
 800802e:	460c      	mov	r4, r1
 8008030:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008032:	2200      	movs	r2, #0
 8008034:	921a      	str	r2, [sp, #104]	@ 0x68
 8008036:	9005      	str	r0, [sp, #20]
 8008038:	f04f 0a00 	mov.w	sl, #0
 800803c:	f04f 0b00 	mov.w	fp, #0
 8008040:	460a      	mov	r2, r1
 8008042:	9219      	str	r2, [sp, #100]	@ 0x64
 8008044:	7811      	ldrb	r1, [r2, #0]
 8008046:	292b      	cmp	r1, #43	@ 0x2b
 8008048:	d04a      	beq.n	80080e0 <_strtod_l+0xb8>
 800804a:	d838      	bhi.n	80080be <_strtod_l+0x96>
 800804c:	290d      	cmp	r1, #13
 800804e:	d832      	bhi.n	80080b6 <_strtod_l+0x8e>
 8008050:	2908      	cmp	r1, #8
 8008052:	d832      	bhi.n	80080ba <_strtod_l+0x92>
 8008054:	2900      	cmp	r1, #0
 8008056:	d03b      	beq.n	80080d0 <_strtod_l+0xa8>
 8008058:	2200      	movs	r2, #0
 800805a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800805c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800805e:	782a      	ldrb	r2, [r5, #0]
 8008060:	2a30      	cmp	r2, #48	@ 0x30
 8008062:	f040 80b3 	bne.w	80081cc <_strtod_l+0x1a4>
 8008066:	786a      	ldrb	r2, [r5, #1]
 8008068:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800806c:	2a58      	cmp	r2, #88	@ 0x58
 800806e:	d16e      	bne.n	800814e <_strtod_l+0x126>
 8008070:	9302      	str	r3, [sp, #8]
 8008072:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008074:	9301      	str	r3, [sp, #4]
 8008076:	ab1a      	add	r3, sp, #104	@ 0x68
 8008078:	9300      	str	r3, [sp, #0]
 800807a:	4a8e      	ldr	r2, [pc, #568]	@ (80082b4 <_strtod_l+0x28c>)
 800807c:	9805      	ldr	r0, [sp, #20]
 800807e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008080:	a919      	add	r1, sp, #100	@ 0x64
 8008082:	f001 fad3 	bl	800962c <__gethex>
 8008086:	f010 060f 	ands.w	r6, r0, #15
 800808a:	4604      	mov	r4, r0
 800808c:	d005      	beq.n	800809a <_strtod_l+0x72>
 800808e:	2e06      	cmp	r6, #6
 8008090:	d128      	bne.n	80080e4 <_strtod_l+0xbc>
 8008092:	3501      	adds	r5, #1
 8008094:	2300      	movs	r3, #0
 8008096:	9519      	str	r5, [sp, #100]	@ 0x64
 8008098:	930b      	str	r3, [sp, #44]	@ 0x2c
 800809a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800809c:	2b00      	cmp	r3, #0
 800809e:	f040 858e 	bne.w	8008bbe <_strtod_l+0xb96>
 80080a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80080a4:	b1cb      	cbz	r3, 80080da <_strtod_l+0xb2>
 80080a6:	4652      	mov	r2, sl
 80080a8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80080ac:	ec43 2b10 	vmov	d0, r2, r3
 80080b0:	b01f      	add	sp, #124	@ 0x7c
 80080b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080b6:	2920      	cmp	r1, #32
 80080b8:	d1ce      	bne.n	8008058 <_strtod_l+0x30>
 80080ba:	3201      	adds	r2, #1
 80080bc:	e7c1      	b.n	8008042 <_strtod_l+0x1a>
 80080be:	292d      	cmp	r1, #45	@ 0x2d
 80080c0:	d1ca      	bne.n	8008058 <_strtod_l+0x30>
 80080c2:	2101      	movs	r1, #1
 80080c4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80080c6:	1c51      	adds	r1, r2, #1
 80080c8:	9119      	str	r1, [sp, #100]	@ 0x64
 80080ca:	7852      	ldrb	r2, [r2, #1]
 80080cc:	2a00      	cmp	r2, #0
 80080ce:	d1c5      	bne.n	800805c <_strtod_l+0x34>
 80080d0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80080d2:	9419      	str	r4, [sp, #100]	@ 0x64
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	f040 8570 	bne.w	8008bba <_strtod_l+0xb92>
 80080da:	4652      	mov	r2, sl
 80080dc:	465b      	mov	r3, fp
 80080de:	e7e5      	b.n	80080ac <_strtod_l+0x84>
 80080e0:	2100      	movs	r1, #0
 80080e2:	e7ef      	b.n	80080c4 <_strtod_l+0x9c>
 80080e4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80080e6:	b13a      	cbz	r2, 80080f8 <_strtod_l+0xd0>
 80080e8:	2135      	movs	r1, #53	@ 0x35
 80080ea:	a81c      	add	r0, sp, #112	@ 0x70
 80080ec:	f7ff ff3a 	bl	8007f64 <__copybits>
 80080f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80080f2:	9805      	ldr	r0, [sp, #20]
 80080f4:	f7ff fb08 	bl	8007708 <_Bfree>
 80080f8:	3e01      	subs	r6, #1
 80080fa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80080fc:	2e04      	cmp	r6, #4
 80080fe:	d806      	bhi.n	800810e <_strtod_l+0xe6>
 8008100:	e8df f006 	tbb	[pc, r6]
 8008104:	201d0314 	.word	0x201d0314
 8008108:	14          	.byte	0x14
 8008109:	00          	.byte	0x00
 800810a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800810e:	05e1      	lsls	r1, r4, #23
 8008110:	bf48      	it	mi
 8008112:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008116:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800811a:	0d1b      	lsrs	r3, r3, #20
 800811c:	051b      	lsls	r3, r3, #20
 800811e:	2b00      	cmp	r3, #0
 8008120:	d1bb      	bne.n	800809a <_strtod_l+0x72>
 8008122:	f7fe fb31 	bl	8006788 <__errno>
 8008126:	2322      	movs	r3, #34	@ 0x22
 8008128:	6003      	str	r3, [r0, #0]
 800812a:	e7b6      	b.n	800809a <_strtod_l+0x72>
 800812c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008130:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008134:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008138:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800813c:	e7e7      	b.n	800810e <_strtod_l+0xe6>
 800813e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80082bc <_strtod_l+0x294>
 8008142:	e7e4      	b.n	800810e <_strtod_l+0xe6>
 8008144:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008148:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800814c:	e7df      	b.n	800810e <_strtod_l+0xe6>
 800814e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008150:	1c5a      	adds	r2, r3, #1
 8008152:	9219      	str	r2, [sp, #100]	@ 0x64
 8008154:	785b      	ldrb	r3, [r3, #1]
 8008156:	2b30      	cmp	r3, #48	@ 0x30
 8008158:	d0f9      	beq.n	800814e <_strtod_l+0x126>
 800815a:	2b00      	cmp	r3, #0
 800815c:	d09d      	beq.n	800809a <_strtod_l+0x72>
 800815e:	2301      	movs	r3, #1
 8008160:	9309      	str	r3, [sp, #36]	@ 0x24
 8008162:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008164:	930c      	str	r3, [sp, #48]	@ 0x30
 8008166:	2300      	movs	r3, #0
 8008168:	9308      	str	r3, [sp, #32]
 800816a:	930a      	str	r3, [sp, #40]	@ 0x28
 800816c:	461f      	mov	r7, r3
 800816e:	220a      	movs	r2, #10
 8008170:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008172:	7805      	ldrb	r5, [r0, #0]
 8008174:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008178:	b2d9      	uxtb	r1, r3
 800817a:	2909      	cmp	r1, #9
 800817c:	d928      	bls.n	80081d0 <_strtod_l+0x1a8>
 800817e:	494e      	ldr	r1, [pc, #312]	@ (80082b8 <_strtod_l+0x290>)
 8008180:	2201      	movs	r2, #1
 8008182:	f001 f95f 	bl	8009444 <strncmp>
 8008186:	2800      	cmp	r0, #0
 8008188:	d032      	beq.n	80081f0 <_strtod_l+0x1c8>
 800818a:	2000      	movs	r0, #0
 800818c:	462a      	mov	r2, r5
 800818e:	4681      	mov	r9, r0
 8008190:	463d      	mov	r5, r7
 8008192:	4603      	mov	r3, r0
 8008194:	2a65      	cmp	r2, #101	@ 0x65
 8008196:	d001      	beq.n	800819c <_strtod_l+0x174>
 8008198:	2a45      	cmp	r2, #69	@ 0x45
 800819a:	d114      	bne.n	80081c6 <_strtod_l+0x19e>
 800819c:	b91d      	cbnz	r5, 80081a6 <_strtod_l+0x17e>
 800819e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80081a0:	4302      	orrs	r2, r0
 80081a2:	d095      	beq.n	80080d0 <_strtod_l+0xa8>
 80081a4:	2500      	movs	r5, #0
 80081a6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80081a8:	1c62      	adds	r2, r4, #1
 80081aa:	9219      	str	r2, [sp, #100]	@ 0x64
 80081ac:	7862      	ldrb	r2, [r4, #1]
 80081ae:	2a2b      	cmp	r2, #43	@ 0x2b
 80081b0:	d077      	beq.n	80082a2 <_strtod_l+0x27a>
 80081b2:	2a2d      	cmp	r2, #45	@ 0x2d
 80081b4:	d07b      	beq.n	80082ae <_strtod_l+0x286>
 80081b6:	f04f 0c00 	mov.w	ip, #0
 80081ba:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80081be:	2909      	cmp	r1, #9
 80081c0:	f240 8082 	bls.w	80082c8 <_strtod_l+0x2a0>
 80081c4:	9419      	str	r4, [sp, #100]	@ 0x64
 80081c6:	f04f 0800 	mov.w	r8, #0
 80081ca:	e0a2      	b.n	8008312 <_strtod_l+0x2ea>
 80081cc:	2300      	movs	r3, #0
 80081ce:	e7c7      	b.n	8008160 <_strtod_l+0x138>
 80081d0:	2f08      	cmp	r7, #8
 80081d2:	bfd5      	itete	le
 80081d4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80081d6:	9908      	ldrgt	r1, [sp, #32]
 80081d8:	fb02 3301 	mlale	r3, r2, r1, r3
 80081dc:	fb02 3301 	mlagt	r3, r2, r1, r3
 80081e0:	f100 0001 	add.w	r0, r0, #1
 80081e4:	bfd4      	ite	le
 80081e6:	930a      	strle	r3, [sp, #40]	@ 0x28
 80081e8:	9308      	strgt	r3, [sp, #32]
 80081ea:	3701      	adds	r7, #1
 80081ec:	9019      	str	r0, [sp, #100]	@ 0x64
 80081ee:	e7bf      	b.n	8008170 <_strtod_l+0x148>
 80081f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80081f2:	1c5a      	adds	r2, r3, #1
 80081f4:	9219      	str	r2, [sp, #100]	@ 0x64
 80081f6:	785a      	ldrb	r2, [r3, #1]
 80081f8:	b37f      	cbz	r7, 800825a <_strtod_l+0x232>
 80081fa:	4681      	mov	r9, r0
 80081fc:	463d      	mov	r5, r7
 80081fe:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008202:	2b09      	cmp	r3, #9
 8008204:	d912      	bls.n	800822c <_strtod_l+0x204>
 8008206:	2301      	movs	r3, #1
 8008208:	e7c4      	b.n	8008194 <_strtod_l+0x16c>
 800820a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800820c:	1c5a      	adds	r2, r3, #1
 800820e:	9219      	str	r2, [sp, #100]	@ 0x64
 8008210:	785a      	ldrb	r2, [r3, #1]
 8008212:	3001      	adds	r0, #1
 8008214:	2a30      	cmp	r2, #48	@ 0x30
 8008216:	d0f8      	beq.n	800820a <_strtod_l+0x1e2>
 8008218:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800821c:	2b08      	cmp	r3, #8
 800821e:	f200 84d3 	bhi.w	8008bc8 <_strtod_l+0xba0>
 8008222:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008224:	930c      	str	r3, [sp, #48]	@ 0x30
 8008226:	4681      	mov	r9, r0
 8008228:	2000      	movs	r0, #0
 800822a:	4605      	mov	r5, r0
 800822c:	3a30      	subs	r2, #48	@ 0x30
 800822e:	f100 0301 	add.w	r3, r0, #1
 8008232:	d02a      	beq.n	800828a <_strtod_l+0x262>
 8008234:	4499      	add	r9, r3
 8008236:	eb00 0c05 	add.w	ip, r0, r5
 800823a:	462b      	mov	r3, r5
 800823c:	210a      	movs	r1, #10
 800823e:	4563      	cmp	r3, ip
 8008240:	d10d      	bne.n	800825e <_strtod_l+0x236>
 8008242:	1c69      	adds	r1, r5, #1
 8008244:	4401      	add	r1, r0
 8008246:	4428      	add	r0, r5
 8008248:	2808      	cmp	r0, #8
 800824a:	dc16      	bgt.n	800827a <_strtod_l+0x252>
 800824c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800824e:	230a      	movs	r3, #10
 8008250:	fb03 2300 	mla	r3, r3, r0, r2
 8008254:	930a      	str	r3, [sp, #40]	@ 0x28
 8008256:	2300      	movs	r3, #0
 8008258:	e018      	b.n	800828c <_strtod_l+0x264>
 800825a:	4638      	mov	r0, r7
 800825c:	e7da      	b.n	8008214 <_strtod_l+0x1ec>
 800825e:	2b08      	cmp	r3, #8
 8008260:	f103 0301 	add.w	r3, r3, #1
 8008264:	dc03      	bgt.n	800826e <_strtod_l+0x246>
 8008266:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008268:	434e      	muls	r6, r1
 800826a:	960a      	str	r6, [sp, #40]	@ 0x28
 800826c:	e7e7      	b.n	800823e <_strtod_l+0x216>
 800826e:	2b10      	cmp	r3, #16
 8008270:	bfde      	ittt	le
 8008272:	9e08      	ldrle	r6, [sp, #32]
 8008274:	434e      	mulle	r6, r1
 8008276:	9608      	strle	r6, [sp, #32]
 8008278:	e7e1      	b.n	800823e <_strtod_l+0x216>
 800827a:	280f      	cmp	r0, #15
 800827c:	dceb      	bgt.n	8008256 <_strtod_l+0x22e>
 800827e:	9808      	ldr	r0, [sp, #32]
 8008280:	230a      	movs	r3, #10
 8008282:	fb03 2300 	mla	r3, r3, r0, r2
 8008286:	9308      	str	r3, [sp, #32]
 8008288:	e7e5      	b.n	8008256 <_strtod_l+0x22e>
 800828a:	4629      	mov	r1, r5
 800828c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800828e:	1c50      	adds	r0, r2, #1
 8008290:	9019      	str	r0, [sp, #100]	@ 0x64
 8008292:	7852      	ldrb	r2, [r2, #1]
 8008294:	4618      	mov	r0, r3
 8008296:	460d      	mov	r5, r1
 8008298:	e7b1      	b.n	80081fe <_strtod_l+0x1d6>
 800829a:	f04f 0900 	mov.w	r9, #0
 800829e:	2301      	movs	r3, #1
 80082a0:	e77d      	b.n	800819e <_strtod_l+0x176>
 80082a2:	f04f 0c00 	mov.w	ip, #0
 80082a6:	1ca2      	adds	r2, r4, #2
 80082a8:	9219      	str	r2, [sp, #100]	@ 0x64
 80082aa:	78a2      	ldrb	r2, [r4, #2]
 80082ac:	e785      	b.n	80081ba <_strtod_l+0x192>
 80082ae:	f04f 0c01 	mov.w	ip, #1
 80082b2:	e7f8      	b.n	80082a6 <_strtod_l+0x27e>
 80082b4:	0800a480 	.word	0x0800a480
 80082b8:	0800a468 	.word	0x0800a468
 80082bc:	7ff00000 	.word	0x7ff00000
 80082c0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80082c2:	1c51      	adds	r1, r2, #1
 80082c4:	9119      	str	r1, [sp, #100]	@ 0x64
 80082c6:	7852      	ldrb	r2, [r2, #1]
 80082c8:	2a30      	cmp	r2, #48	@ 0x30
 80082ca:	d0f9      	beq.n	80082c0 <_strtod_l+0x298>
 80082cc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80082d0:	2908      	cmp	r1, #8
 80082d2:	f63f af78 	bhi.w	80081c6 <_strtod_l+0x19e>
 80082d6:	3a30      	subs	r2, #48	@ 0x30
 80082d8:	920e      	str	r2, [sp, #56]	@ 0x38
 80082da:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80082dc:	920f      	str	r2, [sp, #60]	@ 0x3c
 80082de:	f04f 080a 	mov.w	r8, #10
 80082e2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80082e4:	1c56      	adds	r6, r2, #1
 80082e6:	9619      	str	r6, [sp, #100]	@ 0x64
 80082e8:	7852      	ldrb	r2, [r2, #1]
 80082ea:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80082ee:	f1be 0f09 	cmp.w	lr, #9
 80082f2:	d939      	bls.n	8008368 <_strtod_l+0x340>
 80082f4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80082f6:	1a76      	subs	r6, r6, r1
 80082f8:	2e08      	cmp	r6, #8
 80082fa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80082fe:	dc03      	bgt.n	8008308 <_strtod_l+0x2e0>
 8008300:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008302:	4588      	cmp	r8, r1
 8008304:	bfa8      	it	ge
 8008306:	4688      	movge	r8, r1
 8008308:	f1bc 0f00 	cmp.w	ip, #0
 800830c:	d001      	beq.n	8008312 <_strtod_l+0x2ea>
 800830e:	f1c8 0800 	rsb	r8, r8, #0
 8008312:	2d00      	cmp	r5, #0
 8008314:	d14e      	bne.n	80083b4 <_strtod_l+0x38c>
 8008316:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008318:	4308      	orrs	r0, r1
 800831a:	f47f aebe 	bne.w	800809a <_strtod_l+0x72>
 800831e:	2b00      	cmp	r3, #0
 8008320:	f47f aed6 	bne.w	80080d0 <_strtod_l+0xa8>
 8008324:	2a69      	cmp	r2, #105	@ 0x69
 8008326:	d028      	beq.n	800837a <_strtod_l+0x352>
 8008328:	dc25      	bgt.n	8008376 <_strtod_l+0x34e>
 800832a:	2a49      	cmp	r2, #73	@ 0x49
 800832c:	d025      	beq.n	800837a <_strtod_l+0x352>
 800832e:	2a4e      	cmp	r2, #78	@ 0x4e
 8008330:	f47f aece 	bne.w	80080d0 <_strtod_l+0xa8>
 8008334:	499b      	ldr	r1, [pc, #620]	@ (80085a4 <_strtod_l+0x57c>)
 8008336:	a819      	add	r0, sp, #100	@ 0x64
 8008338:	f001 fb9a 	bl	8009a70 <__match>
 800833c:	2800      	cmp	r0, #0
 800833e:	f43f aec7 	beq.w	80080d0 <_strtod_l+0xa8>
 8008342:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008344:	781b      	ldrb	r3, [r3, #0]
 8008346:	2b28      	cmp	r3, #40	@ 0x28
 8008348:	d12e      	bne.n	80083a8 <_strtod_l+0x380>
 800834a:	4997      	ldr	r1, [pc, #604]	@ (80085a8 <_strtod_l+0x580>)
 800834c:	aa1c      	add	r2, sp, #112	@ 0x70
 800834e:	a819      	add	r0, sp, #100	@ 0x64
 8008350:	f001 fba2 	bl	8009a98 <__hexnan>
 8008354:	2805      	cmp	r0, #5
 8008356:	d127      	bne.n	80083a8 <_strtod_l+0x380>
 8008358:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800835a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800835e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008362:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008366:	e698      	b.n	800809a <_strtod_l+0x72>
 8008368:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800836a:	fb08 2101 	mla	r1, r8, r1, r2
 800836e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008372:	920e      	str	r2, [sp, #56]	@ 0x38
 8008374:	e7b5      	b.n	80082e2 <_strtod_l+0x2ba>
 8008376:	2a6e      	cmp	r2, #110	@ 0x6e
 8008378:	e7da      	b.n	8008330 <_strtod_l+0x308>
 800837a:	498c      	ldr	r1, [pc, #560]	@ (80085ac <_strtod_l+0x584>)
 800837c:	a819      	add	r0, sp, #100	@ 0x64
 800837e:	f001 fb77 	bl	8009a70 <__match>
 8008382:	2800      	cmp	r0, #0
 8008384:	f43f aea4 	beq.w	80080d0 <_strtod_l+0xa8>
 8008388:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800838a:	4989      	ldr	r1, [pc, #548]	@ (80085b0 <_strtod_l+0x588>)
 800838c:	3b01      	subs	r3, #1
 800838e:	a819      	add	r0, sp, #100	@ 0x64
 8008390:	9319      	str	r3, [sp, #100]	@ 0x64
 8008392:	f001 fb6d 	bl	8009a70 <__match>
 8008396:	b910      	cbnz	r0, 800839e <_strtod_l+0x376>
 8008398:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800839a:	3301      	adds	r3, #1
 800839c:	9319      	str	r3, [sp, #100]	@ 0x64
 800839e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80085c0 <_strtod_l+0x598>
 80083a2:	f04f 0a00 	mov.w	sl, #0
 80083a6:	e678      	b.n	800809a <_strtod_l+0x72>
 80083a8:	4882      	ldr	r0, [pc, #520]	@ (80085b4 <_strtod_l+0x58c>)
 80083aa:	f001 f89d 	bl	80094e8 <nan>
 80083ae:	ec5b ab10 	vmov	sl, fp, d0
 80083b2:	e672      	b.n	800809a <_strtod_l+0x72>
 80083b4:	eba8 0309 	sub.w	r3, r8, r9
 80083b8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80083ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80083bc:	2f00      	cmp	r7, #0
 80083be:	bf08      	it	eq
 80083c0:	462f      	moveq	r7, r5
 80083c2:	2d10      	cmp	r5, #16
 80083c4:	462c      	mov	r4, r5
 80083c6:	bfa8      	it	ge
 80083c8:	2410      	movge	r4, #16
 80083ca:	f7f8 f8c3 	bl	8000554 <__aeabi_ui2d>
 80083ce:	2d09      	cmp	r5, #9
 80083d0:	4682      	mov	sl, r0
 80083d2:	468b      	mov	fp, r1
 80083d4:	dc13      	bgt.n	80083fe <_strtod_l+0x3d6>
 80083d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083d8:	2b00      	cmp	r3, #0
 80083da:	f43f ae5e 	beq.w	800809a <_strtod_l+0x72>
 80083de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083e0:	dd78      	ble.n	80084d4 <_strtod_l+0x4ac>
 80083e2:	2b16      	cmp	r3, #22
 80083e4:	dc5f      	bgt.n	80084a6 <_strtod_l+0x47e>
 80083e6:	4974      	ldr	r1, [pc, #464]	@ (80085b8 <_strtod_l+0x590>)
 80083e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80083ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083f0:	4652      	mov	r2, sl
 80083f2:	465b      	mov	r3, fp
 80083f4:	f7f8 f928 	bl	8000648 <__aeabi_dmul>
 80083f8:	4682      	mov	sl, r0
 80083fa:	468b      	mov	fp, r1
 80083fc:	e64d      	b.n	800809a <_strtod_l+0x72>
 80083fe:	4b6e      	ldr	r3, [pc, #440]	@ (80085b8 <_strtod_l+0x590>)
 8008400:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008404:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008408:	f7f8 f91e 	bl	8000648 <__aeabi_dmul>
 800840c:	4682      	mov	sl, r0
 800840e:	9808      	ldr	r0, [sp, #32]
 8008410:	468b      	mov	fp, r1
 8008412:	f7f8 f89f 	bl	8000554 <__aeabi_ui2d>
 8008416:	4602      	mov	r2, r0
 8008418:	460b      	mov	r3, r1
 800841a:	4650      	mov	r0, sl
 800841c:	4659      	mov	r1, fp
 800841e:	f7f7 ff5d 	bl	80002dc <__adddf3>
 8008422:	2d0f      	cmp	r5, #15
 8008424:	4682      	mov	sl, r0
 8008426:	468b      	mov	fp, r1
 8008428:	ddd5      	ble.n	80083d6 <_strtod_l+0x3ae>
 800842a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800842c:	1b2c      	subs	r4, r5, r4
 800842e:	441c      	add	r4, r3
 8008430:	2c00      	cmp	r4, #0
 8008432:	f340 8096 	ble.w	8008562 <_strtod_l+0x53a>
 8008436:	f014 030f 	ands.w	r3, r4, #15
 800843a:	d00a      	beq.n	8008452 <_strtod_l+0x42a>
 800843c:	495e      	ldr	r1, [pc, #376]	@ (80085b8 <_strtod_l+0x590>)
 800843e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008442:	4652      	mov	r2, sl
 8008444:	465b      	mov	r3, fp
 8008446:	e9d1 0100 	ldrd	r0, r1, [r1]
 800844a:	f7f8 f8fd 	bl	8000648 <__aeabi_dmul>
 800844e:	4682      	mov	sl, r0
 8008450:	468b      	mov	fp, r1
 8008452:	f034 040f 	bics.w	r4, r4, #15
 8008456:	d073      	beq.n	8008540 <_strtod_l+0x518>
 8008458:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800845c:	dd48      	ble.n	80084f0 <_strtod_l+0x4c8>
 800845e:	2400      	movs	r4, #0
 8008460:	46a0      	mov	r8, r4
 8008462:	940a      	str	r4, [sp, #40]	@ 0x28
 8008464:	46a1      	mov	r9, r4
 8008466:	9a05      	ldr	r2, [sp, #20]
 8008468:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80085c0 <_strtod_l+0x598>
 800846c:	2322      	movs	r3, #34	@ 0x22
 800846e:	6013      	str	r3, [r2, #0]
 8008470:	f04f 0a00 	mov.w	sl, #0
 8008474:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008476:	2b00      	cmp	r3, #0
 8008478:	f43f ae0f 	beq.w	800809a <_strtod_l+0x72>
 800847c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800847e:	9805      	ldr	r0, [sp, #20]
 8008480:	f7ff f942 	bl	8007708 <_Bfree>
 8008484:	9805      	ldr	r0, [sp, #20]
 8008486:	4649      	mov	r1, r9
 8008488:	f7ff f93e 	bl	8007708 <_Bfree>
 800848c:	9805      	ldr	r0, [sp, #20]
 800848e:	4641      	mov	r1, r8
 8008490:	f7ff f93a 	bl	8007708 <_Bfree>
 8008494:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008496:	9805      	ldr	r0, [sp, #20]
 8008498:	f7ff f936 	bl	8007708 <_Bfree>
 800849c:	9805      	ldr	r0, [sp, #20]
 800849e:	4621      	mov	r1, r4
 80084a0:	f7ff f932 	bl	8007708 <_Bfree>
 80084a4:	e5f9      	b.n	800809a <_strtod_l+0x72>
 80084a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80084a8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80084ac:	4293      	cmp	r3, r2
 80084ae:	dbbc      	blt.n	800842a <_strtod_l+0x402>
 80084b0:	4c41      	ldr	r4, [pc, #260]	@ (80085b8 <_strtod_l+0x590>)
 80084b2:	f1c5 050f 	rsb	r5, r5, #15
 80084b6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80084ba:	4652      	mov	r2, sl
 80084bc:	465b      	mov	r3, fp
 80084be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084c2:	f7f8 f8c1 	bl	8000648 <__aeabi_dmul>
 80084c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084c8:	1b5d      	subs	r5, r3, r5
 80084ca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80084ce:	e9d4 2300 	ldrd	r2, r3, [r4]
 80084d2:	e78f      	b.n	80083f4 <_strtod_l+0x3cc>
 80084d4:	3316      	adds	r3, #22
 80084d6:	dba8      	blt.n	800842a <_strtod_l+0x402>
 80084d8:	4b37      	ldr	r3, [pc, #220]	@ (80085b8 <_strtod_l+0x590>)
 80084da:	eba9 0808 	sub.w	r8, r9, r8
 80084de:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80084e2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80084e6:	4650      	mov	r0, sl
 80084e8:	4659      	mov	r1, fp
 80084ea:	f7f8 f9d7 	bl	800089c <__aeabi_ddiv>
 80084ee:	e783      	b.n	80083f8 <_strtod_l+0x3d0>
 80084f0:	4b32      	ldr	r3, [pc, #200]	@ (80085bc <_strtod_l+0x594>)
 80084f2:	9308      	str	r3, [sp, #32]
 80084f4:	2300      	movs	r3, #0
 80084f6:	1124      	asrs	r4, r4, #4
 80084f8:	4650      	mov	r0, sl
 80084fa:	4659      	mov	r1, fp
 80084fc:	461e      	mov	r6, r3
 80084fe:	2c01      	cmp	r4, #1
 8008500:	dc21      	bgt.n	8008546 <_strtod_l+0x51e>
 8008502:	b10b      	cbz	r3, 8008508 <_strtod_l+0x4e0>
 8008504:	4682      	mov	sl, r0
 8008506:	468b      	mov	fp, r1
 8008508:	492c      	ldr	r1, [pc, #176]	@ (80085bc <_strtod_l+0x594>)
 800850a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800850e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008512:	4652      	mov	r2, sl
 8008514:	465b      	mov	r3, fp
 8008516:	e9d1 0100 	ldrd	r0, r1, [r1]
 800851a:	f7f8 f895 	bl	8000648 <__aeabi_dmul>
 800851e:	4b28      	ldr	r3, [pc, #160]	@ (80085c0 <_strtod_l+0x598>)
 8008520:	460a      	mov	r2, r1
 8008522:	400b      	ands	r3, r1
 8008524:	4927      	ldr	r1, [pc, #156]	@ (80085c4 <_strtod_l+0x59c>)
 8008526:	428b      	cmp	r3, r1
 8008528:	4682      	mov	sl, r0
 800852a:	d898      	bhi.n	800845e <_strtod_l+0x436>
 800852c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008530:	428b      	cmp	r3, r1
 8008532:	bf86      	itte	hi
 8008534:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80085c8 <_strtod_l+0x5a0>
 8008538:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800853c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008540:	2300      	movs	r3, #0
 8008542:	9308      	str	r3, [sp, #32]
 8008544:	e07a      	b.n	800863c <_strtod_l+0x614>
 8008546:	07e2      	lsls	r2, r4, #31
 8008548:	d505      	bpl.n	8008556 <_strtod_l+0x52e>
 800854a:	9b08      	ldr	r3, [sp, #32]
 800854c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008550:	f7f8 f87a 	bl	8000648 <__aeabi_dmul>
 8008554:	2301      	movs	r3, #1
 8008556:	9a08      	ldr	r2, [sp, #32]
 8008558:	3208      	adds	r2, #8
 800855a:	3601      	adds	r6, #1
 800855c:	1064      	asrs	r4, r4, #1
 800855e:	9208      	str	r2, [sp, #32]
 8008560:	e7cd      	b.n	80084fe <_strtod_l+0x4d6>
 8008562:	d0ed      	beq.n	8008540 <_strtod_l+0x518>
 8008564:	4264      	negs	r4, r4
 8008566:	f014 020f 	ands.w	r2, r4, #15
 800856a:	d00a      	beq.n	8008582 <_strtod_l+0x55a>
 800856c:	4b12      	ldr	r3, [pc, #72]	@ (80085b8 <_strtod_l+0x590>)
 800856e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008572:	4650      	mov	r0, sl
 8008574:	4659      	mov	r1, fp
 8008576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800857a:	f7f8 f98f 	bl	800089c <__aeabi_ddiv>
 800857e:	4682      	mov	sl, r0
 8008580:	468b      	mov	fp, r1
 8008582:	1124      	asrs	r4, r4, #4
 8008584:	d0dc      	beq.n	8008540 <_strtod_l+0x518>
 8008586:	2c1f      	cmp	r4, #31
 8008588:	dd20      	ble.n	80085cc <_strtod_l+0x5a4>
 800858a:	2400      	movs	r4, #0
 800858c:	46a0      	mov	r8, r4
 800858e:	940a      	str	r4, [sp, #40]	@ 0x28
 8008590:	46a1      	mov	r9, r4
 8008592:	9a05      	ldr	r2, [sp, #20]
 8008594:	2322      	movs	r3, #34	@ 0x22
 8008596:	f04f 0a00 	mov.w	sl, #0
 800859a:	f04f 0b00 	mov.w	fp, #0
 800859e:	6013      	str	r3, [r2, #0]
 80085a0:	e768      	b.n	8008474 <_strtod_l+0x44c>
 80085a2:	bf00      	nop
 80085a4:	0800a255 	.word	0x0800a255
 80085a8:	0800a46c 	.word	0x0800a46c
 80085ac:	0800a24d 	.word	0x0800a24d
 80085b0:	0800a284 	.word	0x0800a284
 80085b4:	0800a615 	.word	0x0800a615
 80085b8:	0800a3a0 	.word	0x0800a3a0
 80085bc:	0800a378 	.word	0x0800a378
 80085c0:	7ff00000 	.word	0x7ff00000
 80085c4:	7ca00000 	.word	0x7ca00000
 80085c8:	7fefffff 	.word	0x7fefffff
 80085cc:	f014 0310 	ands.w	r3, r4, #16
 80085d0:	bf18      	it	ne
 80085d2:	236a      	movne	r3, #106	@ 0x6a
 80085d4:	4ea9      	ldr	r6, [pc, #676]	@ (800887c <_strtod_l+0x854>)
 80085d6:	9308      	str	r3, [sp, #32]
 80085d8:	4650      	mov	r0, sl
 80085da:	4659      	mov	r1, fp
 80085dc:	2300      	movs	r3, #0
 80085de:	07e2      	lsls	r2, r4, #31
 80085e0:	d504      	bpl.n	80085ec <_strtod_l+0x5c4>
 80085e2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80085e6:	f7f8 f82f 	bl	8000648 <__aeabi_dmul>
 80085ea:	2301      	movs	r3, #1
 80085ec:	1064      	asrs	r4, r4, #1
 80085ee:	f106 0608 	add.w	r6, r6, #8
 80085f2:	d1f4      	bne.n	80085de <_strtod_l+0x5b6>
 80085f4:	b10b      	cbz	r3, 80085fa <_strtod_l+0x5d2>
 80085f6:	4682      	mov	sl, r0
 80085f8:	468b      	mov	fp, r1
 80085fa:	9b08      	ldr	r3, [sp, #32]
 80085fc:	b1b3      	cbz	r3, 800862c <_strtod_l+0x604>
 80085fe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008602:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008606:	2b00      	cmp	r3, #0
 8008608:	4659      	mov	r1, fp
 800860a:	dd0f      	ble.n	800862c <_strtod_l+0x604>
 800860c:	2b1f      	cmp	r3, #31
 800860e:	dd55      	ble.n	80086bc <_strtod_l+0x694>
 8008610:	2b34      	cmp	r3, #52	@ 0x34
 8008612:	bfde      	ittt	le
 8008614:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8008618:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800861c:	4093      	lslle	r3, r2
 800861e:	f04f 0a00 	mov.w	sl, #0
 8008622:	bfcc      	ite	gt
 8008624:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008628:	ea03 0b01 	andle.w	fp, r3, r1
 800862c:	2200      	movs	r2, #0
 800862e:	2300      	movs	r3, #0
 8008630:	4650      	mov	r0, sl
 8008632:	4659      	mov	r1, fp
 8008634:	f7f8 fa70 	bl	8000b18 <__aeabi_dcmpeq>
 8008638:	2800      	cmp	r0, #0
 800863a:	d1a6      	bne.n	800858a <_strtod_l+0x562>
 800863c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800863e:	9300      	str	r3, [sp, #0]
 8008640:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008642:	9805      	ldr	r0, [sp, #20]
 8008644:	462b      	mov	r3, r5
 8008646:	463a      	mov	r2, r7
 8008648:	f7ff f8c6 	bl	80077d8 <__s2b>
 800864c:	900a      	str	r0, [sp, #40]	@ 0x28
 800864e:	2800      	cmp	r0, #0
 8008650:	f43f af05 	beq.w	800845e <_strtod_l+0x436>
 8008654:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008656:	2a00      	cmp	r2, #0
 8008658:	eba9 0308 	sub.w	r3, r9, r8
 800865c:	bfa8      	it	ge
 800865e:	2300      	movge	r3, #0
 8008660:	9312      	str	r3, [sp, #72]	@ 0x48
 8008662:	2400      	movs	r4, #0
 8008664:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008668:	9316      	str	r3, [sp, #88]	@ 0x58
 800866a:	46a0      	mov	r8, r4
 800866c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800866e:	9805      	ldr	r0, [sp, #20]
 8008670:	6859      	ldr	r1, [r3, #4]
 8008672:	f7ff f809 	bl	8007688 <_Balloc>
 8008676:	4681      	mov	r9, r0
 8008678:	2800      	cmp	r0, #0
 800867a:	f43f aef4 	beq.w	8008466 <_strtod_l+0x43e>
 800867e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008680:	691a      	ldr	r2, [r3, #16]
 8008682:	3202      	adds	r2, #2
 8008684:	f103 010c 	add.w	r1, r3, #12
 8008688:	0092      	lsls	r2, r2, #2
 800868a:	300c      	adds	r0, #12
 800868c:	f000 ff1e 	bl	80094cc <memcpy>
 8008690:	ec4b ab10 	vmov	d0, sl, fp
 8008694:	9805      	ldr	r0, [sp, #20]
 8008696:	aa1c      	add	r2, sp, #112	@ 0x70
 8008698:	a91b      	add	r1, sp, #108	@ 0x6c
 800869a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800869e:	f7ff fbd7 	bl	8007e50 <__d2b>
 80086a2:	901a      	str	r0, [sp, #104]	@ 0x68
 80086a4:	2800      	cmp	r0, #0
 80086a6:	f43f aede 	beq.w	8008466 <_strtod_l+0x43e>
 80086aa:	9805      	ldr	r0, [sp, #20]
 80086ac:	2101      	movs	r1, #1
 80086ae:	f7ff f929 	bl	8007904 <__i2b>
 80086b2:	4680      	mov	r8, r0
 80086b4:	b948      	cbnz	r0, 80086ca <_strtod_l+0x6a2>
 80086b6:	f04f 0800 	mov.w	r8, #0
 80086ba:	e6d4      	b.n	8008466 <_strtod_l+0x43e>
 80086bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80086c0:	fa02 f303 	lsl.w	r3, r2, r3
 80086c4:	ea03 0a0a 	and.w	sl, r3, sl
 80086c8:	e7b0      	b.n	800862c <_strtod_l+0x604>
 80086ca:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80086cc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80086ce:	2d00      	cmp	r5, #0
 80086d0:	bfab      	itete	ge
 80086d2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80086d4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80086d6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80086d8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80086da:	bfac      	ite	ge
 80086dc:	18ef      	addge	r7, r5, r3
 80086de:	1b5e      	sublt	r6, r3, r5
 80086e0:	9b08      	ldr	r3, [sp, #32]
 80086e2:	1aed      	subs	r5, r5, r3
 80086e4:	4415      	add	r5, r2
 80086e6:	4b66      	ldr	r3, [pc, #408]	@ (8008880 <_strtod_l+0x858>)
 80086e8:	3d01      	subs	r5, #1
 80086ea:	429d      	cmp	r5, r3
 80086ec:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80086f0:	da50      	bge.n	8008794 <_strtod_l+0x76c>
 80086f2:	1b5b      	subs	r3, r3, r5
 80086f4:	2b1f      	cmp	r3, #31
 80086f6:	eba2 0203 	sub.w	r2, r2, r3
 80086fa:	f04f 0101 	mov.w	r1, #1
 80086fe:	dc3d      	bgt.n	800877c <_strtod_l+0x754>
 8008700:	fa01 f303 	lsl.w	r3, r1, r3
 8008704:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008706:	2300      	movs	r3, #0
 8008708:	9310      	str	r3, [sp, #64]	@ 0x40
 800870a:	18bd      	adds	r5, r7, r2
 800870c:	9b08      	ldr	r3, [sp, #32]
 800870e:	42af      	cmp	r7, r5
 8008710:	4416      	add	r6, r2
 8008712:	441e      	add	r6, r3
 8008714:	463b      	mov	r3, r7
 8008716:	bfa8      	it	ge
 8008718:	462b      	movge	r3, r5
 800871a:	42b3      	cmp	r3, r6
 800871c:	bfa8      	it	ge
 800871e:	4633      	movge	r3, r6
 8008720:	2b00      	cmp	r3, #0
 8008722:	bfc2      	ittt	gt
 8008724:	1aed      	subgt	r5, r5, r3
 8008726:	1af6      	subgt	r6, r6, r3
 8008728:	1aff      	subgt	r7, r7, r3
 800872a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800872c:	2b00      	cmp	r3, #0
 800872e:	dd16      	ble.n	800875e <_strtod_l+0x736>
 8008730:	4641      	mov	r1, r8
 8008732:	9805      	ldr	r0, [sp, #20]
 8008734:	461a      	mov	r2, r3
 8008736:	f7ff f9a5 	bl	8007a84 <__pow5mult>
 800873a:	4680      	mov	r8, r0
 800873c:	2800      	cmp	r0, #0
 800873e:	d0ba      	beq.n	80086b6 <_strtod_l+0x68e>
 8008740:	4601      	mov	r1, r0
 8008742:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008744:	9805      	ldr	r0, [sp, #20]
 8008746:	f7ff f8f3 	bl	8007930 <__multiply>
 800874a:	900e      	str	r0, [sp, #56]	@ 0x38
 800874c:	2800      	cmp	r0, #0
 800874e:	f43f ae8a 	beq.w	8008466 <_strtod_l+0x43e>
 8008752:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008754:	9805      	ldr	r0, [sp, #20]
 8008756:	f7fe ffd7 	bl	8007708 <_Bfree>
 800875a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800875c:	931a      	str	r3, [sp, #104]	@ 0x68
 800875e:	2d00      	cmp	r5, #0
 8008760:	dc1d      	bgt.n	800879e <_strtod_l+0x776>
 8008762:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008764:	2b00      	cmp	r3, #0
 8008766:	dd23      	ble.n	80087b0 <_strtod_l+0x788>
 8008768:	4649      	mov	r1, r9
 800876a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800876c:	9805      	ldr	r0, [sp, #20]
 800876e:	f7ff f989 	bl	8007a84 <__pow5mult>
 8008772:	4681      	mov	r9, r0
 8008774:	b9e0      	cbnz	r0, 80087b0 <_strtod_l+0x788>
 8008776:	f04f 0900 	mov.w	r9, #0
 800877a:	e674      	b.n	8008466 <_strtod_l+0x43e>
 800877c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008780:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008784:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008788:	35e2      	adds	r5, #226	@ 0xe2
 800878a:	fa01 f305 	lsl.w	r3, r1, r5
 800878e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008790:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008792:	e7ba      	b.n	800870a <_strtod_l+0x6e2>
 8008794:	2300      	movs	r3, #0
 8008796:	9310      	str	r3, [sp, #64]	@ 0x40
 8008798:	2301      	movs	r3, #1
 800879a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800879c:	e7b5      	b.n	800870a <_strtod_l+0x6e2>
 800879e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80087a0:	9805      	ldr	r0, [sp, #20]
 80087a2:	462a      	mov	r2, r5
 80087a4:	f7ff f9c8 	bl	8007b38 <__lshift>
 80087a8:	901a      	str	r0, [sp, #104]	@ 0x68
 80087aa:	2800      	cmp	r0, #0
 80087ac:	d1d9      	bne.n	8008762 <_strtod_l+0x73a>
 80087ae:	e65a      	b.n	8008466 <_strtod_l+0x43e>
 80087b0:	2e00      	cmp	r6, #0
 80087b2:	dd07      	ble.n	80087c4 <_strtod_l+0x79c>
 80087b4:	4649      	mov	r1, r9
 80087b6:	9805      	ldr	r0, [sp, #20]
 80087b8:	4632      	mov	r2, r6
 80087ba:	f7ff f9bd 	bl	8007b38 <__lshift>
 80087be:	4681      	mov	r9, r0
 80087c0:	2800      	cmp	r0, #0
 80087c2:	d0d8      	beq.n	8008776 <_strtod_l+0x74e>
 80087c4:	2f00      	cmp	r7, #0
 80087c6:	dd08      	ble.n	80087da <_strtod_l+0x7b2>
 80087c8:	4641      	mov	r1, r8
 80087ca:	9805      	ldr	r0, [sp, #20]
 80087cc:	463a      	mov	r2, r7
 80087ce:	f7ff f9b3 	bl	8007b38 <__lshift>
 80087d2:	4680      	mov	r8, r0
 80087d4:	2800      	cmp	r0, #0
 80087d6:	f43f ae46 	beq.w	8008466 <_strtod_l+0x43e>
 80087da:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80087dc:	9805      	ldr	r0, [sp, #20]
 80087de:	464a      	mov	r2, r9
 80087e0:	f7ff fa32 	bl	8007c48 <__mdiff>
 80087e4:	4604      	mov	r4, r0
 80087e6:	2800      	cmp	r0, #0
 80087e8:	f43f ae3d 	beq.w	8008466 <_strtod_l+0x43e>
 80087ec:	68c3      	ldr	r3, [r0, #12]
 80087ee:	930f      	str	r3, [sp, #60]	@ 0x3c
 80087f0:	2300      	movs	r3, #0
 80087f2:	60c3      	str	r3, [r0, #12]
 80087f4:	4641      	mov	r1, r8
 80087f6:	f7ff fa0b 	bl	8007c10 <__mcmp>
 80087fa:	2800      	cmp	r0, #0
 80087fc:	da46      	bge.n	800888c <_strtod_l+0x864>
 80087fe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008800:	ea53 030a 	orrs.w	r3, r3, sl
 8008804:	d16c      	bne.n	80088e0 <_strtod_l+0x8b8>
 8008806:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800880a:	2b00      	cmp	r3, #0
 800880c:	d168      	bne.n	80088e0 <_strtod_l+0x8b8>
 800880e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008812:	0d1b      	lsrs	r3, r3, #20
 8008814:	051b      	lsls	r3, r3, #20
 8008816:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800881a:	d961      	bls.n	80088e0 <_strtod_l+0x8b8>
 800881c:	6963      	ldr	r3, [r4, #20]
 800881e:	b913      	cbnz	r3, 8008826 <_strtod_l+0x7fe>
 8008820:	6923      	ldr	r3, [r4, #16]
 8008822:	2b01      	cmp	r3, #1
 8008824:	dd5c      	ble.n	80088e0 <_strtod_l+0x8b8>
 8008826:	4621      	mov	r1, r4
 8008828:	2201      	movs	r2, #1
 800882a:	9805      	ldr	r0, [sp, #20]
 800882c:	f7ff f984 	bl	8007b38 <__lshift>
 8008830:	4641      	mov	r1, r8
 8008832:	4604      	mov	r4, r0
 8008834:	f7ff f9ec 	bl	8007c10 <__mcmp>
 8008838:	2800      	cmp	r0, #0
 800883a:	dd51      	ble.n	80088e0 <_strtod_l+0x8b8>
 800883c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008840:	9a08      	ldr	r2, [sp, #32]
 8008842:	0d1b      	lsrs	r3, r3, #20
 8008844:	051b      	lsls	r3, r3, #20
 8008846:	2a00      	cmp	r2, #0
 8008848:	d06b      	beq.n	8008922 <_strtod_l+0x8fa>
 800884a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800884e:	d868      	bhi.n	8008922 <_strtod_l+0x8fa>
 8008850:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008854:	f67f ae9d 	bls.w	8008592 <_strtod_l+0x56a>
 8008858:	4b0a      	ldr	r3, [pc, #40]	@ (8008884 <_strtod_l+0x85c>)
 800885a:	4650      	mov	r0, sl
 800885c:	4659      	mov	r1, fp
 800885e:	2200      	movs	r2, #0
 8008860:	f7f7 fef2 	bl	8000648 <__aeabi_dmul>
 8008864:	4b08      	ldr	r3, [pc, #32]	@ (8008888 <_strtod_l+0x860>)
 8008866:	400b      	ands	r3, r1
 8008868:	4682      	mov	sl, r0
 800886a:	468b      	mov	fp, r1
 800886c:	2b00      	cmp	r3, #0
 800886e:	f47f ae05 	bne.w	800847c <_strtod_l+0x454>
 8008872:	9a05      	ldr	r2, [sp, #20]
 8008874:	2322      	movs	r3, #34	@ 0x22
 8008876:	6013      	str	r3, [r2, #0]
 8008878:	e600      	b.n	800847c <_strtod_l+0x454>
 800887a:	bf00      	nop
 800887c:	0800a498 	.word	0x0800a498
 8008880:	fffffc02 	.word	0xfffffc02
 8008884:	39500000 	.word	0x39500000
 8008888:	7ff00000 	.word	0x7ff00000
 800888c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008890:	d165      	bne.n	800895e <_strtod_l+0x936>
 8008892:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008894:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008898:	b35a      	cbz	r2, 80088f2 <_strtod_l+0x8ca>
 800889a:	4a9f      	ldr	r2, [pc, #636]	@ (8008b18 <_strtod_l+0xaf0>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d12b      	bne.n	80088f8 <_strtod_l+0x8d0>
 80088a0:	9b08      	ldr	r3, [sp, #32]
 80088a2:	4651      	mov	r1, sl
 80088a4:	b303      	cbz	r3, 80088e8 <_strtod_l+0x8c0>
 80088a6:	4b9d      	ldr	r3, [pc, #628]	@ (8008b1c <_strtod_l+0xaf4>)
 80088a8:	465a      	mov	r2, fp
 80088aa:	4013      	ands	r3, r2
 80088ac:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80088b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80088b4:	d81b      	bhi.n	80088ee <_strtod_l+0x8c6>
 80088b6:	0d1b      	lsrs	r3, r3, #20
 80088b8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80088bc:	fa02 f303 	lsl.w	r3, r2, r3
 80088c0:	4299      	cmp	r1, r3
 80088c2:	d119      	bne.n	80088f8 <_strtod_l+0x8d0>
 80088c4:	4b96      	ldr	r3, [pc, #600]	@ (8008b20 <_strtod_l+0xaf8>)
 80088c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d102      	bne.n	80088d2 <_strtod_l+0x8aa>
 80088cc:	3101      	adds	r1, #1
 80088ce:	f43f adca 	beq.w	8008466 <_strtod_l+0x43e>
 80088d2:	4b92      	ldr	r3, [pc, #584]	@ (8008b1c <_strtod_l+0xaf4>)
 80088d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80088d6:	401a      	ands	r2, r3
 80088d8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80088dc:	f04f 0a00 	mov.w	sl, #0
 80088e0:	9b08      	ldr	r3, [sp, #32]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d1b8      	bne.n	8008858 <_strtod_l+0x830>
 80088e6:	e5c9      	b.n	800847c <_strtod_l+0x454>
 80088e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80088ec:	e7e8      	b.n	80088c0 <_strtod_l+0x898>
 80088ee:	4613      	mov	r3, r2
 80088f0:	e7e6      	b.n	80088c0 <_strtod_l+0x898>
 80088f2:	ea53 030a 	orrs.w	r3, r3, sl
 80088f6:	d0a1      	beq.n	800883c <_strtod_l+0x814>
 80088f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80088fa:	b1db      	cbz	r3, 8008934 <_strtod_l+0x90c>
 80088fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80088fe:	4213      	tst	r3, r2
 8008900:	d0ee      	beq.n	80088e0 <_strtod_l+0x8b8>
 8008902:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008904:	9a08      	ldr	r2, [sp, #32]
 8008906:	4650      	mov	r0, sl
 8008908:	4659      	mov	r1, fp
 800890a:	b1bb      	cbz	r3, 800893c <_strtod_l+0x914>
 800890c:	f7ff fb6e 	bl	8007fec <sulp>
 8008910:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008914:	ec53 2b10 	vmov	r2, r3, d0
 8008918:	f7f7 fce0 	bl	80002dc <__adddf3>
 800891c:	4682      	mov	sl, r0
 800891e:	468b      	mov	fp, r1
 8008920:	e7de      	b.n	80088e0 <_strtod_l+0x8b8>
 8008922:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008926:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800892a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800892e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8008932:	e7d5      	b.n	80088e0 <_strtod_l+0x8b8>
 8008934:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008936:	ea13 0f0a 	tst.w	r3, sl
 800893a:	e7e1      	b.n	8008900 <_strtod_l+0x8d8>
 800893c:	f7ff fb56 	bl	8007fec <sulp>
 8008940:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008944:	ec53 2b10 	vmov	r2, r3, d0
 8008948:	f7f7 fcc6 	bl	80002d8 <__aeabi_dsub>
 800894c:	2200      	movs	r2, #0
 800894e:	2300      	movs	r3, #0
 8008950:	4682      	mov	sl, r0
 8008952:	468b      	mov	fp, r1
 8008954:	f7f8 f8e0 	bl	8000b18 <__aeabi_dcmpeq>
 8008958:	2800      	cmp	r0, #0
 800895a:	d0c1      	beq.n	80088e0 <_strtod_l+0x8b8>
 800895c:	e619      	b.n	8008592 <_strtod_l+0x56a>
 800895e:	4641      	mov	r1, r8
 8008960:	4620      	mov	r0, r4
 8008962:	f7ff facd 	bl	8007f00 <__ratio>
 8008966:	ec57 6b10 	vmov	r6, r7, d0
 800896a:	2200      	movs	r2, #0
 800896c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008970:	4630      	mov	r0, r6
 8008972:	4639      	mov	r1, r7
 8008974:	f7f8 f8e4 	bl	8000b40 <__aeabi_dcmple>
 8008978:	2800      	cmp	r0, #0
 800897a:	d06f      	beq.n	8008a5c <_strtod_l+0xa34>
 800897c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800897e:	2b00      	cmp	r3, #0
 8008980:	d17a      	bne.n	8008a78 <_strtod_l+0xa50>
 8008982:	f1ba 0f00 	cmp.w	sl, #0
 8008986:	d158      	bne.n	8008a3a <_strtod_l+0xa12>
 8008988:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800898a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800898e:	2b00      	cmp	r3, #0
 8008990:	d15a      	bne.n	8008a48 <_strtod_l+0xa20>
 8008992:	4b64      	ldr	r3, [pc, #400]	@ (8008b24 <_strtod_l+0xafc>)
 8008994:	2200      	movs	r2, #0
 8008996:	4630      	mov	r0, r6
 8008998:	4639      	mov	r1, r7
 800899a:	f7f8 f8c7 	bl	8000b2c <__aeabi_dcmplt>
 800899e:	2800      	cmp	r0, #0
 80089a0:	d159      	bne.n	8008a56 <_strtod_l+0xa2e>
 80089a2:	4630      	mov	r0, r6
 80089a4:	4639      	mov	r1, r7
 80089a6:	4b60      	ldr	r3, [pc, #384]	@ (8008b28 <_strtod_l+0xb00>)
 80089a8:	2200      	movs	r2, #0
 80089aa:	f7f7 fe4d 	bl	8000648 <__aeabi_dmul>
 80089ae:	4606      	mov	r6, r0
 80089b0:	460f      	mov	r7, r1
 80089b2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80089b6:	9606      	str	r6, [sp, #24]
 80089b8:	9307      	str	r3, [sp, #28]
 80089ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80089be:	4d57      	ldr	r5, [pc, #348]	@ (8008b1c <_strtod_l+0xaf4>)
 80089c0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80089c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80089c6:	401d      	ands	r5, r3
 80089c8:	4b58      	ldr	r3, [pc, #352]	@ (8008b2c <_strtod_l+0xb04>)
 80089ca:	429d      	cmp	r5, r3
 80089cc:	f040 80b2 	bne.w	8008b34 <_strtod_l+0xb0c>
 80089d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80089d2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80089d6:	ec4b ab10 	vmov	d0, sl, fp
 80089da:	f7ff f9c9 	bl	8007d70 <__ulp>
 80089de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80089e2:	ec51 0b10 	vmov	r0, r1, d0
 80089e6:	f7f7 fe2f 	bl	8000648 <__aeabi_dmul>
 80089ea:	4652      	mov	r2, sl
 80089ec:	465b      	mov	r3, fp
 80089ee:	f7f7 fc75 	bl	80002dc <__adddf3>
 80089f2:	460b      	mov	r3, r1
 80089f4:	4949      	ldr	r1, [pc, #292]	@ (8008b1c <_strtod_l+0xaf4>)
 80089f6:	4a4e      	ldr	r2, [pc, #312]	@ (8008b30 <_strtod_l+0xb08>)
 80089f8:	4019      	ands	r1, r3
 80089fa:	4291      	cmp	r1, r2
 80089fc:	4682      	mov	sl, r0
 80089fe:	d942      	bls.n	8008a86 <_strtod_l+0xa5e>
 8008a00:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008a02:	4b47      	ldr	r3, [pc, #284]	@ (8008b20 <_strtod_l+0xaf8>)
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d103      	bne.n	8008a10 <_strtod_l+0x9e8>
 8008a08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008a0a:	3301      	adds	r3, #1
 8008a0c:	f43f ad2b 	beq.w	8008466 <_strtod_l+0x43e>
 8008a10:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008b20 <_strtod_l+0xaf8>
 8008a14:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8008a18:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008a1a:	9805      	ldr	r0, [sp, #20]
 8008a1c:	f7fe fe74 	bl	8007708 <_Bfree>
 8008a20:	9805      	ldr	r0, [sp, #20]
 8008a22:	4649      	mov	r1, r9
 8008a24:	f7fe fe70 	bl	8007708 <_Bfree>
 8008a28:	9805      	ldr	r0, [sp, #20]
 8008a2a:	4641      	mov	r1, r8
 8008a2c:	f7fe fe6c 	bl	8007708 <_Bfree>
 8008a30:	9805      	ldr	r0, [sp, #20]
 8008a32:	4621      	mov	r1, r4
 8008a34:	f7fe fe68 	bl	8007708 <_Bfree>
 8008a38:	e618      	b.n	800866c <_strtod_l+0x644>
 8008a3a:	f1ba 0f01 	cmp.w	sl, #1
 8008a3e:	d103      	bne.n	8008a48 <_strtod_l+0xa20>
 8008a40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	f43f ada5 	beq.w	8008592 <_strtod_l+0x56a>
 8008a48:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008af8 <_strtod_l+0xad0>
 8008a4c:	4f35      	ldr	r7, [pc, #212]	@ (8008b24 <_strtod_l+0xafc>)
 8008a4e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008a52:	2600      	movs	r6, #0
 8008a54:	e7b1      	b.n	80089ba <_strtod_l+0x992>
 8008a56:	4f34      	ldr	r7, [pc, #208]	@ (8008b28 <_strtod_l+0xb00>)
 8008a58:	2600      	movs	r6, #0
 8008a5a:	e7aa      	b.n	80089b2 <_strtod_l+0x98a>
 8008a5c:	4b32      	ldr	r3, [pc, #200]	@ (8008b28 <_strtod_l+0xb00>)
 8008a5e:	4630      	mov	r0, r6
 8008a60:	4639      	mov	r1, r7
 8008a62:	2200      	movs	r2, #0
 8008a64:	f7f7 fdf0 	bl	8000648 <__aeabi_dmul>
 8008a68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a6a:	4606      	mov	r6, r0
 8008a6c:	460f      	mov	r7, r1
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d09f      	beq.n	80089b2 <_strtod_l+0x98a>
 8008a72:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008a76:	e7a0      	b.n	80089ba <_strtod_l+0x992>
 8008a78:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008b00 <_strtod_l+0xad8>
 8008a7c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008a80:	ec57 6b17 	vmov	r6, r7, d7
 8008a84:	e799      	b.n	80089ba <_strtod_l+0x992>
 8008a86:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008a8a:	9b08      	ldr	r3, [sp, #32]
 8008a8c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d1c1      	bne.n	8008a18 <_strtod_l+0x9f0>
 8008a94:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008a98:	0d1b      	lsrs	r3, r3, #20
 8008a9a:	051b      	lsls	r3, r3, #20
 8008a9c:	429d      	cmp	r5, r3
 8008a9e:	d1bb      	bne.n	8008a18 <_strtod_l+0x9f0>
 8008aa0:	4630      	mov	r0, r6
 8008aa2:	4639      	mov	r1, r7
 8008aa4:	f7f8 f930 	bl	8000d08 <__aeabi_d2lz>
 8008aa8:	f7f7 fda0 	bl	80005ec <__aeabi_l2d>
 8008aac:	4602      	mov	r2, r0
 8008aae:	460b      	mov	r3, r1
 8008ab0:	4630      	mov	r0, r6
 8008ab2:	4639      	mov	r1, r7
 8008ab4:	f7f7 fc10 	bl	80002d8 <__aeabi_dsub>
 8008ab8:	460b      	mov	r3, r1
 8008aba:	4602      	mov	r2, r0
 8008abc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008ac0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008ac4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ac6:	ea46 060a 	orr.w	r6, r6, sl
 8008aca:	431e      	orrs	r6, r3
 8008acc:	d06f      	beq.n	8008bae <_strtod_l+0xb86>
 8008ace:	a30e      	add	r3, pc, #56	@ (adr r3, 8008b08 <_strtod_l+0xae0>)
 8008ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad4:	f7f8 f82a 	bl	8000b2c <__aeabi_dcmplt>
 8008ad8:	2800      	cmp	r0, #0
 8008ada:	f47f accf 	bne.w	800847c <_strtod_l+0x454>
 8008ade:	a30c      	add	r3, pc, #48	@ (adr r3, 8008b10 <_strtod_l+0xae8>)
 8008ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008ae8:	f7f8 f83e 	bl	8000b68 <__aeabi_dcmpgt>
 8008aec:	2800      	cmp	r0, #0
 8008aee:	d093      	beq.n	8008a18 <_strtod_l+0x9f0>
 8008af0:	e4c4      	b.n	800847c <_strtod_l+0x454>
 8008af2:	bf00      	nop
 8008af4:	f3af 8000 	nop.w
 8008af8:	00000000 	.word	0x00000000
 8008afc:	bff00000 	.word	0xbff00000
 8008b00:	00000000 	.word	0x00000000
 8008b04:	3ff00000 	.word	0x3ff00000
 8008b08:	94a03595 	.word	0x94a03595
 8008b0c:	3fdfffff 	.word	0x3fdfffff
 8008b10:	35afe535 	.word	0x35afe535
 8008b14:	3fe00000 	.word	0x3fe00000
 8008b18:	000fffff 	.word	0x000fffff
 8008b1c:	7ff00000 	.word	0x7ff00000
 8008b20:	7fefffff 	.word	0x7fefffff
 8008b24:	3ff00000 	.word	0x3ff00000
 8008b28:	3fe00000 	.word	0x3fe00000
 8008b2c:	7fe00000 	.word	0x7fe00000
 8008b30:	7c9fffff 	.word	0x7c9fffff
 8008b34:	9b08      	ldr	r3, [sp, #32]
 8008b36:	b323      	cbz	r3, 8008b82 <_strtod_l+0xb5a>
 8008b38:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008b3c:	d821      	bhi.n	8008b82 <_strtod_l+0xb5a>
 8008b3e:	a328      	add	r3, pc, #160	@ (adr r3, 8008be0 <_strtod_l+0xbb8>)
 8008b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b44:	4630      	mov	r0, r6
 8008b46:	4639      	mov	r1, r7
 8008b48:	f7f7 fffa 	bl	8000b40 <__aeabi_dcmple>
 8008b4c:	b1a0      	cbz	r0, 8008b78 <_strtod_l+0xb50>
 8008b4e:	4639      	mov	r1, r7
 8008b50:	4630      	mov	r0, r6
 8008b52:	f7f8 f851 	bl	8000bf8 <__aeabi_d2uiz>
 8008b56:	2801      	cmp	r0, #1
 8008b58:	bf38      	it	cc
 8008b5a:	2001      	movcc	r0, #1
 8008b5c:	f7f7 fcfa 	bl	8000554 <__aeabi_ui2d>
 8008b60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b62:	4606      	mov	r6, r0
 8008b64:	460f      	mov	r7, r1
 8008b66:	b9fb      	cbnz	r3, 8008ba8 <_strtod_l+0xb80>
 8008b68:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008b6c:	9014      	str	r0, [sp, #80]	@ 0x50
 8008b6e:	9315      	str	r3, [sp, #84]	@ 0x54
 8008b70:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008b74:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008b78:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008b7a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008b7e:	1b5b      	subs	r3, r3, r5
 8008b80:	9311      	str	r3, [sp, #68]	@ 0x44
 8008b82:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008b86:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008b8a:	f7ff f8f1 	bl	8007d70 <__ulp>
 8008b8e:	4650      	mov	r0, sl
 8008b90:	ec53 2b10 	vmov	r2, r3, d0
 8008b94:	4659      	mov	r1, fp
 8008b96:	f7f7 fd57 	bl	8000648 <__aeabi_dmul>
 8008b9a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008b9e:	f7f7 fb9d 	bl	80002dc <__adddf3>
 8008ba2:	4682      	mov	sl, r0
 8008ba4:	468b      	mov	fp, r1
 8008ba6:	e770      	b.n	8008a8a <_strtod_l+0xa62>
 8008ba8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008bac:	e7e0      	b.n	8008b70 <_strtod_l+0xb48>
 8008bae:	a30e      	add	r3, pc, #56	@ (adr r3, 8008be8 <_strtod_l+0xbc0>)
 8008bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb4:	f7f7 ffba 	bl	8000b2c <__aeabi_dcmplt>
 8008bb8:	e798      	b.n	8008aec <_strtod_l+0xac4>
 8008bba:	2300      	movs	r3, #0
 8008bbc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008bbe:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008bc0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008bc2:	6013      	str	r3, [r2, #0]
 8008bc4:	f7ff ba6d 	b.w	80080a2 <_strtod_l+0x7a>
 8008bc8:	2a65      	cmp	r2, #101	@ 0x65
 8008bca:	f43f ab66 	beq.w	800829a <_strtod_l+0x272>
 8008bce:	2a45      	cmp	r2, #69	@ 0x45
 8008bd0:	f43f ab63 	beq.w	800829a <_strtod_l+0x272>
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	f7ff bb9e 	b.w	8008316 <_strtod_l+0x2ee>
 8008bda:	bf00      	nop
 8008bdc:	f3af 8000 	nop.w
 8008be0:	ffc00000 	.word	0xffc00000
 8008be4:	41dfffff 	.word	0x41dfffff
 8008be8:	94a03595 	.word	0x94a03595
 8008bec:	3fcfffff 	.word	0x3fcfffff

08008bf0 <_strtod_r>:
 8008bf0:	4b01      	ldr	r3, [pc, #4]	@ (8008bf8 <_strtod_r+0x8>)
 8008bf2:	f7ff ba19 	b.w	8008028 <_strtod_l>
 8008bf6:	bf00      	nop
 8008bf8:	20000068 	.word	0x20000068

08008bfc <_strtol_l.constprop.0>:
 8008bfc:	2b24      	cmp	r3, #36	@ 0x24
 8008bfe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c02:	4686      	mov	lr, r0
 8008c04:	4690      	mov	r8, r2
 8008c06:	d801      	bhi.n	8008c0c <_strtol_l.constprop.0+0x10>
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d106      	bne.n	8008c1a <_strtol_l.constprop.0+0x1e>
 8008c0c:	f7fd fdbc 	bl	8006788 <__errno>
 8008c10:	2316      	movs	r3, #22
 8008c12:	6003      	str	r3, [r0, #0]
 8008c14:	2000      	movs	r0, #0
 8008c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c1a:	4834      	ldr	r0, [pc, #208]	@ (8008cec <_strtol_l.constprop.0+0xf0>)
 8008c1c:	460d      	mov	r5, r1
 8008c1e:	462a      	mov	r2, r5
 8008c20:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008c24:	5d06      	ldrb	r6, [r0, r4]
 8008c26:	f016 0608 	ands.w	r6, r6, #8
 8008c2a:	d1f8      	bne.n	8008c1e <_strtol_l.constprop.0+0x22>
 8008c2c:	2c2d      	cmp	r4, #45	@ 0x2d
 8008c2e:	d12d      	bne.n	8008c8c <_strtol_l.constprop.0+0x90>
 8008c30:	782c      	ldrb	r4, [r5, #0]
 8008c32:	2601      	movs	r6, #1
 8008c34:	1c95      	adds	r5, r2, #2
 8008c36:	f033 0210 	bics.w	r2, r3, #16
 8008c3a:	d109      	bne.n	8008c50 <_strtol_l.constprop.0+0x54>
 8008c3c:	2c30      	cmp	r4, #48	@ 0x30
 8008c3e:	d12a      	bne.n	8008c96 <_strtol_l.constprop.0+0x9a>
 8008c40:	782a      	ldrb	r2, [r5, #0]
 8008c42:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008c46:	2a58      	cmp	r2, #88	@ 0x58
 8008c48:	d125      	bne.n	8008c96 <_strtol_l.constprop.0+0x9a>
 8008c4a:	786c      	ldrb	r4, [r5, #1]
 8008c4c:	2310      	movs	r3, #16
 8008c4e:	3502      	adds	r5, #2
 8008c50:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008c54:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8008c58:	2200      	movs	r2, #0
 8008c5a:	fbbc f9f3 	udiv	r9, ip, r3
 8008c5e:	4610      	mov	r0, r2
 8008c60:	fb03 ca19 	mls	sl, r3, r9, ip
 8008c64:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008c68:	2f09      	cmp	r7, #9
 8008c6a:	d81b      	bhi.n	8008ca4 <_strtol_l.constprop.0+0xa8>
 8008c6c:	463c      	mov	r4, r7
 8008c6e:	42a3      	cmp	r3, r4
 8008c70:	dd27      	ble.n	8008cc2 <_strtol_l.constprop.0+0xc6>
 8008c72:	1c57      	adds	r7, r2, #1
 8008c74:	d007      	beq.n	8008c86 <_strtol_l.constprop.0+0x8a>
 8008c76:	4581      	cmp	r9, r0
 8008c78:	d320      	bcc.n	8008cbc <_strtol_l.constprop.0+0xc0>
 8008c7a:	d101      	bne.n	8008c80 <_strtol_l.constprop.0+0x84>
 8008c7c:	45a2      	cmp	sl, r4
 8008c7e:	db1d      	blt.n	8008cbc <_strtol_l.constprop.0+0xc0>
 8008c80:	fb00 4003 	mla	r0, r0, r3, r4
 8008c84:	2201      	movs	r2, #1
 8008c86:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008c8a:	e7eb      	b.n	8008c64 <_strtol_l.constprop.0+0x68>
 8008c8c:	2c2b      	cmp	r4, #43	@ 0x2b
 8008c8e:	bf04      	itt	eq
 8008c90:	782c      	ldrbeq	r4, [r5, #0]
 8008c92:	1c95      	addeq	r5, r2, #2
 8008c94:	e7cf      	b.n	8008c36 <_strtol_l.constprop.0+0x3a>
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d1da      	bne.n	8008c50 <_strtol_l.constprop.0+0x54>
 8008c9a:	2c30      	cmp	r4, #48	@ 0x30
 8008c9c:	bf0c      	ite	eq
 8008c9e:	2308      	moveq	r3, #8
 8008ca0:	230a      	movne	r3, #10
 8008ca2:	e7d5      	b.n	8008c50 <_strtol_l.constprop.0+0x54>
 8008ca4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008ca8:	2f19      	cmp	r7, #25
 8008caa:	d801      	bhi.n	8008cb0 <_strtol_l.constprop.0+0xb4>
 8008cac:	3c37      	subs	r4, #55	@ 0x37
 8008cae:	e7de      	b.n	8008c6e <_strtol_l.constprop.0+0x72>
 8008cb0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008cb4:	2f19      	cmp	r7, #25
 8008cb6:	d804      	bhi.n	8008cc2 <_strtol_l.constprop.0+0xc6>
 8008cb8:	3c57      	subs	r4, #87	@ 0x57
 8008cba:	e7d8      	b.n	8008c6e <_strtol_l.constprop.0+0x72>
 8008cbc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008cc0:	e7e1      	b.n	8008c86 <_strtol_l.constprop.0+0x8a>
 8008cc2:	1c53      	adds	r3, r2, #1
 8008cc4:	d108      	bne.n	8008cd8 <_strtol_l.constprop.0+0xdc>
 8008cc6:	2322      	movs	r3, #34	@ 0x22
 8008cc8:	f8ce 3000 	str.w	r3, [lr]
 8008ccc:	4660      	mov	r0, ip
 8008cce:	f1b8 0f00 	cmp.w	r8, #0
 8008cd2:	d0a0      	beq.n	8008c16 <_strtol_l.constprop.0+0x1a>
 8008cd4:	1e69      	subs	r1, r5, #1
 8008cd6:	e006      	b.n	8008ce6 <_strtol_l.constprop.0+0xea>
 8008cd8:	b106      	cbz	r6, 8008cdc <_strtol_l.constprop.0+0xe0>
 8008cda:	4240      	negs	r0, r0
 8008cdc:	f1b8 0f00 	cmp.w	r8, #0
 8008ce0:	d099      	beq.n	8008c16 <_strtol_l.constprop.0+0x1a>
 8008ce2:	2a00      	cmp	r2, #0
 8008ce4:	d1f6      	bne.n	8008cd4 <_strtol_l.constprop.0+0xd8>
 8008ce6:	f8c8 1000 	str.w	r1, [r8]
 8008cea:	e794      	b.n	8008c16 <_strtol_l.constprop.0+0x1a>
 8008cec:	0800a4c1 	.word	0x0800a4c1

08008cf0 <_strtol_r>:
 8008cf0:	f7ff bf84 	b.w	8008bfc <_strtol_l.constprop.0>

08008cf4 <__ssputs_r>:
 8008cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cf8:	688e      	ldr	r6, [r1, #8]
 8008cfa:	461f      	mov	r7, r3
 8008cfc:	42be      	cmp	r6, r7
 8008cfe:	680b      	ldr	r3, [r1, #0]
 8008d00:	4682      	mov	sl, r0
 8008d02:	460c      	mov	r4, r1
 8008d04:	4690      	mov	r8, r2
 8008d06:	d82d      	bhi.n	8008d64 <__ssputs_r+0x70>
 8008d08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008d0c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008d10:	d026      	beq.n	8008d60 <__ssputs_r+0x6c>
 8008d12:	6965      	ldr	r5, [r4, #20]
 8008d14:	6909      	ldr	r1, [r1, #16]
 8008d16:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008d1a:	eba3 0901 	sub.w	r9, r3, r1
 8008d1e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008d22:	1c7b      	adds	r3, r7, #1
 8008d24:	444b      	add	r3, r9
 8008d26:	106d      	asrs	r5, r5, #1
 8008d28:	429d      	cmp	r5, r3
 8008d2a:	bf38      	it	cc
 8008d2c:	461d      	movcc	r5, r3
 8008d2e:	0553      	lsls	r3, r2, #21
 8008d30:	d527      	bpl.n	8008d82 <__ssputs_r+0x8e>
 8008d32:	4629      	mov	r1, r5
 8008d34:	f7fe fc1c 	bl	8007570 <_malloc_r>
 8008d38:	4606      	mov	r6, r0
 8008d3a:	b360      	cbz	r0, 8008d96 <__ssputs_r+0xa2>
 8008d3c:	6921      	ldr	r1, [r4, #16]
 8008d3e:	464a      	mov	r2, r9
 8008d40:	f000 fbc4 	bl	80094cc <memcpy>
 8008d44:	89a3      	ldrh	r3, [r4, #12]
 8008d46:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008d4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d4e:	81a3      	strh	r3, [r4, #12]
 8008d50:	6126      	str	r6, [r4, #16]
 8008d52:	6165      	str	r5, [r4, #20]
 8008d54:	444e      	add	r6, r9
 8008d56:	eba5 0509 	sub.w	r5, r5, r9
 8008d5a:	6026      	str	r6, [r4, #0]
 8008d5c:	60a5      	str	r5, [r4, #8]
 8008d5e:	463e      	mov	r6, r7
 8008d60:	42be      	cmp	r6, r7
 8008d62:	d900      	bls.n	8008d66 <__ssputs_r+0x72>
 8008d64:	463e      	mov	r6, r7
 8008d66:	6820      	ldr	r0, [r4, #0]
 8008d68:	4632      	mov	r2, r6
 8008d6a:	4641      	mov	r1, r8
 8008d6c:	f7fd fca0 	bl	80066b0 <memmove>
 8008d70:	68a3      	ldr	r3, [r4, #8]
 8008d72:	1b9b      	subs	r3, r3, r6
 8008d74:	60a3      	str	r3, [r4, #8]
 8008d76:	6823      	ldr	r3, [r4, #0]
 8008d78:	4433      	add	r3, r6
 8008d7a:	6023      	str	r3, [r4, #0]
 8008d7c:	2000      	movs	r0, #0
 8008d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d82:	462a      	mov	r2, r5
 8008d84:	f000 ff35 	bl	8009bf2 <_realloc_r>
 8008d88:	4606      	mov	r6, r0
 8008d8a:	2800      	cmp	r0, #0
 8008d8c:	d1e0      	bne.n	8008d50 <__ssputs_r+0x5c>
 8008d8e:	6921      	ldr	r1, [r4, #16]
 8008d90:	4650      	mov	r0, sl
 8008d92:	f7fe fb79 	bl	8007488 <_free_r>
 8008d96:	230c      	movs	r3, #12
 8008d98:	f8ca 3000 	str.w	r3, [sl]
 8008d9c:	89a3      	ldrh	r3, [r4, #12]
 8008d9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008da2:	81a3      	strh	r3, [r4, #12]
 8008da4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008da8:	e7e9      	b.n	8008d7e <__ssputs_r+0x8a>
	...

08008dac <_svfiprintf_r>:
 8008dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008db0:	4698      	mov	r8, r3
 8008db2:	898b      	ldrh	r3, [r1, #12]
 8008db4:	061b      	lsls	r3, r3, #24
 8008db6:	b09d      	sub	sp, #116	@ 0x74
 8008db8:	4607      	mov	r7, r0
 8008dba:	460d      	mov	r5, r1
 8008dbc:	4614      	mov	r4, r2
 8008dbe:	d510      	bpl.n	8008de2 <_svfiprintf_r+0x36>
 8008dc0:	690b      	ldr	r3, [r1, #16]
 8008dc2:	b973      	cbnz	r3, 8008de2 <_svfiprintf_r+0x36>
 8008dc4:	2140      	movs	r1, #64	@ 0x40
 8008dc6:	f7fe fbd3 	bl	8007570 <_malloc_r>
 8008dca:	6028      	str	r0, [r5, #0]
 8008dcc:	6128      	str	r0, [r5, #16]
 8008dce:	b930      	cbnz	r0, 8008dde <_svfiprintf_r+0x32>
 8008dd0:	230c      	movs	r3, #12
 8008dd2:	603b      	str	r3, [r7, #0]
 8008dd4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008dd8:	b01d      	add	sp, #116	@ 0x74
 8008dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dde:	2340      	movs	r3, #64	@ 0x40
 8008de0:	616b      	str	r3, [r5, #20]
 8008de2:	2300      	movs	r3, #0
 8008de4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008de6:	2320      	movs	r3, #32
 8008de8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008dec:	f8cd 800c 	str.w	r8, [sp, #12]
 8008df0:	2330      	movs	r3, #48	@ 0x30
 8008df2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008f90 <_svfiprintf_r+0x1e4>
 8008df6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008dfa:	f04f 0901 	mov.w	r9, #1
 8008dfe:	4623      	mov	r3, r4
 8008e00:	469a      	mov	sl, r3
 8008e02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e06:	b10a      	cbz	r2, 8008e0c <_svfiprintf_r+0x60>
 8008e08:	2a25      	cmp	r2, #37	@ 0x25
 8008e0a:	d1f9      	bne.n	8008e00 <_svfiprintf_r+0x54>
 8008e0c:	ebba 0b04 	subs.w	fp, sl, r4
 8008e10:	d00b      	beq.n	8008e2a <_svfiprintf_r+0x7e>
 8008e12:	465b      	mov	r3, fp
 8008e14:	4622      	mov	r2, r4
 8008e16:	4629      	mov	r1, r5
 8008e18:	4638      	mov	r0, r7
 8008e1a:	f7ff ff6b 	bl	8008cf4 <__ssputs_r>
 8008e1e:	3001      	adds	r0, #1
 8008e20:	f000 80a7 	beq.w	8008f72 <_svfiprintf_r+0x1c6>
 8008e24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e26:	445a      	add	r2, fp
 8008e28:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e2a:	f89a 3000 	ldrb.w	r3, [sl]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	f000 809f 	beq.w	8008f72 <_svfiprintf_r+0x1c6>
 8008e34:	2300      	movs	r3, #0
 8008e36:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008e3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e3e:	f10a 0a01 	add.w	sl, sl, #1
 8008e42:	9304      	str	r3, [sp, #16]
 8008e44:	9307      	str	r3, [sp, #28]
 8008e46:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008e4a:	931a      	str	r3, [sp, #104]	@ 0x68
 8008e4c:	4654      	mov	r4, sl
 8008e4e:	2205      	movs	r2, #5
 8008e50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e54:	484e      	ldr	r0, [pc, #312]	@ (8008f90 <_svfiprintf_r+0x1e4>)
 8008e56:	f7f7 f9e3 	bl	8000220 <memchr>
 8008e5a:	9a04      	ldr	r2, [sp, #16]
 8008e5c:	b9d8      	cbnz	r0, 8008e96 <_svfiprintf_r+0xea>
 8008e5e:	06d0      	lsls	r0, r2, #27
 8008e60:	bf44      	itt	mi
 8008e62:	2320      	movmi	r3, #32
 8008e64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e68:	0711      	lsls	r1, r2, #28
 8008e6a:	bf44      	itt	mi
 8008e6c:	232b      	movmi	r3, #43	@ 0x2b
 8008e6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e72:	f89a 3000 	ldrb.w	r3, [sl]
 8008e76:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e78:	d015      	beq.n	8008ea6 <_svfiprintf_r+0xfa>
 8008e7a:	9a07      	ldr	r2, [sp, #28]
 8008e7c:	4654      	mov	r4, sl
 8008e7e:	2000      	movs	r0, #0
 8008e80:	f04f 0c0a 	mov.w	ip, #10
 8008e84:	4621      	mov	r1, r4
 8008e86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e8a:	3b30      	subs	r3, #48	@ 0x30
 8008e8c:	2b09      	cmp	r3, #9
 8008e8e:	d94b      	bls.n	8008f28 <_svfiprintf_r+0x17c>
 8008e90:	b1b0      	cbz	r0, 8008ec0 <_svfiprintf_r+0x114>
 8008e92:	9207      	str	r2, [sp, #28]
 8008e94:	e014      	b.n	8008ec0 <_svfiprintf_r+0x114>
 8008e96:	eba0 0308 	sub.w	r3, r0, r8
 8008e9a:	fa09 f303 	lsl.w	r3, r9, r3
 8008e9e:	4313      	orrs	r3, r2
 8008ea0:	9304      	str	r3, [sp, #16]
 8008ea2:	46a2      	mov	sl, r4
 8008ea4:	e7d2      	b.n	8008e4c <_svfiprintf_r+0xa0>
 8008ea6:	9b03      	ldr	r3, [sp, #12]
 8008ea8:	1d19      	adds	r1, r3, #4
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	9103      	str	r1, [sp, #12]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	bfbb      	ittet	lt
 8008eb2:	425b      	neglt	r3, r3
 8008eb4:	f042 0202 	orrlt.w	r2, r2, #2
 8008eb8:	9307      	strge	r3, [sp, #28]
 8008eba:	9307      	strlt	r3, [sp, #28]
 8008ebc:	bfb8      	it	lt
 8008ebe:	9204      	strlt	r2, [sp, #16]
 8008ec0:	7823      	ldrb	r3, [r4, #0]
 8008ec2:	2b2e      	cmp	r3, #46	@ 0x2e
 8008ec4:	d10a      	bne.n	8008edc <_svfiprintf_r+0x130>
 8008ec6:	7863      	ldrb	r3, [r4, #1]
 8008ec8:	2b2a      	cmp	r3, #42	@ 0x2a
 8008eca:	d132      	bne.n	8008f32 <_svfiprintf_r+0x186>
 8008ecc:	9b03      	ldr	r3, [sp, #12]
 8008ece:	1d1a      	adds	r2, r3, #4
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	9203      	str	r2, [sp, #12]
 8008ed4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008ed8:	3402      	adds	r4, #2
 8008eda:	9305      	str	r3, [sp, #20]
 8008edc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008fa0 <_svfiprintf_r+0x1f4>
 8008ee0:	7821      	ldrb	r1, [r4, #0]
 8008ee2:	2203      	movs	r2, #3
 8008ee4:	4650      	mov	r0, sl
 8008ee6:	f7f7 f99b 	bl	8000220 <memchr>
 8008eea:	b138      	cbz	r0, 8008efc <_svfiprintf_r+0x150>
 8008eec:	9b04      	ldr	r3, [sp, #16]
 8008eee:	eba0 000a 	sub.w	r0, r0, sl
 8008ef2:	2240      	movs	r2, #64	@ 0x40
 8008ef4:	4082      	lsls	r2, r0
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	3401      	adds	r4, #1
 8008efa:	9304      	str	r3, [sp, #16]
 8008efc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f00:	4824      	ldr	r0, [pc, #144]	@ (8008f94 <_svfiprintf_r+0x1e8>)
 8008f02:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008f06:	2206      	movs	r2, #6
 8008f08:	f7f7 f98a 	bl	8000220 <memchr>
 8008f0c:	2800      	cmp	r0, #0
 8008f0e:	d036      	beq.n	8008f7e <_svfiprintf_r+0x1d2>
 8008f10:	4b21      	ldr	r3, [pc, #132]	@ (8008f98 <_svfiprintf_r+0x1ec>)
 8008f12:	bb1b      	cbnz	r3, 8008f5c <_svfiprintf_r+0x1b0>
 8008f14:	9b03      	ldr	r3, [sp, #12]
 8008f16:	3307      	adds	r3, #7
 8008f18:	f023 0307 	bic.w	r3, r3, #7
 8008f1c:	3308      	adds	r3, #8
 8008f1e:	9303      	str	r3, [sp, #12]
 8008f20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f22:	4433      	add	r3, r6
 8008f24:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f26:	e76a      	b.n	8008dfe <_svfiprintf_r+0x52>
 8008f28:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f2c:	460c      	mov	r4, r1
 8008f2e:	2001      	movs	r0, #1
 8008f30:	e7a8      	b.n	8008e84 <_svfiprintf_r+0xd8>
 8008f32:	2300      	movs	r3, #0
 8008f34:	3401      	adds	r4, #1
 8008f36:	9305      	str	r3, [sp, #20]
 8008f38:	4619      	mov	r1, r3
 8008f3a:	f04f 0c0a 	mov.w	ip, #10
 8008f3e:	4620      	mov	r0, r4
 8008f40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f44:	3a30      	subs	r2, #48	@ 0x30
 8008f46:	2a09      	cmp	r2, #9
 8008f48:	d903      	bls.n	8008f52 <_svfiprintf_r+0x1a6>
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d0c6      	beq.n	8008edc <_svfiprintf_r+0x130>
 8008f4e:	9105      	str	r1, [sp, #20]
 8008f50:	e7c4      	b.n	8008edc <_svfiprintf_r+0x130>
 8008f52:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f56:	4604      	mov	r4, r0
 8008f58:	2301      	movs	r3, #1
 8008f5a:	e7f0      	b.n	8008f3e <_svfiprintf_r+0x192>
 8008f5c:	ab03      	add	r3, sp, #12
 8008f5e:	9300      	str	r3, [sp, #0]
 8008f60:	462a      	mov	r2, r5
 8008f62:	4b0e      	ldr	r3, [pc, #56]	@ (8008f9c <_svfiprintf_r+0x1f0>)
 8008f64:	a904      	add	r1, sp, #16
 8008f66:	4638      	mov	r0, r7
 8008f68:	f7fc fbac 	bl	80056c4 <_printf_float>
 8008f6c:	1c42      	adds	r2, r0, #1
 8008f6e:	4606      	mov	r6, r0
 8008f70:	d1d6      	bne.n	8008f20 <_svfiprintf_r+0x174>
 8008f72:	89ab      	ldrh	r3, [r5, #12]
 8008f74:	065b      	lsls	r3, r3, #25
 8008f76:	f53f af2d 	bmi.w	8008dd4 <_svfiprintf_r+0x28>
 8008f7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008f7c:	e72c      	b.n	8008dd8 <_svfiprintf_r+0x2c>
 8008f7e:	ab03      	add	r3, sp, #12
 8008f80:	9300      	str	r3, [sp, #0]
 8008f82:	462a      	mov	r2, r5
 8008f84:	4b05      	ldr	r3, [pc, #20]	@ (8008f9c <_svfiprintf_r+0x1f0>)
 8008f86:	a904      	add	r1, sp, #16
 8008f88:	4638      	mov	r0, r7
 8008f8a:	f7fc fe33 	bl	8005bf4 <_printf_i>
 8008f8e:	e7ed      	b.n	8008f6c <_svfiprintf_r+0x1c0>
 8008f90:	0800a5c1 	.word	0x0800a5c1
 8008f94:	0800a5cb 	.word	0x0800a5cb
 8008f98:	080056c5 	.word	0x080056c5
 8008f9c:	08008cf5 	.word	0x08008cf5
 8008fa0:	0800a5c7 	.word	0x0800a5c7

08008fa4 <__sfputc_r>:
 8008fa4:	6893      	ldr	r3, [r2, #8]
 8008fa6:	3b01      	subs	r3, #1
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	b410      	push	{r4}
 8008fac:	6093      	str	r3, [r2, #8]
 8008fae:	da08      	bge.n	8008fc2 <__sfputc_r+0x1e>
 8008fb0:	6994      	ldr	r4, [r2, #24]
 8008fb2:	42a3      	cmp	r3, r4
 8008fb4:	db01      	blt.n	8008fba <__sfputc_r+0x16>
 8008fb6:	290a      	cmp	r1, #10
 8008fb8:	d103      	bne.n	8008fc2 <__sfputc_r+0x1e>
 8008fba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fbe:	f7fd bae2 	b.w	8006586 <__swbuf_r>
 8008fc2:	6813      	ldr	r3, [r2, #0]
 8008fc4:	1c58      	adds	r0, r3, #1
 8008fc6:	6010      	str	r0, [r2, #0]
 8008fc8:	7019      	strb	r1, [r3, #0]
 8008fca:	4608      	mov	r0, r1
 8008fcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fd0:	4770      	bx	lr

08008fd2 <__sfputs_r>:
 8008fd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fd4:	4606      	mov	r6, r0
 8008fd6:	460f      	mov	r7, r1
 8008fd8:	4614      	mov	r4, r2
 8008fda:	18d5      	adds	r5, r2, r3
 8008fdc:	42ac      	cmp	r4, r5
 8008fde:	d101      	bne.n	8008fe4 <__sfputs_r+0x12>
 8008fe0:	2000      	movs	r0, #0
 8008fe2:	e007      	b.n	8008ff4 <__sfputs_r+0x22>
 8008fe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fe8:	463a      	mov	r2, r7
 8008fea:	4630      	mov	r0, r6
 8008fec:	f7ff ffda 	bl	8008fa4 <__sfputc_r>
 8008ff0:	1c43      	adds	r3, r0, #1
 8008ff2:	d1f3      	bne.n	8008fdc <__sfputs_r+0xa>
 8008ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008ff8 <_vfiprintf_r>:
 8008ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ffc:	460d      	mov	r5, r1
 8008ffe:	b09d      	sub	sp, #116	@ 0x74
 8009000:	4614      	mov	r4, r2
 8009002:	4698      	mov	r8, r3
 8009004:	4606      	mov	r6, r0
 8009006:	b118      	cbz	r0, 8009010 <_vfiprintf_r+0x18>
 8009008:	6a03      	ldr	r3, [r0, #32]
 800900a:	b90b      	cbnz	r3, 8009010 <_vfiprintf_r+0x18>
 800900c:	f7fd f9b2 	bl	8006374 <__sinit>
 8009010:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009012:	07d9      	lsls	r1, r3, #31
 8009014:	d405      	bmi.n	8009022 <_vfiprintf_r+0x2a>
 8009016:	89ab      	ldrh	r3, [r5, #12]
 8009018:	059a      	lsls	r2, r3, #22
 800901a:	d402      	bmi.n	8009022 <_vfiprintf_r+0x2a>
 800901c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800901e:	f7fd fbde 	bl	80067de <__retarget_lock_acquire_recursive>
 8009022:	89ab      	ldrh	r3, [r5, #12]
 8009024:	071b      	lsls	r3, r3, #28
 8009026:	d501      	bpl.n	800902c <_vfiprintf_r+0x34>
 8009028:	692b      	ldr	r3, [r5, #16]
 800902a:	b99b      	cbnz	r3, 8009054 <_vfiprintf_r+0x5c>
 800902c:	4629      	mov	r1, r5
 800902e:	4630      	mov	r0, r6
 8009030:	f7fd fae8 	bl	8006604 <__swsetup_r>
 8009034:	b170      	cbz	r0, 8009054 <_vfiprintf_r+0x5c>
 8009036:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009038:	07dc      	lsls	r4, r3, #31
 800903a:	d504      	bpl.n	8009046 <_vfiprintf_r+0x4e>
 800903c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009040:	b01d      	add	sp, #116	@ 0x74
 8009042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009046:	89ab      	ldrh	r3, [r5, #12]
 8009048:	0598      	lsls	r0, r3, #22
 800904a:	d4f7      	bmi.n	800903c <_vfiprintf_r+0x44>
 800904c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800904e:	f7fd fbc7 	bl	80067e0 <__retarget_lock_release_recursive>
 8009052:	e7f3      	b.n	800903c <_vfiprintf_r+0x44>
 8009054:	2300      	movs	r3, #0
 8009056:	9309      	str	r3, [sp, #36]	@ 0x24
 8009058:	2320      	movs	r3, #32
 800905a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800905e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009062:	2330      	movs	r3, #48	@ 0x30
 8009064:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009214 <_vfiprintf_r+0x21c>
 8009068:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800906c:	f04f 0901 	mov.w	r9, #1
 8009070:	4623      	mov	r3, r4
 8009072:	469a      	mov	sl, r3
 8009074:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009078:	b10a      	cbz	r2, 800907e <_vfiprintf_r+0x86>
 800907a:	2a25      	cmp	r2, #37	@ 0x25
 800907c:	d1f9      	bne.n	8009072 <_vfiprintf_r+0x7a>
 800907e:	ebba 0b04 	subs.w	fp, sl, r4
 8009082:	d00b      	beq.n	800909c <_vfiprintf_r+0xa4>
 8009084:	465b      	mov	r3, fp
 8009086:	4622      	mov	r2, r4
 8009088:	4629      	mov	r1, r5
 800908a:	4630      	mov	r0, r6
 800908c:	f7ff ffa1 	bl	8008fd2 <__sfputs_r>
 8009090:	3001      	adds	r0, #1
 8009092:	f000 80a7 	beq.w	80091e4 <_vfiprintf_r+0x1ec>
 8009096:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009098:	445a      	add	r2, fp
 800909a:	9209      	str	r2, [sp, #36]	@ 0x24
 800909c:	f89a 3000 	ldrb.w	r3, [sl]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	f000 809f 	beq.w	80091e4 <_vfiprintf_r+0x1ec>
 80090a6:	2300      	movs	r3, #0
 80090a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80090ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090b0:	f10a 0a01 	add.w	sl, sl, #1
 80090b4:	9304      	str	r3, [sp, #16]
 80090b6:	9307      	str	r3, [sp, #28]
 80090b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80090bc:	931a      	str	r3, [sp, #104]	@ 0x68
 80090be:	4654      	mov	r4, sl
 80090c0:	2205      	movs	r2, #5
 80090c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090c6:	4853      	ldr	r0, [pc, #332]	@ (8009214 <_vfiprintf_r+0x21c>)
 80090c8:	f7f7 f8aa 	bl	8000220 <memchr>
 80090cc:	9a04      	ldr	r2, [sp, #16]
 80090ce:	b9d8      	cbnz	r0, 8009108 <_vfiprintf_r+0x110>
 80090d0:	06d1      	lsls	r1, r2, #27
 80090d2:	bf44      	itt	mi
 80090d4:	2320      	movmi	r3, #32
 80090d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80090da:	0713      	lsls	r3, r2, #28
 80090dc:	bf44      	itt	mi
 80090de:	232b      	movmi	r3, #43	@ 0x2b
 80090e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80090e4:	f89a 3000 	ldrb.w	r3, [sl]
 80090e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80090ea:	d015      	beq.n	8009118 <_vfiprintf_r+0x120>
 80090ec:	9a07      	ldr	r2, [sp, #28]
 80090ee:	4654      	mov	r4, sl
 80090f0:	2000      	movs	r0, #0
 80090f2:	f04f 0c0a 	mov.w	ip, #10
 80090f6:	4621      	mov	r1, r4
 80090f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090fc:	3b30      	subs	r3, #48	@ 0x30
 80090fe:	2b09      	cmp	r3, #9
 8009100:	d94b      	bls.n	800919a <_vfiprintf_r+0x1a2>
 8009102:	b1b0      	cbz	r0, 8009132 <_vfiprintf_r+0x13a>
 8009104:	9207      	str	r2, [sp, #28]
 8009106:	e014      	b.n	8009132 <_vfiprintf_r+0x13a>
 8009108:	eba0 0308 	sub.w	r3, r0, r8
 800910c:	fa09 f303 	lsl.w	r3, r9, r3
 8009110:	4313      	orrs	r3, r2
 8009112:	9304      	str	r3, [sp, #16]
 8009114:	46a2      	mov	sl, r4
 8009116:	e7d2      	b.n	80090be <_vfiprintf_r+0xc6>
 8009118:	9b03      	ldr	r3, [sp, #12]
 800911a:	1d19      	adds	r1, r3, #4
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	9103      	str	r1, [sp, #12]
 8009120:	2b00      	cmp	r3, #0
 8009122:	bfbb      	ittet	lt
 8009124:	425b      	neglt	r3, r3
 8009126:	f042 0202 	orrlt.w	r2, r2, #2
 800912a:	9307      	strge	r3, [sp, #28]
 800912c:	9307      	strlt	r3, [sp, #28]
 800912e:	bfb8      	it	lt
 8009130:	9204      	strlt	r2, [sp, #16]
 8009132:	7823      	ldrb	r3, [r4, #0]
 8009134:	2b2e      	cmp	r3, #46	@ 0x2e
 8009136:	d10a      	bne.n	800914e <_vfiprintf_r+0x156>
 8009138:	7863      	ldrb	r3, [r4, #1]
 800913a:	2b2a      	cmp	r3, #42	@ 0x2a
 800913c:	d132      	bne.n	80091a4 <_vfiprintf_r+0x1ac>
 800913e:	9b03      	ldr	r3, [sp, #12]
 8009140:	1d1a      	adds	r2, r3, #4
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	9203      	str	r2, [sp, #12]
 8009146:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800914a:	3402      	adds	r4, #2
 800914c:	9305      	str	r3, [sp, #20]
 800914e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009224 <_vfiprintf_r+0x22c>
 8009152:	7821      	ldrb	r1, [r4, #0]
 8009154:	2203      	movs	r2, #3
 8009156:	4650      	mov	r0, sl
 8009158:	f7f7 f862 	bl	8000220 <memchr>
 800915c:	b138      	cbz	r0, 800916e <_vfiprintf_r+0x176>
 800915e:	9b04      	ldr	r3, [sp, #16]
 8009160:	eba0 000a 	sub.w	r0, r0, sl
 8009164:	2240      	movs	r2, #64	@ 0x40
 8009166:	4082      	lsls	r2, r0
 8009168:	4313      	orrs	r3, r2
 800916a:	3401      	adds	r4, #1
 800916c:	9304      	str	r3, [sp, #16]
 800916e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009172:	4829      	ldr	r0, [pc, #164]	@ (8009218 <_vfiprintf_r+0x220>)
 8009174:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009178:	2206      	movs	r2, #6
 800917a:	f7f7 f851 	bl	8000220 <memchr>
 800917e:	2800      	cmp	r0, #0
 8009180:	d03f      	beq.n	8009202 <_vfiprintf_r+0x20a>
 8009182:	4b26      	ldr	r3, [pc, #152]	@ (800921c <_vfiprintf_r+0x224>)
 8009184:	bb1b      	cbnz	r3, 80091ce <_vfiprintf_r+0x1d6>
 8009186:	9b03      	ldr	r3, [sp, #12]
 8009188:	3307      	adds	r3, #7
 800918a:	f023 0307 	bic.w	r3, r3, #7
 800918e:	3308      	adds	r3, #8
 8009190:	9303      	str	r3, [sp, #12]
 8009192:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009194:	443b      	add	r3, r7
 8009196:	9309      	str	r3, [sp, #36]	@ 0x24
 8009198:	e76a      	b.n	8009070 <_vfiprintf_r+0x78>
 800919a:	fb0c 3202 	mla	r2, ip, r2, r3
 800919e:	460c      	mov	r4, r1
 80091a0:	2001      	movs	r0, #1
 80091a2:	e7a8      	b.n	80090f6 <_vfiprintf_r+0xfe>
 80091a4:	2300      	movs	r3, #0
 80091a6:	3401      	adds	r4, #1
 80091a8:	9305      	str	r3, [sp, #20]
 80091aa:	4619      	mov	r1, r3
 80091ac:	f04f 0c0a 	mov.w	ip, #10
 80091b0:	4620      	mov	r0, r4
 80091b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091b6:	3a30      	subs	r2, #48	@ 0x30
 80091b8:	2a09      	cmp	r2, #9
 80091ba:	d903      	bls.n	80091c4 <_vfiprintf_r+0x1cc>
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d0c6      	beq.n	800914e <_vfiprintf_r+0x156>
 80091c0:	9105      	str	r1, [sp, #20]
 80091c2:	e7c4      	b.n	800914e <_vfiprintf_r+0x156>
 80091c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80091c8:	4604      	mov	r4, r0
 80091ca:	2301      	movs	r3, #1
 80091cc:	e7f0      	b.n	80091b0 <_vfiprintf_r+0x1b8>
 80091ce:	ab03      	add	r3, sp, #12
 80091d0:	9300      	str	r3, [sp, #0]
 80091d2:	462a      	mov	r2, r5
 80091d4:	4b12      	ldr	r3, [pc, #72]	@ (8009220 <_vfiprintf_r+0x228>)
 80091d6:	a904      	add	r1, sp, #16
 80091d8:	4630      	mov	r0, r6
 80091da:	f7fc fa73 	bl	80056c4 <_printf_float>
 80091de:	4607      	mov	r7, r0
 80091e0:	1c78      	adds	r0, r7, #1
 80091e2:	d1d6      	bne.n	8009192 <_vfiprintf_r+0x19a>
 80091e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80091e6:	07d9      	lsls	r1, r3, #31
 80091e8:	d405      	bmi.n	80091f6 <_vfiprintf_r+0x1fe>
 80091ea:	89ab      	ldrh	r3, [r5, #12]
 80091ec:	059a      	lsls	r2, r3, #22
 80091ee:	d402      	bmi.n	80091f6 <_vfiprintf_r+0x1fe>
 80091f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80091f2:	f7fd faf5 	bl	80067e0 <__retarget_lock_release_recursive>
 80091f6:	89ab      	ldrh	r3, [r5, #12]
 80091f8:	065b      	lsls	r3, r3, #25
 80091fa:	f53f af1f 	bmi.w	800903c <_vfiprintf_r+0x44>
 80091fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009200:	e71e      	b.n	8009040 <_vfiprintf_r+0x48>
 8009202:	ab03      	add	r3, sp, #12
 8009204:	9300      	str	r3, [sp, #0]
 8009206:	462a      	mov	r2, r5
 8009208:	4b05      	ldr	r3, [pc, #20]	@ (8009220 <_vfiprintf_r+0x228>)
 800920a:	a904      	add	r1, sp, #16
 800920c:	4630      	mov	r0, r6
 800920e:	f7fc fcf1 	bl	8005bf4 <_printf_i>
 8009212:	e7e4      	b.n	80091de <_vfiprintf_r+0x1e6>
 8009214:	0800a5c1 	.word	0x0800a5c1
 8009218:	0800a5cb 	.word	0x0800a5cb
 800921c:	080056c5 	.word	0x080056c5
 8009220:	08008fd3 	.word	0x08008fd3
 8009224:	0800a5c7 	.word	0x0800a5c7

08009228 <__sflush_r>:
 8009228:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800922c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009230:	0716      	lsls	r6, r2, #28
 8009232:	4605      	mov	r5, r0
 8009234:	460c      	mov	r4, r1
 8009236:	d454      	bmi.n	80092e2 <__sflush_r+0xba>
 8009238:	684b      	ldr	r3, [r1, #4]
 800923a:	2b00      	cmp	r3, #0
 800923c:	dc02      	bgt.n	8009244 <__sflush_r+0x1c>
 800923e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009240:	2b00      	cmp	r3, #0
 8009242:	dd48      	ble.n	80092d6 <__sflush_r+0xae>
 8009244:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009246:	2e00      	cmp	r6, #0
 8009248:	d045      	beq.n	80092d6 <__sflush_r+0xae>
 800924a:	2300      	movs	r3, #0
 800924c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009250:	682f      	ldr	r7, [r5, #0]
 8009252:	6a21      	ldr	r1, [r4, #32]
 8009254:	602b      	str	r3, [r5, #0]
 8009256:	d030      	beq.n	80092ba <__sflush_r+0x92>
 8009258:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800925a:	89a3      	ldrh	r3, [r4, #12]
 800925c:	0759      	lsls	r1, r3, #29
 800925e:	d505      	bpl.n	800926c <__sflush_r+0x44>
 8009260:	6863      	ldr	r3, [r4, #4]
 8009262:	1ad2      	subs	r2, r2, r3
 8009264:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009266:	b10b      	cbz	r3, 800926c <__sflush_r+0x44>
 8009268:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800926a:	1ad2      	subs	r2, r2, r3
 800926c:	2300      	movs	r3, #0
 800926e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009270:	6a21      	ldr	r1, [r4, #32]
 8009272:	4628      	mov	r0, r5
 8009274:	47b0      	blx	r6
 8009276:	1c43      	adds	r3, r0, #1
 8009278:	89a3      	ldrh	r3, [r4, #12]
 800927a:	d106      	bne.n	800928a <__sflush_r+0x62>
 800927c:	6829      	ldr	r1, [r5, #0]
 800927e:	291d      	cmp	r1, #29
 8009280:	d82b      	bhi.n	80092da <__sflush_r+0xb2>
 8009282:	4a2a      	ldr	r2, [pc, #168]	@ (800932c <__sflush_r+0x104>)
 8009284:	410a      	asrs	r2, r1
 8009286:	07d6      	lsls	r6, r2, #31
 8009288:	d427      	bmi.n	80092da <__sflush_r+0xb2>
 800928a:	2200      	movs	r2, #0
 800928c:	6062      	str	r2, [r4, #4]
 800928e:	04d9      	lsls	r1, r3, #19
 8009290:	6922      	ldr	r2, [r4, #16]
 8009292:	6022      	str	r2, [r4, #0]
 8009294:	d504      	bpl.n	80092a0 <__sflush_r+0x78>
 8009296:	1c42      	adds	r2, r0, #1
 8009298:	d101      	bne.n	800929e <__sflush_r+0x76>
 800929a:	682b      	ldr	r3, [r5, #0]
 800929c:	b903      	cbnz	r3, 80092a0 <__sflush_r+0x78>
 800929e:	6560      	str	r0, [r4, #84]	@ 0x54
 80092a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80092a2:	602f      	str	r7, [r5, #0]
 80092a4:	b1b9      	cbz	r1, 80092d6 <__sflush_r+0xae>
 80092a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80092aa:	4299      	cmp	r1, r3
 80092ac:	d002      	beq.n	80092b4 <__sflush_r+0x8c>
 80092ae:	4628      	mov	r0, r5
 80092b0:	f7fe f8ea 	bl	8007488 <_free_r>
 80092b4:	2300      	movs	r3, #0
 80092b6:	6363      	str	r3, [r4, #52]	@ 0x34
 80092b8:	e00d      	b.n	80092d6 <__sflush_r+0xae>
 80092ba:	2301      	movs	r3, #1
 80092bc:	4628      	mov	r0, r5
 80092be:	47b0      	blx	r6
 80092c0:	4602      	mov	r2, r0
 80092c2:	1c50      	adds	r0, r2, #1
 80092c4:	d1c9      	bne.n	800925a <__sflush_r+0x32>
 80092c6:	682b      	ldr	r3, [r5, #0]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d0c6      	beq.n	800925a <__sflush_r+0x32>
 80092cc:	2b1d      	cmp	r3, #29
 80092ce:	d001      	beq.n	80092d4 <__sflush_r+0xac>
 80092d0:	2b16      	cmp	r3, #22
 80092d2:	d11e      	bne.n	8009312 <__sflush_r+0xea>
 80092d4:	602f      	str	r7, [r5, #0]
 80092d6:	2000      	movs	r0, #0
 80092d8:	e022      	b.n	8009320 <__sflush_r+0xf8>
 80092da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80092de:	b21b      	sxth	r3, r3
 80092e0:	e01b      	b.n	800931a <__sflush_r+0xf2>
 80092e2:	690f      	ldr	r7, [r1, #16]
 80092e4:	2f00      	cmp	r7, #0
 80092e6:	d0f6      	beq.n	80092d6 <__sflush_r+0xae>
 80092e8:	0793      	lsls	r3, r2, #30
 80092ea:	680e      	ldr	r6, [r1, #0]
 80092ec:	bf08      	it	eq
 80092ee:	694b      	ldreq	r3, [r1, #20]
 80092f0:	600f      	str	r7, [r1, #0]
 80092f2:	bf18      	it	ne
 80092f4:	2300      	movne	r3, #0
 80092f6:	eba6 0807 	sub.w	r8, r6, r7
 80092fa:	608b      	str	r3, [r1, #8]
 80092fc:	f1b8 0f00 	cmp.w	r8, #0
 8009300:	dde9      	ble.n	80092d6 <__sflush_r+0xae>
 8009302:	6a21      	ldr	r1, [r4, #32]
 8009304:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009306:	4643      	mov	r3, r8
 8009308:	463a      	mov	r2, r7
 800930a:	4628      	mov	r0, r5
 800930c:	47b0      	blx	r6
 800930e:	2800      	cmp	r0, #0
 8009310:	dc08      	bgt.n	8009324 <__sflush_r+0xfc>
 8009312:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009316:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800931a:	81a3      	strh	r3, [r4, #12]
 800931c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009324:	4407      	add	r7, r0
 8009326:	eba8 0800 	sub.w	r8, r8, r0
 800932a:	e7e7      	b.n	80092fc <__sflush_r+0xd4>
 800932c:	dfbffffe 	.word	0xdfbffffe

08009330 <_fflush_r>:
 8009330:	b538      	push	{r3, r4, r5, lr}
 8009332:	690b      	ldr	r3, [r1, #16]
 8009334:	4605      	mov	r5, r0
 8009336:	460c      	mov	r4, r1
 8009338:	b913      	cbnz	r3, 8009340 <_fflush_r+0x10>
 800933a:	2500      	movs	r5, #0
 800933c:	4628      	mov	r0, r5
 800933e:	bd38      	pop	{r3, r4, r5, pc}
 8009340:	b118      	cbz	r0, 800934a <_fflush_r+0x1a>
 8009342:	6a03      	ldr	r3, [r0, #32]
 8009344:	b90b      	cbnz	r3, 800934a <_fflush_r+0x1a>
 8009346:	f7fd f815 	bl	8006374 <__sinit>
 800934a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d0f3      	beq.n	800933a <_fflush_r+0xa>
 8009352:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009354:	07d0      	lsls	r0, r2, #31
 8009356:	d404      	bmi.n	8009362 <_fflush_r+0x32>
 8009358:	0599      	lsls	r1, r3, #22
 800935a:	d402      	bmi.n	8009362 <_fflush_r+0x32>
 800935c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800935e:	f7fd fa3e 	bl	80067de <__retarget_lock_acquire_recursive>
 8009362:	4628      	mov	r0, r5
 8009364:	4621      	mov	r1, r4
 8009366:	f7ff ff5f 	bl	8009228 <__sflush_r>
 800936a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800936c:	07da      	lsls	r2, r3, #31
 800936e:	4605      	mov	r5, r0
 8009370:	d4e4      	bmi.n	800933c <_fflush_r+0xc>
 8009372:	89a3      	ldrh	r3, [r4, #12]
 8009374:	059b      	lsls	r3, r3, #22
 8009376:	d4e1      	bmi.n	800933c <_fflush_r+0xc>
 8009378:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800937a:	f7fd fa31 	bl	80067e0 <__retarget_lock_release_recursive>
 800937e:	e7dd      	b.n	800933c <_fflush_r+0xc>

08009380 <__swhatbuf_r>:
 8009380:	b570      	push	{r4, r5, r6, lr}
 8009382:	460c      	mov	r4, r1
 8009384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009388:	2900      	cmp	r1, #0
 800938a:	b096      	sub	sp, #88	@ 0x58
 800938c:	4615      	mov	r5, r2
 800938e:	461e      	mov	r6, r3
 8009390:	da0d      	bge.n	80093ae <__swhatbuf_r+0x2e>
 8009392:	89a3      	ldrh	r3, [r4, #12]
 8009394:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009398:	f04f 0100 	mov.w	r1, #0
 800939c:	bf14      	ite	ne
 800939e:	2340      	movne	r3, #64	@ 0x40
 80093a0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80093a4:	2000      	movs	r0, #0
 80093a6:	6031      	str	r1, [r6, #0]
 80093a8:	602b      	str	r3, [r5, #0]
 80093aa:	b016      	add	sp, #88	@ 0x58
 80093ac:	bd70      	pop	{r4, r5, r6, pc}
 80093ae:	466a      	mov	r2, sp
 80093b0:	f000 f85a 	bl	8009468 <_fstat_r>
 80093b4:	2800      	cmp	r0, #0
 80093b6:	dbec      	blt.n	8009392 <__swhatbuf_r+0x12>
 80093b8:	9901      	ldr	r1, [sp, #4]
 80093ba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80093be:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80093c2:	4259      	negs	r1, r3
 80093c4:	4159      	adcs	r1, r3
 80093c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80093ca:	e7eb      	b.n	80093a4 <__swhatbuf_r+0x24>

080093cc <__smakebuf_r>:
 80093cc:	898b      	ldrh	r3, [r1, #12]
 80093ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093d0:	079d      	lsls	r5, r3, #30
 80093d2:	4606      	mov	r6, r0
 80093d4:	460c      	mov	r4, r1
 80093d6:	d507      	bpl.n	80093e8 <__smakebuf_r+0x1c>
 80093d8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80093dc:	6023      	str	r3, [r4, #0]
 80093de:	6123      	str	r3, [r4, #16]
 80093e0:	2301      	movs	r3, #1
 80093e2:	6163      	str	r3, [r4, #20]
 80093e4:	b003      	add	sp, #12
 80093e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093e8:	ab01      	add	r3, sp, #4
 80093ea:	466a      	mov	r2, sp
 80093ec:	f7ff ffc8 	bl	8009380 <__swhatbuf_r>
 80093f0:	9f00      	ldr	r7, [sp, #0]
 80093f2:	4605      	mov	r5, r0
 80093f4:	4639      	mov	r1, r7
 80093f6:	4630      	mov	r0, r6
 80093f8:	f7fe f8ba 	bl	8007570 <_malloc_r>
 80093fc:	b948      	cbnz	r0, 8009412 <__smakebuf_r+0x46>
 80093fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009402:	059a      	lsls	r2, r3, #22
 8009404:	d4ee      	bmi.n	80093e4 <__smakebuf_r+0x18>
 8009406:	f023 0303 	bic.w	r3, r3, #3
 800940a:	f043 0302 	orr.w	r3, r3, #2
 800940e:	81a3      	strh	r3, [r4, #12]
 8009410:	e7e2      	b.n	80093d8 <__smakebuf_r+0xc>
 8009412:	89a3      	ldrh	r3, [r4, #12]
 8009414:	6020      	str	r0, [r4, #0]
 8009416:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800941a:	81a3      	strh	r3, [r4, #12]
 800941c:	9b01      	ldr	r3, [sp, #4]
 800941e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009422:	b15b      	cbz	r3, 800943c <__smakebuf_r+0x70>
 8009424:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009428:	4630      	mov	r0, r6
 800942a:	f000 f82f 	bl	800948c <_isatty_r>
 800942e:	b128      	cbz	r0, 800943c <__smakebuf_r+0x70>
 8009430:	89a3      	ldrh	r3, [r4, #12]
 8009432:	f023 0303 	bic.w	r3, r3, #3
 8009436:	f043 0301 	orr.w	r3, r3, #1
 800943a:	81a3      	strh	r3, [r4, #12]
 800943c:	89a3      	ldrh	r3, [r4, #12]
 800943e:	431d      	orrs	r5, r3
 8009440:	81a5      	strh	r5, [r4, #12]
 8009442:	e7cf      	b.n	80093e4 <__smakebuf_r+0x18>

08009444 <strncmp>:
 8009444:	b510      	push	{r4, lr}
 8009446:	b16a      	cbz	r2, 8009464 <strncmp+0x20>
 8009448:	3901      	subs	r1, #1
 800944a:	1884      	adds	r4, r0, r2
 800944c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009450:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009454:	429a      	cmp	r2, r3
 8009456:	d103      	bne.n	8009460 <strncmp+0x1c>
 8009458:	42a0      	cmp	r0, r4
 800945a:	d001      	beq.n	8009460 <strncmp+0x1c>
 800945c:	2a00      	cmp	r2, #0
 800945e:	d1f5      	bne.n	800944c <strncmp+0x8>
 8009460:	1ad0      	subs	r0, r2, r3
 8009462:	bd10      	pop	{r4, pc}
 8009464:	4610      	mov	r0, r2
 8009466:	e7fc      	b.n	8009462 <strncmp+0x1e>

08009468 <_fstat_r>:
 8009468:	b538      	push	{r3, r4, r5, lr}
 800946a:	4d07      	ldr	r5, [pc, #28]	@ (8009488 <_fstat_r+0x20>)
 800946c:	2300      	movs	r3, #0
 800946e:	4604      	mov	r4, r0
 8009470:	4608      	mov	r0, r1
 8009472:	4611      	mov	r1, r2
 8009474:	602b      	str	r3, [r5, #0]
 8009476:	f7f8 f9e9 	bl	800184c <_fstat>
 800947a:	1c43      	adds	r3, r0, #1
 800947c:	d102      	bne.n	8009484 <_fstat_r+0x1c>
 800947e:	682b      	ldr	r3, [r5, #0]
 8009480:	b103      	cbz	r3, 8009484 <_fstat_r+0x1c>
 8009482:	6023      	str	r3, [r4, #0]
 8009484:	bd38      	pop	{r3, r4, r5, pc}
 8009486:	bf00      	nop
 8009488:	20000c60 	.word	0x20000c60

0800948c <_isatty_r>:
 800948c:	b538      	push	{r3, r4, r5, lr}
 800948e:	4d06      	ldr	r5, [pc, #24]	@ (80094a8 <_isatty_r+0x1c>)
 8009490:	2300      	movs	r3, #0
 8009492:	4604      	mov	r4, r0
 8009494:	4608      	mov	r0, r1
 8009496:	602b      	str	r3, [r5, #0]
 8009498:	f7f8 f9e8 	bl	800186c <_isatty>
 800949c:	1c43      	adds	r3, r0, #1
 800949e:	d102      	bne.n	80094a6 <_isatty_r+0x1a>
 80094a0:	682b      	ldr	r3, [r5, #0]
 80094a2:	b103      	cbz	r3, 80094a6 <_isatty_r+0x1a>
 80094a4:	6023      	str	r3, [r4, #0]
 80094a6:	bd38      	pop	{r3, r4, r5, pc}
 80094a8:	20000c60 	.word	0x20000c60

080094ac <_sbrk_r>:
 80094ac:	b538      	push	{r3, r4, r5, lr}
 80094ae:	4d06      	ldr	r5, [pc, #24]	@ (80094c8 <_sbrk_r+0x1c>)
 80094b0:	2300      	movs	r3, #0
 80094b2:	4604      	mov	r4, r0
 80094b4:	4608      	mov	r0, r1
 80094b6:	602b      	str	r3, [r5, #0]
 80094b8:	f7f8 f9f0 	bl	800189c <_sbrk>
 80094bc:	1c43      	adds	r3, r0, #1
 80094be:	d102      	bne.n	80094c6 <_sbrk_r+0x1a>
 80094c0:	682b      	ldr	r3, [r5, #0]
 80094c2:	b103      	cbz	r3, 80094c6 <_sbrk_r+0x1a>
 80094c4:	6023      	str	r3, [r4, #0]
 80094c6:	bd38      	pop	{r3, r4, r5, pc}
 80094c8:	20000c60 	.word	0x20000c60

080094cc <memcpy>:
 80094cc:	440a      	add	r2, r1
 80094ce:	4291      	cmp	r1, r2
 80094d0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80094d4:	d100      	bne.n	80094d8 <memcpy+0xc>
 80094d6:	4770      	bx	lr
 80094d8:	b510      	push	{r4, lr}
 80094da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80094e2:	4291      	cmp	r1, r2
 80094e4:	d1f9      	bne.n	80094da <memcpy+0xe>
 80094e6:	bd10      	pop	{r4, pc}

080094e8 <nan>:
 80094e8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80094f0 <nan+0x8>
 80094ec:	4770      	bx	lr
 80094ee:	bf00      	nop
 80094f0:	00000000 	.word	0x00000000
 80094f4:	7ff80000 	.word	0x7ff80000

080094f8 <__assert_func>:
 80094f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80094fa:	4614      	mov	r4, r2
 80094fc:	461a      	mov	r2, r3
 80094fe:	4b09      	ldr	r3, [pc, #36]	@ (8009524 <__assert_func+0x2c>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	4605      	mov	r5, r0
 8009504:	68d8      	ldr	r0, [r3, #12]
 8009506:	b954      	cbnz	r4, 800951e <__assert_func+0x26>
 8009508:	4b07      	ldr	r3, [pc, #28]	@ (8009528 <__assert_func+0x30>)
 800950a:	461c      	mov	r4, r3
 800950c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009510:	9100      	str	r1, [sp, #0]
 8009512:	462b      	mov	r3, r5
 8009514:	4905      	ldr	r1, [pc, #20]	@ (800952c <__assert_func+0x34>)
 8009516:	f000 fba7 	bl	8009c68 <fiprintf>
 800951a:	f000 fbb7 	bl	8009c8c <abort>
 800951e:	4b04      	ldr	r3, [pc, #16]	@ (8009530 <__assert_func+0x38>)
 8009520:	e7f4      	b.n	800950c <__assert_func+0x14>
 8009522:	bf00      	nop
 8009524:	20000018 	.word	0x20000018
 8009528:	0800a615 	.word	0x0800a615
 800952c:	0800a5e7 	.word	0x0800a5e7
 8009530:	0800a5da 	.word	0x0800a5da

08009534 <_calloc_r>:
 8009534:	b570      	push	{r4, r5, r6, lr}
 8009536:	fba1 5402 	umull	r5, r4, r1, r2
 800953a:	b93c      	cbnz	r4, 800954c <_calloc_r+0x18>
 800953c:	4629      	mov	r1, r5
 800953e:	f7fe f817 	bl	8007570 <_malloc_r>
 8009542:	4606      	mov	r6, r0
 8009544:	b928      	cbnz	r0, 8009552 <_calloc_r+0x1e>
 8009546:	2600      	movs	r6, #0
 8009548:	4630      	mov	r0, r6
 800954a:	bd70      	pop	{r4, r5, r6, pc}
 800954c:	220c      	movs	r2, #12
 800954e:	6002      	str	r2, [r0, #0]
 8009550:	e7f9      	b.n	8009546 <_calloc_r+0x12>
 8009552:	462a      	mov	r2, r5
 8009554:	4621      	mov	r1, r4
 8009556:	f7fd f8c5 	bl	80066e4 <memset>
 800955a:	e7f5      	b.n	8009548 <_calloc_r+0x14>

0800955c <rshift>:
 800955c:	6903      	ldr	r3, [r0, #16]
 800955e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009562:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009566:	ea4f 1261 	mov.w	r2, r1, asr #5
 800956a:	f100 0414 	add.w	r4, r0, #20
 800956e:	dd45      	ble.n	80095fc <rshift+0xa0>
 8009570:	f011 011f 	ands.w	r1, r1, #31
 8009574:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009578:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800957c:	d10c      	bne.n	8009598 <rshift+0x3c>
 800957e:	f100 0710 	add.w	r7, r0, #16
 8009582:	4629      	mov	r1, r5
 8009584:	42b1      	cmp	r1, r6
 8009586:	d334      	bcc.n	80095f2 <rshift+0x96>
 8009588:	1a9b      	subs	r3, r3, r2
 800958a:	009b      	lsls	r3, r3, #2
 800958c:	1eea      	subs	r2, r5, #3
 800958e:	4296      	cmp	r6, r2
 8009590:	bf38      	it	cc
 8009592:	2300      	movcc	r3, #0
 8009594:	4423      	add	r3, r4
 8009596:	e015      	b.n	80095c4 <rshift+0x68>
 8009598:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800959c:	f1c1 0820 	rsb	r8, r1, #32
 80095a0:	40cf      	lsrs	r7, r1
 80095a2:	f105 0e04 	add.w	lr, r5, #4
 80095a6:	46a1      	mov	r9, r4
 80095a8:	4576      	cmp	r6, lr
 80095aa:	46f4      	mov	ip, lr
 80095ac:	d815      	bhi.n	80095da <rshift+0x7e>
 80095ae:	1a9a      	subs	r2, r3, r2
 80095b0:	0092      	lsls	r2, r2, #2
 80095b2:	3a04      	subs	r2, #4
 80095b4:	3501      	adds	r5, #1
 80095b6:	42ae      	cmp	r6, r5
 80095b8:	bf38      	it	cc
 80095ba:	2200      	movcc	r2, #0
 80095bc:	18a3      	adds	r3, r4, r2
 80095be:	50a7      	str	r7, [r4, r2]
 80095c0:	b107      	cbz	r7, 80095c4 <rshift+0x68>
 80095c2:	3304      	adds	r3, #4
 80095c4:	1b1a      	subs	r2, r3, r4
 80095c6:	42a3      	cmp	r3, r4
 80095c8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80095cc:	bf08      	it	eq
 80095ce:	2300      	moveq	r3, #0
 80095d0:	6102      	str	r2, [r0, #16]
 80095d2:	bf08      	it	eq
 80095d4:	6143      	streq	r3, [r0, #20]
 80095d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80095da:	f8dc c000 	ldr.w	ip, [ip]
 80095de:	fa0c fc08 	lsl.w	ip, ip, r8
 80095e2:	ea4c 0707 	orr.w	r7, ip, r7
 80095e6:	f849 7b04 	str.w	r7, [r9], #4
 80095ea:	f85e 7b04 	ldr.w	r7, [lr], #4
 80095ee:	40cf      	lsrs	r7, r1
 80095f0:	e7da      	b.n	80095a8 <rshift+0x4c>
 80095f2:	f851 cb04 	ldr.w	ip, [r1], #4
 80095f6:	f847 cf04 	str.w	ip, [r7, #4]!
 80095fa:	e7c3      	b.n	8009584 <rshift+0x28>
 80095fc:	4623      	mov	r3, r4
 80095fe:	e7e1      	b.n	80095c4 <rshift+0x68>

08009600 <__hexdig_fun>:
 8009600:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009604:	2b09      	cmp	r3, #9
 8009606:	d802      	bhi.n	800960e <__hexdig_fun+0xe>
 8009608:	3820      	subs	r0, #32
 800960a:	b2c0      	uxtb	r0, r0
 800960c:	4770      	bx	lr
 800960e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009612:	2b05      	cmp	r3, #5
 8009614:	d801      	bhi.n	800961a <__hexdig_fun+0x1a>
 8009616:	3847      	subs	r0, #71	@ 0x47
 8009618:	e7f7      	b.n	800960a <__hexdig_fun+0xa>
 800961a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800961e:	2b05      	cmp	r3, #5
 8009620:	d801      	bhi.n	8009626 <__hexdig_fun+0x26>
 8009622:	3827      	subs	r0, #39	@ 0x27
 8009624:	e7f1      	b.n	800960a <__hexdig_fun+0xa>
 8009626:	2000      	movs	r0, #0
 8009628:	4770      	bx	lr
	...

0800962c <__gethex>:
 800962c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009630:	b085      	sub	sp, #20
 8009632:	468a      	mov	sl, r1
 8009634:	9302      	str	r3, [sp, #8]
 8009636:	680b      	ldr	r3, [r1, #0]
 8009638:	9001      	str	r0, [sp, #4]
 800963a:	4690      	mov	r8, r2
 800963c:	1c9c      	adds	r4, r3, #2
 800963e:	46a1      	mov	r9, r4
 8009640:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009644:	2830      	cmp	r0, #48	@ 0x30
 8009646:	d0fa      	beq.n	800963e <__gethex+0x12>
 8009648:	eba9 0303 	sub.w	r3, r9, r3
 800964c:	f1a3 0b02 	sub.w	fp, r3, #2
 8009650:	f7ff ffd6 	bl	8009600 <__hexdig_fun>
 8009654:	4605      	mov	r5, r0
 8009656:	2800      	cmp	r0, #0
 8009658:	d168      	bne.n	800972c <__gethex+0x100>
 800965a:	49a0      	ldr	r1, [pc, #640]	@ (80098dc <__gethex+0x2b0>)
 800965c:	2201      	movs	r2, #1
 800965e:	4648      	mov	r0, r9
 8009660:	f7ff fef0 	bl	8009444 <strncmp>
 8009664:	4607      	mov	r7, r0
 8009666:	2800      	cmp	r0, #0
 8009668:	d167      	bne.n	800973a <__gethex+0x10e>
 800966a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800966e:	4626      	mov	r6, r4
 8009670:	f7ff ffc6 	bl	8009600 <__hexdig_fun>
 8009674:	2800      	cmp	r0, #0
 8009676:	d062      	beq.n	800973e <__gethex+0x112>
 8009678:	4623      	mov	r3, r4
 800967a:	7818      	ldrb	r0, [r3, #0]
 800967c:	2830      	cmp	r0, #48	@ 0x30
 800967e:	4699      	mov	r9, r3
 8009680:	f103 0301 	add.w	r3, r3, #1
 8009684:	d0f9      	beq.n	800967a <__gethex+0x4e>
 8009686:	f7ff ffbb 	bl	8009600 <__hexdig_fun>
 800968a:	fab0 f580 	clz	r5, r0
 800968e:	096d      	lsrs	r5, r5, #5
 8009690:	f04f 0b01 	mov.w	fp, #1
 8009694:	464a      	mov	r2, r9
 8009696:	4616      	mov	r6, r2
 8009698:	3201      	adds	r2, #1
 800969a:	7830      	ldrb	r0, [r6, #0]
 800969c:	f7ff ffb0 	bl	8009600 <__hexdig_fun>
 80096a0:	2800      	cmp	r0, #0
 80096a2:	d1f8      	bne.n	8009696 <__gethex+0x6a>
 80096a4:	498d      	ldr	r1, [pc, #564]	@ (80098dc <__gethex+0x2b0>)
 80096a6:	2201      	movs	r2, #1
 80096a8:	4630      	mov	r0, r6
 80096aa:	f7ff fecb 	bl	8009444 <strncmp>
 80096ae:	2800      	cmp	r0, #0
 80096b0:	d13f      	bne.n	8009732 <__gethex+0x106>
 80096b2:	b944      	cbnz	r4, 80096c6 <__gethex+0x9a>
 80096b4:	1c74      	adds	r4, r6, #1
 80096b6:	4622      	mov	r2, r4
 80096b8:	4616      	mov	r6, r2
 80096ba:	3201      	adds	r2, #1
 80096bc:	7830      	ldrb	r0, [r6, #0]
 80096be:	f7ff ff9f 	bl	8009600 <__hexdig_fun>
 80096c2:	2800      	cmp	r0, #0
 80096c4:	d1f8      	bne.n	80096b8 <__gethex+0x8c>
 80096c6:	1ba4      	subs	r4, r4, r6
 80096c8:	00a7      	lsls	r7, r4, #2
 80096ca:	7833      	ldrb	r3, [r6, #0]
 80096cc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80096d0:	2b50      	cmp	r3, #80	@ 0x50
 80096d2:	d13e      	bne.n	8009752 <__gethex+0x126>
 80096d4:	7873      	ldrb	r3, [r6, #1]
 80096d6:	2b2b      	cmp	r3, #43	@ 0x2b
 80096d8:	d033      	beq.n	8009742 <__gethex+0x116>
 80096da:	2b2d      	cmp	r3, #45	@ 0x2d
 80096dc:	d034      	beq.n	8009748 <__gethex+0x11c>
 80096de:	1c71      	adds	r1, r6, #1
 80096e0:	2400      	movs	r4, #0
 80096e2:	7808      	ldrb	r0, [r1, #0]
 80096e4:	f7ff ff8c 	bl	8009600 <__hexdig_fun>
 80096e8:	1e43      	subs	r3, r0, #1
 80096ea:	b2db      	uxtb	r3, r3
 80096ec:	2b18      	cmp	r3, #24
 80096ee:	d830      	bhi.n	8009752 <__gethex+0x126>
 80096f0:	f1a0 0210 	sub.w	r2, r0, #16
 80096f4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80096f8:	f7ff ff82 	bl	8009600 <__hexdig_fun>
 80096fc:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8009700:	fa5f fc8c 	uxtb.w	ip, ip
 8009704:	f1bc 0f18 	cmp.w	ip, #24
 8009708:	f04f 030a 	mov.w	r3, #10
 800970c:	d91e      	bls.n	800974c <__gethex+0x120>
 800970e:	b104      	cbz	r4, 8009712 <__gethex+0xe6>
 8009710:	4252      	negs	r2, r2
 8009712:	4417      	add	r7, r2
 8009714:	f8ca 1000 	str.w	r1, [sl]
 8009718:	b1ed      	cbz	r5, 8009756 <__gethex+0x12a>
 800971a:	f1bb 0f00 	cmp.w	fp, #0
 800971e:	bf0c      	ite	eq
 8009720:	2506      	moveq	r5, #6
 8009722:	2500      	movne	r5, #0
 8009724:	4628      	mov	r0, r5
 8009726:	b005      	add	sp, #20
 8009728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800972c:	2500      	movs	r5, #0
 800972e:	462c      	mov	r4, r5
 8009730:	e7b0      	b.n	8009694 <__gethex+0x68>
 8009732:	2c00      	cmp	r4, #0
 8009734:	d1c7      	bne.n	80096c6 <__gethex+0x9a>
 8009736:	4627      	mov	r7, r4
 8009738:	e7c7      	b.n	80096ca <__gethex+0x9e>
 800973a:	464e      	mov	r6, r9
 800973c:	462f      	mov	r7, r5
 800973e:	2501      	movs	r5, #1
 8009740:	e7c3      	b.n	80096ca <__gethex+0x9e>
 8009742:	2400      	movs	r4, #0
 8009744:	1cb1      	adds	r1, r6, #2
 8009746:	e7cc      	b.n	80096e2 <__gethex+0xb6>
 8009748:	2401      	movs	r4, #1
 800974a:	e7fb      	b.n	8009744 <__gethex+0x118>
 800974c:	fb03 0002 	mla	r0, r3, r2, r0
 8009750:	e7ce      	b.n	80096f0 <__gethex+0xc4>
 8009752:	4631      	mov	r1, r6
 8009754:	e7de      	b.n	8009714 <__gethex+0xe8>
 8009756:	eba6 0309 	sub.w	r3, r6, r9
 800975a:	3b01      	subs	r3, #1
 800975c:	4629      	mov	r1, r5
 800975e:	2b07      	cmp	r3, #7
 8009760:	dc0a      	bgt.n	8009778 <__gethex+0x14c>
 8009762:	9801      	ldr	r0, [sp, #4]
 8009764:	f7fd ff90 	bl	8007688 <_Balloc>
 8009768:	4604      	mov	r4, r0
 800976a:	b940      	cbnz	r0, 800977e <__gethex+0x152>
 800976c:	4b5c      	ldr	r3, [pc, #368]	@ (80098e0 <__gethex+0x2b4>)
 800976e:	4602      	mov	r2, r0
 8009770:	21e4      	movs	r1, #228	@ 0xe4
 8009772:	485c      	ldr	r0, [pc, #368]	@ (80098e4 <__gethex+0x2b8>)
 8009774:	f7ff fec0 	bl	80094f8 <__assert_func>
 8009778:	3101      	adds	r1, #1
 800977a:	105b      	asrs	r3, r3, #1
 800977c:	e7ef      	b.n	800975e <__gethex+0x132>
 800977e:	f100 0a14 	add.w	sl, r0, #20
 8009782:	2300      	movs	r3, #0
 8009784:	4655      	mov	r5, sl
 8009786:	469b      	mov	fp, r3
 8009788:	45b1      	cmp	r9, r6
 800978a:	d337      	bcc.n	80097fc <__gethex+0x1d0>
 800978c:	f845 bb04 	str.w	fp, [r5], #4
 8009790:	eba5 050a 	sub.w	r5, r5, sl
 8009794:	10ad      	asrs	r5, r5, #2
 8009796:	6125      	str	r5, [r4, #16]
 8009798:	4658      	mov	r0, fp
 800979a:	f7fe f867 	bl	800786c <__hi0bits>
 800979e:	016d      	lsls	r5, r5, #5
 80097a0:	f8d8 6000 	ldr.w	r6, [r8]
 80097a4:	1a2d      	subs	r5, r5, r0
 80097a6:	42b5      	cmp	r5, r6
 80097a8:	dd54      	ble.n	8009854 <__gethex+0x228>
 80097aa:	1bad      	subs	r5, r5, r6
 80097ac:	4629      	mov	r1, r5
 80097ae:	4620      	mov	r0, r4
 80097b0:	f7fe fbfb 	bl	8007faa <__any_on>
 80097b4:	4681      	mov	r9, r0
 80097b6:	b178      	cbz	r0, 80097d8 <__gethex+0x1ac>
 80097b8:	1e6b      	subs	r3, r5, #1
 80097ba:	1159      	asrs	r1, r3, #5
 80097bc:	f003 021f 	and.w	r2, r3, #31
 80097c0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80097c4:	f04f 0901 	mov.w	r9, #1
 80097c8:	fa09 f202 	lsl.w	r2, r9, r2
 80097cc:	420a      	tst	r2, r1
 80097ce:	d003      	beq.n	80097d8 <__gethex+0x1ac>
 80097d0:	454b      	cmp	r3, r9
 80097d2:	dc36      	bgt.n	8009842 <__gethex+0x216>
 80097d4:	f04f 0902 	mov.w	r9, #2
 80097d8:	4629      	mov	r1, r5
 80097da:	4620      	mov	r0, r4
 80097dc:	f7ff febe 	bl	800955c <rshift>
 80097e0:	442f      	add	r7, r5
 80097e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80097e6:	42bb      	cmp	r3, r7
 80097e8:	da42      	bge.n	8009870 <__gethex+0x244>
 80097ea:	9801      	ldr	r0, [sp, #4]
 80097ec:	4621      	mov	r1, r4
 80097ee:	f7fd ff8b 	bl	8007708 <_Bfree>
 80097f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80097f4:	2300      	movs	r3, #0
 80097f6:	6013      	str	r3, [r2, #0]
 80097f8:	25a3      	movs	r5, #163	@ 0xa3
 80097fa:	e793      	b.n	8009724 <__gethex+0xf8>
 80097fc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009800:	2a2e      	cmp	r2, #46	@ 0x2e
 8009802:	d012      	beq.n	800982a <__gethex+0x1fe>
 8009804:	2b20      	cmp	r3, #32
 8009806:	d104      	bne.n	8009812 <__gethex+0x1e6>
 8009808:	f845 bb04 	str.w	fp, [r5], #4
 800980c:	f04f 0b00 	mov.w	fp, #0
 8009810:	465b      	mov	r3, fp
 8009812:	7830      	ldrb	r0, [r6, #0]
 8009814:	9303      	str	r3, [sp, #12]
 8009816:	f7ff fef3 	bl	8009600 <__hexdig_fun>
 800981a:	9b03      	ldr	r3, [sp, #12]
 800981c:	f000 000f 	and.w	r0, r0, #15
 8009820:	4098      	lsls	r0, r3
 8009822:	ea4b 0b00 	orr.w	fp, fp, r0
 8009826:	3304      	adds	r3, #4
 8009828:	e7ae      	b.n	8009788 <__gethex+0x15c>
 800982a:	45b1      	cmp	r9, r6
 800982c:	d8ea      	bhi.n	8009804 <__gethex+0x1d8>
 800982e:	492b      	ldr	r1, [pc, #172]	@ (80098dc <__gethex+0x2b0>)
 8009830:	9303      	str	r3, [sp, #12]
 8009832:	2201      	movs	r2, #1
 8009834:	4630      	mov	r0, r6
 8009836:	f7ff fe05 	bl	8009444 <strncmp>
 800983a:	9b03      	ldr	r3, [sp, #12]
 800983c:	2800      	cmp	r0, #0
 800983e:	d1e1      	bne.n	8009804 <__gethex+0x1d8>
 8009840:	e7a2      	b.n	8009788 <__gethex+0x15c>
 8009842:	1ea9      	subs	r1, r5, #2
 8009844:	4620      	mov	r0, r4
 8009846:	f7fe fbb0 	bl	8007faa <__any_on>
 800984a:	2800      	cmp	r0, #0
 800984c:	d0c2      	beq.n	80097d4 <__gethex+0x1a8>
 800984e:	f04f 0903 	mov.w	r9, #3
 8009852:	e7c1      	b.n	80097d8 <__gethex+0x1ac>
 8009854:	da09      	bge.n	800986a <__gethex+0x23e>
 8009856:	1b75      	subs	r5, r6, r5
 8009858:	4621      	mov	r1, r4
 800985a:	9801      	ldr	r0, [sp, #4]
 800985c:	462a      	mov	r2, r5
 800985e:	f7fe f96b 	bl	8007b38 <__lshift>
 8009862:	1b7f      	subs	r7, r7, r5
 8009864:	4604      	mov	r4, r0
 8009866:	f100 0a14 	add.w	sl, r0, #20
 800986a:	f04f 0900 	mov.w	r9, #0
 800986e:	e7b8      	b.n	80097e2 <__gethex+0x1b6>
 8009870:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009874:	42bd      	cmp	r5, r7
 8009876:	dd6f      	ble.n	8009958 <__gethex+0x32c>
 8009878:	1bed      	subs	r5, r5, r7
 800987a:	42ae      	cmp	r6, r5
 800987c:	dc34      	bgt.n	80098e8 <__gethex+0x2bc>
 800987e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009882:	2b02      	cmp	r3, #2
 8009884:	d022      	beq.n	80098cc <__gethex+0x2a0>
 8009886:	2b03      	cmp	r3, #3
 8009888:	d024      	beq.n	80098d4 <__gethex+0x2a8>
 800988a:	2b01      	cmp	r3, #1
 800988c:	d115      	bne.n	80098ba <__gethex+0x28e>
 800988e:	42ae      	cmp	r6, r5
 8009890:	d113      	bne.n	80098ba <__gethex+0x28e>
 8009892:	2e01      	cmp	r6, #1
 8009894:	d10b      	bne.n	80098ae <__gethex+0x282>
 8009896:	9a02      	ldr	r2, [sp, #8]
 8009898:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800989c:	6013      	str	r3, [r2, #0]
 800989e:	2301      	movs	r3, #1
 80098a0:	6123      	str	r3, [r4, #16]
 80098a2:	f8ca 3000 	str.w	r3, [sl]
 80098a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80098a8:	2562      	movs	r5, #98	@ 0x62
 80098aa:	601c      	str	r4, [r3, #0]
 80098ac:	e73a      	b.n	8009724 <__gethex+0xf8>
 80098ae:	1e71      	subs	r1, r6, #1
 80098b0:	4620      	mov	r0, r4
 80098b2:	f7fe fb7a 	bl	8007faa <__any_on>
 80098b6:	2800      	cmp	r0, #0
 80098b8:	d1ed      	bne.n	8009896 <__gethex+0x26a>
 80098ba:	9801      	ldr	r0, [sp, #4]
 80098bc:	4621      	mov	r1, r4
 80098be:	f7fd ff23 	bl	8007708 <_Bfree>
 80098c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80098c4:	2300      	movs	r3, #0
 80098c6:	6013      	str	r3, [r2, #0]
 80098c8:	2550      	movs	r5, #80	@ 0x50
 80098ca:	e72b      	b.n	8009724 <__gethex+0xf8>
 80098cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d1f3      	bne.n	80098ba <__gethex+0x28e>
 80098d2:	e7e0      	b.n	8009896 <__gethex+0x26a>
 80098d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d1dd      	bne.n	8009896 <__gethex+0x26a>
 80098da:	e7ee      	b.n	80098ba <__gethex+0x28e>
 80098dc:	0800a468 	.word	0x0800a468
 80098e0:	0800a2fd 	.word	0x0800a2fd
 80098e4:	0800a616 	.word	0x0800a616
 80098e8:	1e6f      	subs	r7, r5, #1
 80098ea:	f1b9 0f00 	cmp.w	r9, #0
 80098ee:	d130      	bne.n	8009952 <__gethex+0x326>
 80098f0:	b127      	cbz	r7, 80098fc <__gethex+0x2d0>
 80098f2:	4639      	mov	r1, r7
 80098f4:	4620      	mov	r0, r4
 80098f6:	f7fe fb58 	bl	8007faa <__any_on>
 80098fa:	4681      	mov	r9, r0
 80098fc:	117a      	asrs	r2, r7, #5
 80098fe:	2301      	movs	r3, #1
 8009900:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009904:	f007 071f 	and.w	r7, r7, #31
 8009908:	40bb      	lsls	r3, r7
 800990a:	4213      	tst	r3, r2
 800990c:	4629      	mov	r1, r5
 800990e:	4620      	mov	r0, r4
 8009910:	bf18      	it	ne
 8009912:	f049 0902 	orrne.w	r9, r9, #2
 8009916:	f7ff fe21 	bl	800955c <rshift>
 800991a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800991e:	1b76      	subs	r6, r6, r5
 8009920:	2502      	movs	r5, #2
 8009922:	f1b9 0f00 	cmp.w	r9, #0
 8009926:	d047      	beq.n	80099b8 <__gethex+0x38c>
 8009928:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800992c:	2b02      	cmp	r3, #2
 800992e:	d015      	beq.n	800995c <__gethex+0x330>
 8009930:	2b03      	cmp	r3, #3
 8009932:	d017      	beq.n	8009964 <__gethex+0x338>
 8009934:	2b01      	cmp	r3, #1
 8009936:	d109      	bne.n	800994c <__gethex+0x320>
 8009938:	f019 0f02 	tst.w	r9, #2
 800993c:	d006      	beq.n	800994c <__gethex+0x320>
 800993e:	f8da 3000 	ldr.w	r3, [sl]
 8009942:	ea49 0903 	orr.w	r9, r9, r3
 8009946:	f019 0f01 	tst.w	r9, #1
 800994a:	d10e      	bne.n	800996a <__gethex+0x33e>
 800994c:	f045 0510 	orr.w	r5, r5, #16
 8009950:	e032      	b.n	80099b8 <__gethex+0x38c>
 8009952:	f04f 0901 	mov.w	r9, #1
 8009956:	e7d1      	b.n	80098fc <__gethex+0x2d0>
 8009958:	2501      	movs	r5, #1
 800995a:	e7e2      	b.n	8009922 <__gethex+0x2f6>
 800995c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800995e:	f1c3 0301 	rsb	r3, r3, #1
 8009962:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009964:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009966:	2b00      	cmp	r3, #0
 8009968:	d0f0      	beq.n	800994c <__gethex+0x320>
 800996a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800996e:	f104 0314 	add.w	r3, r4, #20
 8009972:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009976:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800997a:	f04f 0c00 	mov.w	ip, #0
 800997e:	4618      	mov	r0, r3
 8009980:	f853 2b04 	ldr.w	r2, [r3], #4
 8009984:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8009988:	d01b      	beq.n	80099c2 <__gethex+0x396>
 800998a:	3201      	adds	r2, #1
 800998c:	6002      	str	r2, [r0, #0]
 800998e:	2d02      	cmp	r5, #2
 8009990:	f104 0314 	add.w	r3, r4, #20
 8009994:	d13c      	bne.n	8009a10 <__gethex+0x3e4>
 8009996:	f8d8 2000 	ldr.w	r2, [r8]
 800999a:	3a01      	subs	r2, #1
 800999c:	42b2      	cmp	r2, r6
 800999e:	d109      	bne.n	80099b4 <__gethex+0x388>
 80099a0:	1171      	asrs	r1, r6, #5
 80099a2:	2201      	movs	r2, #1
 80099a4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80099a8:	f006 061f 	and.w	r6, r6, #31
 80099ac:	fa02 f606 	lsl.w	r6, r2, r6
 80099b0:	421e      	tst	r6, r3
 80099b2:	d13a      	bne.n	8009a2a <__gethex+0x3fe>
 80099b4:	f045 0520 	orr.w	r5, r5, #32
 80099b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80099ba:	601c      	str	r4, [r3, #0]
 80099bc:	9b02      	ldr	r3, [sp, #8]
 80099be:	601f      	str	r7, [r3, #0]
 80099c0:	e6b0      	b.n	8009724 <__gethex+0xf8>
 80099c2:	4299      	cmp	r1, r3
 80099c4:	f843 cc04 	str.w	ip, [r3, #-4]
 80099c8:	d8d9      	bhi.n	800997e <__gethex+0x352>
 80099ca:	68a3      	ldr	r3, [r4, #8]
 80099cc:	459b      	cmp	fp, r3
 80099ce:	db17      	blt.n	8009a00 <__gethex+0x3d4>
 80099d0:	6861      	ldr	r1, [r4, #4]
 80099d2:	9801      	ldr	r0, [sp, #4]
 80099d4:	3101      	adds	r1, #1
 80099d6:	f7fd fe57 	bl	8007688 <_Balloc>
 80099da:	4681      	mov	r9, r0
 80099dc:	b918      	cbnz	r0, 80099e6 <__gethex+0x3ba>
 80099de:	4b1a      	ldr	r3, [pc, #104]	@ (8009a48 <__gethex+0x41c>)
 80099e0:	4602      	mov	r2, r0
 80099e2:	2184      	movs	r1, #132	@ 0x84
 80099e4:	e6c5      	b.n	8009772 <__gethex+0x146>
 80099e6:	6922      	ldr	r2, [r4, #16]
 80099e8:	3202      	adds	r2, #2
 80099ea:	f104 010c 	add.w	r1, r4, #12
 80099ee:	0092      	lsls	r2, r2, #2
 80099f0:	300c      	adds	r0, #12
 80099f2:	f7ff fd6b 	bl	80094cc <memcpy>
 80099f6:	4621      	mov	r1, r4
 80099f8:	9801      	ldr	r0, [sp, #4]
 80099fa:	f7fd fe85 	bl	8007708 <_Bfree>
 80099fe:	464c      	mov	r4, r9
 8009a00:	6923      	ldr	r3, [r4, #16]
 8009a02:	1c5a      	adds	r2, r3, #1
 8009a04:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009a08:	6122      	str	r2, [r4, #16]
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	615a      	str	r2, [r3, #20]
 8009a0e:	e7be      	b.n	800998e <__gethex+0x362>
 8009a10:	6922      	ldr	r2, [r4, #16]
 8009a12:	455a      	cmp	r2, fp
 8009a14:	dd0b      	ble.n	8009a2e <__gethex+0x402>
 8009a16:	2101      	movs	r1, #1
 8009a18:	4620      	mov	r0, r4
 8009a1a:	f7ff fd9f 	bl	800955c <rshift>
 8009a1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009a22:	3701      	adds	r7, #1
 8009a24:	42bb      	cmp	r3, r7
 8009a26:	f6ff aee0 	blt.w	80097ea <__gethex+0x1be>
 8009a2a:	2501      	movs	r5, #1
 8009a2c:	e7c2      	b.n	80099b4 <__gethex+0x388>
 8009a2e:	f016 061f 	ands.w	r6, r6, #31
 8009a32:	d0fa      	beq.n	8009a2a <__gethex+0x3fe>
 8009a34:	4453      	add	r3, sl
 8009a36:	f1c6 0620 	rsb	r6, r6, #32
 8009a3a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009a3e:	f7fd ff15 	bl	800786c <__hi0bits>
 8009a42:	42b0      	cmp	r0, r6
 8009a44:	dbe7      	blt.n	8009a16 <__gethex+0x3ea>
 8009a46:	e7f0      	b.n	8009a2a <__gethex+0x3fe>
 8009a48:	0800a2fd 	.word	0x0800a2fd

08009a4c <L_shift>:
 8009a4c:	f1c2 0208 	rsb	r2, r2, #8
 8009a50:	0092      	lsls	r2, r2, #2
 8009a52:	b570      	push	{r4, r5, r6, lr}
 8009a54:	f1c2 0620 	rsb	r6, r2, #32
 8009a58:	6843      	ldr	r3, [r0, #4]
 8009a5a:	6804      	ldr	r4, [r0, #0]
 8009a5c:	fa03 f506 	lsl.w	r5, r3, r6
 8009a60:	432c      	orrs	r4, r5
 8009a62:	40d3      	lsrs	r3, r2
 8009a64:	6004      	str	r4, [r0, #0]
 8009a66:	f840 3f04 	str.w	r3, [r0, #4]!
 8009a6a:	4288      	cmp	r0, r1
 8009a6c:	d3f4      	bcc.n	8009a58 <L_shift+0xc>
 8009a6e:	bd70      	pop	{r4, r5, r6, pc}

08009a70 <__match>:
 8009a70:	b530      	push	{r4, r5, lr}
 8009a72:	6803      	ldr	r3, [r0, #0]
 8009a74:	3301      	adds	r3, #1
 8009a76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a7a:	b914      	cbnz	r4, 8009a82 <__match+0x12>
 8009a7c:	6003      	str	r3, [r0, #0]
 8009a7e:	2001      	movs	r0, #1
 8009a80:	bd30      	pop	{r4, r5, pc}
 8009a82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a86:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009a8a:	2d19      	cmp	r5, #25
 8009a8c:	bf98      	it	ls
 8009a8e:	3220      	addls	r2, #32
 8009a90:	42a2      	cmp	r2, r4
 8009a92:	d0f0      	beq.n	8009a76 <__match+0x6>
 8009a94:	2000      	movs	r0, #0
 8009a96:	e7f3      	b.n	8009a80 <__match+0x10>

08009a98 <__hexnan>:
 8009a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a9c:	680b      	ldr	r3, [r1, #0]
 8009a9e:	6801      	ldr	r1, [r0, #0]
 8009aa0:	115e      	asrs	r6, r3, #5
 8009aa2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009aa6:	f013 031f 	ands.w	r3, r3, #31
 8009aaa:	b087      	sub	sp, #28
 8009aac:	bf18      	it	ne
 8009aae:	3604      	addne	r6, #4
 8009ab0:	2500      	movs	r5, #0
 8009ab2:	1f37      	subs	r7, r6, #4
 8009ab4:	4682      	mov	sl, r0
 8009ab6:	4690      	mov	r8, r2
 8009ab8:	9301      	str	r3, [sp, #4]
 8009aba:	f846 5c04 	str.w	r5, [r6, #-4]
 8009abe:	46b9      	mov	r9, r7
 8009ac0:	463c      	mov	r4, r7
 8009ac2:	9502      	str	r5, [sp, #8]
 8009ac4:	46ab      	mov	fp, r5
 8009ac6:	784a      	ldrb	r2, [r1, #1]
 8009ac8:	1c4b      	adds	r3, r1, #1
 8009aca:	9303      	str	r3, [sp, #12]
 8009acc:	b342      	cbz	r2, 8009b20 <__hexnan+0x88>
 8009ace:	4610      	mov	r0, r2
 8009ad0:	9105      	str	r1, [sp, #20]
 8009ad2:	9204      	str	r2, [sp, #16]
 8009ad4:	f7ff fd94 	bl	8009600 <__hexdig_fun>
 8009ad8:	2800      	cmp	r0, #0
 8009ada:	d151      	bne.n	8009b80 <__hexnan+0xe8>
 8009adc:	9a04      	ldr	r2, [sp, #16]
 8009ade:	9905      	ldr	r1, [sp, #20]
 8009ae0:	2a20      	cmp	r2, #32
 8009ae2:	d818      	bhi.n	8009b16 <__hexnan+0x7e>
 8009ae4:	9b02      	ldr	r3, [sp, #8]
 8009ae6:	459b      	cmp	fp, r3
 8009ae8:	dd13      	ble.n	8009b12 <__hexnan+0x7a>
 8009aea:	454c      	cmp	r4, r9
 8009aec:	d206      	bcs.n	8009afc <__hexnan+0x64>
 8009aee:	2d07      	cmp	r5, #7
 8009af0:	dc04      	bgt.n	8009afc <__hexnan+0x64>
 8009af2:	462a      	mov	r2, r5
 8009af4:	4649      	mov	r1, r9
 8009af6:	4620      	mov	r0, r4
 8009af8:	f7ff ffa8 	bl	8009a4c <L_shift>
 8009afc:	4544      	cmp	r4, r8
 8009afe:	d952      	bls.n	8009ba6 <__hexnan+0x10e>
 8009b00:	2300      	movs	r3, #0
 8009b02:	f1a4 0904 	sub.w	r9, r4, #4
 8009b06:	f844 3c04 	str.w	r3, [r4, #-4]
 8009b0a:	f8cd b008 	str.w	fp, [sp, #8]
 8009b0e:	464c      	mov	r4, r9
 8009b10:	461d      	mov	r5, r3
 8009b12:	9903      	ldr	r1, [sp, #12]
 8009b14:	e7d7      	b.n	8009ac6 <__hexnan+0x2e>
 8009b16:	2a29      	cmp	r2, #41	@ 0x29
 8009b18:	d157      	bne.n	8009bca <__hexnan+0x132>
 8009b1a:	3102      	adds	r1, #2
 8009b1c:	f8ca 1000 	str.w	r1, [sl]
 8009b20:	f1bb 0f00 	cmp.w	fp, #0
 8009b24:	d051      	beq.n	8009bca <__hexnan+0x132>
 8009b26:	454c      	cmp	r4, r9
 8009b28:	d206      	bcs.n	8009b38 <__hexnan+0xa0>
 8009b2a:	2d07      	cmp	r5, #7
 8009b2c:	dc04      	bgt.n	8009b38 <__hexnan+0xa0>
 8009b2e:	462a      	mov	r2, r5
 8009b30:	4649      	mov	r1, r9
 8009b32:	4620      	mov	r0, r4
 8009b34:	f7ff ff8a 	bl	8009a4c <L_shift>
 8009b38:	4544      	cmp	r4, r8
 8009b3a:	d936      	bls.n	8009baa <__hexnan+0x112>
 8009b3c:	f1a8 0204 	sub.w	r2, r8, #4
 8009b40:	4623      	mov	r3, r4
 8009b42:	f853 1b04 	ldr.w	r1, [r3], #4
 8009b46:	f842 1f04 	str.w	r1, [r2, #4]!
 8009b4a:	429f      	cmp	r7, r3
 8009b4c:	d2f9      	bcs.n	8009b42 <__hexnan+0xaa>
 8009b4e:	1b3b      	subs	r3, r7, r4
 8009b50:	f023 0303 	bic.w	r3, r3, #3
 8009b54:	3304      	adds	r3, #4
 8009b56:	3401      	adds	r4, #1
 8009b58:	3e03      	subs	r6, #3
 8009b5a:	42b4      	cmp	r4, r6
 8009b5c:	bf88      	it	hi
 8009b5e:	2304      	movhi	r3, #4
 8009b60:	4443      	add	r3, r8
 8009b62:	2200      	movs	r2, #0
 8009b64:	f843 2b04 	str.w	r2, [r3], #4
 8009b68:	429f      	cmp	r7, r3
 8009b6a:	d2fb      	bcs.n	8009b64 <__hexnan+0xcc>
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	b91b      	cbnz	r3, 8009b78 <__hexnan+0xe0>
 8009b70:	4547      	cmp	r7, r8
 8009b72:	d128      	bne.n	8009bc6 <__hexnan+0x12e>
 8009b74:	2301      	movs	r3, #1
 8009b76:	603b      	str	r3, [r7, #0]
 8009b78:	2005      	movs	r0, #5
 8009b7a:	b007      	add	sp, #28
 8009b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b80:	3501      	adds	r5, #1
 8009b82:	2d08      	cmp	r5, #8
 8009b84:	f10b 0b01 	add.w	fp, fp, #1
 8009b88:	dd06      	ble.n	8009b98 <__hexnan+0x100>
 8009b8a:	4544      	cmp	r4, r8
 8009b8c:	d9c1      	bls.n	8009b12 <__hexnan+0x7a>
 8009b8e:	2300      	movs	r3, #0
 8009b90:	f844 3c04 	str.w	r3, [r4, #-4]
 8009b94:	2501      	movs	r5, #1
 8009b96:	3c04      	subs	r4, #4
 8009b98:	6822      	ldr	r2, [r4, #0]
 8009b9a:	f000 000f 	and.w	r0, r0, #15
 8009b9e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009ba2:	6020      	str	r0, [r4, #0]
 8009ba4:	e7b5      	b.n	8009b12 <__hexnan+0x7a>
 8009ba6:	2508      	movs	r5, #8
 8009ba8:	e7b3      	b.n	8009b12 <__hexnan+0x7a>
 8009baa:	9b01      	ldr	r3, [sp, #4]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d0dd      	beq.n	8009b6c <__hexnan+0xd4>
 8009bb0:	f1c3 0320 	rsb	r3, r3, #32
 8009bb4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009bb8:	40da      	lsrs	r2, r3
 8009bba:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009bbe:	4013      	ands	r3, r2
 8009bc0:	f846 3c04 	str.w	r3, [r6, #-4]
 8009bc4:	e7d2      	b.n	8009b6c <__hexnan+0xd4>
 8009bc6:	3f04      	subs	r7, #4
 8009bc8:	e7d0      	b.n	8009b6c <__hexnan+0xd4>
 8009bca:	2004      	movs	r0, #4
 8009bcc:	e7d5      	b.n	8009b7a <__hexnan+0xe2>

08009bce <__ascii_mbtowc>:
 8009bce:	b082      	sub	sp, #8
 8009bd0:	b901      	cbnz	r1, 8009bd4 <__ascii_mbtowc+0x6>
 8009bd2:	a901      	add	r1, sp, #4
 8009bd4:	b142      	cbz	r2, 8009be8 <__ascii_mbtowc+0x1a>
 8009bd6:	b14b      	cbz	r3, 8009bec <__ascii_mbtowc+0x1e>
 8009bd8:	7813      	ldrb	r3, [r2, #0]
 8009bda:	600b      	str	r3, [r1, #0]
 8009bdc:	7812      	ldrb	r2, [r2, #0]
 8009bde:	1e10      	subs	r0, r2, #0
 8009be0:	bf18      	it	ne
 8009be2:	2001      	movne	r0, #1
 8009be4:	b002      	add	sp, #8
 8009be6:	4770      	bx	lr
 8009be8:	4610      	mov	r0, r2
 8009bea:	e7fb      	b.n	8009be4 <__ascii_mbtowc+0x16>
 8009bec:	f06f 0001 	mvn.w	r0, #1
 8009bf0:	e7f8      	b.n	8009be4 <__ascii_mbtowc+0x16>

08009bf2 <_realloc_r>:
 8009bf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bf6:	4680      	mov	r8, r0
 8009bf8:	4615      	mov	r5, r2
 8009bfa:	460c      	mov	r4, r1
 8009bfc:	b921      	cbnz	r1, 8009c08 <_realloc_r+0x16>
 8009bfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c02:	4611      	mov	r1, r2
 8009c04:	f7fd bcb4 	b.w	8007570 <_malloc_r>
 8009c08:	b92a      	cbnz	r2, 8009c16 <_realloc_r+0x24>
 8009c0a:	f7fd fc3d 	bl	8007488 <_free_r>
 8009c0e:	2400      	movs	r4, #0
 8009c10:	4620      	mov	r0, r4
 8009c12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c16:	f000 f840 	bl	8009c9a <_malloc_usable_size_r>
 8009c1a:	4285      	cmp	r5, r0
 8009c1c:	4606      	mov	r6, r0
 8009c1e:	d802      	bhi.n	8009c26 <_realloc_r+0x34>
 8009c20:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009c24:	d8f4      	bhi.n	8009c10 <_realloc_r+0x1e>
 8009c26:	4629      	mov	r1, r5
 8009c28:	4640      	mov	r0, r8
 8009c2a:	f7fd fca1 	bl	8007570 <_malloc_r>
 8009c2e:	4607      	mov	r7, r0
 8009c30:	2800      	cmp	r0, #0
 8009c32:	d0ec      	beq.n	8009c0e <_realloc_r+0x1c>
 8009c34:	42b5      	cmp	r5, r6
 8009c36:	462a      	mov	r2, r5
 8009c38:	4621      	mov	r1, r4
 8009c3a:	bf28      	it	cs
 8009c3c:	4632      	movcs	r2, r6
 8009c3e:	f7ff fc45 	bl	80094cc <memcpy>
 8009c42:	4621      	mov	r1, r4
 8009c44:	4640      	mov	r0, r8
 8009c46:	f7fd fc1f 	bl	8007488 <_free_r>
 8009c4a:	463c      	mov	r4, r7
 8009c4c:	e7e0      	b.n	8009c10 <_realloc_r+0x1e>

08009c4e <__ascii_wctomb>:
 8009c4e:	4603      	mov	r3, r0
 8009c50:	4608      	mov	r0, r1
 8009c52:	b141      	cbz	r1, 8009c66 <__ascii_wctomb+0x18>
 8009c54:	2aff      	cmp	r2, #255	@ 0xff
 8009c56:	d904      	bls.n	8009c62 <__ascii_wctomb+0x14>
 8009c58:	228a      	movs	r2, #138	@ 0x8a
 8009c5a:	601a      	str	r2, [r3, #0]
 8009c5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009c60:	4770      	bx	lr
 8009c62:	700a      	strb	r2, [r1, #0]
 8009c64:	2001      	movs	r0, #1
 8009c66:	4770      	bx	lr

08009c68 <fiprintf>:
 8009c68:	b40e      	push	{r1, r2, r3}
 8009c6a:	b503      	push	{r0, r1, lr}
 8009c6c:	4601      	mov	r1, r0
 8009c6e:	ab03      	add	r3, sp, #12
 8009c70:	4805      	ldr	r0, [pc, #20]	@ (8009c88 <fiprintf+0x20>)
 8009c72:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c76:	6800      	ldr	r0, [r0, #0]
 8009c78:	9301      	str	r3, [sp, #4]
 8009c7a:	f7ff f9bd 	bl	8008ff8 <_vfiprintf_r>
 8009c7e:	b002      	add	sp, #8
 8009c80:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c84:	b003      	add	sp, #12
 8009c86:	4770      	bx	lr
 8009c88:	20000018 	.word	0x20000018

08009c8c <abort>:
 8009c8c:	b508      	push	{r3, lr}
 8009c8e:	2006      	movs	r0, #6
 8009c90:	f000 f834 	bl	8009cfc <raise>
 8009c94:	2001      	movs	r0, #1
 8009c96:	f7f7 fd89 	bl	80017ac <_exit>

08009c9a <_malloc_usable_size_r>:
 8009c9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c9e:	1f18      	subs	r0, r3, #4
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	bfbc      	itt	lt
 8009ca4:	580b      	ldrlt	r3, [r1, r0]
 8009ca6:	18c0      	addlt	r0, r0, r3
 8009ca8:	4770      	bx	lr

08009caa <_raise_r>:
 8009caa:	291f      	cmp	r1, #31
 8009cac:	b538      	push	{r3, r4, r5, lr}
 8009cae:	4605      	mov	r5, r0
 8009cb0:	460c      	mov	r4, r1
 8009cb2:	d904      	bls.n	8009cbe <_raise_r+0x14>
 8009cb4:	2316      	movs	r3, #22
 8009cb6:	6003      	str	r3, [r0, #0]
 8009cb8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009cbc:	bd38      	pop	{r3, r4, r5, pc}
 8009cbe:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009cc0:	b112      	cbz	r2, 8009cc8 <_raise_r+0x1e>
 8009cc2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009cc6:	b94b      	cbnz	r3, 8009cdc <_raise_r+0x32>
 8009cc8:	4628      	mov	r0, r5
 8009cca:	f000 f831 	bl	8009d30 <_getpid_r>
 8009cce:	4622      	mov	r2, r4
 8009cd0:	4601      	mov	r1, r0
 8009cd2:	4628      	mov	r0, r5
 8009cd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009cd8:	f000 b818 	b.w	8009d0c <_kill_r>
 8009cdc:	2b01      	cmp	r3, #1
 8009cde:	d00a      	beq.n	8009cf6 <_raise_r+0x4c>
 8009ce0:	1c59      	adds	r1, r3, #1
 8009ce2:	d103      	bne.n	8009cec <_raise_r+0x42>
 8009ce4:	2316      	movs	r3, #22
 8009ce6:	6003      	str	r3, [r0, #0]
 8009ce8:	2001      	movs	r0, #1
 8009cea:	e7e7      	b.n	8009cbc <_raise_r+0x12>
 8009cec:	2100      	movs	r1, #0
 8009cee:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009cf2:	4620      	mov	r0, r4
 8009cf4:	4798      	blx	r3
 8009cf6:	2000      	movs	r0, #0
 8009cf8:	e7e0      	b.n	8009cbc <_raise_r+0x12>
	...

08009cfc <raise>:
 8009cfc:	4b02      	ldr	r3, [pc, #8]	@ (8009d08 <raise+0xc>)
 8009cfe:	4601      	mov	r1, r0
 8009d00:	6818      	ldr	r0, [r3, #0]
 8009d02:	f7ff bfd2 	b.w	8009caa <_raise_r>
 8009d06:	bf00      	nop
 8009d08:	20000018 	.word	0x20000018

08009d0c <_kill_r>:
 8009d0c:	b538      	push	{r3, r4, r5, lr}
 8009d0e:	4d07      	ldr	r5, [pc, #28]	@ (8009d2c <_kill_r+0x20>)
 8009d10:	2300      	movs	r3, #0
 8009d12:	4604      	mov	r4, r0
 8009d14:	4608      	mov	r0, r1
 8009d16:	4611      	mov	r1, r2
 8009d18:	602b      	str	r3, [r5, #0]
 8009d1a:	f7f7 fd37 	bl	800178c <_kill>
 8009d1e:	1c43      	adds	r3, r0, #1
 8009d20:	d102      	bne.n	8009d28 <_kill_r+0x1c>
 8009d22:	682b      	ldr	r3, [r5, #0]
 8009d24:	b103      	cbz	r3, 8009d28 <_kill_r+0x1c>
 8009d26:	6023      	str	r3, [r4, #0]
 8009d28:	bd38      	pop	{r3, r4, r5, pc}
 8009d2a:	bf00      	nop
 8009d2c:	20000c60 	.word	0x20000c60

08009d30 <_getpid_r>:
 8009d30:	f7f7 bd24 	b.w	800177c <_getpid>

08009d34 <atan2f>:
 8009d34:	f000 b800 	b.w	8009d38 <__ieee754_atan2f>

08009d38 <__ieee754_atan2f>:
 8009d38:	ee10 2a90 	vmov	r2, s1
 8009d3c:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8009d40:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8009d44:	b510      	push	{r4, lr}
 8009d46:	eef0 7a40 	vmov.f32	s15, s0
 8009d4a:	d806      	bhi.n	8009d5a <__ieee754_atan2f+0x22>
 8009d4c:	ee10 0a10 	vmov	r0, s0
 8009d50:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8009d54:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8009d58:	d904      	bls.n	8009d64 <__ieee754_atan2f+0x2c>
 8009d5a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8009d5e:	eeb0 0a67 	vmov.f32	s0, s15
 8009d62:	bd10      	pop	{r4, pc}
 8009d64:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8009d68:	d103      	bne.n	8009d72 <__ieee754_atan2f+0x3a>
 8009d6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d6e:	f000 b883 	b.w	8009e78 <atanf>
 8009d72:	1794      	asrs	r4, r2, #30
 8009d74:	f004 0402 	and.w	r4, r4, #2
 8009d78:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8009d7c:	b943      	cbnz	r3, 8009d90 <__ieee754_atan2f+0x58>
 8009d7e:	2c02      	cmp	r4, #2
 8009d80:	d05e      	beq.n	8009e40 <__ieee754_atan2f+0x108>
 8009d82:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8009e54 <__ieee754_atan2f+0x11c>
 8009d86:	2c03      	cmp	r4, #3
 8009d88:	bf08      	it	eq
 8009d8a:	eef0 7a47 	vmoveq.f32	s15, s14
 8009d8e:	e7e6      	b.n	8009d5e <__ieee754_atan2f+0x26>
 8009d90:	b941      	cbnz	r1, 8009da4 <__ieee754_atan2f+0x6c>
 8009d92:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8009e58 <__ieee754_atan2f+0x120>
 8009d96:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8009e5c <__ieee754_atan2f+0x124>
 8009d9a:	2800      	cmp	r0, #0
 8009d9c:	bfb8      	it	lt
 8009d9e:	eef0 7a47 	vmovlt.f32	s15, s14
 8009da2:	e7dc      	b.n	8009d5e <__ieee754_atan2f+0x26>
 8009da4:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8009da8:	d110      	bne.n	8009dcc <__ieee754_atan2f+0x94>
 8009daa:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8009dae:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 8009db2:	d107      	bne.n	8009dc4 <__ieee754_atan2f+0x8c>
 8009db4:	2c02      	cmp	r4, #2
 8009db6:	d846      	bhi.n	8009e46 <__ieee754_atan2f+0x10e>
 8009db8:	4b29      	ldr	r3, [pc, #164]	@ (8009e60 <__ieee754_atan2f+0x128>)
 8009dba:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009dbe:	edd3 7a00 	vldr	s15, [r3]
 8009dc2:	e7cc      	b.n	8009d5e <__ieee754_atan2f+0x26>
 8009dc4:	2c02      	cmp	r4, #2
 8009dc6:	d841      	bhi.n	8009e4c <__ieee754_atan2f+0x114>
 8009dc8:	4b26      	ldr	r3, [pc, #152]	@ (8009e64 <__ieee754_atan2f+0x12c>)
 8009dca:	e7f6      	b.n	8009dba <__ieee754_atan2f+0x82>
 8009dcc:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8009dd0:	d0df      	beq.n	8009d92 <__ieee754_atan2f+0x5a>
 8009dd2:	1a5b      	subs	r3, r3, r1
 8009dd4:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8009dd8:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8009ddc:	da1a      	bge.n	8009e14 <__ieee754_atan2f+0xdc>
 8009dde:	2a00      	cmp	r2, #0
 8009de0:	da01      	bge.n	8009de6 <__ieee754_atan2f+0xae>
 8009de2:	313c      	adds	r1, #60	@ 0x3c
 8009de4:	db19      	blt.n	8009e1a <__ieee754_atan2f+0xe2>
 8009de6:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8009dea:	f000 f919 	bl	800a020 <fabsf>
 8009dee:	f000 f843 	bl	8009e78 <atanf>
 8009df2:	eef0 7a40 	vmov.f32	s15, s0
 8009df6:	2c01      	cmp	r4, #1
 8009df8:	d012      	beq.n	8009e20 <__ieee754_atan2f+0xe8>
 8009dfa:	2c02      	cmp	r4, #2
 8009dfc:	d017      	beq.n	8009e2e <__ieee754_atan2f+0xf6>
 8009dfe:	2c00      	cmp	r4, #0
 8009e00:	d0ad      	beq.n	8009d5e <__ieee754_atan2f+0x26>
 8009e02:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8009e68 <__ieee754_atan2f+0x130>
 8009e06:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009e0a:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8009e6c <__ieee754_atan2f+0x134>
 8009e0e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009e12:	e7a4      	b.n	8009d5e <__ieee754_atan2f+0x26>
 8009e14:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8009e58 <__ieee754_atan2f+0x120>
 8009e18:	e7ed      	b.n	8009df6 <__ieee754_atan2f+0xbe>
 8009e1a:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8009e70 <__ieee754_atan2f+0x138>
 8009e1e:	e7ea      	b.n	8009df6 <__ieee754_atan2f+0xbe>
 8009e20:	ee17 3a90 	vmov	r3, s15
 8009e24:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8009e28:	ee07 3a90 	vmov	s15, r3
 8009e2c:	e797      	b.n	8009d5e <__ieee754_atan2f+0x26>
 8009e2e:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8009e68 <__ieee754_atan2f+0x130>
 8009e32:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009e36:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8009e6c <__ieee754_atan2f+0x134>
 8009e3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009e3e:	e78e      	b.n	8009d5e <__ieee754_atan2f+0x26>
 8009e40:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8009e6c <__ieee754_atan2f+0x134>
 8009e44:	e78b      	b.n	8009d5e <__ieee754_atan2f+0x26>
 8009e46:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8009e74 <__ieee754_atan2f+0x13c>
 8009e4a:	e788      	b.n	8009d5e <__ieee754_atan2f+0x26>
 8009e4c:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8009e70 <__ieee754_atan2f+0x138>
 8009e50:	e785      	b.n	8009d5e <__ieee754_atan2f+0x26>
 8009e52:	bf00      	nop
 8009e54:	c0490fdb 	.word	0xc0490fdb
 8009e58:	3fc90fdb 	.word	0x3fc90fdb
 8009e5c:	bfc90fdb 	.word	0xbfc90fdb
 8009e60:	0800a684 	.word	0x0800a684
 8009e64:	0800a678 	.word	0x0800a678
 8009e68:	33bbbd2e 	.word	0x33bbbd2e
 8009e6c:	40490fdb 	.word	0x40490fdb
 8009e70:	00000000 	.word	0x00000000
 8009e74:	3f490fdb 	.word	0x3f490fdb

08009e78 <atanf>:
 8009e78:	b538      	push	{r3, r4, r5, lr}
 8009e7a:	ee10 5a10 	vmov	r5, s0
 8009e7e:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8009e82:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8009e86:	eef0 7a40 	vmov.f32	s15, s0
 8009e8a:	d310      	bcc.n	8009eae <atanf+0x36>
 8009e8c:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8009e90:	d904      	bls.n	8009e9c <atanf+0x24>
 8009e92:	ee70 7a00 	vadd.f32	s15, s0, s0
 8009e96:	eeb0 0a67 	vmov.f32	s0, s15
 8009e9a:	bd38      	pop	{r3, r4, r5, pc}
 8009e9c:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8009fd4 <atanf+0x15c>
 8009ea0:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8009fd8 <atanf+0x160>
 8009ea4:	2d00      	cmp	r5, #0
 8009ea6:	bfc8      	it	gt
 8009ea8:	eef0 7a47 	vmovgt.f32	s15, s14
 8009eac:	e7f3      	b.n	8009e96 <atanf+0x1e>
 8009eae:	4b4b      	ldr	r3, [pc, #300]	@ (8009fdc <atanf+0x164>)
 8009eb0:	429c      	cmp	r4, r3
 8009eb2:	d810      	bhi.n	8009ed6 <atanf+0x5e>
 8009eb4:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8009eb8:	d20a      	bcs.n	8009ed0 <atanf+0x58>
 8009eba:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8009fe0 <atanf+0x168>
 8009ebe:	ee30 7a07 	vadd.f32	s14, s0, s14
 8009ec2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009ec6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8009eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ece:	dce2      	bgt.n	8009e96 <atanf+0x1e>
 8009ed0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009ed4:	e013      	b.n	8009efe <atanf+0x86>
 8009ed6:	f000 f8a3 	bl	800a020 <fabsf>
 8009eda:	4b42      	ldr	r3, [pc, #264]	@ (8009fe4 <atanf+0x16c>)
 8009edc:	429c      	cmp	r4, r3
 8009ede:	d84f      	bhi.n	8009f80 <atanf+0x108>
 8009ee0:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8009ee4:	429c      	cmp	r4, r3
 8009ee6:	d841      	bhi.n	8009f6c <atanf+0xf4>
 8009ee8:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8009eec:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8009ef0:	eea0 7a27 	vfma.f32	s14, s0, s15
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009efa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009efe:	1c5a      	adds	r2, r3, #1
 8009f00:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8009f04:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8009fe8 <atanf+0x170>
 8009f08:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8009fec <atanf+0x174>
 8009f0c:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8009ff0 <atanf+0x178>
 8009f10:	ee66 6a06 	vmul.f32	s13, s12, s12
 8009f14:	eee6 5a87 	vfma.f32	s11, s13, s14
 8009f18:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8009ff4 <atanf+0x17c>
 8009f1c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8009f20:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8009ff8 <atanf+0x180>
 8009f24:	eee7 5a26 	vfma.f32	s11, s14, s13
 8009f28:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8009ffc <atanf+0x184>
 8009f2c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8009f30:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800a000 <atanf+0x188>
 8009f34:	eee7 5a26 	vfma.f32	s11, s14, s13
 8009f38:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800a004 <atanf+0x18c>
 8009f3c:	eea6 5a87 	vfma.f32	s10, s13, s14
 8009f40:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800a008 <atanf+0x190>
 8009f44:	eea5 7a26 	vfma.f32	s14, s10, s13
 8009f48:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800a00c <atanf+0x194>
 8009f4c:	eea7 5a26 	vfma.f32	s10, s14, s13
 8009f50:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800a010 <atanf+0x198>
 8009f54:	eea5 7a26 	vfma.f32	s14, s10, s13
 8009f58:	ee27 7a26 	vmul.f32	s14, s14, s13
 8009f5c:	eea5 7a86 	vfma.f32	s14, s11, s12
 8009f60:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009f64:	d121      	bne.n	8009faa <atanf+0x132>
 8009f66:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009f6a:	e794      	b.n	8009e96 <atanf+0x1e>
 8009f6c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8009f70:	ee30 7a67 	vsub.f32	s14, s0, s15
 8009f74:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009f78:	2301      	movs	r3, #1
 8009f7a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009f7e:	e7be      	b.n	8009efe <atanf+0x86>
 8009f80:	4b24      	ldr	r3, [pc, #144]	@ (800a014 <atanf+0x19c>)
 8009f82:	429c      	cmp	r4, r3
 8009f84:	d80b      	bhi.n	8009f9e <atanf+0x126>
 8009f86:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8009f8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009f8e:	eea0 7a27 	vfma.f32	s14, s0, s15
 8009f92:	2302      	movs	r3, #2
 8009f94:	ee70 6a67 	vsub.f32	s13, s0, s15
 8009f98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f9c:	e7af      	b.n	8009efe <atanf+0x86>
 8009f9e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8009fa2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009fa6:	2303      	movs	r3, #3
 8009fa8:	e7a9      	b.n	8009efe <atanf+0x86>
 8009faa:	4a1b      	ldr	r2, [pc, #108]	@ (800a018 <atanf+0x1a0>)
 8009fac:	491b      	ldr	r1, [pc, #108]	@ (800a01c <atanf+0x1a4>)
 8009fae:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8009fb2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8009fb6:	edd3 6a00 	vldr	s13, [r3]
 8009fba:	ee37 7a66 	vsub.f32	s14, s14, s13
 8009fbe:	2d00      	cmp	r5, #0
 8009fc0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009fc4:	edd2 7a00 	vldr	s15, [r2]
 8009fc8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009fcc:	bfb8      	it	lt
 8009fce:	eef1 7a67 	vneglt.f32	s15, s15
 8009fd2:	e760      	b.n	8009e96 <atanf+0x1e>
 8009fd4:	bfc90fdb 	.word	0xbfc90fdb
 8009fd8:	3fc90fdb 	.word	0x3fc90fdb
 8009fdc:	3edfffff 	.word	0x3edfffff
 8009fe0:	7149f2ca 	.word	0x7149f2ca
 8009fe4:	3f97ffff 	.word	0x3f97ffff
 8009fe8:	3c8569d7 	.word	0x3c8569d7
 8009fec:	3d4bda59 	.word	0x3d4bda59
 8009ff0:	bd6ef16b 	.word	0xbd6ef16b
 8009ff4:	3d886b35 	.word	0x3d886b35
 8009ff8:	3dba2e6e 	.word	0x3dba2e6e
 8009ffc:	3e124925 	.word	0x3e124925
 800a000:	3eaaaaab 	.word	0x3eaaaaab
 800a004:	bd15a221 	.word	0xbd15a221
 800a008:	bd9d8795 	.word	0xbd9d8795
 800a00c:	bde38e38 	.word	0xbde38e38
 800a010:	be4ccccd 	.word	0xbe4ccccd
 800a014:	401bffff 	.word	0x401bffff
 800a018:	0800a6a0 	.word	0x0800a6a0
 800a01c:	0800a690 	.word	0x0800a690

0800a020 <fabsf>:
 800a020:	ee10 3a10 	vmov	r3, s0
 800a024:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a028:	ee00 3a10 	vmov	s0, r3
 800a02c:	4770      	bx	lr
	...

0800a030 <_init>:
 800a030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a032:	bf00      	nop
 800a034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a036:	bc08      	pop	{r3}
 800a038:	469e      	mov	lr, r3
 800a03a:	4770      	bx	lr

0800a03c <_fini>:
 800a03c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a03e:	bf00      	nop
 800a040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a042:	bc08      	pop	{r3}
 800a044:	469e      	mov	lr, r3
 800a046:	4770      	bx	lr
